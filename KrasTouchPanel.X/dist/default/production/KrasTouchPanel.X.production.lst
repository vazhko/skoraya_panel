

Microchip Technology PIC18 PRO Macro Assembler V1.33 build 59893 
                                                                                               Wed Jul 27 12:24:49 2016

Microchip Technology Omniscient Code Generator (PRO mode) build 59893
     1                           	processor	18F46K22
     2                           	fnconf	param0,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    50                           	psect	param0,global,class=BANK0,space=1,delta=1
    51                           	psect	pa_nodes,global,class=CODE,delta=1
    52  0000                     tblptrh	equ	0xFF7
    53                           tblptrl	equ	0xFF6
    54                           tablat	equ	0xFF5
    55                           prodh	equ	0xFF4
    56                           prodl	equ	0xFF3
    57                           intcon	equ	0xFF2
    58                           postinc1	equ	0xFE6
    59                           postdec1	equ	0xFE5
    60                           fsr1h	equ	0xFE2
    61                           fsr1l	equ	0xFE1
    62                           indf2	equ	0xFDF
    63                           postinc2	equ	0xFDE
    64                           postdec2	equ	0xFDD
    65                           fsr2h	equ	0xFDA
    66                           fsr2l	equ	0xFD9
    67                           status	equ	0xFD8
    68                           
    69                           	psect	eeprom_data
    70  F00000  01 00 01 00 02 00 16 06 	db	1,0,1,0,2,0,22,6	;# 
    71  F00008  25 0B 16 0F 16 06 25 0A 	db	37,11,22,15,22,6,37,10	;# 
    72  F00010  14 00 00 00 00 00 00 00 	db	20,0,0,0,0,0,0,0	;# 
    73  F00018  80 3F 00 00 00 00 00 00 	db	128,63,0,0,0,0,0,0	;# 
    74  F00020  80 3F 00 00 00 00 00 00 	db	128,63,0,0,0,0,0,0	;# 
    75  F00028  80 3F 16 06 25 00 00 00 	db	128,63,22,6,37,0,0,0	;# 
    76  F00030  00 00 00 00 00 00 80 3F 	db	0,0,0,0,0,0,128,63	;# 
    77  F00038  08 07 B8 0B 00 00 40 06 	db	8,7,184,11,0,0,64,6	;# 
    78  F00040  F0 0A 00 00 66 66 26 3F 	db	240,10,0,0,102,102,38,63	;# 
    79  F00048  1B 2F 5D 3D 33 33 F3 3F 	db	27,47,93,61,51,51,243,63	;# 
    80  F00050  66 66 26 3F 42 60 65 3C 	db	102,102,38,63,66,96,101,60	;# 
    81  F00058  00 00 80 40 00 80 BB 45 	db	0,0,128,64,0,128,187,69	;# 
    82  F00060  00 00 00 41 00 00 00 42 	db	0,0,0,65,0,0,0,66	;# 
    83  F00068  F0 0A 02 A4 70 7D 3F A4 	db	240,10,2,164,112,125,63,164	;# 
    84  F00070  70 7D 3F 00 00 00 00 00 	db	112,125,63,0,0,0,0,0	;# 
    85  F00078  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
    86  F00080  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
    87  F00088  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
    88  F00090  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
    89  F00098  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
    90  F000A0  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
    91  F000A8  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
    92  F000B0  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
    93  F000B8  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
    94  F000C0  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
    95  F000C8  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
    96  F000D0  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
    97  F000D8  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
    98  F000E0  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
    99  F000E8  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
   100  F000F0  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
   101  F000F8  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
   102  0000                     tblptrh	equ	0xFF7
   103                           tblptrl	equ	0xFF6
   104                           tablat	equ	0xFF5
   105                           prodh	equ	0xFF4
   106                           prodl	equ	0xFF3
   107                           intcon	equ	0xFF2
   108                           postinc1	equ	0xFE6
   109                           postdec1	equ	0xFE5
   110                           fsr1h	equ	0xFE2
   111                           fsr1l	equ	0xFE1
   112                           indf2	equ	0xFDF
   113                           postinc2	equ	0xFDE
   114                           postdec2	equ	0xFDD
   115                           fsr2h	equ	0xFDA
   116                           fsr2l	equ	0xFD9
   117                           status	equ	0xFD8
   118                           
   119                           	psect	mediumconst
   120  00FEFE                     __pmediumconst:
   121                           	opt stack 0
   122  00FEFE  00                 	db	0
   123  00FEFF                     _eedata:
   124                           	opt stack 0
   125  00FEFF  01                 	db	1
   126  00FF00  00                 	db	0
   127  00FF01  01                 	db	1
   128  00FF02  00                 	db	0
   129  00FF03  02                 	db	2
   130  00FF04  00                 	db	0
   131  00FF05  16                 	db	22
   132  00FF06  06                 	db	6
   133  00FF07  25                 	db	37
   134  00FF08  0B                 	db	11
   135  00FF09  16                 	db	22
   136  00FF0A  0F                 	db	15
   137  00FF0B  16                 	db	22
   138  00FF0C  06                 	db	6
   139  00FF0D  25                 	db	37
   140  00FF0E  0A                 	db	10
   141  00FF0F  14                 	db	20
   142  00FF10  00                 	db	0
   143  00FF11  00                 	db	0
   144  00FF12  00                 	db	0
   145  00FF13  00                 	db	0
   146  00FF14  00                 	db	0
   147  00FF15  00                 	db	0
   148  00FF16  00                 	db	0
   149  00FF17  80                 	db	128
   150  00FF18  3F                 	db	63
   151  00FF19  00                 	db	0
   152  00FF1A  00                 	db	0
   153  00FF1B  00                 	db	0
   154  00FF1C  00                 	db	0
   155  00FF1D  00                 	db	0
   156  00FF1E  00                 	db	0
   157  00FF1F  80                 	db	128
   158  00FF20  3F                 	db	63
   159  00FF21  00                 	db	0
   160  00FF22  00                 	db	0
   161  00FF23  00                 	db	0
   162  00FF24  00                 	db	0
   163  00FF25  00                 	db	0
   164  00FF26  00                 	db	0
   165  00FF27  80                 	db	128
   166  00FF28  3F                 	db	63
   167  00FF29  16                 	db	22
   168  00FF2A  06                 	db	6
   169  00FF2B  25                 	db	37
   170  00FF2C  00                 	db	0
   171  00FF2D  00                 	db	0
   172  00FF2E  00                 	db	0
   173  00FF2F  00                 	db	0
   174  00FF30  00                 	db	0
   175  00FF31  00                 	db	0
   176  00FF32  00                 	db	0
   177  00FF33  00                 	db	0
   178  00FF34  00                 	db	0
   179  00FF35  80                 	db	128
   180  00FF36  3F                 	db	63
   181  00FF37  08                 	db	8
   182  00FF38  07                 	db	7
   183  00FF39  B8                 	db	184
   184  00FF3A  0B                 	db	11
   185  00FF3B  00                 	db	0
   186  00FF3C  00                 	db	0
   187  00FF3D  40                 	db	64
   188  00FF3E  06                 	db	6
   189  00FF3F  F0                 	db	240
   190  00FF40  0A                 	db	10
   191  00FF41  00                 	db	0
   192  00FF42  00                 	db	0
   193  00FF43  66                 	db	102
   194  00FF44  66                 	db	102
   195  00FF45  26                 	db	38
   196  00FF46  3F                 	db	63
   197  00FF47  1B                 	db	27
   198  00FF48  2F                 	db	47
   199  00FF49  5D                 	db	93
   200  00FF4A  3D                 	db	61
   201  00FF4B  33                 	db	51
   202  00FF4C  33                 	db	51
   203  00FF4D  F3                 	db	243
   204  00FF4E  3F                 	db	63
   205  00FF4F  66                 	db	102
   206  00FF50  66                 	db	102
   207  00FF51  26                 	db	38
   208  00FF52  3F                 	db	63
   209  00FF53  42                 	db	66
   210  00FF54  60                 	db	96
   211  00FF55  65                 	db	101
   212  00FF56  3C                 	db	60
   213  00FF57  00                 	db	0
   214  00FF58  00                 	db	0
   215  00FF59  80                 	db	128
   216  00FF5A  40                 	db	64
   217  00FF5B  00                 	db	0
   218  00FF5C  80                 	db	128
   219  00FF5D  BB                 	db	187
   220  00FF5E  45                 	db	69
   221  00FF5F  00                 	db	0
   222  00FF60  00                 	db	0
   223  00FF61  00                 	db	0
   224  00FF62  41                 	db	65
   225  00FF63  00                 	db	0
   226  00FF64  00                 	db	0
   227  00FF65  00                 	db	0
   228  00FF66  42                 	db	66
   229  00FF67  F0                 	db	240
   230  00FF68  0A                 	db	10
   231  00FF69  02                 	db	2
   232  00FF6A  A4                 	db	164
   233  00FF6B  70                 	db	112
   234  00FF6C  7D                 	db	125
   235  00FF6D  3F                 	db	63
   236  00FF6E  A4                 	db	164
   237  00FF6F  70                 	db	112
   238  00FF70  7D                 	db	125
   239  00FF71  3F                 	db	63
   240  00FF72  00                 	db	0
   241  00FF73  00                 	db	0
   242  00FF74  00                 	db	0
   243  00FF75  00                 	db	0
   244  00FF76  00                 	db	0
   245  00FF77  00                 	db	0
   246  00FF78  00                 	db	0
   247  00FF79  00                 	db	0
   248  00FF7A  00                 	db	0
   249  00FF7B  00                 	db	0
   250  00FF7C  00                 	db	0
   251  00FF7D  00                 	db	0
   252  00FF7E  00                 	db	0
   253  00FF7F  00                 	db	0
   254  00FF80  00                 	db	0
   255  00FF81  00                 	db	0
   256  00FF82  00                 	db	0
   257  00FF83  00                 	db	0
   258  00FF84  00                 	db	0
   259  00FF85  00                 	db	0
   260  00FF86  00                 	db	0
   261  00FF87  00                 	db	0
   262  00FF88  00                 	db	0
   263  00FF89  00                 	db	0
   264  00FF8A  00                 	db	0
   265  00FF8B  00                 	db	0
   266  00FF8C  00                 	db	0
   267  00FF8D  00                 	db	0
   268  00FF8E  00                 	db	0
   269  00FF8F  00                 	db	0
   270  00FF90  00                 	db	0
   271  00FF91  00                 	db	0
   272  00FF92  00                 	db	0
   273  00FF93  00                 	db	0
   274  00FF94  00                 	db	0
   275  00FF95  00                 	db	0
   276  00FF96  00                 	db	0
   277  00FF97  00                 	db	0
   278  00FF98  00                 	db	0
   279  00FF99  00                 	db	0
   280  00FF9A  00                 	db	0
   281  00FF9B  00                 	db	0
   282  00FF9C  00                 	db	0
   283  00FF9D  00                 	db	0
   284  00FF9E  00                 	db	0
   285  00FF9F  00                 	db	0
   286  00FFA0  00                 	db	0
   287  00FFA1  00                 	db	0
   288  00FFA2  00                 	db	0
   289  00FFA3  00                 	db	0
   290  00FFA4  00                 	db	0
   291  00FFA5  00                 	db	0
   292  00FFA6  00                 	db	0
   293  00FFA7  00                 	db	0
   294  00FFA8  00                 	db	0
   295  00FFA9  00                 	db	0
   296  00FFAA  00                 	db	0
   297  00FFAB  00                 	db	0
   298  00FFAC  00                 	db	0
   299  00FFAD  00                 	db	0
   300  00FFAE  00                 	db	0
   301  00FFAF  00                 	db	0
   302  00FFB0  00                 	db	0
   303  00FFB1  00                 	db	0
   304  00FFB2  00                 	db	0
   305  00FFB3  00                 	db	0
   306  00FFB4  00                 	db	0
   307  00FFB5  00                 	db	0
   308  00FFB6  00                 	db	0
   309  00FFB7  00                 	db	0
   310  00FFB8  00                 	db	0
   311  00FFB9  00                 	db	0
   312  00FFBA  00                 	db	0
   313  00FFBB  00                 	db	0
   314  00FFBC  00                 	db	0
   315  00FFBD  00                 	db	0
   316  00FFBE  00                 	db	0
   317  00FFBF  00                 	db	0
   318  00FFC0  00                 	db	0
   319  00FFC1  00                 	db	0
   320  00FFC2  00                 	db	0
   321  00FFC3  00                 	db	0
   322  00FFC4  00                 	db	0
   323  00FFC5  00                 	db	0
   324  00FFC6  00                 	db	0
   325  00FFC7  00                 	db	0
   326  00FFC8  00                 	db	0
   327  00FFC9  00                 	db	0
   328  00FFCA  00                 	db	0
   329  00FFCB  00                 	db	0
   330  00FFCC  00                 	db	0
   331  00FFCD  00                 	db	0
   332  00FFCE  00                 	db	0
   333  00FFCF  00                 	db	0
   334  00FFD0  00                 	db	0
   335  00FFD1  00                 	db	0
   336  00FFD2  00                 	db	0
   337  00FFD3  00                 	db	0
   338  00FFD4  00                 	db	0
   339  00FFD5  00                 	db	0
   340  00FFD6  00                 	db	0
   341  00FFD7  00                 	db	0
   342  00FFD8  00                 	db	0
   343  00FFD9  00                 	db	0
   344  00FFDA  00                 	db	0
   345  00FFDB  00                 	db	0
   346  00FFDC  00                 	db	0
   347  00FFDD  00                 	db	0
   348  00FFDE  00                 	db	0
   349  00FFDF  00                 	db	0
   350  00FFE0  00                 	db	0
   351  00FFE1  00                 	db	0
   352  00FFE2  00                 	db	0
   353  00FFE3  00                 	db	0
   354  00FFE4  00                 	db	0
   355  00FFE5  00                 	db	0
   356  00FFE6  00                 	db	0
   357  00FFE7  00                 	db	0
   358  00FFE8  00                 	db	0
   359  00FFE9  00                 	db	0
   360  00FFEA  00                 	db	0
   361  00FFEB  00                 	db	0
   362  00FFEC  00                 	db	0
   363  00FFED  00                 	db	0
   364  00FFEE  00                 	db	0
   365  00FFEF  00                 	db	0
   366  00FFF0  00                 	db	0
   367  00FFF1  00                 	db	0
   368  00FFF2  00                 	db	0
   369  00FFF3  00                 	db	0
   370  00FFF4  00                 	db	0
   371  00FFF5  00                 	db	0
   372  00FFF6  00                 	db	0
   373  00FFF7  00                 	db	0
   374  00FFF8  00                 	db	0
   375  00FFF9  00                 	db	0
   376  00FFFA  00                 	db	0
   377  00FFFB  00                 	db	0
   378  00FFFC  00                 	db	0
   379  00FFFD  00                 	db	0
   380  00FFFE  00                 	db	0
   381  00FFFF                     __end_of_eedata:
   382                           	opt stack 0
   383  0000                     _ADCON0	set	4034
   384  0000                     _ADCON0bits	set	4034
   385  0000                     _ADCON1	set	4033
   386  0000                     _ADCON2	set	4032
   387  0000                     _ADCON2bits	set	4032
   388  0000                     _ADRESH	set	4036
   389  0000                     _ADRESL	set	4035
   390  0000                     _ANSELA	set	3896
   391  0000                     _ANSELB	set	3897
   392  0000                     _ANSELC	set	3898
   393  0000                     _ANSELD	set	3899
   394  0000                     _ANSELE	set	3900
   395  0000                     _CCP4CONbits	set	3927
   396  0000                     _CCPR1L	set	4030
   397  0000                     _CCPR2L	set	3943
   398  0000                     _CCPR4L	set	3928
   399  0000                     _EEADR	set	4009
   400  0000                     _EEADRH	set	4010
   401  0000                     _EECON1bits	set	4006
   402  0000                     _EECON2	set	4007
   403  0000                     _EEDATA	set	4008
   404  0000                     _INTCONbits	set	4082
   405  0000                     _IPR1bits	set	3999
   406  0000                     _IPR5bits	set	3967
   407  0000                     _LATAbits	set	3977
   408  0000                     _LATB	set	3978
   409  0000                     _OSCCON	set	4051
   410  0000                     _OSCTUNEbits	set	3995
   411  0000                     _PIE1bits	set	3997
   412  0000                     _PIE5bits	set	3965
   413  0000                     _PIR1bits	set	3998
   414  0000                     _PIR5bits	set	3966
   415  0000                     _PORTB	set	3969
   416  0000                     _PR2	set	4027
   417  0000                     _PR4	set	3922
   418  0000                     _RCONbits	set	4048
   419  0000                     _RCREG	set	4014
   420  0000                     _SPBRG	set	4015
   421  0000                     _SSPCON1	set	4038
   422  0000                     _SSPSTAT	set	4039
   423  0000                     _T2CONbits	set	4026
   424  0000                     _T4CONbits	set	3921
   425  0000                     _TMR2	set	4028
   426  0000                     _TMR4	set	3923
   427  0000                     _TRISAbits	set	3986
   428  0000                     _TRISB	set	3987
   429  0000                     _TRISCbits	set	3988
   430  0000                     _TXREG	set	4013
   431  0000                     _BRG161	set	32195
   432  0000                     _BRGH1	set	32098
   433  0000                     _CREN1	set	32092
   434  0000                     _DC1B0	set	32236
   435  0000                     _DC1B1	set	32237
   436  0000                     _DC2B0	set	31540
   437  0000                     _DC2B1	set	31541
   438  0000                     _FERR1	set	32090
   439  0000                     _GIE	set	32663
   440  0000                     _OERR1	set	32089
   441  0000                     _RCIE	set	31981
   442  0000                     _RCIF	set	31989
   443  0000                     _RCIP	set	31997
   444  0000                     _RX91	set	32094
   445  0000                     _SPEN1	set	32095
   446  0000                     _SREN1	set	32093
   447  0000                     _SWDTEN	set	32392
   448  0000                     _SYNC1	set	32100
   449  0000                     _TRMT1	set	32097
   450  0000                     _TX91	set	32102
   451  0000                     _TXEN1	set	32101
   452  0000                     _TXIE	set	31980
   453  0000                     _LATA	set	3977
   454  0000                     _LATE	set	3981
   455  0000                     _TRISA	set	3986
   456  0000                     _TRISE	set	3990
   457                           
   458                           ; #config settings
   459  00FFFF  00                 	db	0	; dummy byte at the end
   460  0000                     tblptrh	equ	0xFF7
   461                           tblptrl	equ	0xFF6
   462                           tablat	equ	0xFF5
   463                           prodh	equ	0xFF4
   464                           prodl	equ	0xFF3
   465                           intcon	equ	0xFF2
   466                           postinc1	equ	0xFE6
   467                           postdec1	equ	0xFE5
   468                           fsr1h	equ	0xFE2
   469                           fsr1l	equ	0xFE1
   470                           indf2	equ	0xFDF
   471                           postinc2	equ	0xFDE
   472                           postdec2	equ	0xFDD
   473                           fsr2h	equ	0xFDA
   474                           fsr2l	equ	0xFD9
   475                           status	equ	0xFD8
   476                           
   477                           	psect	cinit
   478  000F98                     __pcinit:
   479                           	opt stack 0
   480  000F98                     start_initialization:
   481                           	opt stack 0
   482  000F98                     __initialization:
   483                           	opt stack 0
   484                           
   485                           ; Clear objects allocated to BANK3 (256 bytes)
   486  000F98  EE03  F000         	lfsr	0,__pbssBANK3
   487  000F9C  EE11 F000          	lfsr	1,256
   488  000FA0                     clear_0:
   489  000FA0  6AEE               	clrf	postinc0,c
   490  000FA2  50E5               	movf	postdec1,w,c
   491  000FA4  50E1               	movf	fsr1l,w,c
   492  000FA6  E1FC               	bnz	clear_0
   493  000FA8  50E2               	movf	fsr1h,w,c
   494  000FAA  E1FA               	bnz	clear_0
   495                           
   496                           ; Clear objects allocated to BANK2 (192 bytes)
   497  000FAC  EE02  F000         	lfsr	0,__pbssBANK2
   498  000FB0  0EC0               	movlw	192
   499  000FB2                     clear_1:
   500  000FB2  6AEE               	clrf	postinc0,c
   501  000FB4  06E8               	decf	wreg,f,c
   502  000FB6  E1FD               	bnz	clear_1
   503                           
   504                           ; Clear objects allocated to BANK1 (128 bytes)
   505  000FB8  EE01  F000         	lfsr	0,__pbssBANK1
   506  000FBC  0E80               	movlw	128
   507  000FBE                     clear_2:
   508  000FBE  6AEE               	clrf	postinc0,c
   509  000FC0  06E8               	decf	wreg,f,c
   510  000FC2  E1FD               	bnz	clear_2
   511                           
   512                           ; Clear objects allocated to BANK0 (103 bytes)
   513  000FC4  EE00  F060         	lfsr	0,__pbssBANK0
   514  000FC8  0E67               	movlw	103
   515  000FCA                     clear_3:
   516  000FCA  6AEE               	clrf	postinc0,c
   517  000FCC  06E8               	decf	wreg,f,c
   518  000FCE  E1FD               	bnz	clear_3
   519                           
   520                           ; Clear objects allocated to COMRAM (28 bytes)
   521  000FD0  EE00  F024         	lfsr	0,__pbssCOMRAM
   522  000FD4  0E1C               	movlw	28
   523  000FD6                     clear_4:
   524  000FD6  6AEE               	clrf	postinc0,c
   525  000FD8  06E8               	decf	wreg,f,c
   526  000FDA  E1FD               	bnz	clear_4
   527  000FDC                     end_of_initialization:
   528                           	opt stack 0
   529  000FDC                     __end_of__initialization:
   530                           	opt stack 0
   531  000FDC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   532  000FDE  6EF8               	movwf	tblptru,c
   533  000FE0  0100               	movlb	0
   534  000FE2  EF37  F008         	goto	_main	;jump to C main() function
   535                           tblptru	equ	0xFF8
   536                           tblptrh	equ	0xFF7
   537                           tblptrl	equ	0xFF6
   538                           tablat	equ	0xFF5
   539                           prodh	equ	0xFF4
   540                           prodl	equ	0xFF3
   541                           intcon	equ	0xFF2
   542                           postinc0	equ	0xFEE
   543                           wreg	equ	0xFE8
   544                           postinc1	equ	0xFE6
   545                           postdec1	equ	0xFE5
   546                           fsr1h	equ	0xFE2
   547                           fsr1l	equ	0xFE1
   548                           indf2	equ	0xFDF
   549                           postinc2	equ	0xFDE
   550                           postdec2	equ	0xFDD
   551                           fsr2h	equ	0xFDA
   552                           fsr2l	equ	0xFD9
   553                           status	equ	0xFD8
   554                           
   555                           	psect	bssCOMRAM
   556  000024                     __pbssCOMRAM:
   557                           	opt stack 0
   558  000024                     _e:
   559                           	opt stack 0
   560  000024                     	ds	4
   561  000028                     _f:
   562                           	opt stack 0
   563  000028                     	ds	4
   564  00002C                     _k:
   565                           	opt stack 0
   566  00002C                     	ds	4
   567  000030                     _l:
   568                           	opt stack 0
   569  000030                     	ds	4
   570  000034                     _c:
   571                           	opt stack 0
   572  000034                     	ds	2
   573  000036                     _d:
   574                           	opt stack 0
   575  000036                     	ds	2
   576  000038                     _j_rx:
   577                           	opt stack 0
   578  000038                     	ds	2
   579  00003A                     _a:
   580                           	opt stack 0
   581  00003A                     	ds	1
   582  00003B                     _b:
   583                           	opt stack 0
   584  00003B                     	ds	1
   585  00003C                     _beep_count:
   586                           	opt stack 0
   587  00003C                     	ds	1
   588  00003D                     _curr_task:
   589                           	opt stack 0
   590  00003D                     	ds	1
   591  00003E                     _dummy:
   592                           	opt stack 0
   593  00003E                     	ds	1
   594  00003F                     _timeout_error:
   595                           	opt stack 0
   596  00003F                     	ds	1
   597                           tblptru	equ	0xFF8
   598                           tblptrh	equ	0xFF7
   599                           tblptrl	equ	0xFF6
   600                           tablat	equ	0xFF5
   601                           prodh	equ	0xFF4
   602                           prodl	equ	0xFF3
   603                           intcon	equ	0xFF2
   604                           postinc0	equ	0xFEE
   605                           wreg	equ	0xFE8
   606                           postinc1	equ	0xFE6
   607                           postdec1	equ	0xFE5
   608                           fsr1h	equ	0xFE2
   609                           fsr1l	equ	0xFE1
   610                           indf2	equ	0xFDF
   611                           postinc2	equ	0xFDE
   612                           postdec2	equ	0xFDD
   613                           fsr2h	equ	0xFDA
   614                           fsr2l	equ	0xFD9
   615                           status	equ	0xFD8
   616                           
   617                           	psect	bssBANK0
   618  000060                     __pbssBANK0:
   619                           	opt stack 0
   620  000060                     _Messages:
   621                           	opt stack 0
   622  000060                     	ds	10
   623  00006A                     _BSem:
   624                           	opt stack 0
   625  00006A                     	ds	4
   626  00006E                     __sys_tick:
   627                           	opt stack 0
   628  00006E                     	ds	2
   629  000070                     _beep_timer:
   630                           	opt stack 0
   631  000070                     	ds	2
   632  000072                     _sys_tick:
   633                           	opt stack 0
   634  000072                     	ds	2
   635  000074                     HI_ISR@beep:
   636                           	opt stack 0
   637  000074                     	ds	1
   638  000075                     MTouchAcquisition@startSensorNumber:
   639                           	opt stack 0
   640  000075                     	ds	1
   641  000076                     _BroadcastMessages:
   642                           	opt stack 0
   643  000076                     	ds	1
   644  000077                     _buttons:
   645                           	opt stack 0
   646  000077                     	ds	80
   647                           tblptru	equ	0xFF8
   648                           tblptrh	equ	0xFF7
   649                           tblptrl	equ	0xFF6
   650                           tablat	equ	0xFF5
   651                           prodh	equ	0xFF4
   652                           prodl	equ	0xFF3
   653                           intcon	equ	0xFF2
   654                           postinc0	equ	0xFEE
   655                           wreg	equ	0xFE8
   656                           postinc1	equ	0xFE6
   657                           postdec1	equ	0xFE5
   658                           fsr1h	equ	0xFE2
   659                           fsr1l	equ	0xFE1
   660                           indf2	equ	0xFDF
   661                           postinc2	equ	0xFDE
   662                           postdec2	equ	0xFDD
   663                           fsr2h	equ	0xFDA
   664                           fsr2l	equ	0xFD9
   665                           status	equ	0xFD8
   666                           
   667                           	psect	bssBANK1
   668  000100                     __pbssBANK1:
   669                           	opt stack 0
   670  000100                     _RxTxBuff:
   671                           	opt stack 0
   672  000100                     	ds	128
   673                           tblptru	equ	0xFF8
   674                           tblptrh	equ	0xFF7
   675                           tblptrl	equ	0xFF6
   676                           tablat	equ	0xFF5
   677                           prodh	equ	0xFF4
   678                           prodl	equ	0xFF3
   679                           intcon	equ	0xFF2
   680                           postinc0	equ	0xFEE
   681                           wreg	equ	0xFE8
   682                           postinc1	equ	0xFE6
   683                           postdec1	equ	0xFE5
   684                           fsr1h	equ	0xFE2
   685                           fsr1l	equ	0xFE1
   686                           indf2	equ	0xFDF
   687                           postinc2	equ	0xFDE
   688                           postdec2	equ	0xFDD
   689                           fsr2h	equ	0xFDA
   690                           fsr2l	equ	0xFD9
   691                           status	equ	0xFD8
   692                           
   693                           	psect	bssBANK2
   694  000200                     __pbssBANK2:
   695                           	opt stack 0
   696  000200                     _sensors:
   697                           	opt stack 0
   698  000200                     	ds	192
   699                           tblptru	equ	0xFF8
   700                           tblptrh	equ	0xFF7
   701                           tblptrl	equ	0xFF6
   702                           tablat	equ	0xFF5
   703                           prodh	equ	0xFF4
   704                           prodl	equ	0xFF3
   705                           intcon	equ	0xFF2
   706                           postinc0	equ	0xFEE
   707                           wreg	equ	0xFE8
   708                           postinc1	equ	0xFE6
   709                           postdec1	equ	0xFE5
   710                           fsr1h	equ	0xFE2
   711                           fsr1l	equ	0xFE1
   712                           indf2	equ	0xFDF
   713                           postinc2	equ	0xFDE
   714                           postdec2	equ	0xFDD
   715                           fsr2h	equ	0xFDA
   716                           fsr2l	equ	0xFD9
   717                           status	equ	0xFD8
   718                           
   719                           	psect	bssBANK3
   720  000300                     __pbssBANK3:
   721                           	opt stack 0
   722  000300                     _RxBuff:
   723                           	opt stack 0
   724  000300                     	ds	256
   725                           tblptru	equ	0xFF8
   726                           tblptrh	equ	0xFF7
   727                           tblptrl	equ	0xFF6
   728                           tablat	equ	0xFF5
   729                           prodh	equ	0xFF4
   730                           prodl	equ	0xFF3
   731                           intcon	equ	0xFF2
   732                           postinc0	equ	0xFEE
   733                           wreg	equ	0xFE8
   734                           postinc1	equ	0xFE6
   735                           postdec1	equ	0xFE5
   736                           fsr1h	equ	0xFE2
   737                           fsr1l	equ	0xFE1
   738                           indf2	equ	0xFDF
   739                           postinc2	equ	0xFDE
   740                           postdec2	equ	0xFDD
   741                           fsr2h	equ	0xFDA
   742                           fsr2l	equ	0xFD9
   743                           status	equ	0xFD8
   744                           
   745                           	psect	cstackBANK1
   746  000180                     __pcstackBANK1:
   747                           	opt stack 0
   748  000180                     MTouchSetButton@sensorNumber:
   749                           	opt stack 0
   750  000180                     Beep@ms10:
   751                           	opt stack 0
   752  000180                     InitMessages@i:
   753                           	opt stack 0
   754  000180                     ProcessMessages@i:
   755                           	opt stack 0
   756  000180                     MTouchSetSensor@tris:
   757                           	opt stack 0
   758                           
   759                           ; 2 bytes @ 0x0
   760  000180                     	ds	1
   761  000181                     MTouchSetButton@decode:
   762                           	opt stack 0
   763                           
   764                           ; 1 bytes @ 0x1
   765  000181                     	ds	1
   766  000182                     ??_MTouchSetButton:
   767  000182                     MTouchSetSensor@lat:
   768                           	opt stack 0
   769                           
   770                           ; 2 bytes @ 0x2
   771  000182                     	ds	2
   772  000184                     MTouchSetButton@buttonNumber:
   773                           	opt stack 0
   774  000184                     MTouchSetSensor@ioBitNumber:
   775                           	opt stack 0
   776                           
   777                           ; 1 bytes @ 0x4
   778  000184                     	ds	1
   779  000185                     MTouchSetButton@pButton:
   780                           	opt stack 0
   781  000185                     MTouchSetSensor@channelNumber:
   782                           	opt stack 0
   783                           
   784                           ; 1 bytes @ 0x5
   785  000185                     	ds	1
   786  000186                     MTouchSetSensor@threshold:
   787                           	opt stack 0
   788                           
   789                           ; 2 bytes @ 0x6
   790  000186                     	ds	2
   791  000188                     MTouchSetSensor@oversampling:
   792                           	opt stack 0
   793                           
   794                           ; 2 bytes @ 0x8
   795  000188                     	ds	2
   796  00018A                     MTouchSetSensor@chargeDelay:
   797                           	opt stack 0
   798                           
   799                           ; 1 bytes @ 0xA
   800  00018A                     	ds	1
   801  00018B                     ??_MTouchSetSensor:
   802                           
   803                           ; 0 bytes @ 0xB
   804  00018B                     	ds	2
   805  00018D                     MTouchSetSensor@sensorNumber:
   806                           	opt stack 0
   807                           
   808                           ; 1 bytes @ 0xD
   809  00018D                     	ds	1
   810  00018E                     MTouchSetSensor@pSensor:
   811                           	opt stack 0
   812                           
   813                           ; 2 bytes @ 0xE
   814  00018E                     	ds	2
   815  000190                     InitializeSystem@pll_startup_counter:
   816                           	opt stack 0
   817                           
   818                           ; 2 bytes @ 0x10
   819  000190                     	ds	2
   820  000192                     tblptru	equ	0xFF8
   821                           tblptrh	equ	0xFF7
   822                           tblptrl	equ	0xFF6
   823                           tablat	equ	0xFF5
   824                           prodh	equ	0xFF4
   825                           prodl	equ	0xFF3
   826                           intcon	equ	0xFF2
   827                           postinc0	equ	0xFEE
   828                           wreg	equ	0xFE8
   829                           postinc1	equ	0xFE6
   830                           postdec1	equ	0xFE5
   831                           fsr1h	equ	0xFE2
   832                           fsr1l	equ	0xFE1
   833                           indf2	equ	0xFDF
   834                           postinc2	equ	0xFDE
   835                           postdec2	equ	0xFDD
   836                           fsr2h	equ	0xFDA
   837                           fsr2l	equ	0xFD9
   838                           status	equ	0xFD8
   839                           
   840                           ; 0 bytes @ 0x12
   841                           
   842                           	psect	cstackBANK0
   843  0000C7                     __pcstackBANK0:
   844                           	opt stack 0
   845  0000C7                     ?_MTouchAcquisitionCVD:
   846                           	opt stack 0
   847  0000C7                     MTouchAcquisitionCVD@pCurrentSensor:
   848                           	opt stack 0
   849  0000C7                     MTouchUpdateSensorAverage@pSensor:
   850                           	opt stack 0
   851                           
   852                           ; 2 bytes @ 0x0
   853  0000C7                     	ds	2
   854  0000C9                     MTouchAcquisitionCVD@pPreviousSensor:
   855                           	opt stack 0
   856  0000C9                     MTouchUpdateSensorAverage@rate:
   857                           	opt stack 0
   858                           
   859                           ; 2 bytes @ 0x2
   860  0000C9                     	ds	2
   861  0000CB                     ??_MTouchUpdateSensorAverage:
   862  0000CB                     ??_MTouchAcquisitionCVD:
   863                           
   864                           ; 0 bytes @ 0x4
   865  0000CB                     	ds	2
   866  0000CD                     MTouchAcquisitionCVD@result:
   867                           	opt stack 0
   868                           
   869                           ; 2 bytes @ 0x6
   870  0000CD                     	ds	2
   871  0000CF                     MTouchAcquisitionCVD@prevTris:
   872                           	opt stack 0
   873                           
   874                           ; 2 bytes @ 0x8
   875  0000CF                     	ds	1
   876  0000D0                     MTouchSensorDecode@pSensor:
   877                           	opt stack 0
   878                           
   879                           ; 2 bytes @ 0x9
   880  0000D0                     	ds	1
   881  0000D1                     MTouchAcquisitionCVD@prevChannelNumber:
   882                           	opt stack 0
   883                           
   884                           ; 1 bytes @ 0xA
   885  0000D1                     	ds	1
   886  0000D2                     ??_MTouchSensorDecode:
   887  0000D2                     MTouchAcquisitionCVD@curChannelNumber:
   888                           	opt stack 0
   889                           
   890                           ; 1 bytes @ 0xB
   891  0000D2                     	ds	1
   892  0000D3                     MTouchAcquisitionCVD@prevLat:
   893                           	opt stack 0
   894                           
   895                           ; 2 bytes @ 0xC
   896  0000D3                     	ds	2
   897  0000D5                     MTouchAcquisitionCVD@curLat:
   898                           	opt stack 0
   899                           
   900                           ; 2 bytes @ 0xE
   901  0000D5                     	ds	1
   902  0000D6                     MTouchSensorDecode@delta:
   903                           	opt stack 0
   904                           
   905                           ; 2 bytes @ 0xF
   906  0000D6                     	ds	1
   907  0000D7                     MTouchAcquisitionCVD@prevIOMask:
   908                           	opt stack 0
   909                           
   910                           ; 1 bytes @ 0x10
   911  0000D7                     	ds	1
   912  0000D8                     MTouchAcquisitionCVD@curTris:
   913                           	opt stack 0
   914                           
   915                           ; 2 bytes @ 0x11
   916  0000D8                     	ds	2
   917  0000DA                     MTouchAcquisitionCVD@curIOMask:
   918                           	opt stack 0
   919                           
   920                           ; 1 bytes @ 0x13
   921  0000DA                     	ds	1
   922  0000DB                     ??_MTouchAcquisition:
   923                           
   924                           ; 0 bytes @ 0x14
   925  0000DB                     	ds	3
   926  0000DE                     MTouchAcquisition@data:
   927                           	opt stack 0
   928                           
   929                           ; 2 bytes @ 0x17
   930  0000DE                     	ds	2
   931  0000E0                     MTouchAcquisition@pLastSensor:
   932                           	opt stack 0
   933                           
   934                           ; 2 bytes @ 0x19
   935  0000E0                     	ds	2
   936  0000E2                     MTouchAcquisition@pPreviousSensor:
   937                           	opt stack 0
   938                           
   939                           ; 2 bytes @ 0x1B
   940  0000E2                     	ds	2
   941  0000E4                     MTouchAcquisition@i:
   942                           	opt stack 0
   943                           
   944                           ; 1 bytes @ 0x1D
   945  0000E4                     	ds	1
   946  0000E5                     MTouchAcquisition@pCurrentSensor:
   947                           	opt stack 0
   948                           
   949                           ; 2 bytes @ 0x1E
   950  0000E5                     	ds	2
   951  0000E7                     ??_HI_ISR:
   952                           
   953                           ; 0 bytes @ 0x20
   954  0000E7                     	ds	7
   955                           tblptru	equ	0xFF8
   956                           tblptrh	equ	0xFF7
   957                           tblptrl	equ	0xFF6
   958                           tablat	equ	0xFF5
   959                           prodh	equ	0xFF4
   960                           prodl	equ	0xFF3
   961                           intcon	equ	0xFF2
   962                           postinc0	equ	0xFEE
   963                           wreg	equ	0xFE8
   964                           postinc1	equ	0xFE6
   965                           postdec1	equ	0xFE5
   966                           fsr1h	equ	0xFE2
   967                           fsr1l	equ	0xFE1
   968                           indf2	equ	0xFDF
   969                           postinc2	equ	0xFDE
   970                           postdec2	equ	0xFDD
   971                           fsr2h	equ	0xFDA
   972                           fsr2l	equ	0xFD9
   973                           status	equ	0xFD8
   974                           
   975                           	psect	cstackCOMRAM
   976  000001                     __pcstackCOMRAM:
   977                           	opt stack 0
   978  000001                     putbyte@byte:
   979                           	opt stack 0
   980  000001                     crc_mb_init@code:
   981                           	opt stack 0
   982  000001                     crc_mb_calc@next:
   983                           	opt stack 0
   984  000001                     SendMessage@Msg:
   985                           	opt stack 0
   986  000001                     BSemOn@Sem:
   987                           	opt stack 0
   988  000001                     timed_getc@timeout:
   989                           	opt stack 0
   990  000001                     Read_b_eep@badd:
   991                           	opt stack 0
   992  000001                     Write_b_eep@badd:
   993                           	opt stack 0
   994                           
   995                           ; 2 bytes @ 0x0
   996  000001                     	ds	1
   997  000002                     ??_crc_mb_calc:
   998                           
   999                           ; 0 bytes @ 0x1
  1000  000002                     	ds	1
  1001  000003                     ??_Read_b_eep:
  1002  000003                     Write_b_eep@bdat:
  1003                           	opt stack 0
  1004                           
  1005                           ; 1 bytes @ 0x2
  1006  000003                     	ds	1
  1007  000004                     ??_Write_b_eep:
  1008                           
  1009                           ; 0 bytes @ 0x3
  1010  000004                     	ds	2
  1011  000006                     crc_mb_calc@flag:
  1012                           	opt stack 0
  1013  000006                     read___ee@adr:
  1014                           	opt stack 0
  1015                           
  1016                           ; 2 bytes @ 0x5
  1017  000006                     	ds	1
  1018  000007                     crc_mb_calc@i:
  1019                           	opt stack 0
  1020  000007                     Write_b_eep@GIE_BIT_VAL:
  1021                           	opt stack 0
  1022                           
  1023                           ; 1 bytes @ 0x6
  1024  000007                     	ds	1
  1025  000008                     read___ee@var:
  1026                           	opt stack 0
  1027  000008                     crc_mb_calc@code:
  1028                           	opt stack 0
  1029  000008                     write___ee@adr:
  1030                           	opt stack 0
  1031                           
  1032                           ; 2 bytes @ 0x7
  1033  000008                     	ds	1
  1034  000009                     read___ee@byte:
  1035                           	opt stack 0
  1036  000009                     crc_mb@buffer:
  1037                           	opt stack 0
  1038  000009                     crc_mb_check@buffer:
  1039                           	opt stack 0
  1040                           
  1041                           ; 2 bytes @ 0x8
  1042  000009                     	ds	1
  1043  00000A                     write___ee@var:
  1044                           	opt stack 0
  1045                           
  1046                           ; 1 bytes @ 0x9
  1047  00000A                     	ds	1
  1048  00000B                     write___ee@byte:
  1049                           	opt stack 0
  1050  00000B                     crc_mb@count:
  1051                           	opt stack 0
  1052  00000B                     crc_mb_check@cnt:
  1053                           	opt stack 0
  1054                           
  1055                           ; 1 bytes @ 0xA
  1056  00000B                     	ds	1
  1057  00000C                     ??_crc_mb_check:
  1058  00000C                     ??_crc_mb:
  1059  00000C                     set_ee_default@c:
  1060                           	opt stack 0
  1061                           
  1062                           ; 1 bytes @ 0xB
  1063  00000C                     	ds	1
  1064  00000D                     set_ee_default@c1:
  1065                           	opt stack 0
  1066                           
  1067                           ; 1 bytes @ 0xC
  1068  00000D                     	ds	1
  1069  00000E                     set_ee_default@i:
  1070                           	opt stack 0
  1071                           
  1072                           ; 2 bytes @ 0xD
  1073  00000E                     	ds	1
  1074  00000F                     crc_mb@i:
  1075                           	opt stack 0
  1076                           
  1077                           ; 1 bytes @ 0xE
  1078  00000F                     	ds	1
  1079  000010                     crc_mb_check@i:
  1080                           	opt stack 0
  1081  000010                     crc_mb@CRC:
  1082                           	opt stack 0
  1083                           
  1084                           ; 2 bytes @ 0xF
  1085  000010                     	ds	1
  1086  000011                     crc_mb_check@crc:
  1087                           	opt stack 0
  1088                           
  1089                           ; 2 bytes @ 0x10
  1090  000011                     	ds	2
  1091  000013                     ??_LO_ISR:
  1092                           
  1093                           ; 0 bytes @ 0x12
  1094  000013                     	ds	14
  1095  000021                     LO_ISR@lcAdr:
  1096                           	opt stack 0
  1097                           
  1098                           ; 1 bytes @ 0x20
  1099  000021                     	ds	1
  1100  000022                     LO_ISR@lcData:
  1101                           	opt stack 0
  1102                           
  1103                           ; 1 bytes @ 0x21
  1104  000022                     	ds	1
  1105  000023                     LO_ISR@i:
  1106                           	opt stack 0
  1107                           
  1108                           ; 1 bytes @ 0x22
  1109  000023                     	ds	1
  1110                           tblptru	equ	0xFF8
  1111                           tblptrh	equ	0xFF7
  1112                           tblptrl	equ	0xFF6
  1113                           tablat	equ	0xFF5
  1114                           prodh	equ	0xFF4
  1115                           prodl	equ	0xFF3
  1116                           intcon	equ	0xFF2
  1117                           postinc0	equ	0xFEE
  1118                           wreg	equ	0xFE8
  1119                           postinc1	equ	0xFE6
  1120                           postdec1	equ	0xFE5
  1121                           fsr1h	equ	0xFE2
  1122                           fsr1l	equ	0xFE1
  1123                           indf2	equ	0xFDF
  1124                           postinc2	equ	0xFDE
  1125                           postdec2	equ	0xFDD
  1126                           fsr2h	equ	0xFDA
  1127                           fsr2l	equ	0xFD9
  1128                           status	equ	0xFD8
  1129                           
  1130 ;;
  1131 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1132 ;;
  1133 ;; *************** function _main *****************
  1134 ;; Defined at:
  1135 ;;		line 33 in file "../Main.c"
  1136 ;; Parameters:    Size  Location     Type
  1137 ;;		None
  1138 ;; Auto vars:     Size  Location     Type
  1139 ;;		None
  1140 ;; Return value:  Size  Location     Type
  1141 ;;		None               void
  1142 ;; Registers used:
  1143 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1144 ;; Tracked objects:
  1145 ;;		On entry : 0/0
  1146 ;;		On exit  : F/1
  1147 ;;		Unchanged: 0/0
  1148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1153 ;;Total ram usage:        0 bytes
  1154 ;; Hardware stack levels required when called:   10
  1155 ;; This function calls:
  1156 ;;		_Beep
  1157 ;;		_InitMessages
  1158 ;;		_InitializeSystem
  1159 ;;		_ProcessMessages
  1160 ;;		_tsk_display
  1161 ;;		_tsk_process
  1162 ;; This function is called by:
  1163 ;;		Startup code after reset
  1164 ;; This function uses a non-reentrant model
  1165 ;;
  1166                           
  1167                           	psect	text0
  1168  00106E                     __ptext0:
  1169                           	opt stack 0
  1170  00106E                     _main:
  1171                           	opt stack 21
  1172                           
  1173                           ;Main.c: 35: __nop();
  1174                           
  1175                           ; BSR set to: 0
  1176                           ;incstack = 0
  1177  00106E  F000               	nop	
  1178                           
  1179                           ;Main.c: 36: InitMessages();
  1180  001070  ECF3  F007         	call	_InitMessages	;wreg free
  1181                           
  1182                           ; BSR set to: 1
  1183                           ;Main.c: 37: InitializeSystem();
  1184  001074  EC11  F003         	call	_InitializeSystem	;wreg free
  1185                           
  1186                           ; BSR set to: 1
  1187                           ;Main.c: 40: __nop();
  1188  001078  F000               	nop	
  1189                           
  1190                           ;Main.c: 41: __nop();
  1191  00107A  F000               	nop	
  1192                           
  1193                           ;Main.c: 44: INTCONbits.GIE = 1;
  1194  00107C  8EF2               	bsf	intcon,7,c	;volatile
  1195  00107E                     l4084:
  1196                           
  1197                           ;Main.c: 48: tsk_display();
  1198  00107E  ECF4  F008         	call	_tsk_display	;wreg free
  1199                           
  1200                           ;Main.c: 49: tsk_process();
  1201  001082  ECF3  F008         	call	_tsk_process	;wreg free
  1202                           
  1203                           ;Main.c: 52: Beep(10);
  1204  001086  0E0A               	movlw	10
  1205  001088  ECBF  F008         	call	_Beep
  1206                           
  1207                           ; BSR set to: 1
  1208                           ;Main.c: 53: __nop();
  1209  00108C  F000               	nop	
  1210                           
  1211                           ;Main.c: 54: __nop();
  1212  00108E  F000               	nop	
  1213                           
  1214                           ;Main.c: 57: if((FERR1) || (OERR1)) {
  1215  001090  B4AB               	btfsc	4011,2,c	;volatile
  1216  001092  D002               	goto	l552
  1217  001094  A2AB               	btfss	4011,1,c	;volatile
  1218  001096  D003               	goto	l550
  1219  001098                     l552:
  1220                           
  1221                           ;Main.c: 58: CREN1 = 0;
  1222  001098  98AB               	bcf	4011,4,c	;volatile
  1223                           
  1224                           ;Main.c: 59: __nop();
  1225  00109A  F000               	nop	
  1226                           
  1227                           ;Main.c: 60: CREN1 = 1;
  1228  00109C  88AB               	bsf	4011,4,c	;volatile
  1229  00109E                     l550:
  1230                           
  1231                           ;Main.c: 61: }
  1232                           ;Main.c: 63: if(SWDTEN == 0) {
  1233  00109E  A0D1               	btfss	4049,0,c	;volatile
  1234                           
  1235                           ;Main.c: 64: SWDTEN = 1;
  1236  0010A0  80D1               	bsf	4049,0,c	;volatile
  1237  0010A2  0004               	clrwdt		;# 
  1238                           
  1239                           ;Main.c: 69: ProcessMessages();
  1240  0010A4  EC68  F006         	call	_ProcessMessages	;wreg free
  1241  0010A8  D7EA               	goto	l4084
  1242  0010AA                     __end_of_main:
  1243                           	opt stack 0
  1244                           tblptru	equ	0xFF8
  1245                           tblptrh	equ	0xFF7
  1246                           tblptrl	equ	0xFF6
  1247                           tablat	equ	0xFF5
  1248                           prodh	equ	0xFF4
  1249                           prodl	equ	0xFF3
  1250                           intcon	equ	0xFF2
  1251                           postinc0	equ	0xFEE
  1252                           wreg	equ	0xFE8
  1253                           postinc1	equ	0xFE6
  1254                           postdec1	equ	0xFE5
  1255                           fsr1h	equ	0xFE2
  1256                           fsr1l	equ	0xFE1
  1257                           indf2	equ	0xFDF
  1258                           postinc2	equ	0xFDE
  1259                           postdec2	equ	0xFDD
  1260                           fsr2h	equ	0xFDA
  1261                           fsr2l	equ	0xFD9
  1262                           status	equ	0xFD8
  1263                           
  1264 ;; *************** function _tsk_process *****************
  1265 ;; Defined at:
  1266 ;;		line 75 in file "../Main.c"
  1267 ;; Parameters:    Size  Location     Type
  1268 ;;		None
  1269 ;; Auto vars:     Size  Location     Type
  1270 ;;		None
  1271 ;; Return value:  Size  Location     Type
  1272 ;;		None               void
  1273 ;; Registers used:
  1274 ;;		None
  1275 ;; Tracked objects:
  1276 ;;		On entry : 0/1
  1277 ;;		On exit  : 0/0
  1278 ;;		Unchanged: 0/0
  1279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1283 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1284 ;;Total ram usage:        0 bytes
  1285 ;; Hardware stack levels used:    1
  1286 ;; Hardware stack levels required when called:    8
  1287 ;; This function calls:
  1288 ;;		Nothing
  1289 ;; This function is called by:
  1290 ;;		_main
  1291 ;; This function uses a non-reentrant model
  1292 ;;
  1293                           
  1294                           	psect	text1
  1295  0011E6                     __ptext1:
  1296                           	opt stack 0
  1297  0011E6                     _tsk_process:
  1298                           	opt stack 22
  1299                           
  1300                           ; BSR set to: 1
  1301                           ;incstack = 0
  1302  0011E6  0012               	return	
  1303  0011E8                     __end_of_tsk_process:
  1304                           	opt stack 0
  1305                           tblptru	equ	0xFF8
  1306                           tblptrh	equ	0xFF7
  1307                           tblptrl	equ	0xFF6
  1308                           tablat	equ	0xFF5
  1309                           prodh	equ	0xFF4
  1310                           prodl	equ	0xFF3
  1311                           intcon	equ	0xFF2
  1312                           postinc0	equ	0xFEE
  1313                           wreg	equ	0xFE8
  1314                           postinc1	equ	0xFE6
  1315                           postdec1	equ	0xFE5
  1316                           fsr1h	equ	0xFE2
  1317                           fsr1l	equ	0xFE1
  1318                           indf2	equ	0xFDF
  1319                           postinc2	equ	0xFDE
  1320                           postdec2	equ	0xFDD
  1321                           fsr2h	equ	0xFDA
  1322                           fsr2l	equ	0xFD9
  1323                           status	equ	0xFD8
  1324                           
  1325 ;; *************** function _tsk_display *****************
  1326 ;; Defined at:
  1327 ;;		line 82 in file "../Main.c"
  1328 ;; Parameters:    Size  Location     Type
  1329 ;;		None
  1330 ;; Auto vars:     Size  Location     Type
  1331 ;;		None
  1332 ;; Return value:  Size  Location     Type
  1333 ;;		None               void
  1334 ;; Registers used:
  1335 ;;		None
  1336 ;; Tracked objects:
  1337 ;;		On entry : 0/1
  1338 ;;		On exit  : 0/0
  1339 ;;		Unchanged: 0/0
  1340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1344 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1345 ;;Total ram usage:        0 bytes
  1346 ;; Hardware stack levels used:    1
  1347 ;; Hardware stack levels required when called:    8
  1348 ;; This function calls:
  1349 ;;		Nothing
  1350 ;; This function is called by:
  1351 ;;		_main
  1352 ;; This function uses a non-reentrant model
  1353 ;;
  1354                           
  1355                           	psect	text2
  1356  0011E8                     __ptext2:
  1357                           	opt stack 0
  1358  0011E8                     _tsk_display:
  1359                           	opt stack 22
  1360                           
  1361                           ;incstack = 0
  1362  0011E8  0012               	return	
  1363  0011EA                     __end_of_tsk_display:
  1364                           	opt stack 0
  1365                           tblptru	equ	0xFF8
  1366                           tblptrh	equ	0xFF7
  1367                           tblptrl	equ	0xFF6
  1368                           tablat	equ	0xFF5
  1369                           prodh	equ	0xFF4
  1370                           prodl	equ	0xFF3
  1371                           intcon	equ	0xFF2
  1372                           postinc0	equ	0xFEE
  1373                           wreg	equ	0xFE8
  1374                           postinc1	equ	0xFE6
  1375                           postdec1	equ	0xFE5
  1376                           fsr1h	equ	0xFE2
  1377                           fsr1l	equ	0xFE1
  1378                           indf2	equ	0xFDF
  1379                           postinc2	equ	0xFDE
  1380                           postdec2	equ	0xFDD
  1381                           fsr2h	equ	0xFDA
  1382                           fsr2l	equ	0xFD9
  1383                           status	equ	0xFD8
  1384                           
  1385 ;; *************** function _ProcessMessages *****************
  1386 ;; Defined at:
  1387 ;;		line 110 in file "../lib/messages.c"
  1388 ;; Parameters:    Size  Location     Type
  1389 ;;		None
  1390 ;; Auto vars:     Size  Location     Type
  1391 ;;  i               1    0[BANK1 ] unsigned char 
  1392 ;; Return value:  Size  Location     Type
  1393 ;;		None               void
  1394 ;; Registers used:
  1395 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1396 ;; Tracked objects:
  1397 ;;		On entry : 0/1
  1398 ;;		On exit  : F/1
  1399 ;;		Unchanged: 0/0
  1400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1402 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1404 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1405 ;;Total ram usage:        1 bytes
  1406 ;; Hardware stack levels used:    1
  1407 ;; Hardware stack levels required when called:    8
  1408 ;; This function calls:
  1409 ;;		Nothing
  1410 ;; This function is called by:
  1411 ;;		_main
  1412 ;; This function uses a non-reentrant model
  1413 ;;
  1414                           
  1415                           	psect	text3
  1416  000CD0                     __ptext3:
  1417                           	opt stack 0
  1418  000CD0                     _ProcessMessages:
  1419                           	opt stack 22
  1420                           
  1421                           ;messages.c: 111: char i;
  1422                           ;messages.c: 112: for(i = 0; i < (10); i++){
  1423                           
  1424                           ;incstack = 0
  1425  000CD0  0101               	movlb	1	; () banked
  1426  000CD2  6B80               	clrf	ProcessMessages@i& (0+255),b
  1427  000CD4                     l4022:
  1428                           
  1429                           ; BSR set to: 1
  1430                           ;messages.c: 113: if(Messages[i] == MSG_PHASE_READY) Messages[i] = MSG_PHASE_NONE;
  1431  000CD4  5180               	movf	ProcessMessages@i& (0+255),w,b
  1432  000CD6  0F60               	addlw	low _Messages	;volatile
  1433  000CD8  6ED9               	movwf	fsr2l,c
  1434  000CDA  6ADA               	clrf	fsr2h,c
  1435  000CDC  0E02               	movlw	2
  1436  000CDE  62DF               	cpfseq	indf2,c
  1437  000CE0  D004               	goto	l843
  1438                           
  1439                           ; BSR set to: 0
  1440  000CE2  0101               	movlb	1	; () banked
  1441  000CE4  5180               	movf	ProcessMessages@i& (0+255),w,b
  1442  000CE6  0F60               	addlw	low _Messages	;volatile
  1443  000CE8  D832               	call	PL32	;call to abstracted procedure
  1444  000CEA                     l843:
  1445                           
  1446                           ; BSR set to: 0
  1447                           ;messages.c: 114: if(Messages[i] == MSG_PHASE_PREPARE) Messages[i] = MSG_PHASE_READY;
  1448  000CEA  0101               	movlb	1	; () banked
  1449  000CEC  5180               	movf	ProcessMessages@i& (0+255),w,b
  1450  000CEE  0F60               	addlw	low _Messages	;volatile
  1451  000CF0  6ED9               	movwf	fsr2l,c
  1452  000CF2  6ADA               	clrf	fsr2h,c
  1453  000CF4  0E01               	movlw	1
  1454  000CF6  62DF               	cpfseq	indf2,c
  1455  000CF8  D003               	goto	l4028
  1456                           
  1457                           ; BSR set to: 0
  1458  000CFA  5180               	movf	ProcessMessages@i& (0+255),w,b
  1459  000CFC  0F60               	addlw	low _Messages	;volatile
  1460  000CFE  D822               	call	PL30	;call to abstracted procedure
  1461  000D00                     l4028:
  1462                           
  1463                           ; BSR set to: 0
  1464  000D00  0101               	movlb	1	; () banked
  1465  000D02  2B80               	incf	ProcessMessages@i& (0+255),f,b
  1466                           
  1467                           ; BSR set to: 1
  1468  000D04  0E09               	movlw	9
  1469  000D06  6580               	cpfsgt	ProcessMessages@i& (0+255),b
  1470  000D08  D7E5               	goto	l4022
  1471                           
  1472                           ; BSR set to: 1
  1473                           ;messages.c: 115: }
  1474                           ;messages.c: 118: for(i = 0; i < 1; i++) {
  1475  000D0A  6B80               	clrf	ProcessMessages@i& (0+255),b
  1476  000D0C                     l4036:
  1477                           
  1478                           ; BSR set to: 1
  1479                           ;messages.c: 119: if(BroadcastMessages[i] == MSG_PHASE_READY) BroadcastMessages[i] = MSG
      +                          _PHASE_NONE;
  1480  000D0C  5180               	movf	ProcessMessages@i& (0+255),w,b
  1481  000D0E  0F76               	addlw	low _BroadcastMessages	;volatile
  1482  000D10  6ED9               	movwf	fsr2l,c
  1483  000D12  6ADA               	clrf	fsr2h,c
  1484  000D14  0E02               	movlw	2
  1485  000D16  62DF               	cpfseq	indf2,c
  1486  000D18  D004               	goto	l847
  1487                           
  1488                           ; BSR set to: 0
  1489  000D1A  0101               	movlb	1	; () banked
  1490  000D1C  5180               	movf	ProcessMessages@i& (0+255),w,b
  1491  000D1E  0F76               	addlw	low _BroadcastMessages	;volatile
  1492  000D20  D816               	call	PL32	;call to abstracted procedure
  1493  000D22                     l847:
  1494                           
  1495                           ; BSR set to: 0
  1496                           ;messages.c: 120: if(BroadcastMessages[i] == MSG_PHASE_PREPARE) BroadcastMessages[i] = M
      +                          SG_PHASE_READY;
  1497  000D22  0101               	movlb	1	; () banked
  1498  000D24  5180               	movf	ProcessMessages@i& (0+255),w,b
  1499  000D26  0F76               	addlw	low _BroadcastMessages	;volatile
  1500  000D28  6ED9               	movwf	fsr2l,c
  1501  000D2A  6ADA               	clrf	fsr2h,c
  1502  000D2C  0E01               	movlw	1
  1503  000D2E  62DF               	cpfseq	indf2,c
  1504  000D30  D003               	goto	l4042
  1505                           
  1506                           ; BSR set to: 0
  1507  000D32  5180               	movf	ProcessMessages@i& (0+255),w,b
  1508  000D34  0F76               	addlw	low _BroadcastMessages	;volatile
  1509  000D36  D806               	call	PL30	;call to abstracted procedure
  1510  000D38                     l4042:
  1511                           
  1512                           ; BSR set to: 0
  1513  000D38  0101               	movlb	1	; () banked
  1514  000D3A  2B80               	incf	ProcessMessages@i& (0+255),f,b
  1515                           
  1516                           ; BSR set to: 1
  1517  000D3C  5180               	movf	ProcessMessages@i& (0+255),w,b
  1518  000D3E  A4D8               	btfss	status,2,c
  1519  000D40  0012               	return	
  1520  000D42  D7E4               	goto	l4036
  1521  000D44                     __end_of_ProcessMessages:
  1522                           	opt stack 0
  1523  000D44                     PL30:
  1524                           	opt stack 22
  1525  000D44  6ED9               	movwf	fsr2l,c
  1526  000D46  6ADA               	clrf	fsr2h,c
  1527  000D48  0E02               	movlw	2
  1528  000D4A  6EDF               	movwf	indf2,c
  1529  000D4C  0C02               	retlw	2
  1530  000D4E                     __end_ofPL30:
  1531                           	opt stack 0
  1532  000D4E                     PL32:
  1533                           	opt stack 22
  1534  000D4E  6ED9               	movwf	fsr2l,c
  1535  000D50  6ADA               	clrf	fsr2h,c
  1536  000D52  6ADF               	clrf	indf2,c
  1537  000D54  0012               	return	
  1538  000D56                     __end_ofPL32:
  1539                           	opt stack 0
  1540                           tblptru	equ	0xFF8
  1541                           tblptrh	equ	0xFF7
  1542                           tblptrl	equ	0xFF6
  1543                           tablat	equ	0xFF5
  1544                           prodh	equ	0xFF4
  1545                           prodl	equ	0xFF3
  1546                           intcon	equ	0xFF2
  1547                           postinc0	equ	0xFEE
  1548                           wreg	equ	0xFE8
  1549                           postinc1	equ	0xFE6
  1550                           postdec1	equ	0xFE5
  1551                           fsr1h	equ	0xFE2
  1552                           fsr1l	equ	0xFE1
  1553                           indf2	equ	0xFDF
  1554                           postinc2	equ	0xFDE
  1555                           postdec2	equ	0xFDD
  1556                           fsr2h	equ	0xFDA
  1557                           fsr2l	equ	0xFD9
  1558                           status	equ	0xFD8
  1559                           
  1560 ;; *************** function _InitializeSystem *****************
  1561 ;; Defined at:
  1562 ;;		line 24 in file "../misc.c"
  1563 ;; Parameters:    Size  Location     Type
  1564 ;;		None
  1565 ;; Auto vars:     Size  Location     Type
  1566 ;;  pll_startup_    2   16[BANK1 ] unsigned int 
  1567 ;; Return value:  Size  Location     Type
  1568 ;;		None               void
  1569 ;; Registers used:
  1570 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1571 ;; Tracked objects:
  1572 ;;		On entry : F/1
  1573 ;;		On exit  : F/1
  1574 ;;		Unchanged: 0/0
  1575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1577 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1579 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1580 ;;Total ram usage:        2 bytes
  1581 ;; Hardware stack levels used:    1
  1582 ;; Hardware stack levels required when called:    9
  1583 ;; This function calls:
  1584 ;;		_MTouchInit
  1585 ;;		_MTouchSetButton
  1586 ;;		_MTouchSetSensor
  1587 ;;		_uart16_init
  1588 ;; This function is called by:
  1589 ;;		_main
  1590 ;; This function uses a non-reentrant model
  1591 ;;
  1592                           
  1593                           	psect	text4
  1594  000622                     __ptext4:
  1595                           	opt stack 0
  1596  000622                     _InitializeSystem:
  1597                           	opt stack 21
  1598                           
  1599                           ; BSR set to: 1
  1600                           ;misc.c: 36: unsigned int pll_startup_counter = 600;
  1601                           
  1602                           ; BSR set to: 1
  1603                           ;incstack = 0
  1604  000622  0E02               	movlw	2
  1605  000624  6F91               	movwf	(InitializeSystem@pll_startup_counter+1)& (0+255),b
  1606  000626  0E58               	movlw	88
  1607  000628  6F90               	movwf	InitializeSystem@pll_startup_counter& (0+255),b
  1608                           
  1609                           ;misc.c: 38: OSCCON = 0b01110000;
  1610  00062A  0E70               	movlw	112
  1611  00062C  6ED3               	movwf	4051,c	;volatile
  1612                           
  1613                           ; BSR set to: 1
  1614                           ;misc.c: 39: OSCTUNEbits.PLLEN = 1;
  1615  00062E  8C9B               	bsf	3995,6,c	;volatile
  1616  000630                     l3936:
  1617                           
  1618                           ; BSR set to: 1
  1619  000630  0790               	decf	InitializeSystem@pll_startup_counter& (0+255),f,b
  1620  000632  A0D8               	btfss	status,0,c
  1621  000634  0791               	decf	(InitializeSystem@pll_startup_counter+1)& (0+255),f,b
  1622  000636  0101               	movlb	1	; () banked
  1623  000638  2990               	incf	InitializeSystem@pll_startup_counter& (0+255),w,b
  1624  00063A  B4D8               	btfsc	status,2,c
  1625  00063C  2991               	incf	(InitializeSystem@pll_startup_counter+1)& (0+255),w,b
  1626  00063E  E1F8               	bnz	l3936
  1627                           
  1628                           ; BSR set to: 1
  1629                           ;misc.c: 44: RCONbits.IPEN = 1;
  1630  000640  8ED0               	bsf	4048,7,c	;volatile
  1631                           
  1632                           ; BSR set to: 1
  1633                           ;misc.c: 47: T2CONbits.T2CKPS = 3;
  1634  000642  0E03               	movlw	3
  1635  000644  12BA               	iorwf	4026,f,c	;volatile
  1636                           
  1637                           ;misc.c: 48: PR2 = 200;
  1638  000646  0EC8               	movlw	200
  1639  000648  6EBB               	movwf	4027,c	;volatile
  1640                           
  1641                           ;misc.c: 49: T2CONbits.T2OUTPS = 3;
  1642  00064A  50BA               	movf	4026,w,c	;volatile
  1643  00064C  0B87               	andlw	-121
  1644  00064E  0918               	iorlw	24
  1645  000650  6EBA               	movwf	4026,c	;volatile
  1646                           
  1647                           ; BSR set to: 1
  1648                           ;misc.c: 50: T2CONbits.TMR2ON = 1;
  1649  000652  84BA               	bsf	4026,2,c	;volatile
  1650                           
  1651                           ; BSR set to: 1
  1652                           ;misc.c: 51: IPR1bits.TMR2IP = 1;
  1653  000654  829F               	bsf	3999,1,c	;volatile
  1654                           
  1655                           ; BSR set to: 1
  1656                           ;misc.c: 52: PIR1bits.TMR2IF = 0;
  1657  000656  929E               	bcf	3998,1,c	;volatile
  1658                           
  1659                           ; BSR set to: 1
  1660                           ;misc.c: 53: PIE1bits.TMR2IE = 1;
  1661  000658  829D               	bsf	3997,1,c	;volatile
  1662                           
  1663                           ;misc.c: 56: T4CONbits.T4CKPS = 3;
  1664  00065A  0E03               	movlw	3
  1665  00065C  010F               	movlb	15	; () banked
  1666  00065E  1351               	iorwf	81,f,b	;volatile
  1667                           
  1668                           ;misc.c: 57: PR4 = 200;
  1669  000660  0EC8               	movlw	200
  1670  000662  6F52               	movwf	82,b	;volatile
  1671                           
  1672                           ; BSR set to: 15
  1673                           ;misc.c: 58: T4CONbits.T4OUTPS = 0;
  1674  000664  9751               	bcf	81,3,b	;volatile
  1675  000666  9951               	bcf	81,4,b	;volatile
  1676  000668  9B51               	bcf	81,5,b	;volatile
  1677  00066A  9D51               	bcf	81,6,b	;volatile
  1678                           
  1679                           ; BSR set to: 15
  1680                           ;misc.c: 59: T4CONbits.TMR4ON = 1;
  1681  00066C  8551               	bsf	81,2,b	;volatile
  1682                           
  1683                           ; BSR set to: 15
  1684                           ;misc.c: 60: IPR5bits.TMR4IP = 1;
  1685  00066E  807F               	bsf	3967,0,c	;volatile
  1686                           
  1687                           ; BSR set to: 15
  1688                           ;misc.c: 61: PIR5bits.TMR4IF = 0;
  1689  000670  907E               	bcf	3966,0,c	;volatile
  1690                           
  1691                           ; BSR set to: 15
  1692                           ;misc.c: 62: PIE5bits.TMR4IE = 1;
  1693  000672  807D               	bsf	3965,0,c	;volatile
  1694                           
  1695                           ; BSR set to: 15
  1696                           ;misc.c: 70: MTouchInit();
  1697  000674  ECB1  F008         	call	_MTouchInit	;wreg free
  1698                           
  1699                           ; BSR set to: 15
  1700                           ;misc.c: 72: ANSELA = 0b00101111;
  1701  000678  0E2F               	movlw	47
  1702  00067A  6F38               	movwf	56,b	;volatile
  1703                           
  1704                           ; BSR set to: 15
  1705                           ;misc.c: 73: ANSELB = 0b00000000;
  1706  00067C  6B39               	clrf	57,b	;volatile
  1707                           
  1708                           ; BSR set to: 15
  1709                           ;misc.c: 74: ANSELC = 0b00000000;
  1710  00067E  6B3A               	clrf	58,b	;volatile
  1711                           
  1712                           ; BSR set to: 15
  1713                           ;misc.c: 75: ANSELD = 0b00000000;
  1714  000680  6B3B               	clrf	59,b	;volatile
  1715                           
  1716                           ; BSR set to: 15
  1717                           ;misc.c: 76: ANSELE = 0b00000001;
  1718  000682  0E01               	movlw	1
  1719  000684  6F3C               	movwf	60,b	;volatile
  1720                           
  1721                           ; BSR set to: 15
  1722                           ;misc.c: 80: MTouchSetSensor(0, &TRISA, &LATA, 0, 0, -1, -1, -1);
  1723  000686  0E0F               	movlw	15	;volatile
  1724  000688  0101               	movlb	1	; () banked
  1725  00068A  6F81               	movwf	(MTouchSetSensor@tris+1)& (0+255),b
  1726  00068C  D88B               	call	PL10	;call to abstracted procedure
  1727  00068E  6B84               	clrf	MTouchSetSensor@ioBitNumber& (0+255),b
  1728  000690  6B85               	clrf	MTouchSetSensor@channelNumber& (0+255),b
  1729  000692  6987               	setf	(MTouchSetSensor@threshold+1)& (0+255),b
  1730  000694  6986               	setf	MTouchSetSensor@threshold& (0+255),b
  1731  000696  6989               	setf	(MTouchSetSensor@oversampling+1)& (0+255),b
  1732  000698  6988               	setf	MTouchSetSensor@oversampling& (0+255),b
  1733  00069A  698A               	setf	MTouchSetSensor@chargeDelay& (0+255),b
  1734  00069C  0E00               	movlw	0
  1735  00069E  ECA7  F004         	call	_MTouchSetSensor
  1736                           
  1737                           ; BSR set to: 1
  1738                           ;misc.c: 81: MTouchSetSensor(1, &TRISA, &LATA, 1, 1, -1, -1, -1);
  1739  0006A2  0E0F               	movlw	15	;volatile
  1740  0006A4  6F81               	movwf	(MTouchSetSensor@tris+1)& (0+255),b
  1741  0006A6  D87E               	call	PL10	;call to abstracted procedure
  1742  0006A8  0E01               	movlw	1
  1743  0006AA  6F84               	movwf	MTouchSetSensor@ioBitNumber& (0+255),b
  1744  0006AC  D882               	call	PL12	;call to abstracted procedure
  1745  0006AE  0E01               	movlw	1
  1746  0006B0  ECA7  F004         	call	_MTouchSetSensor
  1747                           
  1748                           ; BSR set to: 1
  1749                           ;misc.c: 82: MTouchSetSensor(2, &TRISA, &LATA, 2, 2, -1, -1, -1);
  1750  0006B4  0E0F               	movlw	15	;volatile
  1751  0006B6  6F81               	movwf	(MTouchSetSensor@tris+1)& (0+255),b
  1752  0006B8  D875               	call	PL10	;call to abstracted procedure
  1753  0006BA  0E02               	movlw	2
  1754  0006BC  6F84               	movwf	MTouchSetSensor@ioBitNumber& (0+255),b
  1755  0006BE  D879               	call	PL12	;call to abstracted procedure
  1756  0006C0  0E02               	movlw	2
  1757  0006C2  ECA7  F004         	call	_MTouchSetSensor
  1758                           
  1759                           ; BSR set to: 1
  1760                           ;misc.c: 83: MTouchSetSensor(3, &TRISA, &LATA, 3, 3, -1, -1, -1);
  1761  0006C6  0E0F               	movlw	15	;volatile
  1762  0006C8  6F81               	movwf	(MTouchSetSensor@tris+1)& (0+255),b
  1763  0006CA  D86C               	call	PL10	;call to abstracted procedure
  1764  0006CC  0E03               	movlw	3
  1765  0006CE  6F84               	movwf	MTouchSetSensor@ioBitNumber& (0+255),b
  1766  0006D0  D870               	call	PL12	;call to abstracted procedure
  1767  0006D2  0E03               	movlw	3
  1768  0006D4  ECA7  F004         	call	_MTouchSetSensor
  1769                           
  1770                           ; BSR set to: 1
  1771                           ;misc.c: 84: MTouchSetSensor(4, &TRISA, &LATA, 5, 4, -1, -1, -1);
  1772  0006D8  0E0F               	movlw	15	;volatile
  1773  0006DA  6F81               	movwf	(MTouchSetSensor@tris+1)& (0+255),b
  1774  0006DC  D863               	call	PL10	;call to abstracted procedure
  1775  0006DE  0E05               	movlw	5
  1776  0006E0  6F84               	movwf	MTouchSetSensor@ioBitNumber& (0+255),b
  1777  0006E2  0E04               	movlw	4
  1778  0006E4  D866               	call	PL12	;call to abstracted procedure
  1779  0006E6  0E04               	movlw	4
  1780  0006E8  ECA7  F004         	call	_MTouchSetSensor
  1781                           
  1782                           ; BSR set to: 1
  1783                           ;misc.c: 85: MTouchSetSensor(5, &TRISE, &LATE, 0, 5, -1, -1, -1);
  1784  0006EC  0E0F               	movlw	15	;volatile
  1785  0006EE  6F81               	movwf	(MTouchSetSensor@tris+1)& (0+255),b
  1786  0006F0  0E96               	movlw	150	;volatile
  1787  0006F2  6F80               	movwf	MTouchSetSensor@tris& (0+255),b
  1788  0006F4  0E0F               	movlw	15	;volatile
  1789  0006F6  6F83               	movwf	(MTouchSetSensor@lat+1)& (0+255),b
  1790  0006F8  0E8D               	movlw	141	;volatile
  1791  0006FA  6F82               	movwf	MTouchSetSensor@lat& (0+255),b
  1792  0006FC  6B84               	clrf	MTouchSetSensor@ioBitNumber& (0+255),b
  1793  0006FE  0E05               	movlw	5
  1794  000700  D858               	call	PL12	;call to abstracted procedure
  1795  000702  0E05               	movlw	5
  1796  000704  ECA7  F004         	call	_MTouchSetSensor
  1797                           
  1798                           ; BSR set to: 1
  1799                           ;misc.c: 119: MTouchSetButton(KEY_M, 0, DECODE_ONE_EVENT);
  1800  000708  6B80               	clrf	MTouchSetButton@sensorNumber& (0+255),b
  1801  00070A  0E10               	movlw	16
  1802  00070C  6F81               	movwf	MTouchSetButton@decode& (0+255),b
  1803  00070E  0E02               	movlw	2
  1804  000710  ECAB  F006         	call	_MTouchSetButton
  1805                           
  1806                           ; BSR set to: 1
  1807                           ;misc.c: 120: MTouchSetButton(KEY_T1, 1, DECODE_ONE_EVENT);
  1808  000714  0E01               	movlw	1
  1809  000716  6F80               	movwf	MTouchSetButton@sensorNumber& (0+255),b
  1810  000718  0E10               	movlw	16
  1811  00071A  6F81               	movwf	MTouchSetButton@decode& (0+255),b
  1812  00071C  0E04               	movlw	4
  1813  00071E  ECAB  F006         	call	_MTouchSetButton
  1814                           
  1815                           ; BSR set to: 1
  1816                           ;misc.c: 121: MTouchSetButton(KEY_MENU, 2, DECODE_ONE_EVENT);
  1817  000722  0E02               	movlw	2
  1818  000724  6F80               	movwf	MTouchSetButton@sensorNumber& (0+255),b
  1819  000726  0E10               	movlw	16
  1820  000728  6F81               	movwf	MTouchSetButton@decode& (0+255),b
  1821  00072A  0E00               	movlw	0
  1822  00072C  ECAB  F006         	call	_MTouchSetButton
  1823                           
  1824                           ; BSR set to: 1
  1825                           ;misc.c: 122: MTouchSetButton(KEY_T2, 3, DECODE_ONE_EVENT);
  1826  000730  0E03               	movlw	3
  1827  000732  6F80               	movwf	MTouchSetButton@sensorNumber& (0+255),b
  1828  000734  0E10               	movlw	16
  1829  000736  6F81               	movwf	MTouchSetButton@decode& (0+255),b
  1830  000738  0E05               	movlw	5
  1831  00073A  ECAB  F006         	call	_MTouchSetButton
  1832                           
  1833                           ; BSR set to: 1
  1834                           ;misc.c: 123: MTouchSetButton(KEY_START, 4, DECODE_ONE_EVENT);
  1835  00073E  0E04               	movlw	4
  1836  000740  6F80               	movwf	MTouchSetButton@sensorNumber& (0+255),b
  1837  000742  0E10               	movlw	16
  1838  000744  6F81               	movwf	MTouchSetButton@decode& (0+255),b
  1839  000746  0E01               	movlw	1
  1840  000748  ECAB  F006         	call	_MTouchSetButton
  1841                           
  1842                           ; BSR set to: 1
  1843                           ;misc.c: 124: MTouchSetButton(KEY_P, 5, DECODE_ONE_EVENT);
  1844  00074C  0E05               	movlw	5
  1845  00074E  6F80               	movwf	MTouchSetButton@sensorNumber& (0+255),b
  1846  000750  0E10               	movlw	16
  1847  000752  6F81               	movwf	MTouchSetButton@decode& (0+255),b
  1848  000754  0E03               	movlw	3
  1849  000756  ECAB  F006         	call	_MTouchSetButton
  1850                           
  1851                           ; BSR set to: 1
  1852                           ;misc.c: 126: MTouchSetButton(KEY_MM, 0, DECODE_PRESS_REPEAT | DECODE_ONE_EVENT);
  1853  00075A  6B80               	clrf	MTouchSetButton@sensorNumber& (0+255),b
  1854  00075C  0E18               	movlw	24
  1855  00075E  6F81               	movwf	MTouchSetButton@decode& (0+255),b
  1856  000760  0E06               	movlw	6
  1857  000762  ECAB  F006         	call	_MTouchSetButton
  1858                           
  1859                           ; BSR set to: 1
  1860                           ;misc.c: 127: MTouchSetButton(KEY_PP, 5, DECODE_PRESS_REPEAT | DECODE_ONE_EVENT);
  1861  000766  0E05               	movlw	5
  1862  000768  6F80               	movwf	MTouchSetButton@sensorNumber& (0+255),b
  1863  00076A  0E18               	movlw	24
  1864  00076C  6F81               	movwf	MTouchSetButton@decode& (0+255),b
  1865  00076E  0E07               	movlw	7
  1866  000770  ECAB  F006         	call	_MTouchSetButton
  1867                           
  1868                           ; BSR set to: 1
  1869                           ;misc.c: 129: MTouchSetButton(KEY_TT1, 1, DECODE_PRESS_REPEAT);
  1870  000774  0E01               	movlw	1
  1871  000776  6F80               	movwf	MTouchSetButton@sensorNumber& (0+255),b
  1872  000778  0E08               	movlw	8
  1873  00077A  6F81               	movwf	MTouchSetButton@decode& (0+255),b
  1874  00077C  ECAB  F006         	call	_MTouchSetButton
  1875                           
  1876                           ; BSR set to: 1
  1877                           ;misc.c: 130: MTouchSetButton(KEY_TT2, 3, DECODE_PRESS_REPEAT);
  1878  000780  0E03               	movlw	3
  1879  000782  6F80               	movwf	MTouchSetButton@sensorNumber& (0+255),b
  1880  000784  0E08               	movlw	8
  1881  000786  6F81               	movwf	MTouchSetButton@decode& (0+255),b
  1882  000788  0E09               	movlw	9
  1883  00078A  ECAB  F006         	call	_MTouchSetButton
  1884                           
  1885                           ; BSR set to: 1
  1886                           ;misc.c: 132: uart16_init();
  1887  00078E  ECA2  F008         	call	_uart16_init	;wreg free
  1888                           
  1889                           ; BSR set to: 1
  1890                           ;misc.c: 133: TRISCbits.TRISC6 = 0;
  1891  000792  9C94               	bcf	3988,6,c	;volatile
  1892                           
  1893                           ; BSR set to: 1
  1894                           ;misc.c: 134: TRISCbits.TRISC7 = 1;
  1895  000794  8E94               	bsf	3988,7,c	;volatile
  1896                           
  1897                           ; BSR set to: 1
  1898                           ;misc.c: 135: RCIP = 0;
  1899  000796  9A9F               	bcf	3999,5,c	;volatile
  1900                           
  1901                           ; BSR set to: 1
  1902                           ;misc.c: 136: RCIE = 1;
  1903  000798  8A9D               	bsf	3997,5,c	;volatile
  1904                           
  1905                           ; BSR set to: 1
  1906                           ;misc.c: 140: SSPSTAT = 0;
  1907  00079A  6AC7               	clrf	4039,c	;volatile
  1908                           
  1909                           ;misc.c: 141: SSPCON1 = 0x32;
  1910  00079C  0E32               	movlw	50
  1911  00079E  6EC6               	movwf	4038,c	;volatile
  1912                           
  1913                           ; BSR set to: 1
  1914                           ;misc.c: 144: INTCONbits.PEIE = 1;
  1915  0007A0  8CF2               	bsf	intcon,6,c	;volatile
  1916                           
  1917                           ; BSR set to: 1
  1918  0007A2  0C32               	retlw	50
  1919  0007A4                     __end_of_InitializeSystem:
  1920                           	opt stack 0
  1921  0007A4                     PL10:
  1922                           	opt stack 21
  1923  0007A4  0E92               	movlw	146	;volatile
  1924  0007A6  6F80               	movwf	MTouchSetSensor@tris& (0+255),b
  1925  0007A8  0E0F               	movlw	15	;volatile
  1926  0007AA  6F83               	movwf	(MTouchSetSensor@lat+1)& (0+255),b
  1927  0007AC  0E89               	movlw	137	;volatile
  1928  0007AE  6F82               	movwf	MTouchSetSensor@lat& (0+255),b
  1929  0007B0  0C89               	retlw	137
  1930  0007B2                     __end_ofPL10:
  1931                           	opt stack 0
  1932  0007B2                     PL12:
  1933                           	opt stack 21
  1934  0007B2  6F85               	movwf	MTouchSetSensor@channelNumber& (0+255),b
  1935  0007B4  6987               	setf	(MTouchSetSensor@threshold+1)& (0+255),b
  1936  0007B6  6986               	setf	MTouchSetSensor@threshold& (0+255),b
  1937  0007B8  6989               	setf	(MTouchSetSensor@oversampling+1)& (0+255),b
  1938  0007BA  6988               	setf	MTouchSetSensor@oversampling& (0+255),b
  1939  0007BC  698A               	setf	MTouchSetSensor@chargeDelay& (0+255),b
  1940  0007BE  0012               	return	
  1941  0007C0                     __end_ofPL12:
  1942                           	opt stack 0
  1943                           tblptru	equ	0xFF8
  1944                           tblptrh	equ	0xFF7
  1945                           tblptrl	equ	0xFF6
  1946                           tablat	equ	0xFF5
  1947                           prodh	equ	0xFF4
  1948                           prodl	equ	0xFF3
  1949                           intcon	equ	0xFF2
  1950                           postinc0	equ	0xFEE
  1951                           wreg	equ	0xFE8
  1952                           postinc1	equ	0xFE6
  1953                           postdec1	equ	0xFE5
  1954                           fsr1h	equ	0xFE2
  1955                           fsr1l	equ	0xFE1
  1956                           indf2	equ	0xFDF
  1957                           postinc2	equ	0xFDE
  1958                           postdec2	equ	0xFDD
  1959                           fsr2h	equ	0xFDA
  1960                           fsr2l	equ	0xFD9
  1961                           status	equ	0xFD8
  1962                           
  1963 ;; *************** function _uart16_init *****************
  1964 ;; Defined at:
  1965 ;;		line 27 in file "../lib/usart.c"
  1966 ;; Parameters:    Size  Location     Type
  1967 ;;		None
  1968 ;; Auto vars:     Size  Location     Type
  1969 ;;		None
  1970 ;; Return value:  Size  Location     Type
  1971 ;;		None               void
  1972 ;; Registers used:
  1973 ;;		wreg, status,2
  1974 ;; Tracked objects:
  1975 ;;		On entry : F/1
  1976 ;;		On exit  : F/1
  1977 ;;		Unchanged: F/0
  1978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1982 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1983 ;;Total ram usage:        0 bytes
  1984 ;; Hardware stack levels used:    1
  1985 ;; Hardware stack levels required when called:    8
  1986 ;; This function calls:
  1987 ;;		Nothing
  1988 ;; This function is called by:
  1989 ;;		_InitializeSystem
  1990 ;; This function uses a non-reentrant model
  1991 ;;
  1992                           
  1993                           	psect	text5
  1994  001144                     __ptext5:
  1995                           	opt stack 0
  1996  001144                     _uart16_init:
  1997                           	opt stack 21
  1998                           
  1999                           ; BSR set to: 1
  2000                           ;usart.c: 29: SPBRG = ((64000000ul)/(16UL * 19200))-1;
  2001                           
  2002                           ; BSR set to: 1
  2003                           ;incstack = 0
  2004  001144  0ECF               	movlw	207
  2005  001146  6EAF               	movwf	4015,c	;volatile
  2006                           
  2007                           ; BSR set to: 1
  2008                           ;usart.c: 30: BRGH1 = 1;
  2009  001148  84AC               	bsf	4012,2,c	;volatile
  2010                           
  2011                           ; BSR set to: 1
  2012                           ;usart.c: 34: BRG161 = 0;
  2013  00114A  96B8               	bcf	4024,3,c	;volatile
  2014                           
  2015                           ; BSR set to: 1
  2016                           ;usart.c: 37: SYNC1 = 0;
  2017  00114C  98AC               	bcf	4012,4,c	;volatile
  2018                           
  2019                           ; BSR set to: 1
  2020                           ;usart.c: 38: SPEN1 = 1;
  2021  00114E  8EAB               	bsf	4011,7,c	;volatile
  2022                           
  2023                           ; BSR set to: 1
  2024                           ;usart.c: 39: CREN1 = 1;
  2025  001150  88AB               	bsf	4011,4,c	;volatile
  2026                           
  2027                           ; BSR set to: 1
  2028                           ;usart.c: 40: SREN1 = 0;
  2029  001152  9AAB               	bcf	4011,5,c	;volatile
  2030                           
  2031                           ; BSR set to: 1
  2032                           ;usart.c: 41: TXIE = 0;
  2033  001154  989D               	bcf	3997,4,c	;volatile
  2034                           
  2035                           ; BSR set to: 1
  2036                           ;usart.c: 42: RCIE = 0;
  2037  001156  9A9D               	bcf	3997,5,c	;volatile
  2038                           
  2039                           ; BSR set to: 1
  2040                           ;usart.c: 43: TX91 = 0;
  2041  001158  9CAC               	bcf	4012,6,c	;volatile
  2042                           
  2043                           ; BSR set to: 1
  2044                           ;usart.c: 44: RX91 = 0;
  2045  00115A  9CAB               	bcf	4011,6,c	;volatile
  2046                           
  2047                           ; BSR set to: 1
  2048                           ;usart.c: 45: TXEN1 = 0;
  2049  00115C  9AAC               	bcf	4012,5,c	;volatile
  2050                           
  2051                           ; BSR set to: 1
  2052                           ;usart.c: 46: TXEN1 = 1;
  2053  00115E  8AAC               	bsf	4012,5,c	;volatile
  2054                           
  2055                           ; BSR set to: 1
  2056  001160  0CCF               	retlw	207
  2057  001162                     __end_of_uart16_init:
  2058                           	opt stack 0
  2059                           tblptru	equ	0xFF8
  2060                           tblptrh	equ	0xFF7
  2061                           tblptrl	equ	0xFF6
  2062                           tablat	equ	0xFF5
  2063                           prodh	equ	0xFF4
  2064                           prodl	equ	0xFF3
  2065                           intcon	equ	0xFF2
  2066                           postinc0	equ	0xFEE
  2067                           wreg	equ	0xFE8
  2068                           postinc1	equ	0xFE6
  2069                           postdec1	equ	0xFE5
  2070                           fsr1h	equ	0xFE2
  2071                           fsr1l	equ	0xFE1
  2072                           indf2	equ	0xFDF
  2073                           postinc2	equ	0xFDE
  2074                           postdec2	equ	0xFDD
  2075                           fsr2h	equ	0xFDA
  2076                           fsr2l	equ	0xFD9
  2077                           status	equ	0xFD8
  2078                           
  2079 ;; *************** function _MTouchSetSensor *****************
  2080 ;; Defined at:
  2081 ;;		line 78 in file "../lib/mTouchCap/mTouchSensor.c"
  2082 ;; Parameters:    Size  Location     Type
  2083 ;;  sensorNumber    1    wreg     unsigned char 
  2084 ;;  tris            2    0[BANK1 ] PTR volatile unsigned ch
  2085 ;;		 -> TRISE(1), TRISA(1), 
  2086 ;;  lat             2    2[BANK1 ] PTR volatile unsigned ch
  2087 ;;		 -> LATE(1), LATA(1), 
  2088 ;;  ioBitNumber     1    4[BANK1 ] unsigned char 
  2089 ;;  channelNumbe    1    5[BANK1 ] unsigned char 
  2090 ;;  threshold       2    6[BANK1 ] short 
  2091 ;;  oversampling    2    8[BANK1 ] short 
  2092 ;;  chargeDelay     1   10[BANK1 ] char 
  2093 ;; Auto vars:     Size  Location     Type
  2094 ;;  sensorNumber    1   13[BANK1 ] unsigned char 
  2095 ;;  pSensor         2   14[BANK1 ] PTR struct tag_SENSOR
  2096 ;;		 -> sensors(192), 
  2097 ;; Return value:  Size  Location     Type
  2098 ;;		None               void
  2099 ;; Registers used:
  2100 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2101 ;; Tracked objects:
  2102 ;;		On entry : F/1
  2103 ;;		On exit  : F/1
  2104 ;;		Unchanged: 0/0
  2105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2106 ;;      Params:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2107 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2108 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2109 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2110 ;;Total ram usage:       16 bytes
  2111 ;; Hardware stack levels used:    1
  2112 ;; Hardware stack levels required when called:    8
  2113 ;; This function calls:
  2114 ;;		Nothing
  2115 ;; This function is called by:
  2116 ;;		_InitializeSystem
  2117 ;; This function uses a non-reentrant model
  2118 ;;
  2119                           
  2120                           	psect	text6
  2121  00094E                     __ptext6:
  2122                           	opt stack 0
  2123  00094E                     _MTouchSetSensor:
  2124                           	opt stack 21
  2125                           
  2126                           ; BSR set to: 1
  2127                           ;incstack = 0
  2128                           ;MTouchSetSensor@sensorNumber stored from wreg
  2129  00094E  6F8D               	movwf	MTouchSetSensor@sensorNumber& (0+255),b
  2130                           
  2131                           ; BSR set to: 1
  2132                           ;mTouchSensor.c: 81: SENSOR* pSensor;
  2133                           ;mTouchSensor.c: 83: pSensor = (SENSOR*)sensors + sensorNumber;
  2134  000950  518D               	movf	MTouchSetSensor@sensorNumber& (0+255),w,b
  2135  000952  0D20               	mullw	32
  2136  000954  0E00               	movlw	low _sensors	;volatile
  2137  000956  24F3               	addwf	prodl,w,c
  2138  000958  0101               	movlb	1	; () banked
  2139  00095A  6F8E               	movwf	MTouchSetSensor@pSensor& (0+255),b
  2140  00095C  0E02               	movlw	high _sensors	;volatile
  2141  00095E  20F4               	addwfc	prodh,w,c
  2142  000960  6F8F               	movwf	(MTouchSetSensor@pSensor+1)& (0+255),b
  2143                           
  2144                           ; BSR set to: 1
  2145                           ;mTouchSensor.c: 85: if(threshold > 0)
  2146  000962  5187               	movf	(MTouchSetSensor@threshold+1)& (0+255),w,b
  2147  000964  0A80               	xorlw	128
  2148  000966  0F80               	addlw	-128
  2149  000968  0E01               	movlw	1
  2150  00096A  B4D8               	btfsc	status,2,c
  2151  00096C  5D86               	subwf	MTouchSetSensor@threshold& (0+255),w,b
  2152  00096E  E31A               	bnc	l3760
  2153                           
  2154                           ; BSR set to: 1
  2155                           ;mTouchSensor.c: 86: {
  2156                           ;mTouchSensor.c: 87: pSensor->pressThreshold = threshold;
  2157  000970  EE20 F012          	lfsr	2,18
  2158  000974  518E               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  2159  000976  26D9               	addwf	fsr2l,f,c
  2160  000978  518F               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  2161  00097A  22DA               	addwfc	fsr2h,f,c
  2162  00097C  C186  FFDE         	movff	MTouchSetSensor@threshold,postinc2
  2163  000980  C187  FFDD         	movff	MTouchSetSensor@threshold+1,postdec2
  2164                           
  2165                           ;mTouchSensor.c: 88: pSensor->releaseThreshold = threshold>>1;
  2166  000984  3587               	rlcf	(MTouchSetSensor@threshold+1)& (0+255),w,b
  2167  000986  3187               	rrcf	(MTouchSetSensor@threshold+1)& (0+255),w,b
  2168  000988  6F8C               	movwf	(??_MTouchSetSensor+1)& (0+255),b
  2169  00098A  3186               	rrcf	MTouchSetSensor@threshold& (0+255),w,b
  2170  00098C  6F8B               	movwf	??_MTouchSetSensor& (0+255),b
  2171  00098E  EE20 F014          	lfsr	2,20
  2172  000992  518E               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  2173  000994  26D9               	addwf	fsr2l,f,c
  2174  000996  518F               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  2175  000998  22DA               	addwfc	fsr2h,f,c
  2176  00099A  C18B  FFDE         	movff	??_MTouchSetSensor,postinc2
  2177  00099E  C18C  FFDD         	movff	??_MTouchSetSensor+1,postdec2
  2178                           
  2179                           ;mTouchSensor.c: 89: }else{
  2180  0009A2  D012               	goto	l78
  2181  0009A4                     l3760:
  2182                           
  2183                           ; BSR set to: 1
  2184                           ;mTouchSensor.c: 90: pSensor->pressThreshold = 150;
  2185  0009A4  EE20 F012          	lfsr	2,18
  2186  0009A8  518E               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  2187  0009AA  26D9               	addwf	fsr2l,f,c
  2188  0009AC  518F               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  2189  0009AE  22DA               	addwfc	fsr2h,f,c
  2190  0009B0  0E96               	movlw	150
  2191  0009B2  6EDE               	movwf	postinc2,c
  2192  0009B4  6ADD               	clrf	postdec2,c
  2193                           
  2194                           ;mTouchSensor.c: 91: pSensor->releaseThreshold = 150>>1;
  2195  0009B6  EE20 F014          	lfsr	2,20
  2196  0009BA  518E               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  2197  0009BC  26D9               	addwf	fsr2l,f,c
  2198  0009BE  518F               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  2199  0009C0  22DA               	addwfc	fsr2h,f,c
  2200  0009C2  0E4B               	movlw	75
  2201  0009C4  6EDE               	movwf	postinc2,c
  2202  0009C6  6ADD               	clrf	postdec2,c
  2203  0009C8                     l78:
  2204                           
  2205                           ; BSR set to: 1
  2206                           ;mTouchSensor.c: 92: }
  2207                           ;mTouchSensor.c: 93: pSensor->trisReg = tris;
  2208  0009C8  EE20 F008          	lfsr	2,8
  2209  0009CC  518E               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  2210  0009CE  26D9               	addwf	fsr2l,f,c
  2211  0009D0  518F               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  2212  0009D2  22DA               	addwfc	fsr2h,f,c
  2213  0009D4  C180  FFDE         	movff	MTouchSetSensor@tris,postinc2
  2214  0009D8  C181  FFDD         	movff	MTouchSetSensor@tris+1,postdec2
  2215                           
  2216                           ;mTouchSensor.c: 94: pSensor->latReg = lat;
  2217  0009DC  EE20 F00A          	lfsr	2,10
  2218  0009E0  518E               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  2219  0009E2  26D9               	addwf	fsr2l,f,c
  2220  0009E4  518F               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  2221  0009E6  22DA               	addwfc	fsr2h,f,c
  2222  0009E8  C182  FFDE         	movff	MTouchSetSensor@lat,postinc2
  2223  0009EC  C183  FFDD         	movff	MTouchSetSensor@lat+1,postdec2
  2224                           
  2225                           ;mTouchSensor.c: 95: pSensor->ioMask = 1<<ioBitNumber;
  2226  0009F0  EE20 F01D          	lfsr	2,29
  2227  0009F4  518E               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  2228  0009F6  26D9               	addwf	fsr2l,f,c
  2229  0009F8  518F               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  2230  0009FA  22DA               	addwfc	fsr2h,f,c
  2231  0009FC  C184  F18B         	movff	MTouchSetSensor@ioBitNumber,??_MTouchSetSensor
  2232  000A00  0E01               	movlw	1
  2233  000A02  6F8C               	movwf	(??_MTouchSetSensor+1)& (0+255),b
  2234  000A04  2B8B               	incf	??_MTouchSetSensor& (0+255),f,b
  2235  000A06  D002               	goto	u2394
  2236  000A08                     u2395:
  2237  000A08  90D8               	bcf	status,0,c
  2238  000A0A  378C               	rlcf	(??_MTouchSetSensor+1)& (0+255),f,b
  2239  000A0C                     u2394:
  2240  000A0C  2F8B               	decfsz	??_MTouchSetSensor& (0+255),f,b
  2241  000A0E  D7FC               	goto	u2395
  2242  000A10  518C               	movf	(??_MTouchSetSensor+1)& (0+255),w,b
  2243  000A12  6EDF               	movwf	indf2,c
  2244                           
  2245                           ;mTouchSensor.c: 96: pSensor->channelNumber = channelNumber;
  2246  000A14  EE20 F01E          	lfsr	2,30
  2247  000A18  518E               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  2248  000A1A  26D9               	addwf	fsr2l,f,c
  2249  000A1C  518F               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  2250  000A1E  22DA               	addwfc	fsr2h,f,c
  2251  000A20  C185  FFDF         	movff	MTouchSetSensor@channelNumber,indf2
  2252                           
  2253                           ;mTouchSensor.c: 97: pSensor->state = SENSOR_INITIALIZING;
  2254  000A24  EE20 F01C          	lfsr	2,28
  2255  000A28  518E               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  2256  000A2A  26D9               	addwf	fsr2l,f,c
  2257  000A2C  518F               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  2258  000A2E  22DA               	addwfc	fsr2h,f,c
  2259  000A30  6ADF               	clrf	indf2,c
  2260                           
  2261                           ;mTouchSensor.c: 98: pSensor->debounceCount = 8 + 50;
  2262  000A32  EE20 F01A          	lfsr	2,26
  2263  000A36  518E               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  2264  000A38  26D9               	addwf	fsr2l,f,c
  2265  000A3A  518F               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  2266  000A3C  22DA               	addwfc	fsr2h,f,c
  2267  000A3E  0E3A               	movlw	58
  2268  000A40  6EDE               	movwf	postinc2,c
  2269  000A42  6ADD               	clrf	postdec2,c
  2270                           
  2271                           ; BSR set to: 1
  2272                           ;mTouchSensor.c: 101: if(oversampling > 0)
  2273  000A44  5189               	movf	(MTouchSetSensor@oversampling+1)& (0+255),w,b
  2274  000A46  0A80               	xorlw	128
  2275  000A48  0F80               	addlw	-128
  2276  000A4A  0E01               	movlw	1
  2277  000A4C  B4D8               	btfsc	status,2,c
  2278  000A4E  5D88               	subwf	MTouchSetSensor@oversampling& (0+255),w,b
  2279  000A50  E30B               	bnc	l3766
  2280                           
  2281                           ; BSR set to: 1
  2282                           ;mTouchSensor.c: 102: {
  2283                           ;mTouchSensor.c: 103: pSensor->samplesNumber = oversampling;
  2284  000A52  EE20 F010          	lfsr	2,16
  2285  000A56  518E               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  2286  000A58  26D9               	addwf	fsr2l,f,c
  2287  000A5A  518F               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  2288  000A5C  22DA               	addwfc	fsr2h,f,c
  2289  000A5E  C188  FFDE         	movff	MTouchSetSensor@oversampling,postinc2
  2290  000A62  C189  FFDD         	movff	MTouchSetSensor@oversampling+1,postdec2
  2291                           
  2292                           ;mTouchSensor.c: 104: }else{
  2293  000A66  D009               	goto	l3768
  2294  000A68                     l3766:
  2295                           
  2296                           ; BSR set to: 1
  2297                           ;mTouchSensor.c: 105: pSensor->samplesNumber = 32;
  2298  000A68  EE20 F010          	lfsr	2,16
  2299  000A6C  518E               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  2300  000A6E  26D9               	addwf	fsr2l,f,c
  2301  000A70  518F               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  2302  000A72  22DA               	addwfc	fsr2h,f,c
  2303  000A74  0E20               	movlw	32
  2304  000A76  6EDE               	movwf	postinc2,c
  2305  000A78  6ADD               	clrf	postdec2,c
  2306  000A7A                     l3768:
  2307                           
  2308                           ; BSR set to: 1
  2309                           ;mTouchSensor.c: 106: }
  2310                           ;mTouchSensor.c: 108: pSensor->sampleCounter = pSensor->samplesNumber;
  2311  000A7A  EE20 F010          	lfsr	2,16
  2312  000A7E  518E               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  2313  000A80  26D9               	addwf	fsr2l,f,c
  2314  000A82  518F               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  2315  000A84  22DA               	addwfc	fsr2h,f,c
  2316  000A86  EE10 F00E          	lfsr	1,14
  2317  000A8A  518E               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  2318  000A8C  26E1               	addwf	fsr1l,f,c
  2319  000A8E  518F               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  2320  000A90  22E2               	addwfc	fsr1h,f,c
  2321  000A92  CFDE FFE6          	movff	postinc2,postinc1
  2322  000A96  CFDD FFE5          	movff	postdec2,postdec1
  2323                           
  2324                           ; BSR set to: 1
  2325                           ;mTouchSensor.c: 119: pSensor->delta = 0;
  2326  000A9A  EE20 F018          	lfsr	2,24
  2327  000A9E  518E               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  2328  000AA0  26D9               	addwf	fsr2l,f,c
  2329  000AA2  518F               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  2330  000AA4  22DA               	addwfc	fsr2h,f,c
  2331  000AA6  6ADE               	clrf	postinc2,c
  2332  000AA8  6ADD               	clrf	postdec2,c
  2333                           
  2334                           ; BSR set to: 1
  2335                           ;mTouchSensor.c: 120: pSensor->oversampleFilterData = 0;
  2336  000AAA  EE20 F004          	lfsr	2,4
  2337  000AAE  518E               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  2338  000AB0  26D9               	addwf	fsr2l,f,c
  2339  000AB2  518F               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  2340  000AB4  22DA               	addwfc	fsr2h,f,c
  2341  000AB6  6ADE               	clrf	postinc2,c
  2342  000AB8  6ADE               	clrf	postinc2,c
  2343  000ABA  6ADE               	clrf	postinc2,c
  2344  000ABC  6ADD               	clrf	postdec2,c
  2345                           
  2346                           ; BSR set to: 1
  2347                           ;mTouchSensor.c: 121: pSensor->decimateFilterData = 0;
  2348  000ABE  EE20 F00C          	lfsr	2,12
  2349  000AC2  518E               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  2350  000AC4  26D9               	addwf	fsr2l,f,c
  2351  000AC6  518F               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  2352  000AC8  22DA               	addwfc	fsr2h,f,c
  2353  000ACA  0E00               	movlw	0
  2354  000ACC  6EDE               	movwf	postinc2,c
  2355  000ACE  6EDD               	movwf	postdec2,c
  2356                           
  2357                           ; BSR set to: 1
  2358  000AD0  0C00               	retlw	0
  2359  000AD2                     __end_of_MTouchSetSensor:
  2360                           	opt stack 0
  2361                           tblptru	equ	0xFF8
  2362                           tblptrh	equ	0xFF7
  2363                           tblptrl	equ	0xFF6
  2364                           tablat	equ	0xFF5
  2365                           prodh	equ	0xFF4
  2366                           prodl	equ	0xFF3
  2367                           intcon	equ	0xFF2
  2368                           postinc0	equ	0xFEE
  2369                           wreg	equ	0xFE8
  2370                           postinc1	equ	0xFE6
  2371                           postdec1	equ	0xFE5
  2372                           fsr1h	equ	0xFE2
  2373                           fsr1l	equ	0xFE1
  2374                           indf2	equ	0xFDF
  2375                           postinc2	equ	0xFDE
  2376                           postdec2	equ	0xFDD
  2377                           fsr2h	equ	0xFDA
  2378                           fsr2l	equ	0xFD9
  2379                           status	equ	0xFD8
  2380                           
  2381 ;; *************** function _MTouchSetButton *****************
  2382 ;; Defined at:
  2383 ;;		line 68 in file "../lib/mTouchCap/mTouchButton.c"
  2384 ;; Parameters:    Size  Location     Type
  2385 ;;  buttonNumber    1    wreg     unsigned char 
  2386 ;;  sensorNumber    1    0[BANK1 ] unsigned char 
  2387 ;;  decode          1    1[BANK1 ] unsigned char 
  2388 ;; Auto vars:     Size  Location     Type
  2389 ;;  buttonNumber    1    4[BANK1 ] unsigned char 
  2390 ;;  pButton         1    5[BANK1 ] PTR struct tag_MTOUCHBUT
  2391 ;;		 -> buttons(80), 
  2392 ;; Return value:  Size  Location     Type
  2393 ;;		None               void
  2394 ;; Registers used:
  2395 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2396 ;; Tracked objects:
  2397 ;;		On entry : F/1
  2398 ;;		On exit  : F/1
  2399 ;;		Unchanged: 0/0
  2400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2401 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2402 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2403 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2404 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2405 ;;Total ram usage:        6 bytes
  2406 ;; Hardware stack levels used:    1
  2407 ;; Hardware stack levels required when called:    8
  2408 ;; This function calls:
  2409 ;;		Nothing
  2410 ;; This function is called by:
  2411 ;;		_InitializeSystem
  2412 ;; This function uses a non-reentrant model
  2413 ;;
  2414                           
  2415                           	psect	text7
  2416  000D56                     __ptext7:
  2417                           	opt stack 0
  2418  000D56                     _MTouchSetButton:
  2419                           	opt stack 21
  2420                           
  2421                           ; BSR set to: 1
  2422                           ;incstack = 0
  2423                           ;MTouchSetButton@buttonNumber stored from wreg
  2424  000D56  6F84               	movwf	MTouchSetButton@buttonNumber& (0+255),b
  2425                           
  2426                           ; BSR set to: 1
  2427                           ;mTouchButton.c: 69: MTOUCHBUTTON* pButton;
  2428                           ;mTouchButton.c: 71: pButton = (MTOUCHBUTTON*)buttons + buttonNumber;
  2429  000D58  5184               	movf	MTouchSetButton@buttonNumber& (0+255),w,b
  2430  000D5A  0D08               	mullw	8
  2431  000D5C  50F3               	movf	prodl,w,c
  2432  000D5E  0F77               	addlw	low _buttons
  2433  000D60  0101               	movlb	1	; () banked
  2434  000D62  6F85               	movwf	MTouchSetButton@pButton& (0+255),b
  2435                           
  2436                           ; BSR set to: 1
  2437                           ;mTouchButton.c: 73: pButton->state = CONTROL_RELEASED | CONTROL_IDLE;
  2438  000D64  5185               	movf	MTouchSetButton@pButton& (0+255),w,b
  2439  000D66  6ED9               	movwf	fsr2l,c
  2440  000D68  6ADA               	clrf	fsr2h,c
  2441  000D6A  0E82               	movlw	130
  2442  000D6C  6EDF               	movwf	indf2,c
  2443                           
  2444                           ; BSR set to: 1
  2445                           ;mTouchButton.c: 74: pButton->curState = CONTROL_RELEASED;
  2446  000D6E  5185               	movf	MTouchSetButton@pButton& (0+255),w,b
  2447  000D70  6ED9               	movwf	fsr2l,c
  2448  000D72  6ADA               	clrf	fsr2h,c
  2449  000D74  2AD9               	incf	fsr2l,f,c
  2450  000D76  0E02               	movlw	2
  2451  000D78  6EDF               	movwf	indf2,c
  2452                           
  2453                           ; BSR set to: 1
  2454                           ;mTouchButton.c: 75: pButton->decode = decode;
  2455  000D7A  5185               	movf	MTouchSetButton@pButton& (0+255),w,b
  2456  000D7C  6ED9               	movwf	fsr2l,c
  2457  000D7E  6ADA               	clrf	fsr2h,c
  2458  000D80  0E02               	movlw	2
  2459  000D82  26D9               	addwf	fsr2l,f,c
  2460  000D84  C181  FFDF         	movff	MTouchSetButton@decode,indf2
  2461                           
  2462                           ; BSR set to: 1
  2463                           ;mTouchButton.c: 76: pButton->pSensor = (SENSOR*)sensors + sensorNumber;
  2464  000D88  5180               	movf	MTouchSetButton@sensorNumber& (0+255),w,b
  2465  000D8A  0D20               	mullw	32
  2466  000D8C  0E00               	movlw	low _sensors	;volatile
  2467  000D8E  6F82               	movwf	??_MTouchSetButton& (0+255),b
  2468  000D90  0E02               	movlw	high _sensors	;volatile
  2469  000D92  6F83               	movwf	(??_MTouchSetButton+1)& (0+255),b
  2470  000D94  50F3               	movf	prodl,w,c
  2471  000D96  2782               	addwf	??_MTouchSetButton& (0+255),f,b
  2472  000D98  50F4               	movf	prodh,w,c
  2473  000D9A  2383               	addwfc	(??_MTouchSetButton+1)& (0+255),f,b
  2474  000D9C  5185               	movf	MTouchSetButton@pButton& (0+255),w,b
  2475  000D9E  6ED9               	movwf	fsr2l,c
  2476  000DA0  6ADA               	clrf	fsr2h,c
  2477  000DA2  0E04               	movlw	4
  2478  000DA4  26D9               	addwf	fsr2l,f,c
  2479  000DA6  C182  FFDE         	movff	??_MTouchSetButton,postinc2
  2480  000DAA  C183  FFDD         	movff	??_MTouchSetButton+1,postdec2
  2481                           
  2482                           ; BSR set to: 1
  2483                           ;mTouchButton.c: 77: pButton->pressCounter = 6400;
  2484  000DAE  5185               	movf	MTouchSetButton@pButton& (0+255),w,b
  2485  000DB0  6ED9               	movwf	fsr2l,c
  2486  000DB2  6ADA               	clrf	fsr2h,c
  2487  000DB4  0E06               	movlw	6
  2488  000DB6  26D9               	addwf	fsr2l,f,c
  2489  000DB8  6ADE               	clrf	postinc2,c
  2490  000DBA  0E19               	movlw	25
  2491  000DBC  6EDD               	movwf	postdec2,c
  2492                           
  2493                           ; BSR set to: 1
  2494                           ;mTouchButton.c: 78: pButton->prevSensorState = SENSOR_RELEASED;
  2495  000DBE  5185               	movf	MTouchSetButton@pButton& (0+255),w,b
  2496  000DC0  6ED9               	movwf	fsr2l,c
  2497  000DC2  6ADA               	clrf	fsr2h,c
  2498  000DC4  0E03               	movlw	3
  2499  000DC6  26D9               	addwf	fsr2l,f,c
  2500  000DC8  0E01               	movlw	1
  2501  000DCA  6EDF               	movwf	indf2,c
  2502                           
  2503                           ; BSR set to: 1
  2504  000DCC  0C01               	retlw	1
  2505  000DCE                     __end_of_MTouchSetButton:
  2506                           	opt stack 0
  2507                           tblptru	equ	0xFF8
  2508                           tblptrh	equ	0xFF7
  2509                           tblptrl	equ	0xFF6
  2510                           tablat	equ	0xFF5
  2511                           prodh	equ	0xFF4
  2512                           prodl	equ	0xFF3
  2513                           intcon	equ	0xFF2
  2514                           postinc0	equ	0xFEE
  2515                           wreg	equ	0xFE8
  2516                           postinc1	equ	0xFE6
  2517                           postdec1	equ	0xFE5
  2518                           fsr1h	equ	0xFE2
  2519                           fsr1l	equ	0xFE1
  2520                           indf2	equ	0xFDF
  2521                           postinc2	equ	0xFDE
  2522                           postdec2	equ	0xFDD
  2523                           fsr2h	equ	0xFDA
  2524                           fsr2l	equ	0xFD9
  2525                           status	equ	0xFD8
  2526                           
  2527 ;; *************** function _MTouchInit *****************
  2528 ;; Defined at:
  2529 ;;		line 125 in file "../lib/mTouchCap/mTouchSensor.c"
  2530 ;; Parameters:    Size  Location     Type
  2531 ;;		None
  2532 ;; Auto vars:     Size  Location     Type
  2533 ;;		None
  2534 ;; Return value:  Size  Location     Type
  2535 ;;		None               void
  2536 ;; Registers used:
  2537 ;;		wreg, status,2
  2538 ;; Tracked objects:
  2539 ;;		On entry : F/F
  2540 ;;		On exit  : F/F
  2541 ;;		Unchanged: E/0
  2542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2546 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2547 ;;Total ram usage:        0 bytes
  2548 ;; Hardware stack levels used:    1
  2549 ;; Hardware stack levels required when called:    8
  2550 ;; This function calls:
  2551 ;;		Nothing
  2552 ;; This function is called by:
  2553 ;;		_InitializeSystem
  2554 ;; This function uses a non-reentrant model
  2555 ;;
  2556                           
  2557                           	psect	text8
  2558  001162                     __ptext8:
  2559                           	opt stack 0
  2560  001162                     _MTouchInit:
  2561                           	opt stack 21
  2562                           
  2563                           ; BSR set to: 15
  2564                           ;mTouchSensor.c: 128: {ADCON0=0; ADCON1=0; ADCON2=0; ADCON2bits.ADFM=1; ADCON2bits.ACQT=
      +                          1; ADCON2bits.ADCS = 1; ADCON0bits.ADON = 1;};
  2565                           
  2566                           ; BSR set to: 1
  2567                           ;incstack = 0
  2568  001162  6AC2               	clrf	4034,c	;volatile
  2569  001164  6AC1               	clrf	4033,c	;volatile
  2570  001166  6AC0               	clrf	4032,c	;volatile
  2571  001168  8EC0               	bsf	4032,7,c	;volatile
  2572                           
  2573                           ; BSR set to: 15
  2574  00116A  50C0               	movf	4032,w,c	;volatile
  2575  00116C  0BC7               	andlw	-57
  2576  00116E  0908               	iorlw	8
  2577  001170  6EC0               	movwf	4032,c	;volatile
  2578  001172  50C0               	movf	4032,w,c	;volatile
  2579  001174  0BF8               	andlw	-8
  2580  001176  0901               	iorlw	1
  2581  001178  6EC0               	movwf	4032,c	;volatile
  2582                           
  2583                           ; BSR set to: 15
  2584  00117A  80C2               	bsf	4034,0,c	;volatile
  2585                           
  2586                           ; BSR set to: 15
  2587  00117C  0012               	return	
  2588  00117E                     __end_of_MTouchInit:
  2589                           	opt stack 0
  2590                           tblptru	equ	0xFF8
  2591                           tblptrh	equ	0xFF7
  2592                           tblptrl	equ	0xFF6
  2593                           tablat	equ	0xFF5
  2594                           prodh	equ	0xFF4
  2595                           prodl	equ	0xFF3
  2596                           intcon	equ	0xFF2
  2597                           postinc0	equ	0xFEE
  2598                           wreg	equ	0xFE8
  2599                           postinc1	equ	0xFE6
  2600                           postdec1	equ	0xFE5
  2601                           fsr1h	equ	0xFE2
  2602                           fsr1l	equ	0xFE1
  2603                           indf2	equ	0xFDF
  2604                           postinc2	equ	0xFDE
  2605                           postdec2	equ	0xFDD
  2606                           fsr2h	equ	0xFDA
  2607                           fsr2l	equ	0xFD9
  2608                           status	equ	0xFD8
  2609                           
  2610 ;; *************** function _InitMessages *****************
  2611 ;; Defined at:
  2612 ;;		line 20 in file "../lib/messages.c"
  2613 ;; Parameters:    Size  Location     Type
  2614 ;;		None
  2615 ;; Auto vars:     Size  Location     Type
  2616 ;;  i               1    0[BANK1 ] unsigned char 
  2617 ;; Return value:  Size  Location     Type
  2618 ;;		None               void
  2619 ;; Registers used:
  2620 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2621 ;; Tracked objects:
  2622 ;;		On entry : 0/0
  2623 ;;		On exit  : F/1
  2624 ;;		Unchanged: 0/0
  2625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2627 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2629 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2630 ;;Total ram usage:        1 bytes
  2631 ;; Hardware stack levels used:    1
  2632 ;; Hardware stack levels required when called:    8
  2633 ;; This function calls:
  2634 ;;		Nothing
  2635 ;; This function is called by:
  2636 ;;		_main
  2637 ;; This function uses a non-reentrant model
  2638 ;;
  2639                           
  2640                           	psect	text9
  2641  000FE6                     __ptext9:
  2642                           	opt stack 0
  2643  000FE6                     _InitMessages:
  2644                           	opt stack 22
  2645                           
  2646                           ;messages.c: 21: char i;
  2647                           ;messages.c: 23: for(i = 0; i < (10); i++){
  2648                           
  2649                           ; BSR set to: 15
  2650                           ;incstack = 0
  2651  000FE6  0101               	movlb	1	; () banked
  2652  000FE8  6B80               	clrf	InitMessages@i& (0+255),b
  2653  000FEA                     l3906:
  2654                           
  2655                           ; BSR set to: 1
  2656                           ;messages.c: 24: Messages[i] = MSG_PHASE_NONE;
  2657  000FEA  5180               	movf	InitMessages@i& (0+255),w,b
  2658  000FEC  0F60               	addlw	low _Messages	;volatile
  2659  000FEE  6ED9               	movwf	fsr2l,c
  2660  000FF0  6ADA               	clrf	fsr2h,c
  2661  000FF2  6ADF               	clrf	indf2,c
  2662                           
  2663                           ; BSR set to: 0
  2664  000FF4  0101               	movlb	1	; () banked
  2665  000FF6  2B80               	incf	InitMessages@i& (0+255),f,b
  2666                           
  2667                           ; BSR set to: 1
  2668  000FF8  0E09               	movlw	9
  2669  000FFA  6580               	cpfsgt	InitMessages@i& (0+255),b
  2670  000FFC  D7F6               	goto	l3906
  2671                           
  2672                           ; BSR set to: 1
  2673                           ;messages.c: 28: }
  2674                           ;messages.c: 31: for(i = 0; i < 1; i++)
  2675  000FFE  6B80               	clrf	InitMessages@i& (0+255),b
  2676  001000                     l3916:
  2677                           
  2678                           ; BSR set to: 1
  2679                           ;messages.c: 32: BroadcastMessages[i] = MSG_PHASE_NONE;
  2680  001000  5180               	movf	InitMessages@i& (0+255),w,b
  2681  001002  0F76               	addlw	low _BroadcastMessages	;volatile
  2682  001004  6ED9               	movwf	fsr2l,c
  2683  001006  6ADA               	clrf	fsr2h,c
  2684  001008  6ADF               	clrf	indf2,c
  2685                           
  2686                           ; BSR set to: 0
  2687  00100A  0101               	movlb	1	; () banked
  2688  00100C  2B80               	incf	InitMessages@i& (0+255),f,b
  2689                           
  2690                           ; BSR set to: 1
  2691  00100E  5180               	movf	InitMessages@i& (0+255),w,b
  2692  001010  E0F7               	bz	l3916
  2693                           
  2694                           ; BSR set to: 1
  2695                           ;messages.c: 36: for(i = 0; i < 4; i++)
  2696  001012  6B80               	clrf	InitMessages@i& (0+255),b
  2697  001014                     l3926:
  2698                           
  2699                           ; BSR set to: 1
  2700                           ;messages.c: 37: BSem[i] = 0;
  2701  001014  5180               	movf	InitMessages@i& (0+255),w,b
  2702  001016  0F6A               	addlw	low _BSem	;volatile
  2703  001018  6ED9               	movwf	fsr2l,c
  2704  00101A  6ADA               	clrf	fsr2h,c
  2705  00101C  6ADF               	clrf	indf2,c
  2706                           
  2707                           ; BSR set to: 0
  2708  00101E  0101               	movlb	1	; () banked
  2709  001020  2B80               	incf	InitMessages@i& (0+255),f,b
  2710                           
  2711                           ; BSR set to: 1
  2712  001022  0E03               	movlw	3
  2713  001024  6580               	cpfsgt	InitMessages@i& (0+255),b
  2714  001026  D7F6               	goto	l3926
  2715  001028  0C03               	retlw	3
  2716  00102A                     __end_of_InitMessages:
  2717                           	opt stack 0
  2718                           tblptru	equ	0xFF8
  2719                           tblptrh	equ	0xFF7
  2720                           tblptrl	equ	0xFF6
  2721                           tablat	equ	0xFF5
  2722                           prodh	equ	0xFF4
  2723                           prodl	equ	0xFF3
  2724                           intcon	equ	0xFF2
  2725                           postinc0	equ	0xFEE
  2726                           wreg	equ	0xFE8
  2727                           postinc1	equ	0xFE6
  2728                           postdec1	equ	0xFE5
  2729                           fsr1h	equ	0xFE2
  2730                           fsr1l	equ	0xFE1
  2731                           indf2	equ	0xFDF
  2732                           postinc2	equ	0xFDE
  2733                           postdec2	equ	0xFDD
  2734                           fsr2h	equ	0xFDA
  2735                           fsr2l	equ	0xFD9
  2736                           status	equ	0xFD8
  2737                           
  2738 ;; *************** function _Beep *****************
  2739 ;; Defined at:
  2740 ;;		line 202 in file "../isr.c"
  2741 ;; Parameters:    Size  Location     Type
  2742 ;;  ms10            1    wreg     unsigned char 
  2743 ;; Auto vars:     Size  Location     Type
  2744 ;;  ms10            1    0[BANK1 ] unsigned char 
  2745 ;; Return value:  Size  Location     Type
  2746 ;;		None               void
  2747 ;; Registers used:
  2748 ;;		wreg, status,2, status,0, prodl, prodh
  2749 ;; Tracked objects:
  2750 ;;		On entry : 0/1
  2751 ;;		On exit  : F/1
  2752 ;;		Unchanged: 0/0
  2753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2755 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2757 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2758 ;;Total ram usage:        1 bytes
  2759 ;; Hardware stack levels used:    1
  2760 ;; Hardware stack levels required when called:    8
  2761 ;; This function calls:
  2762 ;;		Nothing
  2763 ;; This function is called by:
  2764 ;;		_main
  2765 ;; This function uses a non-reentrant model
  2766 ;;
  2767                           
  2768                           	psect	text10
  2769  00117E                     __ptext10:
  2770                           	opt stack 0
  2771  00117E                     _Beep:
  2772                           	opt stack 22
  2773                           
  2774                           ; BSR set to: 1
  2775                           ;incstack = 0
  2776                           ;Beep@ms10 stored from wreg
  2777  00117E  0101               	movlb	1	; () banked
  2778  001180  6F80               	movwf	Beep@ms10& (0+255),b
  2779                           
  2780                           ; BSR set to: 1
  2781                           ;isr.c: 204: TRISAbits.TRISA4 = 0;
  2782  001182  9892               	bcf	3986,4,c	;volatile
  2783                           
  2784                           ; BSR set to: 1
  2785                           ;isr.c: 208: beep_timer = ms10 * 40;
  2786  001184  5180               	movf	Beep@ms10& (0+255),w,b
  2787  001186  0D28               	mullw	40
  2788  001188  CFF3 F070          	movff	prodl,_beep_timer	;volatile
  2789  00118C  CFF4 F071          	movff	prodh,_beep_timer+1	;volatile
  2790                           
  2791                           ; BSR set to: 1
  2792                           ;isr.c: 209: beep_count = 1;
  2793  001190  0E01               	movlw	1
  2794  001192  6E3C               	movwf	_beep_count,c	;volatile
  2795                           
  2796                           ; BSR set to: 1
  2797  001194  0C01               	retlw	1
  2798  001196                     __end_of_Beep:
  2799                           	opt stack 0
  2800                           tblptru	equ	0xFF8
  2801                           tblptrh	equ	0xFF7
  2802                           tblptrl	equ	0xFF6
  2803                           tablat	equ	0xFF5
  2804                           prodh	equ	0xFF4
  2805                           prodl	equ	0xFF3
  2806                           intcon	equ	0xFF2
  2807                           postinc0	equ	0xFEE
  2808                           wreg	equ	0xFE8
  2809                           postinc1	equ	0xFE6
  2810                           postdec1	equ	0xFE5
  2811                           fsr1h	equ	0xFE2
  2812                           fsr1l	equ	0xFE1
  2813                           indf2	equ	0xFDF
  2814                           postinc2	equ	0xFDE
  2815                           postdec2	equ	0xFDD
  2816                           fsr2h	equ	0xFDA
  2817                           fsr2l	equ	0xFD9
  2818                           status	equ	0xFD8
  2819                           
  2820 ;; *************** function _LO_ISR *****************
  2821 ;; Defined at:
  2822 ;;		line 87 in file "../isr.c"
  2823 ;; Parameters:    Size  Location     Type
  2824 ;;		None
  2825 ;; Auto vars:     Size  Location     Type
  2826 ;;  i               1   34[COMRAM] unsigned char 
  2827 ;;  lcData          1   33[COMRAM] unsigned char 
  2828 ;;  lcAdr           1   32[COMRAM] unsigned char 
  2829 ;; Return value:  Size  Location     Type
  2830 ;;		None               void
  2831 ;; Registers used:
  2832 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2833 ;; Tracked objects:
  2834 ;;		On entry : 0/0
  2835 ;;		On exit  : 0/0
  2836 ;;		Unchanged: 0/0
  2837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2839 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2840 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2841 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2842 ;;Total ram usage:       17 bytes
  2843 ;; Hardware stack levels used:    1
  2844 ;; Hardware stack levels required when called:    7
  2845 ;; This function calls:
  2846 ;;		_BSemOn
  2847 ;;		_Busy_eep
  2848 ;;		_Read_b_eep
  2849 ;;		_SendMessage
  2850 ;;		_Write_b_eep
  2851 ;;		_crc_mb
  2852 ;;		_crc_mb_check
  2853 ;;		_putbyte
  2854 ;;		_set_ee_default
  2855 ;;		_timed_getc
  2856 ;; This function is called by:
  2857 ;;		Interrupt level 1
  2858 ;; This function uses a non-reentrant model
  2859 ;;
  2860                           
  2861                           	psect	intcodelo
  2862  000018                     __pintcodelo:
  2863                           	opt stack 0
  2864  000018                     _LO_ISR:
  2865                           	opt stack 21
  2866                           
  2867                           ; BSR set to: 1
  2868                           ;incstack = 0
  2869  000018  CFD8 F018          	movff	status,??_LO_ISR+5
  2870  00001C  CFE8 F019          	movff	wreg,??_LO_ISR+6
  2871  000020  CFE0 F01A          	movff	bsr,??_LO_ISR+7
  2872  000024  CFD9 F01B          	movff	fsr2l,??_LO_ISR+8
  2873  000028  CFDA F01C          	movff	fsr2h,??_LO_ISR+9
  2874  00002C  CFF6 F01D          	movff	tblptrl,??_LO_ISR+10
  2875  000030  CFF7 F01E          	movff	tblptrh,??_LO_ISR+11
  2876  000034  CFF8 F01F          	movff	tblptru,??_LO_ISR+12
  2877  000038  CFF5 F020          	movff	tablat,??_LO_ISR+13
  2878                           
  2879                           ;isr.c: 89: char i;
  2880                           ;isr.c: 90: char lcData, lcAdr;
  2881                           ;isr.c: 95: __nop();
  2882  00003C  F000               	nop	
  2883                           
  2884                           ;isr.c: 97: if(RCIF && RCIE) {
  2885  00003E  BA9E               	btfsc	3998,5,c	;volatile
  2886  000040  AA9D               	btfss	3997,5,c	;volatile
  2887  000042  D1C3               	goto	i1l482
  2888                           
  2889                           ;isr.c: 101: RxTxBuff[0] = timed_getc();
  2890  000044  EC6B  F008         	call	_timed_getc	;wreg free
  2891  000048  0101               	movlb	1	; () banked
  2892  00004A  6F00               	movwf	_RxTxBuff& (0+255),b
  2893                           
  2894                           ; BSR set to: 1
  2895                           ;isr.c: 104: if(RxTxBuff[0] == 0xEA) {
  2896  00004C  5100               	movf	_RxTxBuff& (0+255),w,b
  2897  00004E  0AEA               	xorlw	234
  2898  000050  B4D8               	btfsc	status,2,c
  2899                           
  2900                           ; BSR set to: 1
  2901  000052  00FF               	reset		;# 
  2902                           
  2903                           ;isr.c: 106: }
  2904                           ;isr.c: 108: if((RxTxBuff[0] != 0x55)) goto error;
  2905  000054  5100               	movf	_RxTxBuff& (0+255),w,b
  2906  000056  0A55               	xorlw	85
  2907  000058  B4D8               	btfsc	status,2,c
  2908                           
  2909                           ; BSR set to: 1
  2910                           ;isr.c: 109: if((FERR1) || (OERR1) || timeout_error) goto error;
  2911  00005A  B4AB               	btfsc	4011,2,c	;volatile
  2912  00005C  D1AD               	goto	i1l407
  2913                           
  2914                           ; BSR set to: 1
  2915  00005E  B2AB               	btfsc	4011,1,c	;volatile
  2916  000060  D1AB               	goto	i1l407
  2917                           
  2918                           ; BSR set to: 1
  2919  000062  503F               	movf	_timeout_error,w,c	;volatile
  2920  000064  E001 D1A8          	bnz	i1l407
  2921                           
  2922                           ; BSR set to: 1
  2923                           ;isr.c: 111: RxTxBuff[1] = timed_getc();
  2924  000068  EC6B  F008         	call	_timed_getc	;wreg free
  2925  00006C  0101               	movlb	1	; () banked
  2926  00006E  6F01               	movwf	(_RxTxBuff+1)& (0+255),b
  2927                           
  2928                           ; BSR set to: 1
  2929                           ;isr.c: 112: if((FERR1) || (OERR1) || timeout_error) goto error;
  2930  000070  A4AB               	btfss	4011,2,c	;volatile
  2931                           
  2932                           ; BSR set to: 1
  2933  000072  B2AB               	btfsc	4011,1,c	;volatile
  2934  000074  D1A1               	goto	i1l407
  2935                           
  2936                           ; BSR set to: 1
  2937  000076  503F               	movf	_timeout_error,w,c	;volatile
  2938  000078  E001 D19E          	bnz	i1l407
  2939  00007C  D18F               	goto	i1l3494
  2940  00007E                     i1l3292:
  2941                           
  2942                           ; BSR set to: 1
  2943                           ;isr.c: 122: RxTxBuff[2] = timed_getc();
  2944  00007E  EC6B  F008         	call	_timed_getc	;wreg free
  2945  000082  0101               	movlb	1	; () banked
  2946  000084  6F02               	movwf	(_RxTxBuff+2)& (0+255),b
  2947                           
  2948                           ; BSR set to: 1
  2949                           ;isr.c: 123: if((FERR1) || (OERR1) || timeout_error) goto error;
  2950  000086  A4AB               	btfss	4011,2,c	;volatile
  2951                           
  2952                           ; BSR set to: 1
  2953  000088  B2AB               	btfsc	4011,1,c	;volatile
  2954  00008A  D196               	goto	i1l407
  2955                           
  2956                           ; BSR set to: 1
  2957  00008C  503F               	movf	_timeout_error,w,c	;volatile
  2958  00008E  E001 D193          	bnz	i1l407
  2959                           
  2960                           ; BSR set to: 1
  2961                           ;isr.c: 125: RxTxBuff[3] = timed_getc();
  2962  000092  EC6B  F008         	call	_timed_getc	;wreg free
  2963  000096  0101               	movlb	1	; () banked
  2964  000098  6F03               	movwf	(_RxTxBuff+3)& (0+255),b
  2965                           
  2966                           ; BSR set to: 1
  2967                           ;isr.c: 126: if((FERR1) || (OERR1) || timeout_error) goto error;
  2968  00009A  A4AB               	btfss	4011,2,c	;volatile
  2969                           
  2970                           ; BSR set to: 1
  2971  00009C  B2AB               	btfsc	4011,1,c	;volatile
  2972  00009E  D18C               	goto	i1l407
  2973                           
  2974                           ; BSR set to: 1
  2975  0000A0  503F               	movf	_timeout_error,w,c	;volatile
  2976  0000A2  E001 D189          	bnz	i1l407
  2977                           
  2978                           ; BSR set to: 1
  2979                           ;isr.c: 128: for(i = 0; i < RxTxBuff[3] + 2; i++) {
  2980  0000A6  6A23               	clrf	LO_ISR@i,c
  2981  0000A8  D010               	goto	i1l3318
  2982  0000AA                     i1l3308:
  2983                           
  2984                           ; BSR set to: 1
  2985                           ;isr.c: 129: RxTxBuff[i + 4] = timed_getc();
  2986  0000AA  0E04               	movlw	low (_RxTxBuff+4)
  2987  0000AC  2423               	addwf	LO_ISR@i,w,c
  2988  0000AE  6ED9               	movwf	fsr2l,c
  2989  0000B0  6ADA               	clrf	fsr2h,c
  2990  0000B2  0E01               	movlw	high (_RxTxBuff+4)
  2991  0000B4  22DA               	addwfc	fsr2h,f,c
  2992  0000B6  EC6B  F008         	call	_timed_getc	;wreg free
  2993  0000BA  6EDF               	movwf	indf2,c
  2994                           
  2995                           ;isr.c: 130: if((FERR1) || (OERR1) || timeout_error) goto error;
  2996  0000BC  A4AB               	btfss	4011,2,c	;volatile
  2997  0000BE  B2AB               	btfsc	4011,1,c	;volatile
  2998  0000C0  D17B               	goto	i1l407
  2999  0000C2  503F               	movf	_timeout_error,w,c	;volatile
  3000  0000C4  E001 D178          	bnz	i1l407
  3001  0000C8  2A23               	incf	LO_ISR@i,f,c
  3002  0000CA                     i1l3318:
  3003  0000CA  0101               	movlb	1	; () banked
  3004  0000CC  5103               	movf	(_RxTxBuff+3)& (0+255),w,b
  3005  0000CE  6E13               	movwf	??_LO_ISR& (0+255),c
  3006  0000D0  6A14               	clrf	(??_LO_ISR+1)& (0+255),c
  3007  0000D2  0E02               	movlw	2
  3008  0000D4  2613               	addwf	??_LO_ISR,f,c
  3009  0000D6  0E00               	movlw	0
  3010  0000D8  2214               	addwfc	??_LO_ISR+1,f,c
  3011  0000DA  5023               	movf	LO_ISR@i,w,c
  3012  0000DC  6E15               	movwf	(??_LO_ISR+2)& (0+255),c
  3013  0000DE  6A16               	clrf	(??_LO_ISR+3)& (0+255),c
  3014  0000E0  5016               	movf	??_LO_ISR+3,w,c
  3015  0000E2  0A80               	xorlw	128
  3016  0000E4  6E17               	movwf	(??_LO_ISR+4)& (0+255),c
  3017  0000E6  5013               	movf	??_LO_ISR,w,c
  3018  0000E8  5C15               	subwf	??_LO_ISR+2,w,c
  3019  0000EA  5014               	movf	??_LO_ISR+1,w,c
  3020  0000EC  0A80               	xorlw	128
  3021  0000EE  5817               	subwfb	(??_LO_ISR+4)& (0+255),w,c
  3022  0000F0  E3DC               	bnc	i1l3308
  3023                           
  3024                           ; BSR set to: 1
  3025                           ;isr.c: 131: }
  3026                           ;isr.c: 132: if(crc_mb_check(RxTxBuff, RxTxBuff[3] + 4) == 0) break;
  3027  0000F2  0E01               	movlw	high _RxTxBuff
  3028  0000F4  6E0A               	movwf	crc_mb_check@buffer+1,c
  3029  0000F6  0E00               	movlw	low _RxTxBuff
  3030  0000F8  6E09               	movwf	crc_mb_check@buffer,c
  3031  0000FA  5103               	movf	(_RxTxBuff+3)& (0+255),w,b
  3032  0000FC  0F04               	addlw	4
  3033  0000FE  6E0B               	movwf	crc_mb_check@cnt,c
  3034  000100  EC4C  F007         	call	_crc_mb_check	;wreg free
  3035  000104  0900               	iorlw	0
  3036  000106  E101 D157          	bz	i1l407
  3037                           
  3038                           ;isr.c: 134: for(i = 0; i < RxTxBuff[3]; i++) {
  3039  00010A  6A23               	clrf	LO_ISR@i,c
  3040  00010C  D014               	goto	i1l3330
  3041  00010E                     i1l3324:
  3042                           
  3043                           ; BSR set to: 1
  3044                           ;isr.c: 135: (Busy_eep(), Write_b_eep(RxTxBuff[2]++,RxTxBuff[4 + i]));
  3045  00010E  ECF0  F008         	call	_Busy_eep	;wreg free
  3046  000112  0101               	movlb	1	; () banked
  3047  000114  EE21  F002         	lfsr	2,_RxTxBuff+2
  3048  000118  50DF               	movf	indf2,w,c
  3049  00011A  2ADF               	incf	indf2,f,c
  3050  00011C  6E01               	movwf	Write_b_eep@badd,c
  3051  00011E  6A02               	clrf	Write_b_eep@badd+1,c
  3052  000120  0E04               	movlw	low (_RxTxBuff+4)
  3053  000122  2423               	addwf	LO_ISR@i,w,c
  3054  000124  6ED9               	movwf	fsr2l,c
  3055  000126  6ADA               	clrf	fsr2h,c
  3056  000128  0E01               	movlw	high (_RxTxBuff+4)
  3057  00012A  22DA               	addwfc	fsr2h,f,c
  3058  00012C  50DF               	movf	indf2,w,c
  3059  00012E  6E03               	movwf	Write_b_eep@bdat,c
  3060  000130  EC15  F008         	call	_Write_b_eep	;wreg free
  3061  000134  2A23               	incf	LO_ISR@i,f,c
  3062  000136                     i1l3330:
  3063  000136  0101               	movlb	1	; () banked
  3064  000138  5103               	movf	(_RxTxBuff+3)& (0+255),w,b
  3065  00013A  5C23               	subwf	LO_ISR@i,w,c
  3066  00013C  E3E8               	bnc	i1l3324
  3067                           
  3068                           ; BSR set to: 1
  3069                           ;isr.c: 136: }
  3070                           ;isr.c: 137: crc_mb(RxTxBuff, (0+2)); for(i = 0; i < ((0) + 4); i ++) {putbyte(RxTxBuff[
      +                          i]);};
  3071  00013E  0E01               	movlw	high _RxTxBuff
  3072  000140  6E0A               	movwf	crc_mb@buffer+1,c
  3073  000142  0E00               	movlw	low _RxTxBuff
  3074  000144  6E09               	movwf	crc_mb@buffer,c
  3075  000146  0E02               	movlw	2
  3076  000148  6E0B               	movwf	crc_mb@count,c
  3077  00014A  ECA4  F007         	call	_crc_mb	;wreg free
  3078  00014E  6A23               	clrf	LO_ISR@i,c
  3079  000150                     i1l3340:
  3080  000150  0101               	movlb	1	; () banked
  3081  000152  0E00               	movlw	low _RxTxBuff
  3082  000154  2423               	addwf	LO_ISR@i,w,c
  3083  000156  6ED9               	movwf	fsr2l,c
  3084  000158  6ADA               	clrf	fsr2h,c
  3085  00015A  0E01               	movlw	high _RxTxBuff
  3086  00015C  22DA               	addwfc	fsr2h,f,c
  3087  00015E  50DF               	movf	indf2,w,c
  3088  000160  ECEA  F008         	call	_putbyte
  3089                           
  3090                           ; BSR set to: 1
  3091  000164  2A23               	incf	LO_ISR@i,f,c
  3092                           
  3093                           ; BSR set to: 1
  3094  000166  0E03               	movlw	3
  3095  000168  6423               	cpfsgt	LO_ISR@i,c
  3096  00016A  D7F2               	goto	i1l3340
  3097  00016C  D125               	goto	i1l407
  3098  00016E                     i1l3346:
  3099                           
  3100                           ; BSR set to: 1
  3101                           ;isr.c: 142: for(i = 2; i < ((2) + 4); i ++) {RxTxBuff[i] = timed_getc();if((FERR1) || (
      +                          OERR1) || timeout_error) goto error;}if(crc_mb_check(RxTxBuff, (2) + 2) == 0) break;
  3102  00016E  0E02               	movlw	2
  3103  000170  6E23               	movwf	LO_ISR@i,c
  3104  000172                     i1l3352:
  3105  000172  0101               	movlb	1	; () banked
  3106  000174  0E00               	movlw	low _RxTxBuff
  3107  000176  2423               	addwf	LO_ISR@i,w,c
  3108  000178  6ED9               	movwf	fsr2l,c
  3109  00017A  6ADA               	clrf	fsr2h,c
  3110  00017C  0E01               	movlw	high _RxTxBuff
  3111  00017E  22DA               	addwfc	fsr2h,f,c
  3112  000180  EC6B  F008         	call	_timed_getc	;wreg free
  3113  000184  6EDF               	movwf	indf2,c
  3114  000186  A4AB               	btfss	4011,2,c	;volatile
  3115  000188  B2AB               	btfsc	4011,1,c	;volatile
  3116  00018A  D116               	goto	i1l407
  3117  00018C  503F               	movf	_timeout_error,w,c	;volatile
  3118  00018E  E001 D113          	bnz	i1l407
  3119  000192  2A23               	incf	LO_ISR@i,f,c
  3120  000194  0E05               	movlw	5
  3121  000196  6423               	cpfsgt	LO_ISR@i,c
  3122  000198  D7EC               	goto	i1l3352
  3123  00019A  0101               	movlb	1	; () banked
  3124  00019C  0E01               	movlw	high _RxTxBuff
  3125  00019E  6E0A               	movwf	crc_mb_check@buffer+1,c
  3126  0001A0  0E00               	movlw	low _RxTxBuff
  3127  0001A2  6E09               	movwf	crc_mb_check@buffer,c
  3128  0001A4  0E04               	movlw	4
  3129  0001A6  6E0B               	movwf	crc_mb_check@cnt,c
  3130  0001A8  EC4C  F007         	call	_crc_mb_check	;wreg free
  3131  0001AC  0900               	iorlw	0
  3132  0001AE  E101 D103          	bz	i1l407
  3133                           
  3134                           ;isr.c: 143: lcAdr = RxTxBuff[2];
  3135  0001B2  C102  F021         	movff	_RxTxBuff+2,LO_ISR@lcAdr
  3136                           
  3137                           ;isr.c: 144: lcData = RxTxBuff[3];
  3138  0001B6  C103  F022         	movff	_RxTxBuff+3,LO_ISR@lcData
  3139                           
  3140                           ;isr.c: 145: for(i = 0; i < lcData; i++) {
  3141  0001BA  6A23               	clrf	LO_ISR@i,c
  3142  0001BC  D00F               	goto	i1l3374
  3143  0001BE                     i1l3368:
  3144                           
  3145                           ;isr.c: 146: RxTxBuff[2 + i] = Read_b_eep(lcAdr++);
  3146  0001BE  0101               	movlb	1	; () banked
  3147  0001C0  0E02               	movlw	low (_RxTxBuff+2)
  3148  0001C2  2423               	addwf	LO_ISR@i,w,c
  3149  0001C4  6ED9               	movwf	fsr2l,c
  3150  0001C6  6ADA               	clrf	fsr2h,c
  3151  0001C8  0E01               	movlw	high (_RxTxBuff+2)
  3152  0001CA  22DA               	addwfc	fsr2h,f,c
  3153  0001CC  C021  F001         	movff	LO_ISR@lcAdr,Read_b_eep@badd
  3154  0001D0  6A02               	clrf	Read_b_eep@badd+1,c
  3155  0001D2  EC91  F008         	call	_Read_b_eep	;wreg free
  3156  0001D6  6EDF               	movwf	indf2,c
  3157  0001D8  2A21               	incf	LO_ISR@lcAdr,f,c
  3158  0001DA  2A23               	incf	LO_ISR@i,f,c
  3159  0001DC                     i1l3374:
  3160  0001DC  5022               	movf	LO_ISR@lcData,w,c
  3161  0001DE  5C23               	subwf	LO_ISR@i,w,c
  3162  0001E0  E3EE               	bnc	i1l3368
  3163                           
  3164                           ;isr.c: 147: }
  3165                           ;isr.c: 148: crc_mb(RxTxBuff, (lcData+2)); for(i = 0; i < ((lcData) + 4); i ++) {putbyte
      +                          (RxTxBuff[i]);};
  3166  0001E2  0101               	movlb	1	; () banked
  3167  0001E4  0E01               	movlw	high _RxTxBuff
  3168  0001E6  6E0A               	movwf	crc_mb@buffer+1,c
  3169  0001E8  0E00               	movlw	low _RxTxBuff
  3170  0001EA  6E09               	movwf	crc_mb@buffer,c
  3171  0001EC  5022               	movf	LO_ISR@lcData,w,c
  3172  0001EE  0F02               	addlw	2
  3173  0001F0  6E0B               	movwf	crc_mb@count,c
  3174  0001F2  ECA4  F007         	call	_crc_mb	;wreg free
  3175  0001F6  6A23               	clrf	LO_ISR@i,c
  3176  0001F8  D00B               	goto	i1l3384
  3177  0001FA                     i1l3380:
  3178  0001FA  0101               	movlb	1	; () banked
  3179  0001FC  0E00               	movlw	low _RxTxBuff
  3180  0001FE  2423               	addwf	LO_ISR@i,w,c
  3181  000200  6ED9               	movwf	fsr2l,c
  3182  000202  6ADA               	clrf	fsr2h,c
  3183  000204  0E01               	movlw	high _RxTxBuff
  3184  000206  22DA               	addwfc	fsr2h,f,c
  3185  000208  50DF               	movf	indf2,w,c
  3186  00020A  ECEA  F008         	call	_putbyte
  3187                           
  3188                           ; BSR set to: 1
  3189  00020E  2A23               	incf	LO_ISR@i,f,c
  3190  000210                     i1l3384:
  3191  000210  5022               	movf	LO_ISR@lcData,w,c
  3192  000212  6E13               	movwf	??_LO_ISR& (0+255),c
  3193  000214  6A14               	clrf	(??_LO_ISR+1)& (0+255),c
  3194  000216  0E04               	movlw	4
  3195  000218  2613               	addwf	??_LO_ISR,f,c
  3196  00021A  0E00               	movlw	0
  3197  00021C  2214               	addwfc	??_LO_ISR+1,f,c
  3198  00021E  5023               	movf	LO_ISR@i,w,c
  3199  000220  6E15               	movwf	(??_LO_ISR+2)& (0+255),c
  3200  000222  6A16               	clrf	(??_LO_ISR+3)& (0+255),c
  3201  000224  5016               	movf	??_LO_ISR+3,w,c
  3202  000226  0A80               	xorlw	128
  3203  000228  6E17               	movwf	(??_LO_ISR+4)& (0+255),c
  3204  00022A  5013               	movf	??_LO_ISR,w,c
  3205  00022C  5C15               	subwf	??_LO_ISR+2,w,c
  3206  00022E  5014               	movf	??_LO_ISR+1,w,c
  3207  000230  0A80               	xorlw	128
  3208  000232  5817               	subwfb	(??_LO_ISR+4)& (0+255),w,c
  3209  000234  E301 D0C0          	bc	i1l407
  3210  000238  D7E0               	goto	i1l3380
  3211  00023A                     i1l3386:
  3212                           
  3213                           ; BSR set to: 1
  3214                           ;isr.c: 152: for(i = 2; i < ((1) + 4); i ++) {RxTxBuff[i] = timed_getc();if((FERR1) || (
      +                          OERR1) || timeout_error) goto error;}if(crc_mb_check(RxTxBuff, (1) + 2) == 0) break;
  3215  00023A  0E02               	movlw	2
  3216  00023C  6E23               	movwf	LO_ISR@i,c
  3217  00023E                     i1l3392:
  3218  00023E  0101               	movlb	1	; () banked
  3219  000240  0E00               	movlw	low _RxTxBuff
  3220  000242  2423               	addwf	LO_ISR@i,w,c
  3221  000244  6ED9               	movwf	fsr2l,c
  3222  000246  6ADA               	clrf	fsr2h,c
  3223  000248  0E01               	movlw	high _RxTxBuff
  3224  00024A  22DA               	addwfc	fsr2h,f,c
  3225  00024C  EC6B  F008         	call	_timed_getc	;wreg free
  3226  000250  6EDF               	movwf	indf2,c
  3227  000252  A4AB               	btfss	4011,2,c	;volatile
  3228  000254  B2AB               	btfsc	4011,1,c	;volatile
  3229  000256  D0B0               	goto	i1l407
  3230  000258  503F               	movf	_timeout_error,w,c	;volatile
  3231  00025A  E001 D0AD          	bnz	i1l407
  3232  00025E  2A23               	incf	LO_ISR@i,f,c
  3233  000260  0E04               	movlw	4
  3234  000262  6423               	cpfsgt	LO_ISR@i,c
  3235  000264  D7EC               	goto	i1l3392
  3236  000266  0101               	movlb	1	; () banked
  3237  000268  0E01               	movlw	high _RxTxBuff
  3238  00026A  6E0A               	movwf	crc_mb_check@buffer+1,c
  3239  00026C  0E00               	movlw	low _RxTxBuff
  3240  00026E  6E09               	movwf	crc_mb_check@buffer,c
  3241  000270  0E03               	movlw	3
  3242  000272  6E0B               	movwf	crc_mb_check@cnt,c
  3243  000274  EC4C  F007         	call	_crc_mb_check	;wreg free
  3244  000278  0900               	iorlw	0
  3245  00027A  E101 D09D          	bz	i1l407
  3246                           
  3247                           ;isr.c: 153: SendMessage(USB_FLASH_SEND_CMD);
  3248  00027E  0E05               	movlw	5
  3249  000280  ECCB  F008         	call	_SendMessage
  3250                           
  3251                           ;isr.c: 155: crc_mb(RxTxBuff, (0+2)); for(i = 0; i < ((0) + 4); i ++) {putbyte(RxTxBuff[
      +                          i]);};
  3252  000284  0101               	movlb	1	; () banked
  3253  000286  0E01               	movlw	high _RxTxBuff
  3254  000288  6E0A               	movwf	crc_mb@buffer+1,c
  3255  00028A  0E00               	movlw	low _RxTxBuff
  3256  00028C  6E09               	movwf	crc_mb@buffer,c
  3257  00028E  0E02               	movlw	2
  3258  000290  6E0B               	movwf	crc_mb@count,c
  3259  000292  ECA4  F007         	call	_crc_mb	;wreg free
  3260  000296  6A23               	clrf	LO_ISR@i,c
  3261  000298                     i1l3416:
  3262  000298  0101               	movlb	1	; () banked
  3263  00029A  0E00               	movlw	low _RxTxBuff
  3264  00029C  2423               	addwf	LO_ISR@i,w,c
  3265  00029E  6ED9               	movwf	fsr2l,c
  3266  0002A0  6ADA               	clrf	fsr2h,c
  3267  0002A2  0E01               	movlw	high _RxTxBuff
  3268  0002A4  22DA               	addwfc	fsr2h,f,c
  3269  0002A6  50DF               	movf	indf2,w,c
  3270  0002A8  ECEA  F008         	call	_putbyte
  3271                           
  3272                           ; BSR set to: 1
  3273  0002AC  2A23               	incf	LO_ISR@i,f,c
  3274                           
  3275                           ; BSR set to: 1
  3276  0002AE  0E03               	movlw	3
  3277  0002B0  6423               	cpfsgt	LO_ISR@i,c
  3278  0002B2  D7F2               	goto	i1l3416
  3279  0002B4  D081               	goto	i1l407
  3280  0002B6                     i1l3422:
  3281                           
  3282                           ; BSR set to: 1
  3283                           ;isr.c: 160: for(i = 2; i < ((0) + 4); i ++) {RxTxBuff[i] = timed_getc();if((FERR1) || (
      +                          OERR1) || timeout_error) goto error;}if(crc_mb_check(RxTxBuff, (0) + 2) == 0) break;
  3284  0002B6  0E02               	movlw	2
  3285  0002B8  6E23               	movwf	LO_ISR@i,c
  3286  0002BA                     i1l3428:
  3287  0002BA  0101               	movlb	1	; () banked
  3288  0002BC  0E00               	movlw	low _RxTxBuff
  3289  0002BE  2423               	addwf	LO_ISR@i,w,c
  3290  0002C0  6ED9               	movwf	fsr2l,c
  3291  0002C2  6ADA               	clrf	fsr2h,c
  3292  0002C4  0E01               	movlw	high _RxTxBuff
  3293  0002C6  22DA               	addwfc	fsr2h,f,c
  3294  0002C8  EC6B  F008         	call	_timed_getc	;wreg free
  3295  0002CC  6EDF               	movwf	indf2,c
  3296  0002CE  A4AB               	btfss	4011,2,c	;volatile
  3297  0002D0  B2AB               	btfsc	4011,1,c	;volatile
  3298  0002D2  D072               	goto	i1l407
  3299  0002D4  503F               	movf	_timeout_error,w,c	;volatile
  3300  0002D6  E170               	bnz	i1l407
  3301  0002D8  2A23               	incf	LO_ISR@i,f,c
  3302  0002DA  0E03               	movlw	3
  3303  0002DC  6423               	cpfsgt	LO_ISR@i,c
  3304  0002DE  D7ED               	goto	i1l3428
  3305  0002E0  0101               	movlb	1	; () banked
  3306  0002E2  0E01               	movlw	high _RxTxBuff
  3307  0002E4  6E0A               	movwf	crc_mb_check@buffer+1,c
  3308  0002E6  0E00               	movlw	low _RxTxBuff
  3309  0002E8  6E09               	movwf	crc_mb_check@buffer,c
  3310  0002EA  0E02               	movlw	2
  3311  0002EC  6E0B               	movwf	crc_mb_check@cnt,c
  3312  0002EE  EC4C  F007         	call	_crc_mb_check	;wreg free
  3313  0002F2  0900               	iorlw	0
  3314  0002F4  E061               	bz	i1l407
  3315                           
  3316                           ;isr.c: 161: set_ee_default();
  3317  0002F6  EC79  F007         	call	_set_ee_default	;wreg free
  3318                           
  3319                           ;isr.c: 162: crc_mb(RxTxBuff, (0+2)); for(i = 0; i < ((0) + 4); i ++) {putbyte(RxTxBuff[
      +                          i]);};
  3320  0002FA  0101               	movlb	1	; () banked
  3321  0002FC  0E01               	movlw	high _RxTxBuff
  3322  0002FE  6E0A               	movwf	crc_mb@buffer+1,c
  3323  000300  0E00               	movlw	low _RxTxBuff
  3324  000302  6E09               	movwf	crc_mb@buffer,c
  3325  000304  0E02               	movlw	2
  3326  000306  6E0B               	movwf	crc_mb@count,c
  3327  000308  ECA4  F007         	call	_crc_mb	;wreg free
  3328  00030C  6A23               	clrf	LO_ISR@i,c
  3329  00030E                     i1l3454:
  3330  00030E  0101               	movlb	1	; () banked
  3331  000310  0E00               	movlw	low _RxTxBuff
  3332  000312  2423               	addwf	LO_ISR@i,w,c
  3333  000314  6ED9               	movwf	fsr2l,c
  3334  000316  6ADA               	clrf	fsr2h,c
  3335  000318  0E01               	movlw	high _RxTxBuff
  3336  00031A  22DA               	addwfc	fsr2h,f,c
  3337  00031C  50DF               	movf	indf2,w,c
  3338  00031E  ECEA  F008         	call	_putbyte
  3339                           
  3340                           ; BSR set to: 1
  3341  000322  2A23               	incf	LO_ISR@i,f,c
  3342                           
  3343                           ; BSR set to: 1
  3344  000324  0E03               	movlw	3
  3345  000326  6423               	cpfsgt	LO_ISR@i,c
  3346  000328  D7F2               	goto	i1l3454
  3347  00032A  D046               	goto	i1l407
  3348  00032C                     i1l3460:
  3349                           
  3350                           ; BSR set to: 1
  3351                           ;isr.c: 167: for(i = 2; i < ((1) + 4); i ++) {RxTxBuff[i] = timed_getc();if((FERR1) || (
      +                          OERR1) || timeout_error) goto error;}if(crc_mb_check(RxTxBuff, (1) + 2) == 0) break;
  3352  00032C  0E02               	movlw	2
  3353  00032E  6E23               	movwf	LO_ISR@i,c
  3354  000330                     i1l3466:
  3355  000330  0101               	movlb	1	; () banked
  3356  000332  0E00               	movlw	low _RxTxBuff
  3357  000334  2423               	addwf	LO_ISR@i,w,c
  3358  000336  6ED9               	movwf	fsr2l,c
  3359  000338  6ADA               	clrf	fsr2h,c
  3360  00033A  0E01               	movlw	high _RxTxBuff
  3361  00033C  22DA               	addwfc	fsr2h,f,c
  3362  00033E  EC6B  F008         	call	_timed_getc	;wreg free
  3363  000342  6EDF               	movwf	indf2,c
  3364  000344  A4AB               	btfss	4011,2,c	;volatile
  3365  000346  B2AB               	btfsc	4011,1,c	;volatile
  3366  000348  D037               	goto	i1l407
  3367  00034A  503F               	movf	_timeout_error,w,c	;volatile
  3368  00034C  E135               	bnz	i1l407
  3369  00034E  2A23               	incf	LO_ISR@i,f,c
  3370  000350  0E04               	movlw	4
  3371  000352  6423               	cpfsgt	LO_ISR@i,c
  3372  000354  D7ED               	goto	i1l3466
  3373  000356  0101               	movlb	1	; () banked
  3374  000358  0E01               	movlw	high _RxTxBuff
  3375  00035A  6E0A               	movwf	crc_mb_check@buffer+1,c
  3376  00035C  0E00               	movlw	low _RxTxBuff
  3377  00035E  6E09               	movwf	crc_mb_check@buffer,c
  3378  000360  0E03               	movlw	3
  3379  000362  6E0B               	movwf	crc_mb_check@cnt,c
  3380  000364  EC4C  F007         	call	_crc_mb_check	;wreg free
  3381  000368  0900               	iorlw	0
  3382  00036A  E026               	bz	i1l407
  3383  00036C  D00C               	goto	i1l3490
  3384  00036E                     i1l3482:
  3385                           
  3386                           ; BSR set to: 1
  3387                           ;isr.c: 172: BSemOn(SEM_RX_DONE);
  3388  00036E  0E01               	movlw	1
  3389  000370  ECD4  F008         	call	_BSemOn
  3390                           
  3391                           ;isr.c: 173: break;
  3392  000374  D010               	goto	i1l476
  3393  000376                     i1l3484:
  3394                           
  3395                           ; BSR set to: 1
  3396                           ;isr.c: 175: BSemOn(SEM_WR_DONE);
  3397  000376  0E02               	movlw	2
  3398  000378  ECD4  F008         	call	_BSemOn
  3399                           
  3400                           ;isr.c: 176: break;
  3401  00037C  D00C               	goto	i1l476
  3402  00037E                     i1l3486:
  3403                           
  3404                           ; BSR set to: 1
  3405                           ;isr.c: 178: BSemOn(SEM_WR_ERR);
  3406  00037E  0E03               	movlw	3
  3407  000380  ECD4  F008         	call	_BSemOn
  3408                           
  3409                           ;isr.c: 179: break;
  3410  000384  D008               	goto	i1l476
  3411  000386                     i1l3490:
  3412  000386  0101               	movlb	1	; () banked
  3413  000388  5102               	movf	(_RxTxBuff+2)& (0+255),w,b
  3414                           
  3415                           ; Switch size 1, requested type "space"
  3416                           ; Number of cases is 3, Range of values is 1 to 3
  3417                           ; switch strategies available:
  3418                           ; Name         Instructions Cycles
  3419                           ; simple_byte           10     6 (average)
  3420                           ;	Chosen strategy is simple_byte
  3421  00038A  0A01               	xorlw	1	; case 1
  3422  00038C  E0F0               	bz	i1l3482
  3423  00038E  0A03               	xorlw	3	; case 2
  3424  000390  E0F2               	bz	i1l3484
  3425  000392  0A01               	xorlw	1	; case 3
  3426  000394  E0F4               	bz	i1l3486
  3427  000396                     i1l476:
  3428                           
  3429                           ;isr.c: 184: __nop();
  3430  000396  F000               	nop	
  3431                           
  3432                           ;isr.c: 185: __nop();
  3433  000398  F000               	nop	
  3434                           
  3435                           ;isr.c: 186: break;
  3436  00039A  D00E               	goto	i1l407
  3437  00039C                     i1l3494:
  3438                           
  3439                           ; BSR set to: 1
  3440  00039C  5101               	movf	(_RxTxBuff+1)& (0+255),w,b
  3441                           
  3442                           ; Switch size 1, requested type "space"
  3443                           ; Number of cases is 5, Range of values is 8 to 16
  3444                           ; switch strategies available:
  3445                           ; Name         Instructions Cycles
  3446                           ; simple_byte           16     9 (average)
  3447                           ;	Chosen strategy is simple_byte
  3448  00039E  0A08               	xorlw	8	; case 8
  3449  0003A0  E101 D66D          	bz	i1l3292
  3450  0003A4  0A01               	xorlw	1	; case 9
  3451  0003A6  E101 D6E2          	bz	i1l3346
  3452  0003AA  0A03               	xorlw	3	; case 10
  3453  0003AC  E101 D745          	bz	i1l3386
  3454  0003B0  0A01               	xorlw	1	; case 11
  3455  0003B2  E081               	bz	i1l3422
  3456  0003B4  0A1B               	xorlw	27	; case 16
  3457  0003B6  E0BA               	bz	i1l3460
  3458  0003B8                     i1l407:
  3459                           
  3460                           ;isr.c: 192: if(RCIF) dummy = RCREG;
  3461  0003B8  BA9E               	btfsc	3998,5,c	;volatile
  3462  0003BA  CFAE F03E          	movff	4014,_dummy	;volatile
  3463                           
  3464                           ;isr.c: 193: if(RCIF) dummy = RCREG;
  3465  0003BE  BA9E               	btfsc	3998,5,c	;volatile
  3466  0003C0  CFAE F03E          	movff	4014,_dummy	;volatile
  3467                           
  3468                           ;isr.c: 194: CREN1 = 0;
  3469  0003C4  98AB               	bcf	4011,4,c	;volatile
  3470                           
  3471                           ;isr.c: 195: __nop();
  3472  0003C6  F000               	nop	
  3473                           
  3474                           ;isr.c: 196: CREN1 = 1;
  3475  0003C8  88AB               	bsf	4011,4,c	;volatile
  3476  0003CA                     i1l482:
  3477  0003CA  C020  FFF5         	movff	??_LO_ISR+13,tablat
  3478  0003CE  C01F  FFF8         	movff	??_LO_ISR+12,tblptru
  3479  0003D2  C01E  FFF7         	movff	??_LO_ISR+11,tblptrh
  3480  0003D6  C01D  FFF6         	movff	??_LO_ISR+10,tblptrl
  3481  0003DA  C01C  FFDA         	movff	??_LO_ISR+9,fsr2h
  3482  0003DE  C01B  FFD9         	movff	??_LO_ISR+8,fsr2l
  3483  0003E2  C01A  FFE0         	movff	??_LO_ISR+7,bsr
  3484  0003E6  C019  FFE8         	movff	??_LO_ISR+6,wreg
  3485  0003EA  C018  FFD8         	movff	??_LO_ISR+5,status
  3486  0003EE  0010               	retfie	
  3487  0003F0                     __end_of_LO_ISR:
  3488                           	opt stack 0
  3489                           tblptru	equ	0xFF8
  3490                           tblptrh	equ	0xFF7
  3491                           tblptrl	equ	0xFF6
  3492                           tablat	equ	0xFF5
  3493                           prodh	equ	0xFF4
  3494                           prodl	equ	0xFF3
  3495                           intcon	equ	0xFF2
  3496                           postinc0	equ	0xFEE
  3497                           wreg	equ	0xFE8
  3498                           postinc1	equ	0xFE6
  3499                           postdec1	equ	0xFE5
  3500                           fsr1h	equ	0xFE2
  3501                           fsr1l	equ	0xFE1
  3502                           bsr	equ	0xFE0
  3503                           indf2	equ	0xFDF
  3504                           postinc2	equ	0xFDE
  3505                           postdec2	equ	0xFDD
  3506                           fsr2h	equ	0xFDA
  3507                           fsr2l	equ	0xFD9
  3508                           status	equ	0xFD8
  3509                           
  3510 ;; *************** function _timed_getc *****************
  3511 ;; Defined at:
  3512 ;;		line 97 in file "../lib/usart.c"
  3513 ;; Parameters:    Size  Location     Type
  3514 ;;		None
  3515 ;; Auto vars:     Size  Location     Type
  3516 ;;  timeout         2    0[COMRAM] unsigned short 
  3517 ;; Return value:  Size  Location     Type
  3518 ;;                  1    wreg      unsigned char 
  3519 ;; Registers used:
  3520 ;;		wreg, status,2, status,0, cstack
  3521 ;; Tracked objects:
  3522 ;;		On entry : 0/0
  3523 ;;		On exit  : 0/0
  3524 ;;		Unchanged: 0/0
  3525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3527 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3529 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3530 ;;Total ram usage:        2 bytes
  3531 ;; Hardware stack levels used:    1
  3532 ;; Hardware stack levels required when called:    5
  3533 ;; This function calls:
  3534 ;;		_getbyte
  3535 ;; This function is called by:
  3536 ;;		_LO_ISR
  3537 ;; This function uses a non-reentrant model
  3538 ;;
  3539                           
  3540                           	psect	text12
  3541  0010D6                     __ptext12:
  3542                           	opt stack 0
  3543  0010D6                     _timed_getc:
  3544                           	opt stack 22
  3545                           
  3546                           ;usart.c: 98: WORD timeout;
  3547                           ;usart.c: 100: timeout_error = 0;
  3548                           
  3549                           ;incstack = 0
  3550  0010D6  6A3F               	clrf	_timeout_error,c	;volatile
  3551                           
  3552                           ;usart.c: 101: timeout = 0;
  3553  0010D8  6A01               	clrf	timed_getc@timeout,c
  3554  0010DA  6A02               	clrf	timed_getc@timeout+1,c
  3555  0010DC                     i1l222:
  3556  0010DC  F000               	nop	
  3557  0010DE  BA9E               	btfsc	3998,5,c	;volatile
  3558  0010E0  D007               	goto	i1l225
  3559  0010E2  4A01               	infsnz	timed_getc@timeout,f,c
  3560  0010E4  2A02               	incf	timed_getc@timeout+1,f,c
  3561  0010E6  0E10               	movlw	16
  3562  0010E8  5C01               	subwf	timed_getc@timeout& (0+255),w,c
  3563  0010EA  0E27               	movlw	39
  3564  0010EC  5802               	subwfb	(timed_getc@timeout+1)& (0+255),w,c
  3565  0010EE  E3F6               	bnc	i1l222
  3566  0010F0                     i1l225:
  3567                           
  3568                           ;usart.c: 105: if (RCIF) {
  3569  0010F0  BA9E               	btfsc	3998,5,c	;volatile
  3570                           
  3571                           ;usart.c: 106: return (getbyte());
  3572  0010F2  EFE6  F008         	goto	i1l211	;wreg free
  3573                           
  3574                           ;usart.c: 108: timeout_error = 1;
  3575  0010F6  0E01               	movlw	1
  3576  0010F8  6E3F               	movwf	_timeout_error,c	;volatile
  3577                           
  3578                           ;usart.c: 109: return (0);
  3579  0010FA  0C00               	retlw	0
  3580  0010FC                     __end_of_timed_getc:
  3581                           	opt stack 0
  3582                           tblptru	equ	0xFF8
  3583                           tblptrh	equ	0xFF7
  3584                           tblptrl	equ	0xFF6
  3585                           tablat	equ	0xFF5
  3586                           prodh	equ	0xFF4
  3587                           prodl	equ	0xFF3
  3588                           intcon	equ	0xFF2
  3589                           postinc0	equ	0xFEE
  3590                           wreg	equ	0xFE8
  3591                           postinc1	equ	0xFE6
  3592                           postdec1	equ	0xFE5
  3593                           fsr1h	equ	0xFE2
  3594                           fsr1l	equ	0xFE1
  3595                           bsr	equ	0xFE0
  3596                           indf2	equ	0xFDF
  3597                           postinc2	equ	0xFDE
  3598                           postdec2	equ	0xFDD
  3599                           fsr2h	equ	0xFDA
  3600                           fsr2l	equ	0xFD9
  3601                           status	equ	0xFD8
  3602                           
  3603 ;; *************** function _getbyte *****************
  3604 ;; Defined at:
  3605 ;;		line 76 in file "../lib/usart.c"
  3606 ;; Parameters:    Size  Location     Type
  3607 ;;		None
  3608 ;; Auto vars:     Size  Location     Type
  3609 ;;		None
  3610 ;; Return value:  Size  Location     Type
  3611 ;;                  1    wreg      unsigned char 
  3612 ;; Registers used:
  3613 ;;		wreg, status,2
  3614 ;; Tracked objects:
  3615 ;;		On entry : 0/0
  3616 ;;		On exit  : 0/0
  3617 ;;		Unchanged: 0/0
  3618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3622 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3623 ;;Total ram usage:        0 bytes
  3624 ;; Hardware stack levels used:    1
  3625 ;; Hardware stack levels required when called:    4
  3626 ;; This function calls:
  3627 ;;		Nothing
  3628 ;; This function is called by:
  3629 ;;		_timed_getc
  3630 ;; This function uses a non-reentrant model
  3631 ;;
  3632                           
  3633                           	psect	text13
  3634  0011C8                     __ptext13:
  3635                           	opt stack 0
  3636  0011C8                     _getbyte:
  3637                           	opt stack 22
  3638                           
  3639                           ;usart.c: 78: while (!RCIF) {
  3640                           
  3641                           ;incstack = 0
  3642  0011C8  D001               	goto	i1l211
  3643  0011CA                     i1l212:
  3644                           
  3645                           ;usart.c: 79: __nop();
  3646  0011CA  F000               	nop	
  3647  0011CC                     i1l211:
  3648  0011CC  AA9E               	btfss	3998,5,c	;volatile
  3649  0011CE  D7FD               	goto	i1l212
  3650                           
  3651                           ;usart.c: 81: }
  3652                           ;usart.c: 82: return RCREG;
  3653  0011D0  50AE               	movf	4014,w,c	;volatile
  3654  0011D2  0012               	return	
  3655  0011D4                     __end_of_getbyte:
  3656                           	opt stack 0
  3657                           tblptru	equ	0xFF8
  3658                           tblptrh	equ	0xFF7
  3659                           tblptrl	equ	0xFF6
  3660                           tablat	equ	0xFF5
  3661                           prodh	equ	0xFF4
  3662                           prodl	equ	0xFF3
  3663                           intcon	equ	0xFF2
  3664                           postinc0	equ	0xFEE
  3665                           wreg	equ	0xFE8
  3666                           postinc1	equ	0xFE6
  3667                           postdec1	equ	0xFE5
  3668                           fsr1h	equ	0xFE2
  3669                           fsr1l	equ	0xFE1
  3670                           bsr	equ	0xFE0
  3671                           indf2	equ	0xFDF
  3672                           postinc2	equ	0xFDE
  3673                           postdec2	equ	0xFDD
  3674                           fsr2h	equ	0xFDA
  3675                           fsr2l	equ	0xFD9
  3676                           status	equ	0xFD8
  3677                           
  3678 ;; *************** function _set_ee_default *****************
  3679 ;; Defined at:
  3680 ;;		line 28 in file "../lib/eeprom.c"
  3681 ;; Parameters:    Size  Location     Type
  3682 ;;		None
  3683 ;; Auto vars:     Size  Location     Type
  3684 ;;  i               2   13[COMRAM] unsigned int 
  3685 ;;  c1              1   12[COMRAM] unsigned char 
  3686 ;;  c               1   11[COMRAM] unsigned char 
  3687 ;; Return value:  Size  Location     Type
  3688 ;;		None               void
  3689 ;; Registers used:
  3690 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3691 ;; Tracked objects:
  3692 ;;		On entry : 0/1
  3693 ;;		On exit  : 0/0
  3694 ;;		Unchanged: 0/0
  3695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3697 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3699 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3700 ;;Total ram usage:        4 bytes
  3701 ;; Hardware stack levels used:    1
  3702 ;; Hardware stack levels required when called:    6
  3703 ;; This function calls:
  3704 ;;		_read___ee
  3705 ;;		_write___ee
  3706 ;; This function is called by:
  3707 ;;		_LO_ISR
  3708 ;; This function uses a non-reentrant model
  3709 ;;
  3710                           
  3711                           	psect	text14
  3712  000EF2                     __ptext14:
  3713                           	opt stack 0
  3714  000EF2                     _set_ee_default:
  3715                           	opt stack 21
  3716                           
  3717                           ;eeprom.c: 29: unsigned int i;
  3718                           ;eeprom.c: 30: char c, c1;
  3719                           ;eeprom.c: 31: for(i = 0; i < 256; i ++){
  3720                           
  3721                           ;incstack = 0
  3722  000EF2  6A0E               	clrf	set_ee_default@i,c
  3723  000EF4  6A0F               	clrf	set_ee_default@i+1,c
  3724  000EF6                     i1l3008:
  3725                           
  3726                           ;eeprom.c: 33: c = eedata[i];
  3727  000EF6  0EFF               	movlw	low _eedata
  3728  000EF8  240E               	addwf	set_ee_default@i,w,c
  3729  000EFA  6EF6               	movwf	tblptrl,c
  3730  000EFC  0EFE               	movlw	high _eedata
  3731  000EFE  200F               	addwfc	set_ee_default@i+1,w,c
  3732  000F00  6EF7               	movwf	tblptrh,c
  3733  000F02                     	if	0	;There are less than 3 active tblptr bytes
  3734  000F02                     	endif
  3735  000F02  0008               	tblrd		*
  3736  000F04  CFF5 F00C          	movff	tablat,set_ee_default@c
  3737                           
  3738                           ;eeprom.c: 34: read___ee(i, (char *)&c1, sizeof(c1));
  3739  000F08  C00E  F006         	movff	set_ee_default@i,read___ee@adr
  3740  000F0C  C00F  F007         	movff	set_ee_default@i+1,read___ee@adr+1
  3741  000F10  0E0D               	movlw	low set_ee_default@c1
  3742  000F12  6E08               	movwf	read___ee@var,c
  3743  000F14  0E01               	movlw	1
  3744  000F16  6E09               	movwf	read___ee@byte,c
  3745  000F18  EC7E  F008         	call	_read___ee	;wreg free
  3746                           
  3747                           ;eeprom.c: 35: if(c != c1){
  3748  000F1C  500C               	movf	set_ee_default@c,w,c
  3749  000F1E  180D               	xorwf	set_ee_default@c1,w,c
  3750  000F20  E00A               	bz	i1l3016
  3751                           
  3752                           ;eeprom.c: 36: write___ee(i, (char *)&c, sizeof(c));
  3753  000F22  C00E  F008         	movff	set_ee_default@i,write___ee@adr
  3754  000F26  C00F  F009         	movff	set_ee_default@i+1,write___ee@adr+1
  3755  000F2A  0E0C               	movlw	low set_ee_default@c
  3756  000F2C  6E0A               	movwf	write___ee@var,c
  3757  000F2E  0E01               	movlw	1
  3758  000F30  6E0B               	movwf	write___ee@byte,c
  3759  000F32  EC55  F008         	call	_write___ee	;wreg free
  3760  000F36                     i1l3016:
  3761  000F36  4A0E               	infsnz	set_ee_default@i,f,c
  3762  000F38  2A0F               	incf	set_ee_default@i+1,f,c
  3763  000F3A  0E00               	movlw	0
  3764  000F3C  5C0E               	subwf	set_ee_default@i,w,c
  3765  000F3E  0E01               	movlw	1
  3766  000F40  580F               	subwfb	set_ee_default@i+1,w,c
  3767  000F42  B0D8               	btfsc	status,0,c
  3768  000F44  0012               	return	
  3769  000F46  D7D7               	goto	i1l3008
  3770  000F48                     __end_of_set_ee_default:
  3771                           	opt stack 0
  3772                           tblptru	equ	0xFF8
  3773                           tblptrh	equ	0xFF7
  3774                           tblptrl	equ	0xFF6
  3775                           tablat	equ	0xFF5
  3776                           prodh	equ	0xFF4
  3777                           prodl	equ	0xFF3
  3778                           intcon	equ	0xFF2
  3779                           postinc0	equ	0xFEE
  3780                           wreg	equ	0xFE8
  3781                           postinc1	equ	0xFE6
  3782                           postdec1	equ	0xFE5
  3783                           fsr1h	equ	0xFE2
  3784                           fsr1l	equ	0xFE1
  3785                           bsr	equ	0xFE0
  3786                           indf2	equ	0xFDF
  3787                           postinc2	equ	0xFDE
  3788                           postdec2	equ	0xFDD
  3789                           fsr2h	equ	0xFDA
  3790                           fsr2l	equ	0xFD9
  3791                           status	equ	0xFD8
  3792                           
  3793 ;; *************** function _write___ee *****************
  3794 ;; Defined at:
  3795 ;;		line 11 in file "../lib/eeprom.c"
  3796 ;; Parameters:    Size  Location     Type
  3797 ;;  adr             2    7[COMRAM] unsigned int 
  3798 ;;  var             1    9[COMRAM] PTR unsigned char 
  3799 ;;		 -> set_ee_default@c(1), 
  3800 ;;  byte            1   10[COMRAM] unsigned char 
  3801 ;; Auto vars:     Size  Location     Type
  3802 ;;		None
  3803 ;; Return value:  Size  Location     Type
  3804 ;;		None               void
  3805 ;; Registers used:
  3806 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3807 ;; Tracked objects:
  3808 ;;		On entry : 0/1
  3809 ;;		On exit  : 0/0
  3810 ;;		Unchanged: 0/0
  3811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3812 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3815 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3816 ;;Total ram usage:        4 bytes
  3817 ;; Hardware stack levels used:    1
  3818 ;; Hardware stack levels required when called:    5
  3819 ;; This function calls:
  3820 ;;		_Busy_eep
  3821 ;;		_Write_b_eep
  3822 ;; This function is called by:
  3823 ;;		_set_ee_default
  3824 ;; This function uses a non-reentrant model
  3825 ;;
  3826                           
  3827                           	psect	text15
  3828  0010AA                     __ptext15:
  3829                           	opt stack 0
  3830  0010AA                     _write___ee:
  3831                           	opt stack 21
  3832                           
  3833                           ;eeprom.c: 12: while(byte--){
  3834                           
  3835                           ;incstack = 0
  3836  0010AA  D010               	goto	i1l2816
  3837  0010AC                     i1l2812:
  3838                           
  3839                           ;eeprom.c: 13: (Busy_eep(), Write_b_eep(adr+byte,(unsigned char)(*(((unsigned char *)var
      +                          )+byte))));
  3840  0010AC  ECF0  F008         	call	_Busy_eep	;wreg free
  3841  0010B0  500B               	movf	write___ee@byte,w,c
  3842  0010B2  2408               	addwf	write___ee@adr,w,c
  3843  0010B4  6E01               	movwf	Write_b_eep@badd,c
  3844  0010B6  0E00               	movlw	0
  3845  0010B8  2009               	addwfc	write___ee@adr+1,w,c
  3846  0010BA  6E02               	movwf	Write_b_eep@badd+1,c
  3847  0010BC  500A               	movf	write___ee@var,w,c
  3848  0010BE  240B               	addwf	write___ee@byte,w,c
  3849  0010C0  6ED9               	movwf	fsr2l,c
  3850  0010C2  6ADA               	clrf	fsr2h,c
  3851  0010C4  50DF               	movf	indf2,w,c
  3852  0010C6  6E03               	movwf	Write_b_eep@bdat,c
  3853  0010C8  EC15  F008         	call	_Write_b_eep	;wreg free
  3854  0010CC                     i1l2816:
  3855  0010CC  060B               	decf	write___ee@byte,f,c
  3856  0010CE  280B               	incf	write___ee@byte& (0+255),w,c
  3857  0010D0  B4D8               	btfsc	status,2,c
  3858  0010D2  0012               	return	
  3859  0010D4  D7EB               	goto	i1l2812
  3860  0010D6                     __end_of_write___ee:
  3861                           	opt stack 0
  3862                           tblptru	equ	0xFF8
  3863                           tblptrh	equ	0xFF7
  3864                           tblptrl	equ	0xFF6
  3865                           tablat	equ	0xFF5
  3866                           prodh	equ	0xFF4
  3867                           prodl	equ	0xFF3
  3868                           intcon	equ	0xFF2
  3869                           postinc0	equ	0xFEE
  3870                           wreg	equ	0xFE8
  3871                           postinc1	equ	0xFE6
  3872                           postdec1	equ	0xFE5
  3873                           fsr1h	equ	0xFE2
  3874                           fsr1l	equ	0xFE1
  3875                           bsr	equ	0xFE0
  3876                           indf2	equ	0xFDF
  3877                           postinc2	equ	0xFDE
  3878                           postdec2	equ	0xFDD
  3879                           fsr2h	equ	0xFDA
  3880                           fsr2l	equ	0xFD9
  3881                           status	equ	0xFD8
  3882                           
  3883 ;; *************** function _Write_b_eep *****************
  3884 ;; Defined at:
  3885 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\EEP\write_B.c"
  3886 ;; Parameters:    Size  Location     Type
  3887 ;;  badd            2    0[COMRAM] unsigned int 
  3888 ;;  bdat            1    2[COMRAM] unsigned char 
  3889 ;; Auto vars:     Size  Location     Type
  3890 ;;  GIE_BIT_VAL     1    6[COMRAM] unsigned char 
  3891 ;; Return value:  Size  Location     Type
  3892 ;;		None               void
  3893 ;; Registers used:
  3894 ;;		wreg, status,2, status,0
  3895 ;; Tracked objects:
  3896 ;;		On entry : 0/1
  3897 ;;		On exit  : 0/0
  3898 ;;		Unchanged: 0/0
  3899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3900 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3901 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3902 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3903 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3904 ;;Total ram usage:        7 bytes
  3905 ;; Hardware stack levels used:    1
  3906 ;; Hardware stack levels required when called:    4
  3907 ;; This function calls:
  3908 ;;		Nothing
  3909 ;; This function is called by:
  3910 ;;		_write___ee
  3911 ;;		_LO_ISR
  3912 ;; This function uses a non-reentrant model
  3913 ;;
  3914                           
  3915                           	psect	text16
  3916  00102A                     __ptext16:
  3917                           	opt stack 0
  3918  00102A                     _Write_b_eep:
  3919                           	opt stack 21
  3920                           
  3921                           ;incstack = 0
  3922  00102A  C002  F004         	movff	Write_b_eep@badd+1,??_Write_b_eep
  3923  00102E  C004  F005         	movff	??_Write_b_eep,??_Write_b_eep+1
  3924  001032  6A06               	clrf	(??_Write_b_eep+2)& (0+255),c
  3925  001034  5005               	movf	??_Write_b_eep+1,w,c
  3926  001036  0B03               	andlw	3
  3927  001038  6EAA               	movwf	4010,c	;volatile
  3928  00103A  C001  FFA9         	movff	Write_b_eep@badd,4009	;volatile
  3929  00103E  C003  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
  3930  001042  9EA6               	bcf	4006,7,c	;volatile
  3931  001044  9CA6               	bcf	4006,6,c	;volatile
  3932  001046  84A6               	bsf	4006,2,c	;volatile
  3933  001048  0E00               	movlw	0
  3934  00104A  BEF2               	btfsc	intcon,7,c	;volatile
  3935  00104C  0E01               	movlw	1
  3936  00104E  6E07               	movwf	Write_b_eep@GIE_BIT_VAL,c
  3937  001050  9EF2               	bcf	intcon,7,c	;volatile
  3938  001052  0E55               	movlw	85
  3939  001054  6EA7               	movwf	4007,c	;volatile
  3940  001056  0EAA               	movlw	170
  3941  001058  6EA7               	movwf	4007,c	;volatile
  3942  00105A  82A6               	bsf	4006,1,c	;volatile
  3943  00105C                     i1l903:
  3944  00105C  B2A6               	btfsc	4006,1,c	;volatile
  3945  00105E  D7FE               	goto	i1l903
  3946  001060  B007               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
  3947  001062  D002               	bra	i1u113_25
  3948  001064  9EF2               	bcf	intcon,7,c	;volatile
  3949  001066  D001               	bra	i1u113_26
  3950  001068                     i1u113_25:
  3951  001068  8EF2               	bsf	intcon,7,c	;volatile
  3952  00106A                     i1u113_26:
  3953  00106A  94A6               	bcf	4006,2,c	;volatile
  3954  00106C  0012               	return	
  3955  00106E                     __end_of_Write_b_eep:
  3956                           	opt stack 0
  3957                           tblptru	equ	0xFF8
  3958                           tblptrh	equ	0xFF7
  3959                           tblptrl	equ	0xFF6
  3960                           tablat	equ	0xFF5
  3961                           prodh	equ	0xFF4
  3962                           prodl	equ	0xFF3
  3963                           intcon	equ	0xFF2
  3964                           postinc0	equ	0xFEE
  3965                           wreg	equ	0xFE8
  3966                           postinc1	equ	0xFE6
  3967                           postdec1	equ	0xFE5
  3968                           fsr1h	equ	0xFE2
  3969                           fsr1l	equ	0xFE1
  3970                           bsr	equ	0xFE0
  3971                           indf2	equ	0xFDF
  3972                           postinc2	equ	0xFDE
  3973                           postdec2	equ	0xFDD
  3974                           fsr2h	equ	0xFDA
  3975                           fsr2l	equ	0xFD9
  3976                           status	equ	0xFD8
  3977                           
  3978 ;; *************** function _Busy_eep *****************
  3979 ;; Defined at:
  3980 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\EEP\busy_eep.c"
  3981 ;; Parameters:    Size  Location     Type
  3982 ;;		None
  3983 ;; Auto vars:     Size  Location     Type
  3984 ;;		None
  3985 ;; Return value:  Size  Location     Type
  3986 ;;		None               void
  3987 ;; Registers used:
  3988 ;;		None
  3989 ;; Tracked objects:
  3990 ;;		On entry : 0/1
  3991 ;;		On exit  : 0/0
  3992 ;;		Unchanged: 0/0
  3993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3997 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3998 ;;Total ram usage:        0 bytes
  3999 ;; Hardware stack levels used:    1
  4000 ;; Hardware stack levels required when called:    4
  4001 ;; This function calls:
  4002 ;;		Nothing
  4003 ;; This function is called by:
  4004 ;;		_write___ee
  4005 ;;		_LO_ISR
  4006 ;; This function uses a non-reentrant model
  4007 ;;
  4008                           
  4009                           	psect	text17
  4010  0011E0                     __ptext17:
  4011                           	opt stack 0
  4012  0011E0                     _Busy_eep:
  4013                           	opt stack 21
  4014  0011E0                     i1l872:
  4015  0011E0  A2A6               	btfss	4006,1,c	;volatile
  4016  0011E2  0012               	return	
  4017  0011E4  D7FD               	goto	i1l872
  4018  0011E6                     __end_of_Busy_eep:
  4019                           	opt stack 0
  4020                           tblptru	equ	0xFF8
  4021                           tblptrh	equ	0xFF7
  4022                           tblptrl	equ	0xFF6
  4023                           tablat	equ	0xFF5
  4024                           prodh	equ	0xFF4
  4025                           prodl	equ	0xFF3
  4026                           intcon	equ	0xFF2
  4027                           postinc0	equ	0xFEE
  4028                           wreg	equ	0xFE8
  4029                           postinc1	equ	0xFE6
  4030                           postdec1	equ	0xFE5
  4031                           fsr1h	equ	0xFE2
  4032                           fsr1l	equ	0xFE1
  4033                           bsr	equ	0xFE0
  4034                           indf2	equ	0xFDF
  4035                           postinc2	equ	0xFDE
  4036                           postdec2	equ	0xFDD
  4037                           fsr2h	equ	0xFDA
  4038                           fsr2l	equ	0xFD9
  4039                           status	equ	0xFD8
  4040                           
  4041 ;; *************** function _read___ee *****************
  4042 ;; Defined at:
  4043 ;;		line 18 in file "../lib/eeprom.c"
  4044 ;; Parameters:    Size  Location     Type
  4045 ;;  adr             2    5[COMRAM] unsigned int 
  4046 ;;  var             1    7[COMRAM] PTR unsigned char 
  4047 ;;		 -> set_ee_default@c1(1), 
  4048 ;;  byte            1    8[COMRAM] unsigned char 
  4049 ;; Auto vars:     Size  Location     Type
  4050 ;;		None
  4051 ;; Return value:  Size  Location     Type
  4052 ;;		None               void
  4053 ;; Registers used:
  4054 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4055 ;; Tracked objects:
  4056 ;;		On entry : 0/1
  4057 ;;		On exit  : 0/0
  4058 ;;		Unchanged: 0/0
  4059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4060 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4063 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4064 ;;Total ram usage:        4 bytes
  4065 ;; Hardware stack levels used:    1
  4066 ;; Hardware stack levels required when called:    5
  4067 ;; This function calls:
  4068 ;;		_Read_b_eep
  4069 ;; This function is called by:
  4070 ;;		_set_ee_default
  4071 ;; This function uses a non-reentrant model
  4072 ;;
  4073                           
  4074                           	psect	text18
  4075  0010FC                     __ptext18:
  4076                           	opt stack 0
  4077  0010FC                     _read___ee:
  4078                           	opt stack 21
  4079                           
  4080                           ;eeprom.c: 19: while(byte--){
  4081                           
  4082                           ;incstack = 0
  4083  0010FC  D00D               	goto	i1l2822
  4084  0010FE                     i1l2820:
  4085                           
  4086                           ;eeprom.c: 20: (unsigned char)(*(((unsigned char *)var)+byte))=Read_b_eep(adr+byte);
  4087  0010FE  5008               	movf	read___ee@var,w,c
  4088  001100  2409               	addwf	read___ee@byte,w,c
  4089  001102  6ED9               	movwf	fsr2l,c
  4090  001104  6ADA               	clrf	fsr2h,c
  4091  001106  5009               	movf	read___ee@byte,w,c
  4092  001108  2406               	addwf	read___ee@adr,w,c
  4093  00110A  6E01               	movwf	Read_b_eep@badd,c
  4094  00110C  0E00               	movlw	0
  4095  00110E  2007               	addwfc	read___ee@adr+1,w,c
  4096  001110  6E02               	movwf	Read_b_eep@badd+1,c
  4097  001112  EC91  F008         	call	_Read_b_eep	;wreg free
  4098  001116  6EDF               	movwf	indf2,c
  4099  001118                     i1l2822:
  4100  001118  0609               	decf	read___ee@byte,f,c
  4101  00111A  2809               	incf	read___ee@byte& (0+255),w,c
  4102  00111C  B4D8               	btfsc	status,2,c
  4103  00111E  0012               	return	
  4104  001120  D7EE               	goto	i1l2820
  4105  001122                     __end_of_read___ee:
  4106                           	opt stack 0
  4107                           tblptru	equ	0xFF8
  4108                           tblptrh	equ	0xFF7
  4109                           tblptrl	equ	0xFF6
  4110                           tablat	equ	0xFF5
  4111                           prodh	equ	0xFF4
  4112                           prodl	equ	0xFF3
  4113                           intcon	equ	0xFF2
  4114                           postinc0	equ	0xFEE
  4115                           wreg	equ	0xFE8
  4116                           postinc1	equ	0xFE6
  4117                           postdec1	equ	0xFE5
  4118                           fsr1h	equ	0xFE2
  4119                           fsr1l	equ	0xFE1
  4120                           bsr	equ	0xFE0
  4121                           indf2	equ	0xFDF
  4122                           postinc2	equ	0xFDE
  4123                           postdec2	equ	0xFDD
  4124                           fsr2h	equ	0xFDA
  4125                           fsr2l	equ	0xFD9
  4126                           status	equ	0xFD8
  4127                           
  4128 ;; *************** function _Read_b_eep *****************
  4129 ;; Defined at:
  4130 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\EEP\read_B.c"
  4131 ;; Parameters:    Size  Location     Type
  4132 ;;  badd            2    0[COMRAM] unsigned int 
  4133 ;; Auto vars:     Size  Location     Type
  4134 ;;		None
  4135 ;; Return value:  Size  Location     Type
  4136 ;;                  1    wreg      unsigned char 
  4137 ;; Registers used:
  4138 ;;		wreg, status,2, status,0
  4139 ;; Tracked objects:
  4140 ;;		On entry : 0/1
  4141 ;;		On exit  : 0/0
  4142 ;;		Unchanged: 0/0
  4143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4144 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4146 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4147 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4148 ;;Total ram usage:        5 bytes
  4149 ;; Hardware stack levels used:    1
  4150 ;; Hardware stack levels required when called:    4
  4151 ;; This function calls:
  4152 ;;		Nothing
  4153 ;; This function is called by:
  4154 ;;		_read___ee
  4155 ;;		_LO_ISR
  4156 ;; This function uses a non-reentrant model
  4157 ;;
  4158                           
  4159                           	psect	text19
  4160  001122                     __ptext19:
  4161                           	opt stack 0
  4162  001122                     _Read_b_eep:
  4163                           	opt stack 21
  4164                           
  4165                           ;incstack = 0
  4166  001122  C002  F003         	movff	Read_b_eep@badd+1,??_Read_b_eep
  4167  001126  C003  F004         	movff	??_Read_b_eep,??_Read_b_eep+1
  4168  00112A  6A05               	clrf	(??_Read_b_eep+2)& (0+255),c
  4169  00112C  5004               	movf	??_Read_b_eep+1,w,c
  4170  00112E  0B03               	andlw	3
  4171  001130  6EAA               	movwf	4010,c	;volatile
  4172  001132  C001  FFA9         	movff	Read_b_eep@badd,4009	;volatile
  4173  001136  9CA6               	bcf	4006,6,c	;volatile
  4174  001138  9EA6               	bcf	4006,7,c	;volatile
  4175  00113A  80A6               	bsf	4006,0,c	;volatile
  4176  00113C  F000               	nop	
  4177  00113E  F000               	nop	
  4178  001140  50A8               	movf	4008,w,c	;volatile
  4179  001142  0012               	return	
  4180  001144                     __end_of_Read_b_eep:
  4181                           	opt stack 0
  4182                           tblptru	equ	0xFF8
  4183                           tblptrh	equ	0xFF7
  4184                           tblptrl	equ	0xFF6
  4185                           tablat	equ	0xFF5
  4186                           prodh	equ	0xFF4
  4187                           prodl	equ	0xFF3
  4188                           intcon	equ	0xFF2
  4189                           postinc0	equ	0xFEE
  4190                           wreg	equ	0xFE8
  4191                           postinc1	equ	0xFE6
  4192                           postdec1	equ	0xFE5
  4193                           fsr1h	equ	0xFE2
  4194                           fsr1l	equ	0xFE1
  4195                           bsr	equ	0xFE0
  4196                           indf2	equ	0xFDF
  4197                           postinc2	equ	0xFDE
  4198                           postdec2	equ	0xFDD
  4199                           fsr2h	equ	0xFDA
  4200                           fsr2l	equ	0xFD9
  4201                           status	equ	0xFD8
  4202                           
  4203 ;; *************** function _putbyte *****************
  4204 ;; Defined at:
  4205 ;;		line 50 in file "../lib/usart.c"
  4206 ;; Parameters:    Size  Location     Type
  4207 ;;  byte            1    wreg     unsigned char 
  4208 ;; Auto vars:     Size  Location     Type
  4209 ;;  byte            1    0[COMRAM] unsigned char 
  4210 ;; Return value:  Size  Location     Type
  4211 ;;		None               void
  4212 ;; Registers used:
  4213 ;;		wreg
  4214 ;; Tracked objects:
  4215 ;;		On entry : F/1
  4216 ;;		On exit  : F/1
  4217 ;;		Unchanged: F/0
  4218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4220 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4222 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4223 ;;Total ram usage:        1 bytes
  4224 ;; Hardware stack levels used:    1
  4225 ;; Hardware stack levels required when called:    4
  4226 ;; This function calls:
  4227 ;;		Nothing
  4228 ;; This function is called by:
  4229 ;;		_LO_ISR
  4230 ;; This function uses a non-reentrant model
  4231 ;;
  4232                           
  4233                           	psect	text20
  4234  0011D4                     __ptext20:
  4235                           	opt stack 0
  4236  0011D4                     _putbyte:
  4237                           	opt stack 23
  4238                           
  4239                           ;incstack = 0
  4240                           ;putbyte@byte stored from wreg
  4241  0011D4  6E01               	movwf	putbyte@byte,c
  4242  0011D6                     i1l199:
  4243                           
  4244                           ; BSR set to: 1
  4245  0011D6  A2AC               	btfss	4012,1,c	;volatile
  4246  0011D8  D7FE               	goto	i1l199
  4247                           
  4248                           ; BSR set to: 1
  4249                           ;usart.c: 58: TXREG = byte;
  4250  0011DA  C001  FFAD         	movff	putbyte@byte,4013	;volatile
  4251                           
  4252                           ; BSR set to: 1
  4253  0011DE  0012               	return	
  4254  0011E0                     __end_of_putbyte:
  4255                           	opt stack 0
  4256                           tblptru	equ	0xFF8
  4257                           tblptrh	equ	0xFF7
  4258                           tblptrl	equ	0xFF6
  4259                           tablat	equ	0xFF5
  4260                           prodh	equ	0xFF4
  4261                           prodl	equ	0xFF3
  4262                           intcon	equ	0xFF2
  4263                           postinc0	equ	0xFEE
  4264                           wreg	equ	0xFE8
  4265                           postinc1	equ	0xFE6
  4266                           postdec1	equ	0xFE5
  4267                           fsr1h	equ	0xFE2
  4268                           fsr1l	equ	0xFE1
  4269                           bsr	equ	0xFE0
  4270                           indf2	equ	0xFDF
  4271                           postinc2	equ	0xFDE
  4272                           postdec2	equ	0xFDD
  4273                           fsr2h	equ	0xFDA
  4274                           fsr2l	equ	0xFD9
  4275                           status	equ	0xFD8
  4276                           
  4277 ;; *************** function _crc_mb_check *****************
  4278 ;; Defined at:
  4279 ;;		line 74 in file "../lib/modbus_RTU.c"
  4280 ;; Parameters:    Size  Location     Type
  4281 ;;  buffer          2    8[COMRAM] PTR unsigned char 
  4282 ;;		 -> RxTxBuff(128), 
  4283 ;;  cnt             1   10[COMRAM] unsigned char 
  4284 ;; Auto vars:     Size  Location     Type
  4285 ;;  crc             2   16[COMRAM] unsigned int 
  4286 ;;  i               1   15[COMRAM] unsigned char 
  4287 ;; Return value:  Size  Location     Type
  4288 ;;                  1    wreg      unsigned char 
  4289 ;; Registers used:
  4290 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4291 ;; Tracked objects:
  4292 ;;		On entry : F/1
  4293 ;;		On exit  : 0/0
  4294 ;;		Unchanged: 0/0
  4295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4296 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4297 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4298 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4299 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4300 ;;Total ram usage:       10 bytes
  4301 ;; Hardware stack levels used:    1
  4302 ;; Hardware stack levels required when called:    5
  4303 ;; This function calls:
  4304 ;;		_crc_mb_calc
  4305 ;;		_crc_mb_init
  4306 ;; This function is called by:
  4307 ;;		_LO_ISR
  4308 ;; This function uses a non-reentrant model
  4309 ;;
  4310                           
  4311                           	psect	text21
  4312  000E98                     __ptext21:
  4313                           	opt stack 0
  4314  000E98                     _crc_mb_check:
  4315                           	opt stack 22
  4316                           
  4317                           ; BSR set to: 1
  4318                           ;modbus_RTU.c: 76: unsigned int crc;
  4319                           ;modbus_RTU.c: 77: unsigned char i;
  4320                           ;modbus_RTU.c: 79: crc_mb_init(&crc);
  4321                           
  4322                           ; BSR set to: 1
  4323                           ;incstack = 0
  4324  000E98  0E11               	movlw	crc_mb_check@crc& (0+255)
  4325  000E9A  ECDD  F008         	call	_crc_mb_init
  4326                           
  4327                           ; BSR set to: 1
  4328                           ;modbus_RTU.c: 81: for (i = 0; i < cnt; i++) {
  4329  000E9E  6A10               	clrf	crc_mb_check@i,c
  4330  000EA0  D00C               	goto	i1l3050
  4331  000EA2                     i1l3044:
  4332                           
  4333                           ;modbus_RTU.c: 82: crc_mb_calc(&crc, *buffer++);
  4334  000EA2  C009  FFD9         	movff	crc_mb_check@buffer,fsr2l
  4335  000EA6  C00A  FFDA         	movff	crc_mb_check@buffer+1,fsr2h
  4336  000EAA  50DF               	movf	indf2,w,c
  4337  000EAC  6E01               	movwf	crc_mb_calc@next,c
  4338  000EAE  0E11               	movlw	crc_mb_check@crc& (0+255)
  4339  000EB0  EC1C  F007         	call	_crc_mb_calc
  4340  000EB4  4A09               	infsnz	crc_mb_check@buffer,f,c
  4341  000EB6  2A0A               	incf	crc_mb_check@buffer+1,f,c
  4342  000EB8  2A10               	incf	crc_mb_check@i,f,c
  4343  000EBA                     i1l3050:
  4344  000EBA  500B               	movf	crc_mb_check@cnt,w,c
  4345  000EBC  5C10               	subwf	crc_mb_check@i,w,c
  4346  000EBE  E3F1               	bnc	i1l3044
  4347                           
  4348                           ;modbus_RTU.c: 83: }
  4349                           ;modbus_RTU.c: 91: if (((unsigned char) (crc >> 8) == *buffer++) && ((unsigned char) crc
      +                           == *buffer)) return 1;
  4350  000EC0  C009  FFD9         	movff	crc_mb_check@buffer,fsr2l
  4351  000EC4  C00A  FFDA         	movff	crc_mb_check@buffer+1,fsr2h
  4352  000EC8  4A09               	infsnz	crc_mb_check@buffer,f,c
  4353  000ECA  2A0A               	incf	crc_mb_check@buffer+1,f,c
  4354  000ECC  50DF               	movf	indf2,w,c
  4355  000ECE  6E0C               	movwf	??_crc_mb_check& (0+255),c
  4356  000ED0  C012  F00D         	movff	crc_mb_check@crc+1,??_crc_mb_check+1
  4357  000ED4  C00D  F00E         	movff	??_crc_mb_check+1,??_crc_mb_check+2
  4358  000ED8  6A0F               	clrf	(??_crc_mb_check+3)& (0+255),c
  4359  000EDA  500E               	movf	??_crc_mb_check+2,w,c
  4360  000EDC  180C               	xorwf	??_crc_mb_check,w,c
  4361  000EDE  E108               	bnz	i1l3060
  4362  000EE0  5011               	movf	crc_mb_check@crc,w,c
  4363  000EE2  C009  FFD9         	movff	crc_mb_check@buffer,fsr2l
  4364  000EE6  C00A  FFDA         	movff	crc_mb_check@buffer+1,fsr2h
  4365  000EEA  62DF               	cpfseq	indf2,c
  4366  000EEC  0C00               	retlw	0
  4367  000EEE  0C01               	retlw	1
  4368  000EF0                     i1l3060:
  4369                           
  4370                           ;modbus_RTU.c: 96: return 0;
  4371  000EF0  0C00               	retlw	0
  4372  000EF2                     __end_of_crc_mb_check:
  4373                           	opt stack 0
  4374                           tblptru	equ	0xFF8
  4375                           tblptrh	equ	0xFF7
  4376                           tblptrl	equ	0xFF6
  4377                           tablat	equ	0xFF5
  4378                           prodh	equ	0xFF4
  4379                           prodl	equ	0xFF3
  4380                           intcon	equ	0xFF2
  4381                           postinc0	equ	0xFEE
  4382                           wreg	equ	0xFE8
  4383                           postinc1	equ	0xFE6
  4384                           postdec1	equ	0xFE5
  4385                           fsr1h	equ	0xFE2
  4386                           fsr1l	equ	0xFE1
  4387                           bsr	equ	0xFE0
  4388                           indf2	equ	0xFDF
  4389                           postinc2	equ	0xFDE
  4390                           postdec2	equ	0xFDD
  4391                           fsr2h	equ	0xFDA
  4392                           fsr2l	equ	0xFD9
  4393                           status	equ	0xFD8
  4394                           
  4395 ;; *************** function _crc_mb *****************
  4396 ;; Defined at:
  4397 ;;		line 58 in file "../lib/modbus_RTU.c"
  4398 ;; Parameters:    Size  Location     Type
  4399 ;;  buffer          2    8[COMRAM] PTR unsigned char 
  4400 ;;		 -> RxTxBuff(128), 
  4401 ;;  count           1   10[COMRAM] unsigned char 
  4402 ;; Auto vars:     Size  Location     Type
  4403 ;;  CRC             2   15[COMRAM] unsigned int 
  4404 ;;  i               1   14[COMRAM] unsigned char 
  4405 ;; Return value:  Size  Location     Type
  4406 ;;                  2    8[COMRAM] unsigned int 
  4407 ;; Registers used:
  4408 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4409 ;; Tracked objects:
  4410 ;;		On entry : F/1
  4411 ;;		On exit  : 0/0
  4412 ;;		Unchanged: 0/0
  4413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4414 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4415 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4416 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4417 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4418 ;;Total ram usage:        9 bytes
  4419 ;; Hardware stack levels used:    1
  4420 ;; Hardware stack levels required when called:    5
  4421 ;; This function calls:
  4422 ;;		_crc_mb_calc
  4423 ;;		_crc_mb_init
  4424 ;; This function is called by:
  4425 ;;		_LO_ISR
  4426 ;; This function uses a non-reentrant model
  4427 ;;
  4428                           
  4429                           	psect	text22
  4430  000F48                     __ptext22:
  4431                           	opt stack 0
  4432  000F48                     _crc_mb:
  4433                           	opt stack 22
  4434                           
  4435                           ; BSR set to: 1
  4436                           ;modbus_RTU.c: 59: unsigned int CRC;
  4437                           ;modbus_RTU.c: 60: unsigned char i;
  4438                           ;modbus_RTU.c: 62: crc_mb_init(&CRC);
  4439                           
  4440                           ;incstack = 0
  4441  000F48  0E10               	movlw	crc_mb@CRC& (0+255)
  4442  000F4A  ECDD  F008         	call	_crc_mb_init
  4443                           
  4444                           ; BSR set to: 1
  4445                           ;modbus_RTU.c: 63: for (i = 0; i < count; i ++) {
  4446  000F4E  6A0F               	clrf	crc_mb@i,c
  4447  000F50  D00C               	goto	i1l3074
  4448  000F52                     i1l3068:
  4449                           
  4450                           ;modbus_RTU.c: 64: crc_mb_calc(&CRC, *buffer++);
  4451  000F52  C009  FFD9         	movff	crc_mb@buffer,fsr2l
  4452  000F56  C00A  FFDA         	movff	crc_mb@buffer+1,fsr2h
  4453  000F5A  50DF               	movf	indf2,w,c
  4454  000F5C  6E01               	movwf	crc_mb_calc@next,c
  4455  000F5E  0E10               	movlw	crc_mb@CRC& (0+255)
  4456  000F60  EC1C  F007         	call	_crc_mb_calc
  4457  000F64  4A09               	infsnz	crc_mb@buffer,f,c
  4458  000F66  2A0A               	incf	crc_mb@buffer+1,f,c
  4459  000F68  2A0F               	incf	crc_mb@i,f,c
  4460  000F6A                     i1l3074:
  4461  000F6A  500B               	movf	crc_mb@count,w,c
  4462  000F6C  5C0F               	subwf	crc_mb@i,w,c
  4463  000F6E  E3F1               	bnc	i1l3068
  4464                           
  4465                           ;modbus_RTU.c: 65: }
  4466                           ;modbus_RTU.c: 66: *buffer++ = (unsigned char )(CRC >> 8);
  4467  000F70  C011  F00C         	movff	crc_mb@CRC+1,??_crc_mb
  4468  000F74  C00C  F00D         	movff	??_crc_mb,??_crc_mb+1
  4469  000F78  6A0E               	clrf	(??_crc_mb+2)& (0+255),c
  4470  000F7A  500D               	movf	??_crc_mb+1,w,c
  4471  000F7C  C009  FFD9         	movff	crc_mb@buffer,fsr2l
  4472  000F80  C00A  FFDA         	movff	crc_mb@buffer+1,fsr2h
  4473  000F84  6EDF               	movwf	indf2,c
  4474  000F86  4A09               	infsnz	crc_mb@buffer,f,c
  4475  000F88  2A0A               	incf	crc_mb@buffer+1,f,c
  4476                           
  4477                           ;modbus_RTU.c: 67: *buffer = (unsigned char ) CRC;
  4478  000F8A  C009  FFD9         	movff	crc_mb@buffer,fsr2l
  4479  000F8E  C00A  FFDA         	movff	crc_mb@buffer+1,fsr2h
  4480  000F92  C010  FFDF         	movff	crc_mb@CRC,indf2
  4481  000F96  0012               	return	
  4482  000F98                     __end_of_crc_mb:
  4483                           	opt stack 0
  4484                           tblptru	equ	0xFF8
  4485                           tblptrh	equ	0xFF7
  4486                           tblptrl	equ	0xFF6
  4487                           tablat	equ	0xFF5
  4488                           prodh	equ	0xFF4
  4489                           prodl	equ	0xFF3
  4490                           intcon	equ	0xFF2
  4491                           postinc0	equ	0xFEE
  4492                           wreg	equ	0xFE8
  4493                           postinc1	equ	0xFE6
  4494                           postdec1	equ	0xFE5
  4495                           fsr1h	equ	0xFE2
  4496                           fsr1l	equ	0xFE1
  4497                           bsr	equ	0xFE0
  4498                           indf2	equ	0xFDF
  4499                           postinc2	equ	0xFDE
  4500                           postdec2	equ	0xFDD
  4501                           fsr2h	equ	0xFDA
  4502                           fsr2l	equ	0xFD9
  4503                           status	equ	0xFD8
  4504                           
  4505 ;; *************** function _crc_mb_init *****************
  4506 ;; Defined at:
  4507 ;;		line 20 in file "../lib/modbus_RTU.c"
  4508 ;; Parameters:    Size  Location     Type
  4509 ;;  code            1    wreg     PTR unsigned int 
  4510 ;;		 -> crc_mb_check@crc(2), crc_mb@CRC(2), 
  4511 ;; Auto vars:     Size  Location     Type
  4512 ;;  code            1    0[COMRAM] PTR unsigned int 
  4513 ;;		 -> crc_mb_check@crc(2), crc_mb@CRC(2), 
  4514 ;; Return value:  Size  Location     Type
  4515 ;;		None               void
  4516 ;; Registers used:
  4517 ;;		wreg, fsr2l, fsr2h, status,2
  4518 ;; Tracked objects:
  4519 ;;		On entry : F/1
  4520 ;;		On exit  : F/1
  4521 ;;		Unchanged: F/0
  4522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4524 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4526 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4527 ;;Total ram usage:        1 bytes
  4528 ;; Hardware stack levels used:    1
  4529 ;; Hardware stack levels required when called:    4
  4530 ;; This function calls:
  4531 ;;		Nothing
  4532 ;; This function is called by:
  4533 ;;		_crc_mb
  4534 ;;		_crc_mb_check
  4535 ;; This function uses a non-reentrant model
  4536 ;;
  4537                           
  4538                           	psect	text23
  4539  0011BA                     __ptext23:
  4540                           	opt stack 0
  4541  0011BA                     _crc_mb_init:
  4542                           	opt stack 22
  4543                           
  4544                           ;incstack = 0
  4545                           ;crc_mb_init@code stored from wreg
  4546  0011BA  6E01               	movwf	crc_mb_init@code,c
  4547                           
  4548                           ; BSR set to: 1
  4549                           ;modbus_RTU.c: 21: *code = 0xffff;
  4550  0011BC  5001               	movf	crc_mb_init@code,w,c
  4551  0011BE  6ED9               	movwf	fsr2l,c
  4552  0011C0  6ADA               	clrf	fsr2h,c
  4553  0011C2  68DE               	setf	postinc2,c
  4554  0011C4  68DD               	setf	postdec2,c
  4555                           
  4556                           ; BSR set to: 1
  4557  0011C6  0CFF               	retlw	255
  4558  0011C8                     __end_of_crc_mb_init:
  4559                           	opt stack 0
  4560                           tblptru	equ	0xFF8
  4561                           tblptrh	equ	0xFF7
  4562                           tblptrl	equ	0xFF6
  4563                           tablat	equ	0xFF5
  4564                           prodh	equ	0xFF4
  4565                           prodl	equ	0xFF3
  4566                           intcon	equ	0xFF2
  4567                           postinc0	equ	0xFEE
  4568                           wreg	equ	0xFE8
  4569                           postinc1	equ	0xFE6
  4570                           postdec1	equ	0xFE5
  4571                           fsr1h	equ	0xFE2
  4572                           fsr1l	equ	0xFE1
  4573                           bsr	equ	0xFE0
  4574                           indf2	equ	0xFDF
  4575                           postinc2	equ	0xFDE
  4576                           postdec2	equ	0xFDD
  4577                           fsr2h	equ	0xFDA
  4578                           fsr2l	equ	0xFD9
  4579                           status	equ	0xFD8
  4580                           
  4581 ;; *************** function _crc_mb_calc *****************
  4582 ;; Defined at:
  4583 ;;		line 44 in file "../lib/modbus_RTU.c"
  4584 ;; Parameters:    Size  Location     Type
  4585 ;;  code            1    wreg     PTR unsigned int 
  4586 ;;		 -> crc_mb_check@crc(2), crc_mb@CRC(2), 
  4587 ;;  next            1    0[COMRAM] unsigned char 
  4588 ;; Auto vars:     Size  Location     Type
  4589 ;;  code            1    7[COMRAM] PTR unsigned int 
  4590 ;;		 -> crc_mb_check@crc(2), crc_mb@CRC(2), 
  4591 ;;  i               1    6[COMRAM] unsigned char 
  4592 ;;  flag            1    5[COMRAM] unsigned char 
  4593 ;; Return value:  Size  Location     Type
  4594 ;;                  1    wreg      unsigned char 
  4595 ;; Registers used:
  4596 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4597 ;; Tracked objects:
  4598 ;;		On entry : 0/1
  4599 ;;		On exit  : 0/0
  4600 ;;		Unchanged: 0/0
  4601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4602 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4603 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4604 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4605 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4606 ;;Total ram usage:        8 bytes
  4607 ;; Hardware stack levels used:    1
  4608 ;; Hardware stack levels required when called:    4
  4609 ;; This function calls:
  4610 ;;		Nothing
  4611 ;; This function is called by:
  4612 ;;		_crc_mb
  4613 ;;		_crc_mb_check
  4614 ;; This function uses a non-reentrant model
  4615 ;;
  4616                           
  4617                           	psect	text24
  4618  000E38                     __ptext24:
  4619                           	opt stack 0
  4620  000E38                     _crc_mb_calc:
  4621                           	opt stack 22
  4622                           
  4623                           ; BSR set to: 1
  4624                           ;incstack = 0
  4625                           ;crc_mb_calc@code stored from wreg
  4626  000E38  6E08               	movwf	crc_mb_calc@code,c
  4627                           
  4628                           ;modbus_RTU.c: 45: unsigned char flag;
  4629                           ;modbus_RTU.c: 46: unsigned char i;
  4630                           ;modbus_RTU.c: 47: *code ^= next;
  4631  000E3A  5008               	movf	crc_mb_calc@code,w,c
  4632  000E3C  6ED9               	movwf	fsr2l,c
  4633  000E3E  6ADA               	clrf	fsr2h,c
  4634  000E40  5001               	movf	crc_mb_calc@next,w,c
  4635  000E42  1ADE               	xorwf	postinc2,f,c
  4636  000E44  0E00               	movlw	0
  4637  000E46  1ADD               	xorwf	postdec2,f,c
  4638                           
  4639                           ;modbus_RTU.c: 49: for (i = 0; i < 8; i++) {
  4640  000E48  6A07               	clrf	crc_mb_calc@i,c
  4641  000E4A                     i1l2866:
  4642                           
  4643                           ;modbus_RTU.c: 50: flag = *code & 1;
  4644  000E4A  5008               	movf	crc_mb_calc@code,w,c
  4645  000E4C  6ED9               	movwf	fsr2l,c
  4646  000E4E  6ADA               	clrf	fsr2h,c
  4647  000E50  50DF               	movf	indf2,w,c
  4648  000E52  0B01               	andlw	1
  4649  000E54  6E06               	movwf	crc_mb_calc@flag,c
  4650                           
  4651                           ;modbus_RTU.c: 51: *code = *code >> 1;
  4652  000E56  5008               	movf	crc_mb_calc@code,w,c
  4653  000E58  6ED9               	movwf	fsr2l,c
  4654  000E5A  6ADA               	clrf	fsr2h,c
  4655  000E5C  CFDE F002          	movff	postinc2,??_crc_mb_calc
  4656  000E60  CFDD F003          	movff	postdec2,??_crc_mb_calc+1
  4657  000E64  90D8               	bcf	status,0,c
  4658  000E66  3003               	rrcf	??_crc_mb_calc+1,w,c
  4659  000E68  6E05               	movwf	(??_crc_mb_calc+3)& (0+255),c
  4660  000E6A  3002               	rrcf	??_crc_mb_calc,w,c
  4661  000E6C  6E04               	movwf	(??_crc_mb_calc+2)& (0+255),c
  4662  000E6E  5008               	movf	crc_mb_calc@code,w,c
  4663  000E70  6ED9               	movwf	fsr2l,c
  4664  000E72  6ADA               	clrf	fsr2h,c
  4665  000E74  C004  FFDE         	movff	??_crc_mb_calc+2,postinc2
  4666  000E78  C005  FFDD         	movff	??_crc_mb_calc+3,postdec2
  4667                           
  4668                           ;modbus_RTU.c: 52: if (flag) *code ^= 0xA001;
  4669  000E7C  5006               	movf	crc_mb_calc@flag,w,c
  4670  000E7E  E007               	bz	i1l2872
  4671  000E80  5008               	movf	crc_mb_calc@code,w,c
  4672  000E82  6ED9               	movwf	fsr2l,c
  4673  000E84  6ADA               	clrf	fsr2h,c
  4674  000E86  0E01               	movlw	1
  4675  000E88  1ADE               	xorwf	postinc2,f,c
  4676  000E8A  0EA0               	movlw	160
  4677  000E8C  1ADD               	xorwf	postdec2,f,c
  4678  000E8E                     i1l2872:
  4679  000E8E  2A07               	incf	crc_mb_calc@i,f,c
  4680  000E90  0E07               	movlw	7
  4681  000E92  6407               	cpfsgt	crc_mb_calc@i,c
  4682  000E94  D7DA               	goto	i1l2866
  4683  000E96  0C07               	retlw	7
  4684  000E98                     __end_of_crc_mb_calc:
  4685                           	opt stack 0
  4686                           tblptru	equ	0xFF8
  4687                           tblptrh	equ	0xFF7
  4688                           tblptrl	equ	0xFF6
  4689                           tablat	equ	0xFF5
  4690                           prodh	equ	0xFF4
  4691                           prodl	equ	0xFF3
  4692                           intcon	equ	0xFF2
  4693                           postinc0	equ	0xFEE
  4694                           wreg	equ	0xFE8
  4695                           postinc1	equ	0xFE6
  4696                           postdec1	equ	0xFE5
  4697                           fsr1h	equ	0xFE2
  4698                           fsr1l	equ	0xFE1
  4699                           bsr	equ	0xFE0
  4700                           indf2	equ	0xFDF
  4701                           postinc2	equ	0xFDE
  4702                           postdec2	equ	0xFDD
  4703                           fsr2h	equ	0xFDA
  4704                           fsr2l	equ	0xFD9
  4705                           status	equ	0xFD8
  4706                           
  4707 ;; *************** function _SendMessage *****************
  4708 ;; Defined at:
  4709 ;;		line 43 in file "../lib/messages.c"
  4710 ;; Parameters:    Size  Location     Type
  4711 ;;  Msg             1    wreg     unsigned char 
  4712 ;; Auto vars:     Size  Location     Type
  4713 ;;  Msg             1    0[COMRAM] unsigned char 
  4714 ;; Return value:  Size  Location     Type
  4715 ;;		None               void
  4716 ;; Registers used:
  4717 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4718 ;; Tracked objects:
  4719 ;;		On entry : 0/1
  4720 ;;		On exit  : F/0
  4721 ;;		Unchanged: 0/0
  4722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4724 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4726 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4727 ;;Total ram usage:        1 bytes
  4728 ;; Hardware stack levels used:    1
  4729 ;; Hardware stack levels required when called:    4
  4730 ;; This function calls:
  4731 ;;		Nothing
  4732 ;; This function is called by:
  4733 ;;		_LO_ISR
  4734 ;; This function uses a non-reentrant model
  4735 ;;
  4736                           
  4737                           	psect	text25
  4738  001196                     __ptext25:
  4739                           	opt stack 0
  4740  001196                     _SendMessage:
  4741                           	opt stack 23
  4742                           
  4743                           ;incstack = 0
  4744                           ;SendMessage@Msg stored from wreg
  4745  001196  6E01               	movwf	SendMessage@Msg,c
  4746                           
  4747                           ;messages.c: 44: Messages[Msg] = MSG_PHASE_PREPARE;
  4748  001198  5001               	movf	SendMessage@Msg,w,c
  4749  00119A  0100               	movlb	0	; () banked
  4750  00119C  0F60               	addlw	low _Messages	;volatile
  4751  00119E  6ED9               	movwf	fsr2l,c
  4752  0011A0  6ADA               	clrf	fsr2h,c
  4753  0011A2  0E01               	movlw	1
  4754  0011A4  6EDF               	movwf	indf2,c
  4755                           
  4756                           ; BSR set to: 0
  4757  0011A6  0C01               	retlw	1
  4758  0011A8                     __end_of_SendMessage:
  4759                           	opt stack 0
  4760                           tblptru	equ	0xFF8
  4761                           tblptrh	equ	0xFF7
  4762                           tblptrl	equ	0xFF6
  4763                           tablat	equ	0xFF5
  4764                           prodh	equ	0xFF4
  4765                           prodl	equ	0xFF3
  4766                           intcon	equ	0xFF2
  4767                           postinc0	equ	0xFEE
  4768                           wreg	equ	0xFE8
  4769                           postinc1	equ	0xFE6
  4770                           postdec1	equ	0xFE5
  4771                           fsr1h	equ	0xFE2
  4772                           fsr1l	equ	0xFE1
  4773                           bsr	equ	0xFE0
  4774                           indf2	equ	0xFDF
  4775                           postinc2	equ	0xFDE
  4776                           postdec2	equ	0xFDD
  4777                           fsr2h	equ	0xFDA
  4778                           fsr2l	equ	0xFD9
  4779                           status	equ	0xFD8
  4780                           
  4781 ;; *************** function _BSemOn *****************
  4782 ;; Defined at:
  4783 ;;		line 142 in file "../lib/messages.c"
  4784 ;; Parameters:    Size  Location     Type
  4785 ;;  Sem             1    wreg     unsigned char 
  4786 ;; Auto vars:     Size  Location     Type
  4787 ;;  Sem             1    0[COMRAM] unsigned char 
  4788 ;; Return value:  Size  Location     Type
  4789 ;;		None               void
  4790 ;; Registers used:
  4791 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4792 ;; Tracked objects:
  4793 ;;		On entry : 0/1
  4794 ;;		On exit  : F/0
  4795 ;;		Unchanged: 0/0
  4796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4798 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4800 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4801 ;;Total ram usage:        1 bytes
  4802 ;; Hardware stack levels used:    1
  4803 ;; Hardware stack levels required when called:    4
  4804 ;; This function calls:
  4805 ;;		Nothing
  4806 ;; This function is called by:
  4807 ;;		_LO_ISR
  4808 ;; This function uses a non-reentrant model
  4809 ;;
  4810                           
  4811                           	psect	text26
  4812  0011A8                     __ptext26:
  4813                           	opt stack 0
  4814  0011A8                     _BSemOn:
  4815                           	opt stack 23
  4816                           
  4817                           ; BSR set to: 0
  4818                           ;incstack = 0
  4819                           ;BSemOn@Sem stored from wreg
  4820  0011A8  6E01               	movwf	BSemOn@Sem,c
  4821                           
  4822                           ;messages.c: 143: BSem[Sem] = 1;
  4823  0011AA  5001               	movf	BSemOn@Sem,w,c
  4824  0011AC  0100               	movlb	0	; () banked
  4825  0011AE  0F6A               	addlw	low _BSem	;volatile
  4826  0011B0  6ED9               	movwf	fsr2l,c
  4827  0011B2  6ADA               	clrf	fsr2h,c
  4828  0011B4  0E01               	movlw	1
  4829  0011B6  6EDF               	movwf	indf2,c
  4830                           
  4831                           ; BSR set to: 0
  4832  0011B8  0C01               	retlw	1
  4833  0011BA                     __end_of_BSemOn:
  4834                           	opt stack 0
  4835                           tblptru	equ	0xFF8
  4836                           tblptrh	equ	0xFF7
  4837                           tblptrl	equ	0xFF6
  4838                           tablat	equ	0xFF5
  4839                           prodh	equ	0xFF4
  4840                           prodl	equ	0xFF3
  4841                           intcon	equ	0xFF2
  4842                           postinc0	equ	0xFEE
  4843                           wreg	equ	0xFE8
  4844                           postinc1	equ	0xFE6
  4845                           postdec1	equ	0xFE5
  4846                           fsr1h	equ	0xFE2
  4847                           fsr1l	equ	0xFE1
  4848                           bsr	equ	0xFE0
  4849                           indf2	equ	0xFDF
  4850                           postinc2	equ	0xFDE
  4851                           postdec2	equ	0xFDD
  4852                           fsr2h	equ	0xFDA
  4853                           fsr2l	equ	0xFD9
  4854                           status	equ	0xFD8
  4855                           
  4856 ;; *************** function _HI_ISR *****************
  4857 ;; Defined at:
  4858 ;;		line 33 in file "../isr.c"
  4859 ;; Parameters:    Size  Location     Type
  4860 ;;		None
  4861 ;; Auto vars:     Size  Location     Type
  4862 ;;		None
  4863 ;; Return value:  Size  Location     Type
  4864 ;;		None               void
  4865 ;; Registers used:
  4866 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4867 ;; Tracked objects:
  4868 ;;		On entry : 0/0
  4869 ;;		On exit  : 0/0
  4870 ;;		Unchanged: 0/0
  4871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4874 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4875 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4876 ;;Total ram usage:        7 bytes
  4877 ;; Hardware stack levels used:    1
  4878 ;; Hardware stack levels required when called:    3
  4879 ;; This function calls:
  4880 ;;		_MTouchAcquisition
  4881 ;; This function is called by:
  4882 ;;		Interrupt level 2
  4883 ;; This function uses a non-reentrant model
  4884 ;;
  4885                           
  4886                           	psect	intcode
  4887  000008                     __pintcode:
  4888                           	opt stack 0
  4889  000008                     _HI_ISR:
  4890                           	opt stack 21
  4891                           
  4892                           ; BSR set to: 0
  4893                           ;incstack = 0
  4894  000008  CFE1 F0E8          	movff	fsr1l,??_HI_ISR+1
  4895  00000C  CFE2 F0E9          	movff	fsr1h,??_HI_ISR+2
  4896  000010  CFD9 F0EA          	movff	fsr2l,??_HI_ISR+3
  4897  000014  EFE7  F006         	goto	int_func
  4898                           tblptru	equ	0xFF8
  4899                           tblptrh	equ	0xFF7
  4900                           tblptrl	equ	0xFF6
  4901                           tablat	equ	0xFF5
  4902                           prodh	equ	0xFF4
  4903                           prodl	equ	0xFF3
  4904                           intcon	equ	0xFF2
  4905                           postinc0	equ	0xFEE
  4906                           wreg	equ	0xFE8
  4907                           postinc1	equ	0xFE6
  4908                           postdec1	equ	0xFE5
  4909                           fsr1h	equ	0xFE2
  4910                           fsr1l	equ	0xFE1
  4911                           bsr	equ	0xFE0
  4912                           indf2	equ	0xFDF
  4913                           postinc2	equ	0xFDE
  4914                           postdec2	equ	0xFDD
  4915                           fsr2h	equ	0xFDA
  4916                           fsr2l	equ	0xFD9
  4917                           status	equ	0xFD8
  4918                           
  4919                           	psect	intcode_body
  4920  000DCE                     __pintcode_body:
  4921                           	opt stack 21
  4922  000DCE                     int_func:
  4923                           	opt stack 21
  4924  000DCE  CFDA F0EB          	movff	fsr2h,??_HI_ISR+4
  4925  000DD2  CFF3 F0EC          	movff	prodl,??_HI_ISR+5
  4926  000DD6  CFF4 F0ED          	movff	prodh,??_HI_ISR+6
  4927                           
  4928                           ;isr.c: 34: static WORD w_pwm;
  4929                           ;isr.c: 35: static BYTE beep;
  4930                           ;isr.c: 38: if((PIE1bits.TMR2IE) && (PIR1bits.TMR2IF)) {
  4931  000DDA  B29D               	btfsc	3997,1,c	;volatile
  4932  000DDC  A29E               	btfss	3998,1,c	;volatile
  4933  000DDE  D009               	goto	i2l4058
  4934                           
  4935                           ;isr.c: 40: sys_tick++;
  4936  000DE0  0100               	movlb	0	; () banked
  4937  000DE2  4B72               	infsnz	_sys_tick& (0+255),f,b	;volatile
  4938  000DE4  2B73               	incf	(_sys_tick+1)& (0+255),f,b	;volatile
  4939                           
  4940                           ;isr.c: 41: _sys_tick++;
  4941  000DE6  4B6E               	infsnz	__sys_tick& (0+255),f,b	;volatile
  4942  000DE8  2B6F               	incf	(__sys_tick+1)& (0+255),f,b	;volatile
  4943                           
  4944                           ; BSR set to: 0
  4945                           ;isr.c: 42: MTouchAcquisition();
  4946  000DEA  EC69  F005         	call	_MTouchAcquisition	;wreg free
  4947                           
  4948                           ; BSR set to: 0
  4949                           ;isr.c: 44: TMR2 = 0;
  4950  000DEE  6ABC               	clrf	4028,c	;volatile
  4951                           
  4952                           ; BSR set to: 0
  4953                           ;isr.c: 45: PIR1bits.TMR2IF = 0;
  4954  000DF0  929E               	bcf	3998,1,c	;volatile
  4955  000DF2                     i2l4058:
  4956                           
  4957                           ;isr.c: 46: }
  4958                           ;isr.c: 48: if((PIE5bits.TMR4IE) && (PIR5bits.TMR4IF)) {
  4959  000DF2  B07D               	btfsc	3965,0,c	;volatile
  4960  000DF4  A07E               	btfss	3966,0,c	;volatile
  4961  000DF6  D013               	goto	i2l401
  4962                           
  4963                           ;isr.c: 50: if(beep_timer > 0) {
  4964  000DF8  0100               	movlb	0	; () banked
  4965  000DFA  5171               	movf	(_beep_timer+1)& (0+255),w,b	;volatile
  4966  000DFC  1170               	iorwf	_beep_timer& (0+255),w,b	;volatile
  4967  000DFE  E00B               	bz	i2l397
  4968                           
  4969                           ; BSR set to: 0
  4970                           ;isr.c: 51: beep_timer--;
  4971  000E00  0770               	decf	_beep_timer& (0+255),f,b	;volatile
  4972  000E02  A0D8               	btfss	status,0,c
  4973  000E04  0771               	decf	(_beep_timer+1)& (0+255),f,b	;volatile
  4974                           
  4975                           ; BSR set to: 0
  4976                           ;isr.c: 52: LATAbits.LATA4 = 1;
  4977  000E06  8889               	bsf	3977,4,c	;volatile
  4978                           
  4979                           ; BSR set to: 0
  4980                           ;isr.c: 53: if((beep++) & 1) {
  4981  000E08  2B74               	incf	HI_ISR@beep& (0+255),f,b
  4982  000E0A  0574               	decf	HI_ISR@beep& (0+255),w,b
  4983  000E0C  6FE7               	movwf	??_HI_ISR& (0+255),b
  4984  000E0E  B1E7               	btfsc	??_HI_ISR& (0+255),0,b
  4985  000E10  D002               	goto	i2l397
  4986                           
  4987                           ; BSR set to: 0
  4988                           ;isr.c: 56: LATAbits.LATA4 = 1;
  4989                           
  4990                           ;isr.c: 55: } else {
  4991                           
  4992                           ; BSR set to: 0
  4993                           ;isr.c: 54: LATAbits.LATA4 = 0;
  4994  000E12  8889               	bsf	3977,4,c	;volatile
  4995  000E14  D001               	goto	i2l400
  4996  000E16                     i2l397:
  4997                           
  4998                           ; BSR set to: 0
  4999                           ;isr.c: 59: LATAbits.LATA4 = 0;
  5000  000E16  9889               	bcf	3977,4,c	;volatile
  5001  000E18                     i2l400:
  5002                           
  5003                           ; BSR set to: 0
  5004                           ;isr.c: 60: }
  5005                           ;isr.c: 63: TMR4 = 0;
  5006  000E18  010F               	movlb	15	; () banked
  5007  000E1A  6B53               	clrf	83,b	;volatile
  5008                           
  5009                           ;isr.c: 64: PIR5bits.TMR4IF = 0;
  5010  000E1C  907E               	bcf	3966,0,c	;volatile
  5011  000E1E                     i2l401:
  5012  000E1E  C0ED  FFF4         	movff	??_HI_ISR+6,prodh
  5013  000E22  C0EC  FFF3         	movff	??_HI_ISR+5,prodl
  5014  000E26  C0EB  FFDA         	movff	??_HI_ISR+4,fsr2h
  5015  000E2A  C0EA  FFD9         	movff	??_HI_ISR+3,fsr2l
  5016  000E2E  C0E9  FFE2         	movff	??_HI_ISR+2,fsr1h
  5017  000E32  C0E8  FFE1         	movff	??_HI_ISR+1,fsr1l
  5018  000E36  0011               	retfie		f
  5019  000E38                     __end_of_HI_ISR:
  5020                           	opt stack 0
  5021                           tblptru	equ	0xFF8
  5022                           tblptrh	equ	0xFF7
  5023                           tblptrl	equ	0xFF6
  5024                           tablat	equ	0xFF5
  5025                           prodh	equ	0xFF4
  5026                           prodl	equ	0xFF3
  5027                           intcon	equ	0xFF2
  5028                           postinc0	equ	0xFEE
  5029                           wreg	equ	0xFE8
  5030                           postinc1	equ	0xFE6
  5031                           postdec1	equ	0xFE5
  5032                           fsr1h	equ	0xFE2
  5033                           fsr1l	equ	0xFE1
  5034                           bsr	equ	0xFE0
  5035                           indf2	equ	0xFDF
  5036                           postinc2	equ	0xFDE
  5037                           postdec2	equ	0xFDD
  5038                           fsr2h	equ	0xFDA
  5039                           fsr2l	equ	0xFD9
  5040                           status	equ	0xFD8
  5041                           
  5042 ;; *************** function _MTouchAcquisition *****************
  5043 ;; Defined at:
  5044 ;;		line 249 in file "../lib/mTouchCap/mTouchSensor.c"
  5045 ;; Parameters:    Size  Location     Type
  5046 ;;		None
  5047 ;; Auto vars:     Size  Location     Type
  5048 ;;  pCurrentSens    2   30[BANK0 ] PTR struct tag_SENSOR
  5049 ;;		 -> sensors(192), 
  5050 ;;  pPreviousSen    2   27[BANK0 ] PTR struct tag_SENSOR
  5051 ;;		 -> sensors(192), 
  5052 ;;  pLastSensor     2   25[BANK0 ] PTR struct tag_SENSOR
  5053 ;;		 -> sensors(192), 
  5054 ;;  data            2   23[BANK0 ] short 
  5055 ;;  i               1   29[BANK0 ] unsigned char 
  5056 ;; Return value:  Size  Location     Type
  5057 ;;		None               void
  5058 ;; Registers used:
  5059 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5060 ;; Tracked objects:
  5061 ;;		On entry : F/0
  5062 ;;		On exit  : F/0
  5063 ;;		Unchanged: 0/0
  5064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5066 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5067 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5068 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5069 ;;Total ram usage:       12 bytes
  5070 ;; Hardware stack levels used:    1
  5071 ;; Hardware stack levels required when called:    2
  5072 ;; This function calls:
  5073 ;;		_MTouchAcquisitionCVD
  5074 ;;		_MTouchSensorDecode
  5075 ;; This function is called by:
  5076 ;;		_HI_ISR
  5077 ;; This function uses a non-reentrant model
  5078 ;;
  5079                           
  5080                           	psect	text28
  5081  000AD2                     __ptext28:
  5082                           	opt stack 0
  5083  000AD2                     _MTouchAcquisition:
  5084                           	opt stack 21
  5085                           
  5086                           ; BSR set to: 0
  5087                           ;mTouchSensor.c: 251: INT16 data;
  5088                           ;mTouchSensor.c: 252: UINT8 i;
  5089                           ;mTouchSensor.c: 254: static UINT8 startSensorNumber = 0;
  5090                           ;mTouchSensor.c: 255: SENSOR* pCurrentSensor;
  5091                           ;mTouchSensor.c: 256: SENSOR* pLastSensor;
  5092                           ;mTouchSensor.c: 259: SENSOR* pPreviousSensor;
  5093                           ;mTouchSensor.c: 264: pCurrentSensor = (SENSOR*)sensors + startSensorNumber;
  5094                           
  5095                           ;incstack = 0
  5096  000AD2  5175               	movf	MTouchAcquisition@startSensorNumber& (0+255),w,b
  5097  000AD4  0D20               	mullw	32
  5098  000AD6  0E00               	movlw	low _sensors	;volatile
  5099  000AD8  24F3               	addwf	prodl,w,c
  5100  000ADA  0100               	movlb	0	; () banked
  5101  000ADC  6FE5               	movwf	MTouchAcquisition@pCurrentSensor& (0+255),b
  5102  000ADE  0E02               	movlw	high _sensors	;volatile
  5103  000AE0  20F4               	addwfc	prodh,w,c
  5104  000AE2  6FE6               	movwf	(MTouchAcquisition@pCurrentSensor+1)& (0+255),b
  5105                           
  5106                           ; BSR set to: 0
  5107                           ;mTouchSensor.c: 265: pLastSensor = (SENSOR*)sensors + (6-1);
  5108  000AE4  0E02               	movlw	high (_sensors+160)	;volatile
  5109  000AE6  6FE1               	movwf	(MTouchAcquisition@pLastSensor+1)& (0+255),b
  5110  000AE8  0EA0               	movlw	low (_sensors+160)	;volatile
  5111  000AEA  6FE0               	movwf	MTouchAcquisition@pLastSensor& (0+255),b
  5112                           
  5113                           ; BSR set to: 0
  5114                           ;mTouchSensor.c: 268: if(startSensorNumber == (6-1))
  5115  000AEC  5175               	movf	MTouchAcquisition@startSensorNumber& (0+255),w,b
  5116  000AEE  0A05               	xorlw	5
  5117  000AF0  E105               	bnz	i2l3856
  5118                           
  5119                           ; BSR set to: 0
  5120                           ;mTouchSensor.c: 269: {
  5121                           ;mTouchSensor.c: 270: pPreviousSensor = (SENSOR*)sensors;
  5122  000AF2  0E02               	movlw	high _sensors	;volatile
  5123  000AF4  6FE3               	movwf	(MTouchAcquisition@pPreviousSensor+1)& (0+255),b
  5124  000AF6  0E00               	movlw	low _sensors	;volatile
  5125  000AF8  6FE2               	movwf	MTouchAcquisition@pPreviousSensor& (0+255),b
  5126                           
  5127                           ;mTouchSensor.c: 271: }else{
  5128  000AFA  D006               	goto	i2l3858
  5129  000AFC                     i2l3856:
  5130                           
  5131                           ; BSR set to: 0
  5132                           ;mTouchSensor.c: 272: pPreviousSensor = pCurrentSensor + 1;
  5133  000AFC  0E20               	movlw	32
  5134  000AFE  25E5               	addwf	MTouchAcquisition@pCurrentSensor& (0+255),w,b
  5135  000B00  6FE2               	movwf	MTouchAcquisition@pPreviousSensor& (0+255),b
  5136  000B02  0E00               	movlw	0
  5137  000B04  21E6               	addwfc	(MTouchAcquisition@pCurrentSensor+1)& (0+255),w,b
  5138  000B06  6FE3               	movwf	(MTouchAcquisition@pPreviousSensor+1)& (0+255),b
  5139  000B08                     i2l3858:
  5140                           
  5141                           ; BSR set to: 0
  5142                           ;mTouchSensor.c: 273: }
  5143                           ;mTouchSensor.c: 276: for(i=0; i<6; i++)
  5144  000B08  6BE4               	clrf	MTouchAcquisition@i& (0+255),b
  5145  000B0A                     i2l3864:
  5146                           
  5147                           ; BSR set to: 0
  5148                           ;mTouchSensor.c: 277: {
  5149                           ;mTouchSensor.c: 278: if((pCurrentSensor->state&SENSOR_DISCONNECTED) == 0)
  5150  000B0A  EE20 F01C          	lfsr	2,28
  5151  000B0E  51E5               	movf	MTouchAcquisition@pCurrentSensor& (0+255),w,b
  5152  000B10  26D9               	addwf	fsr2l,f,c
  5153  000B12  51E6               	movf	(MTouchAcquisition@pCurrentSensor+1)& (0+255),w,b
  5154  000B14  22DA               	addwfc	fsr2h,f,c
  5155  000B16  50DF               	movf	indf2,w,c
  5156  000B18  6FDB               	movwf	??_MTouchAcquisition& (0+255),b
  5157  000B1A  BFDB               	btfsc	??_MTouchAcquisition& (0+255),7,b
  5158  000B1C  D054               	goto	i2l3878
  5159                           
  5160                           ; BSR set to: 0
  5161                           ;mTouchSensor.c: 279: {
  5162                           ;mTouchSensor.c: 287: data = MTouchAcquisitionCVD(pCurrentSensor,pPreviousSensor);
  5163  000B1E  C0E6  F0C8         	movff	MTouchAcquisition@pCurrentSensor+1,MTouchAcquisitionCVD@pCurrentSensor+1
  5164  000B22  C0E5  F0C7         	movff	MTouchAcquisition@pCurrentSensor,MTouchAcquisitionCVD@pCurrentSensor
  5165  000B26  C0E3  F0CA         	movff	MTouchAcquisition@pPreviousSensor+1,MTouchAcquisitionCVD@pPreviousSensor+1
  5166  000B2A  C0E2  F0C9         	movff	MTouchAcquisition@pPreviousSensor,MTouchAcquisitionCVD@pPreviousSensor
  5167  000B2E  ECFA  F001         	call	_MTouchAcquisitionCVD	;wreg free
  5168  000B32  C0C7  F0DE         	movff	?_MTouchAcquisitionCVD,MTouchAcquisition@data
  5169  000B36  C0C8  F0DF         	movff	?_MTouchAcquisitionCVD+1,MTouchAcquisition@data+1
  5170                           
  5171                           ; BSR set to: 0
  5172                           ;mTouchSensor.c: 292: if(data > pCurrentSensor->decimateFilterData)
  5173  000B3A  D862               	call	PL20	;call to abstracted procedure
  5174  000B3C  51DC               	movf	(??_MTouchAcquisition+1)& (0+255),w,b
  5175  000B3E  0A80               	xorlw	128
  5176  000B40  6FDD               	movwf	(??_MTouchAcquisition+2)& (0+255),b
  5177  000B42  51DE               	movf	MTouchAcquisition@data& (0+255),w,b
  5178  000B44  5DDB               	subwf	??_MTouchAcquisition& (0+255),w,b
  5179  000B46  51DF               	movf	(MTouchAcquisition@data+1)& (0+255),w,b
  5180  000B48  0A80               	xorlw	128
  5181  000B4A  59DD               	subwfb	(??_MTouchAcquisition+2)& (0+255),w,b
  5182  000B4C  E20A               	bc	i2l3872
  5183                           
  5184                           ; BSR set to: 0
  5185                           ;mTouchSensor.c: 293: {
  5186                           ;mTouchSensor.c: 294: pCurrentSensor->decimateFilterData++;
  5187  000B4E  EE20 F00C          	lfsr	2,12
  5188  000B52  51E5               	movf	MTouchAcquisition@pCurrentSensor& (0+255),w,b
  5189  000B54  26D9               	addwf	fsr2l,f,c
  5190  000B56  51E6               	movf	(MTouchAcquisition@pCurrentSensor+1)& (0+255),w,b
  5191  000B58  22DA               	addwfc	fsr2h,f,c
  5192  000B5A  2ADE               	incf	postinc2,f,c
  5193  000B5C  0E00               	movlw	0
  5194  000B5E  22DD               	addwfc	postdec2,f,c
  5195                           
  5196                           ;mTouchSensor.c: 295: } else {
  5197  000B60  D003               	goto	i2l116
  5198  000B62                     i2l3872:
  5199                           
  5200                           ; BSR set to: 0
  5201                           ;mTouchSensor.c: 296: pCurrentSensor->decimateFilterData--;
  5202  000B62  EE20 F00C          	lfsr	2,12
  5203  000B66  D857               	call	PL28	;call to abstracted procedure
  5204  000B68                     i2l116:
  5205                           
  5206                           ; BSR set to: 0
  5207                           ;mTouchSensor.c: 297: }
  5208                           ;mTouchSensor.c: 300: pCurrentSensor->oversampleFilterData += pCurrentSensor->decimateFi
      +                          lterData;
  5209  000B68  D84B               	call	PL20	;call to abstracted procedure
  5210  000B6A  EE20 F004          	lfsr	2,4
  5211  000B6E  51E5               	movf	MTouchAcquisition@pCurrentSensor& (0+255),w,b
  5212  000B70  26D9               	addwf	fsr2l,f,c
  5213  000B72  51E6               	movf	(MTouchAcquisition@pCurrentSensor+1)& (0+255),w,b
  5214  000B74  22DA               	addwfc	fsr2h,f,c
  5215  000B76  51DB               	movf	??_MTouchAcquisition& (0+255),w,b
  5216  000B78  26DE               	addwf	postinc2,f,c
  5217  000B7A  51DC               	movf	(??_MTouchAcquisition+1)& (0+255),w,b
  5218  000B7C  22DE               	addwfc	postinc2,f,c
  5219  000B7E  0E00               	movlw	0
  5220  000B80  BFDC               	btfsc	(??_MTouchAcquisition+1)& (0+255),7,b
  5221  000B82  0EFF               	movlw	255
  5222  000B84  22DE               	addwfc	postinc2,f,c
  5223  000B86  22DD               	addwfc	postdec2,f,c
  5224                           
  5225                           ;mTouchSensor.c: 302: if((pCurrentSensor->sampleCounter)-- <= 0)
  5226  000B88  EE20 F00E          	lfsr	2,14
  5227  000B8C  D844               	call	PL28	;call to abstracted procedure
  5228  000B8E  2AD9               	incf	fsr2l,f,c
  5229  000B90  1CDD               	comf	postdec2,w,c
  5230  000B92  0EFF               	movlw	255
  5231  000B94  B4D8               	btfsc	status,2,c
  5232  000B96  18DF               	xorwf	indf2,w,c
  5233  000B98  E116               	bnz	i2l3878
  5234                           
  5235                           ; BSR set to: 0
  5236                           ;mTouchSensor.c: 303: {
  5237                           ;mTouchSensor.c: 304: MTouchSensorDecode(pCurrentSensor);
  5238  000B9A  C0E6  F0D1         	movff	MTouchAcquisition@pCurrentSensor+1,MTouchSensorDecode@pSensor+1
  5239  000B9E  C0E5  F0D0         	movff	MTouchAcquisition@pCurrentSensor,MTouchSensorDecode@pSensor
  5240  000BA2  ECE0  F003         	call	_MTouchSensorDecode	;wreg free
  5241                           
  5242                           ; BSR set to: 0
  5243                           ;mTouchSensor.c: 305: pCurrentSensor->sampleCounter = pCurrentSensor->samplesNumber;
  5244  000BA6  EE20 F010          	lfsr	2,16
  5245  000BAA  51E5               	movf	MTouchAcquisition@pCurrentSensor& (0+255),w,b
  5246  000BAC  26D9               	addwf	fsr2l,f,c
  5247  000BAE  51E6               	movf	(MTouchAcquisition@pCurrentSensor+1)& (0+255),w,b
  5248  000BB0  22DA               	addwfc	fsr2h,f,c
  5249  000BB2  EE10 F00E          	lfsr	1,14
  5250  000BB6  51E5               	movf	MTouchAcquisition@pCurrentSensor& (0+255),w,b
  5251  000BB8  26E1               	addwf	fsr1l,f,c
  5252  000BBA  51E6               	movf	(MTouchAcquisition@pCurrentSensor+1)& (0+255),w,b
  5253  000BBC  22E2               	addwfc	fsr1h,f,c
  5254  000BBE  CFDE FFE6          	movff	postinc2,postinc1
  5255  000BC2  CFDD FFE5          	movff	postdec2,postdec1
  5256  000BC6                     i2l3878:
  5257                           
  5258                           ; BSR set to: 0
  5259                           ;mTouchSensor.c: 306: }
  5260                           ;mTouchSensor.c: 308: }
  5261                           ;mTouchSensor.c: 312: pPreviousSensor = pCurrentSensor;
  5262  000BC6  C0E6  F0E3         	movff	MTouchAcquisition@pCurrentSensor+1,MTouchAcquisition@pPreviousSensor+1
  5263  000BCA  C0E5  F0E2         	movff	MTouchAcquisition@pCurrentSensor,MTouchAcquisition@pPreviousSensor
  5264                           
  5265                           ; BSR set to: 0
  5266                           ;mTouchSensor.c: 315: if(pCurrentSensor == pLastSensor)
  5267  000BCE  51E1               	movf	(MTouchAcquisition@pLastSensor+1)& (0+255),w,b
  5268  000BD0  19E6               	xorwf	(MTouchAcquisition@pCurrentSensor+1)& (0+255),w,b
  5269  000BD2  E102               	bnz	i2u251_45
  5270  000BD4  51E0               	movf	MTouchAcquisition@pLastSensor& (0+255),w,b
  5271  000BD6  19E5               	xorwf	MTouchAcquisition@pCurrentSensor& (0+255),w,b
  5272  000BD8                     i2u251_45:
  5273  000BD8  E106               	bnz	i2l3884
  5274                           
  5275                           ; BSR set to: 0
  5276                           ;mTouchSensor.c: 316: {
  5277                           ;mTouchSensor.c: 317: pCurrentSensor = (SENSOR*)sensors;
  5278  000BDA  0E02               	movlw	high _sensors	;volatile
  5279  000BDC  0100               	movlb	0	; () banked
  5280  000BDE  6FE6               	movwf	(MTouchAcquisition@pCurrentSensor+1)& (0+255),b
  5281  000BE0  0E00               	movlw	low _sensors	;volatile
  5282  000BE2  6FE5               	movwf	MTouchAcquisition@pCurrentSensor& (0+255),b
  5283                           
  5284                           ;mTouchSensor.c: 318: continue;
  5285  000BE4  D004               	goto	i2l3886
  5286  000BE6                     i2l3884:
  5287                           
  5288                           ; BSR set to: 0
  5289                           ;mTouchSensor.c: 319: }
  5290                           ;mTouchSensor.c: 321: pCurrentSensor++;
  5291  000BE6  0E20               	movlw	32
  5292  000BE8  27E5               	addwf	MTouchAcquisition@pCurrentSensor& (0+255),f,b
  5293  000BEA  0E00               	movlw	0
  5294  000BEC  23E6               	addwfc	(MTouchAcquisition@pCurrentSensor+1)& (0+255),f,b
  5295  000BEE                     i2l3886:
  5296                           
  5297                           ; BSR set to: 0
  5298  000BEE  2BE4               	incf	MTouchAcquisition@i& (0+255),f,b
  5299  000BF0  0E05               	movlw	5
  5300  000BF2  65E4               	cpfsgt	MTouchAcquisition@i& (0+255),b
  5301  000BF4  D78A               	goto	i2l3864
  5302                           
  5303                           ; BSR set to: 0
  5304                           ;mTouchSensor.c: 322: }
  5305                           ;mTouchSensor.c: 324: startSensorNumber++;
  5306  000BF6  2B75               	incf	MTouchAcquisition@startSensorNumber& (0+255),f,b
  5307                           
  5308                           ; BSR set to: 0
  5309                           ;mTouchSensor.c: 326: if(startSensorNumber > (6-1))
  5310  000BF8  6575               	cpfsgt	MTouchAcquisition@startSensorNumber& (0+255),b
  5311  000BFA  0C05               	retlw	5
  5312                           
  5313                           ; BSR set to: 0
  5314                           ;mTouchSensor.c: 327: {
  5315                           ;mTouchSensor.c: 328: startSensorNumber = 0;
  5316  000BFC  6B75               	clrf	MTouchAcquisition@startSensorNumber& (0+255),b
  5317                           
  5318                           ; BSR set to: 0
  5319  000BFE  0012               	return	
  5320  000C00                     __end_of_MTouchAcquisition:
  5321                           	opt stack 0
  5322  000C00                     PL20:
  5323                           	opt stack 21
  5324  000C00  EE20 F00C          	lfsr	2,12
  5325  000C04  51E5               	movf	MTouchAcquisition@pCurrentSensor& (0+255),w,b
  5326  000C06  26D9               	addwf	fsr2l,f,c
  5327  000C08  51E6               	movf	(MTouchAcquisition@pCurrentSensor+1)& (0+255),w,b
  5328  000C0A  22DA               	addwfc	fsr2h,f,c
  5329  000C0C  CFDE F0DB          	movff	postinc2,??_MTouchAcquisition
  5330  000C10  CFDD F0DC          	movff	postdec2,??_MTouchAcquisition+1
  5331  000C14  0012               	return	
  5332  000C16                     __end_ofPL20:
  5333                           	opt stack 0
  5334  000C16                     PL28:
  5335                           	opt stack 21
  5336  000C16  51E5               	movf	MTouchAcquisition@pCurrentSensor& (0+255),w,b
  5337  000C18  26D9               	addwf	fsr2l,f,c
  5338  000C1A  51E6               	movf	(MTouchAcquisition@pCurrentSensor+1)& (0+255),w,b
  5339  000C1C  22DA               	addwfc	fsr2h,f,c
  5340  000C1E  06DE               	decf	postinc2,f,c
  5341  000C20  0E00               	movlw	0
  5342  000C22  5ADD               	subwfb	postdec2,f,c
  5343  000C24  0C00               	retlw	0
  5344  000C26                     __end_ofPL28:
  5345                           	opt stack 0
  5346                           tblptru	equ	0xFF8
  5347                           tblptrh	equ	0xFF7
  5348                           tblptrl	equ	0xFF6
  5349                           tablat	equ	0xFF5
  5350                           prodh	equ	0xFF4
  5351                           prodl	equ	0xFF3
  5352                           intcon	equ	0xFF2
  5353                           postinc0	equ	0xFEE
  5354                           wreg	equ	0xFE8
  5355                           postinc1	equ	0xFE6
  5356                           postdec1	equ	0xFE5
  5357                           fsr1h	equ	0xFE2
  5358                           fsr1l	equ	0xFE1
  5359                           bsr	equ	0xFE0
  5360                           indf2	equ	0xFDF
  5361                           postinc2	equ	0xFDE
  5362                           postdec2	equ	0xFDD
  5363                           fsr2h	equ	0xFDA
  5364                           fsr2l	equ	0xFD9
  5365                           status	equ	0xFD8
  5366                           
  5367 ;; *************** function _MTouchSensorDecode *****************
  5368 ;; Defined at:
  5369 ;;		line 136 in file "../lib/mTouchCap/mTouchSensor.c"
  5370 ;; Parameters:    Size  Location     Type
  5371 ;;  pSensor         2    9[BANK0 ] PTR struct tag_SENSOR
  5372 ;;		 -> sensors(192), 
  5373 ;; Auto vars:     Size  Location     Type
  5374 ;;  delta           2   15[BANK0 ] short 
  5375 ;; Return value:  Size  Location     Type
  5376 ;;		None               void
  5377 ;; Registers used:
  5378 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, cstack
  5379 ;; Tracked objects:
  5380 ;;		On entry : F/0
  5381 ;;		On exit  : F/0
  5382 ;;		Unchanged: 0/0
  5383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5384 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5385 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5386 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5387 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5388 ;;Total ram usage:        8 bytes
  5389 ;; Hardware stack levels used:    1
  5390 ;; Hardware stack levels required when called:    1
  5391 ;; This function calls:
  5392 ;;		_MTouchUpdateSensorAverage
  5393 ;; This function is called by:
  5394 ;;		_MTouchAcquisition
  5395 ;; This function uses a non-reentrant model
  5396 ;;
  5397                           
  5398                           	psect	text29
  5399  0007C0                     __ptext29:
  5400                           	opt stack 0
  5401  0007C0                     _MTouchSensorDecode:
  5402                           	opt stack 21
  5403                           
  5404                           ; BSR set to: 0
  5405                           ;mTouchSensor.c: 139: INT16 delta;
  5406                           ;mTouchSensor.c: 141: delta = pSensor->oversampleFilterData - pSensor->average;
  5407                           
  5408                           ; BSR set to: 0
  5409                           ;incstack = 0
  5410  0007C0  C0D0  FFD9         	movff	MTouchSensorDecode@pSensor,fsr2l
  5411  0007C4  C0D1  FFDA         	movff	MTouchSensorDecode@pSensor+1,fsr2h
  5412  0007C8  CFDE F0D2          	movff	postinc2,??_MTouchSensorDecode
  5413  0007CC  CFDD F0D3          	movff	postdec2,??_MTouchSensorDecode+1
  5414  0007D0  EE20 F004          	lfsr	2,4
  5415  0007D4  51D0               	movf	MTouchSensorDecode@pSensor& (0+255),w,b
  5416  0007D6  26D9               	addwf	fsr2l,f,c
  5417  0007D8  51D1               	movf	(MTouchSensorDecode@pSensor+1)& (0+255),w,b
  5418  0007DA  22DA               	addwfc	fsr2h,f,c
  5419  0007DC  CFDE F0D4          	movff	postinc2,??_MTouchSensorDecode+2
  5420  0007E0  CFDD F0D5          	movff	postdec2,??_MTouchSensorDecode+3
  5421  0007E4  51D2               	movf	??_MTouchSensorDecode& (0+255),w,b
  5422  0007E6  5DD4               	subwf	(??_MTouchSensorDecode+2)& (0+255),w,b
  5423  0007E8  6FD6               	movwf	MTouchSensorDecode@delta& (0+255),b
  5424  0007EA  51D3               	movf	(??_MTouchSensorDecode+1)& (0+255),w,b
  5425  0007EC  59D5               	subwfb	(??_MTouchSensorDecode+3)& (0+255),w,b
  5426  0007EE  6FD7               	movwf	(MTouchSensorDecode@delta+1)& (0+255),b
  5427                           
  5428                           ; BSR set to: 0
  5429                           ;mTouchSensor.c: 143: if(delta < 0)
  5430  0007F0  51D7               	movf	(MTouchSensorDecode@delta+1)& (0+255),w,b
  5431  0007F2  0A80               	xorlw	128
  5432  0007F4  6EF3               	movwf	prodl,c
  5433  0007F6  0E80               	movlw	128
  5434  0007F8  5CF3               	subwf	prodl,w,c
  5435  0007FA  0E00               	movlw	0
  5436  0007FC  B4D8               	btfsc	status,2,c
  5437  0007FE  5DD6               	subwf	MTouchSensorDecode@delta& (0+255),w,b
  5438  000800  E202               	bc	i2l3788
  5439                           
  5440                           ; BSR set to: 0
  5441                           ;mTouchSensor.c: 144: {
  5442                           ;mTouchSensor.c: 145: delta = 0;
  5443  000802  6BD6               	clrf	MTouchSensorDecode@delta& (0+255),b
  5444  000804  6BD7               	clrf	(MTouchSensorDecode@delta+1)& (0+255),b
  5445  000806                     i2l3788:
  5446                           
  5447                           ; BSR set to: 0
  5448                           ;mTouchSensor.c: 146: }
  5449                           ;mTouchSensor.c: 148: pSensor->delta = delta;
  5450  000806  EE20 F018          	lfsr	2,24
  5451  00080A  51D0               	movf	MTouchSensorDecode@pSensor& (0+255),w,b
  5452  00080C  26D9               	addwf	fsr2l,f,c
  5453  00080E  51D1               	movf	(MTouchSensorDecode@pSensor+1)& (0+255),w,b
  5454  000810  22DA               	addwfc	fsr2h,f,c
  5455  000812  C0D6  FFDE         	movff	MTouchSensorDecode@delta,postinc2
  5456  000816  C0D7  FFDD         	movff	MTouchSensorDecode@delta+1,postdec2
  5457                           
  5458                           ;mTouchSensor.c: 150: switch(pSensor->state)
  5459  00081A  D065               	goto	i2l3818
  5460  00081C                     i2l3790:
  5461                           
  5462                           ; BSR set to: 0
  5463                           ;mTouchSensor.c: 153: {
  5464                           ;mTouchSensor.c: 154: if (pSensor->debounceCount-- <= 0)
  5465  00081C  D87B               	call	PL4	;call to abstracted procedure
  5466  00081E  B4D8               	btfsc	status,2,c
  5467  000820  18DF               	xorwf	indf2,w,c
  5468  000822  E104               	bnz	i2l3794
  5469                           
  5470                           ; BSR set to: 0
  5471                           ;mTouchSensor.c: 155: {
  5472                           ;mTouchSensor.c: 156: pSensor->state = SENSOR_RELEASED;
  5473  000824  D88B               	call	PL22	;call to abstracted procedure
  5474                           
  5475                           ;mTouchSensor.c: 157: pSensor->debounceCount = 8;
  5476  000826  EE20 F01A          	lfsr	2,26
  5477  00082A  D880               	call	PL8	;call to abstracted procedure
  5478  00082C                     i2l3794:
  5479                           
  5480                           ; BSR set to: 0
  5481                           ;mTouchSensor.c: 158: }
  5482                           ;mTouchSensor.c: 159: pSensor->average = pSensor->oversampleFilterData;
  5483  00082C  EE20 F004          	lfsr	2,4
  5484  000830  51D0               	movf	MTouchSensorDecode@pSensor& (0+255),w,b
  5485  000832  26D9               	addwf	fsr2l,f,c
  5486  000834  51D1               	movf	(MTouchSensorDecode@pSensor+1)& (0+255),w,b
  5487  000836  22DA               	addwfc	fsr2h,f,c
  5488  000838  C0D0  FFE1         	movff	MTouchSensorDecode@pSensor,fsr1l
  5489  00083C  C0D1  FFE2         	movff	MTouchSensorDecode@pSensor+1,fsr1h
  5490  000840  CFDE FFE6          	movff	postinc2,postinc1
  5491  000844  CFDE FFE6          	movff	postinc2,postinc1
  5492  000848  CFDE FFE6          	movff	postinc2,postinc1
  5493  00084C  CFDD FFE5          	movff	postdec2,postdec1
  5494                           
  5495                           ;mTouchSensor.c: 160: break;
  5496  000850  D056               	goto	i2l3820
  5497  000852                     i2l3796:
  5498                           
  5499                           ; BSR set to: 0
  5500                           ;mTouchSensor.c: 165: {
  5501                           ;mTouchSensor.c: 166: if(delta > pSensor->pressThreshold)
  5502  000852  EE20 F012          	lfsr	2,18
  5503  000856  51D0               	movf	MTouchSensorDecode@pSensor& (0+255),w,b
  5504  000858  26D9               	addwf	fsr2l,f,c
  5505  00085A  51D1               	movf	(MTouchSensorDecode@pSensor+1)& (0+255),w,b
  5506  00085C  22DA               	addwfc	fsr2h,f,c
  5507  00085E  CFDE F0D2          	movff	postinc2,??_MTouchSensorDecode
  5508  000862  CFDD F0D3          	movff	postdec2,??_MTouchSensorDecode+1
  5509  000866  51D6               	movf	MTouchSensorDecode@delta& (0+255),w,b
  5510  000868  5DD2               	subwf	??_MTouchSensorDecode& (0+255),w,b
  5511  00086A  51D7               	movf	(MTouchSensorDecode@delta+1)& (0+255),w,b
  5512  00086C  59D3               	subwfb	(??_MTouchSensorDecode+1)& (0+255),w,b
  5513  00086E  E20C               	bc	i2l3802
  5514                           
  5515                           ; BSR set to: 0
  5516                           ;mTouchSensor.c: 167: {
  5517                           ;mTouchSensor.c: 168: if (pSensor->debounceCount-- <= 0)
  5518  000870  D851               	call	PL4	;call to abstracted procedure
  5519  000872  B4D8               	btfsc	status,2,c
  5520  000874  18DF               	xorwf	indf2,w,c
  5521  000876  E10B               	bnz	i2l3804
  5522                           
  5523                           ; BSR set to: 0
  5524                           ;mTouchSensor.c: 169: {
  5525                           ;mTouchSensor.c: 170: pSensor->state = SENSOR_PRESSED;
  5526  000878  EE20 F01C          	lfsr	2,28
  5527  00087C  51D0               	movf	MTouchSensorDecode@pSensor& (0+255),w,b
  5528  00087E  26D9               	addwf	fsr2l,f,c
  5529  000880  51D1               	movf	(MTouchSensorDecode@pSensor+1)& (0+255),w,b
  5530  000882  22DA               	addwfc	fsr2h,f,c
  5531  000884  0E02               	movlw	2
  5532  000886  6EDF               	movwf	indf2,c
  5533  000888                     i2l3802:
  5534                           
  5535                           ; BSR set to: 0
  5536                           ;mTouchSensor.c: 174: else
  5537                           ;mTouchSensor.c: 175: {
  5538                           ;mTouchSensor.c: 176: pSensor->debounceCount = 8;
  5539  000888  EE20 F01A          	lfsr	2,26
  5540  00088C  D84F               	call	PL8	;call to abstracted procedure
  5541  00088E                     i2l3804:
  5542                           
  5543                           ; BSR set to: 0
  5544                           ;mTouchSensor.c: 177: }
  5545                           ;mTouchSensor.c: 179: MTouchUpdateSensorAverage(pSensor, 8);
  5546  00088E  C0D1  F0C8         	movff	MTouchSensorDecode@pSensor+1,MTouchUpdateSensorAverage@pSensor+1
  5547  000892  C0D0  F0C7         	movff	MTouchSensorDecode@pSensor,MTouchUpdateSensorAverage@pSensor
  5548  000896  6BCA               	clrf	(MTouchUpdateSensorAverage@rate+1)& (0+255),b
  5549  000898  0E08               	movlw	8
  5550  00089A  6FC9               	movwf	MTouchUpdateSensorAverage@rate& (0+255),b
  5551  00089C  EC13  F006         	call	_MTouchUpdateSensorAverage	;wreg free
  5552                           
  5553                           ;mTouchSensor.c: 181: break;
  5554  0008A0  D02E               	goto	i2l3820
  5555  0008A2                     i2l3806:
  5556                           
  5557                           ; BSR set to: 0
  5558                           ;mTouchSensor.c: 186: {
  5559                           ;mTouchSensor.c: 187: if(delta < pSensor->releaseThreshold)
  5560  0008A2  EE20 F014          	lfsr	2,20
  5561  0008A6  51D0               	movf	MTouchSensorDecode@pSensor& (0+255),w,b
  5562  0008A8  26D9               	addwf	fsr2l,f,c
  5563  0008AA  51D1               	movf	(MTouchSensorDecode@pSensor+1)& (0+255),w,b
  5564  0008AC  22DA               	addwfc	fsr2h,f,c
  5565  0008AE  CFDE F0D2          	movff	postinc2,??_MTouchSensorDecode
  5566  0008B2  CFDD F0D3          	movff	postdec2,??_MTouchSensorDecode+1
  5567  0008B6  51D2               	movf	??_MTouchSensorDecode& (0+255),w,b
  5568  0008B8  5DD6               	subwf	MTouchSensorDecode@delta& (0+255),w,b
  5569  0008BA  51D3               	movf	(??_MTouchSensorDecode+1)& (0+255),w,b
  5570  0008BC  59D7               	subwfb	(MTouchSensorDecode@delta+1)& (0+255),w,b
  5571  0008BE  E205               	bc	i2l3812
  5572                           
  5573                           ; BSR set to: 0
  5574                           ;mTouchSensor.c: 188: {
  5575                           ;mTouchSensor.c: 189: if (pSensor->debounceCount-- <= 0)
  5576  0008C0  D829               	call	PL4	;call to abstracted procedure
  5577  0008C2  B4D8               	btfsc	status,2,c
  5578  0008C4  18DF               	xorwf	indf2,w,c
  5579  0008C6  E104               	bnz	i2l3814
  5580                           
  5581                           ; BSR set to: 0
  5582                           ;mTouchSensor.c: 190: {
  5583                           ;mTouchSensor.c: 191: pSensor->state = SENSOR_RELEASED;
  5584  0008C8  D839               	call	PL22	;call to abstracted procedure
  5585  0008CA                     i2l3812:
  5586                           
  5587                           ; BSR set to: 0
  5588                           ;mTouchSensor.c: 195: else
  5589                           ;mTouchSensor.c: 196: {
  5590                           ;mTouchSensor.c: 197: pSensor->debounceCount = 8;
  5591  0008CA  EE20 F01A          	lfsr	2,26
  5592  0008CE  D82E               	call	PL8	;call to abstracted procedure
  5593  0008D0                     i2l3814:
  5594                           
  5595                           ; BSR set to: 0
  5596                           ;mTouchSensor.c: 198: }
  5597                           ;mTouchSensor.c: 200: MTouchUpdateSensorAverage(pSensor, 800);
  5598  0008D0  C0D1  F0C8         	movff	MTouchSensorDecode@pSensor+1,MTouchUpdateSensorAverage@pSensor+1
  5599  0008D4  C0D0  F0C7         	movff	MTouchSensorDecode@pSensor,MTouchUpdateSensorAverage@pSensor
  5600  0008D8  0E03               	movlw	3
  5601  0008DA  6FCA               	movwf	(MTouchUpdateSensorAverage@rate+1)& (0+255),b
  5602  0008DC  0E20               	movlw	32
  5603  0008DE  6FC9               	movwf	MTouchUpdateSensorAverage@rate& (0+255),b
  5604  0008E0  EC13  F006         	call	_MTouchUpdateSensorAverage	;wreg free
  5605                           
  5606                           ;mTouchSensor.c: 202: break;
  5607  0008E4  D00C               	goto	i2l3820
  5608  0008E6                     i2l3818:
  5609                           
  5610                           ; BSR set to: 0
  5611  0008E6  EE20 F01C          	lfsr	2,28
  5612  0008EA  51D0               	movf	MTouchSensorDecode@pSensor& (0+255),w,b
  5613  0008EC  26D9               	addwf	fsr2l,f,c
  5614  0008EE  51D1               	movf	(MTouchSensorDecode@pSensor+1)& (0+255),w,b
  5615  0008F0  22DA               	addwfc	fsr2h,f,c
  5616  0008F2  50DF               	movf	indf2,w,c
  5617                           
  5618                           ; Switch size 1, requested type "space"
  5619                           ; Number of cases is 3, Range of values is 0 to 2
  5620                           ; switch strategies available:
  5621                           ; Name         Instructions Cycles
  5622                           ; simple_byte           10     6 (average)
  5623                           ;	Chosen strategy is simple_byte
  5624  0008F4  E093               	bz	i2l3790
  5625  0008F6  0A01               	xorlw	1	; case 1
  5626  0008F8  E0AC               	bz	i2l3796
  5627  0008FA  0A03               	xorlw	3	; case 2
  5628  0008FC  E0D2               	bz	i2l3806
  5629  0008FE                     i2l3820:
  5630                           
  5631                           ; BSR set to: 0
  5632                           ;mTouchSensor.c: 209: pSensor->oversampleFilterData = 0;
  5633  0008FE  EE20 F004          	lfsr	2,4
  5634  000902  51D0               	movf	MTouchSensorDecode@pSensor& (0+255),w,b
  5635  000904  26D9               	addwf	fsr2l,f,c
  5636  000906  51D1               	movf	(MTouchSensorDecode@pSensor+1)& (0+255),w,b
  5637  000908  22DA               	addwfc	fsr2h,f,c
  5638  00090A  6ADE               	clrf	postinc2,c
  5639  00090C  6ADE               	clrf	postinc2,c
  5640  00090E  6ADE               	clrf	postinc2,c
  5641  000910  6ADD               	clrf	postdec2,c
  5642                           
  5643                           ; BSR set to: 0
  5644  000912  0012               	return	
  5645  000914                     __end_of_MTouchSensorDecode:
  5646                           	opt stack 0
  5647  000914                     PL4:
  5648                           	opt stack 21
  5649  000914  EE20 F01A          	lfsr	2,26
  5650  000918  51D0               	movf	MTouchSensorDecode@pSensor& (0+255),w,b
  5651  00091A  26D9               	addwf	fsr2l,f,c
  5652  00091C  51D1               	movf	(MTouchSensorDecode@pSensor+1)& (0+255),w,b
  5653  00091E  22DA               	addwfc	fsr2h,f,c
  5654  000920  06DE               	decf	postinc2,f,c
  5655  000922  0E00               	movlw	0
  5656  000924  5ADD               	subwfb	postdec2,f,c
  5657  000926  2AD9               	incf	fsr2l,f,c
  5658  000928  1CDD               	comf	postdec2,w,c
  5659  00092A  0CFF               	retlw	255
  5660  00092C                     __end_ofPL4:
  5661                           	opt stack 0
  5662  00092C                     PL8:
  5663                           	opt stack 21
  5664  00092C  51D0               	movf	MTouchSensorDecode@pSensor& (0+255),w,b
  5665  00092E  26D9               	addwf	fsr2l,f,c
  5666  000930  51D1               	movf	(MTouchSensorDecode@pSensor+1)& (0+255),w,b
  5667  000932  22DA               	addwfc	fsr2h,f,c
  5668  000934  0E08               	movlw	8
  5669  000936  6EDE               	movwf	postinc2,c
  5670  000938  6ADD               	clrf	postdec2,c
  5671  00093A  0C08               	retlw	8
  5672  00093C                     __end_ofPL8:
  5673                           	opt stack 0
  5674  00093C                     PL22:
  5675                           	opt stack 21
  5676  00093C  EE20 F01C          	lfsr	2,28
  5677  000940  51D0               	movf	MTouchSensorDecode@pSensor& (0+255),w,b
  5678  000942  26D9               	addwf	fsr2l,f,c
  5679  000944  51D1               	movf	(MTouchSensorDecode@pSensor+1)& (0+255),w,b
  5680  000946  22DA               	addwfc	fsr2h,f,c
  5681  000948  0E01               	movlw	1
  5682  00094A  6EDF               	movwf	indf2,c
  5683  00094C  0C01               	retlw	1
  5684  00094E                     __end_ofPL22:
  5685                           	opt stack 0
  5686                           tblptru	equ	0xFF8
  5687                           tblptrh	equ	0xFF7
  5688                           tblptrl	equ	0xFF6
  5689                           tablat	equ	0xFF5
  5690                           prodh	equ	0xFF4
  5691                           prodl	equ	0xFF3
  5692                           intcon	equ	0xFF2
  5693                           postinc0	equ	0xFEE
  5694                           wreg	equ	0xFE8
  5695                           postinc1	equ	0xFE6
  5696                           postdec1	equ	0xFE5
  5697                           fsr1h	equ	0xFE2
  5698                           fsr1l	equ	0xFE1
  5699                           bsr	equ	0xFE0
  5700                           indf2	equ	0xFDF
  5701                           postinc2	equ	0xFDE
  5702                           postdec2	equ	0xFDD
  5703                           fsr2h	equ	0xFDA
  5704                           fsr2l	equ	0xFD9
  5705                           status	equ	0xFD8
  5706                           
  5707 ;; *************** function _MTouchUpdateSensorAverage *****************
  5708 ;; Defined at:
  5709 ;;		line 214 in file "../lib/mTouchCap/mTouchSensor.c"
  5710 ;; Parameters:    Size  Location     Type
  5711 ;;  pSensor         2    0[BANK0 ] PTR struct tag_SENSOR
  5712 ;;		 -> sensors(192), 
  5713 ;;  rate            2    2[BANK0 ] unsigned short 
  5714 ;; Auto vars:     Size  Location     Type
  5715 ;;		None
  5716 ;; Return value:  Size  Location     Type
  5717 ;;		None               void
  5718 ;; Registers used:
  5719 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5720 ;; Tracked objects:
  5721 ;;		On entry : F/0
  5722 ;;		On exit  : F/0
  5723 ;;		Unchanged: 0/0
  5724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5725 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5727 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5728 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5729 ;;Total ram usage:        9 bytes
  5730 ;; Hardware stack levels used:    1
  5731 ;; This function calls:
  5732 ;;		Nothing
  5733 ;; This function is called by:
  5734 ;;		_MTouchSensorDecode
  5735 ;; This function uses a non-reentrant model
  5736 ;;
  5737                           
  5738                           	psect	text30
  5739  000C26                     __ptext30:
  5740                           	opt stack 0
  5741  000C26                     _MTouchUpdateSensorAverage:
  5742                           	opt stack 21
  5743                           
  5744                           ; BSR set to: 0
  5745                           ;mTouchSensor.c: 216: if(pSensor->averageCount++ >= rate)
  5746                           
  5747                           ; BSR set to: 0
  5748                           ;incstack = 0
  5749  000C26  EE20 F016          	lfsr	2,22
  5750  000C2A  51C7               	movf	MTouchUpdateSensorAverage@pSensor& (0+255),w,b
  5751  000C2C  26D9               	addwf	fsr2l,f,c
  5752  000C2E  51C8               	movf	(MTouchUpdateSensorAverage@pSensor+1)& (0+255),w,b
  5753  000C30  22DA               	addwfc	fsr2h,f,c
  5754  000C32  CFDF F0CB          	movff	indf2,??_MTouchUpdateSensorAverage
  5755  000C36  2ADE               	incf	postinc2,f,c
  5756  000C38  CFDF F0CC          	movff	indf2,??_MTouchUpdateSensorAverage+1
  5757  000C3C  0E00               	movlw	0
  5758  000C3E  22DD               	addwfc	postdec2,f,c
  5759  000C40  51C9               	movf	MTouchUpdateSensorAverage@rate& (0+255),w,b
  5760  000C42  5DCB               	subwf	??_MTouchUpdateSensorAverage& (0+255),w,b
  5761  000C44  51CA               	movf	(MTouchUpdateSensorAverage@rate+1)& (0+255),w,b
  5762  000C46  59CC               	subwfb	(??_MTouchUpdateSensorAverage+1)& (0+255),w,b
  5763  000C48  A0D8               	btfss	status,0,c
  5764  000C4A  0012               	return	
  5765                           
  5766                           ; BSR set to: 0
  5767                           ;mTouchSensor.c: 217: {
  5768                           ;mTouchSensor.c: 218: pSensor->averageCount = 0;
  5769  000C4C  EE20 F016          	lfsr	2,22
  5770  000C50  51C7               	movf	MTouchUpdateSensorAverage@pSensor& (0+255),w,b
  5771  000C52  26D9               	addwf	fsr2l,f,c
  5772  000C54  51C8               	movf	(MTouchUpdateSensorAverage@pSensor+1)& (0+255),w,b
  5773  000C56  22DA               	addwfc	fsr2h,f,c
  5774  000C58  0E00               	movlw	0
  5775  000C5A  6EDE               	movwf	postinc2,c
  5776  000C5C  6EDD               	movwf	postdec2,c
  5777                           
  5778                           ;mTouchSensor.c: 235: pSensor->average -= pSensor->average >> 3;
  5779  000C5E  0E03               	movlw	3
  5780  000C60  6FCB               	movwf	??_MTouchUpdateSensorAverage& (0+255),b
  5781  000C62  C0C7  FFD9         	movff	MTouchUpdateSensorAverage@pSensor,fsr2l
  5782  000C66  C0C8  FFDA         	movff	MTouchUpdateSensorAverage@pSensor+1,fsr2h
  5783  000C6A  D81A               	call	PL2	;call to abstracted procedure
  5784  000C6C  5EDE               	subwf	postinc2,f,c
  5785  000C6E  51CD               	movf	(??_MTouchUpdateSensorAverage+2)& (0+255),w,b
  5786  000C70  5ADE               	subwfb	postinc2,f,c
  5787  000C72  51CE               	movf	(??_MTouchUpdateSensorAverage+3)& (0+255),w,b
  5788  000C74  5ADE               	subwfb	postinc2,f,c
  5789  000C76  51CF               	movf	(??_MTouchUpdateSensorAverage+4)& (0+255),w,b
  5790  000C78  5ADD               	subwfb	postdec2,f,c
  5791                           
  5792                           ;mTouchSensor.c: 236: pSensor->average += pSensor->oversampleFilterData >> 3;
  5793  000C7A  0E03               	movlw	3
  5794  000C7C  6FCB               	movwf	??_MTouchUpdateSensorAverage& (0+255),b
  5795  000C7E  EE20 F004          	lfsr	2,4
  5796  000C82  51C7               	movf	MTouchUpdateSensorAverage@pSensor& (0+255),w,b
  5797  000C84  26D9               	addwf	fsr2l,f,c
  5798  000C86  51C8               	movf	(MTouchUpdateSensorAverage@pSensor+1)& (0+255),w,b
  5799  000C88  22DA               	addwfc	fsr2h,f,c
  5800  000C8A  D80A               	call	PL2	;call to abstracted procedure
  5801  000C8C  26DE               	addwf	postinc2,f,c
  5802  000C8E  51CD               	movf	(??_MTouchUpdateSensorAverage+2)& (0+255),w,b
  5803  000C90  22DE               	addwfc	postinc2,f,c
  5804  000C92  51CE               	movf	(??_MTouchUpdateSensorAverage+3)& (0+255),w,b
  5805  000C94  22DE               	addwfc	postinc2,f,c
  5806  000C96  51CF               	movf	(??_MTouchUpdateSensorAverage+4)& (0+255),w,b
  5807  000C98  22DD               	addwfc	postdec2,f,c
  5808  000C9A  52DD               	movf	postdec2,f,c
  5809  000C9C  52DD               	movf	postdec2,f,c
  5810                           
  5811                           ; BSR set to: 0
  5812  000C9E  0012               	return	
  5813  000CA0                     __end_of_MTouchUpdateSensorAverage:
  5814                           	opt stack 0
  5815  000CA0                     PL2:
  5816                           	opt stack 21
  5817  000CA0  CFDE F0CC          	movff	postinc2,??_MTouchUpdateSensorAverage+1
  5818  000CA4  CFDE F0CD          	movff	postinc2,??_MTouchUpdateSensorAverage+2
  5819  000CA8  CFDE F0CE          	movff	postinc2,??_MTouchUpdateSensorAverage+3
  5820  000CAC  CFDE F0CF          	movff	postinc2,??_MTouchUpdateSensorAverage+4
  5821  000CB0                     i2u234_45:
  5822  000CB0  67CB               	tstfsz	??_MTouchUpdateSensorAverage& (0+255),b
  5823  000CB2  D001               	goto	i2u234_46
  5824  000CB4  D007               	goto	i2u234_47
  5825  000CB6                     i2u234_46:
  5826  000CB6  35CF               	rlcf	(??_MTouchUpdateSensorAverage+4)& (0+255),w,b
  5827  000CB8  33CF               	rrcf	(??_MTouchUpdateSensorAverage+4)& (0+255),f,b
  5828  000CBA  33CE               	rrcf	(??_MTouchUpdateSensorAverage+3)& (0+255),f,b
  5829  000CBC  33CD               	rrcf	(??_MTouchUpdateSensorAverage+2)& (0+255),f,b
  5830  000CBE  33CC               	rrcf	(??_MTouchUpdateSensorAverage+1)& (0+255),f,b
  5831  000CC0  2FCB               	decfsz	??_MTouchUpdateSensorAverage& (0+255),f,b
  5832  000CC2  D7F6               	goto	i2u234_45
  5833  000CC4                     i2u234_47:
  5834  000CC4  C0C7  FFD9         	movff	MTouchUpdateSensorAverage@pSensor,fsr2l
  5835  000CC8  C0C8  FFDA         	movff	MTouchUpdateSensorAverage@pSensor+1,fsr2h
  5836  000CCC  51CC               	movf	(??_MTouchUpdateSensorAverage+1)& (0+255),w,b
  5837  000CCE  0012               	return	
  5838  000CD0                     __end_ofPL2:
  5839                           	opt stack 0
  5840                           tblptru	equ	0xFF8
  5841                           tblptrh	equ	0xFF7
  5842                           tblptrl	equ	0xFF6
  5843                           tablat	equ	0xFF5
  5844                           prodh	equ	0xFF4
  5845                           prodl	equ	0xFF3
  5846                           intcon	equ	0xFF2
  5847                           postinc0	equ	0xFEE
  5848                           wreg	equ	0xFE8
  5849                           postinc1	equ	0xFE6
  5850                           postdec1	equ	0xFE5
  5851                           fsr1h	equ	0xFE2
  5852                           fsr1l	equ	0xFE1
  5853                           bsr	equ	0xFE0
  5854                           indf2	equ	0xFDF
  5855                           postinc2	equ	0xFDE
  5856                           postdec2	equ	0xFDD
  5857                           fsr2h	equ	0xFDA
  5858                           fsr2l	equ	0xFD9
  5859                           status	equ	0xFD8
  5860                           
  5861 ;; *************** function _MTouchAcquisitionCVD *****************
  5862 ;; Defined at:
  5863 ;;		line 121 in file "../lib/mTouchCap/mTouchAcquistion.c"
  5864 ;; Parameters:    Size  Location     Type
  5865 ;;  pCurrentSens    2    0[BANK0 ] PTR struct tag_SENSOR
  5866 ;;		 -> sensors(192), 
  5867 ;;  pPreviousSen    2    2[BANK0 ] PTR struct tag_SENSOR
  5868 ;;		 -> sensors(192), 
  5869 ;; Auto vars:     Size  Location     Type
  5870 ;;  curTris         2   17[BANK0 ] PTR volatile unsigned ch
  5871 ;;		 -> TRISE(1), TRISA(1), 
  5872 ;;  curLat          2   14[BANK0 ] PTR volatile unsigned ch
  5873 ;;		 -> LATE(1), LATA(1), 
  5874 ;;  prevLat         2   12[BANK0 ] PTR volatile unsigned ch
  5875 ;;		 -> LATE(1), LATA(1), 
  5876 ;;  prevTris        2    8[BANK0 ] PTR volatile unsigned ch
  5877 ;;		 -> TRISE(1), TRISA(1), 
  5878 ;;  result          2    6[BANK0 ] short 
  5879 ;;  curIOMask       1   19[BANK0 ] unsigned char 
  5880 ;;  prevIOMask      1   16[BANK0 ] unsigned char 
  5881 ;;  curChannelNu    1   11[BANK0 ] unsigned char 
  5882 ;;  prevChannelN    1   10[BANK0 ] unsigned char 
  5883 ;; Return value:  Size  Location     Type
  5884 ;;                  2    0[BANK0 ] short 
  5885 ;; Registers used:
  5886 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5887 ;; Tracked objects:
  5888 ;;		On entry : F/0
  5889 ;;		On exit  : F/0
  5890 ;;		Unchanged: 0/0
  5891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5892 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5893 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5894 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5895 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5896 ;;Total ram usage:       20 bytes
  5897 ;; Hardware stack levels used:    1
  5898 ;; This function calls:
  5899 ;;		Nothing
  5900 ;; This function is called by:
  5901 ;;		_MTouchAcquisition
  5902 ;; This function uses a non-reentrant model
  5903 ;;
  5904                           
  5905                           	psect	text31
  5906  0003F4                     __ptext31:
  5907                           	opt stack 0
  5908  0003F4                     _MTouchAcquisitionCVD:
  5909                           	opt stack 22
  5910                           
  5911                           ; BSR set to: 0
  5912                           ;mTouchAcquistion.c: 123: SFR prevTris;
  5913                           ;mTouchAcquistion.c: 124: SFR prevLat;
  5914                           ;mTouchAcquistion.c: 125: IOMASK prevIOMask;
  5915                           ;mTouchAcquistion.c: 126: SFR curTris;
  5916                           ;mTouchAcquistion.c: 127: SFR curLat;
  5917                           ;mTouchAcquistion.c: 128: IOMASK curIOMask;
  5918                           ;mTouchAcquistion.c: 129: UINT8 prevChannelNumber;
  5919                           ;mTouchAcquistion.c: 130: UINT8 curChannelNumber;
  5920                           ;mTouchAcquistion.c: 131: INT16 result;
  5921                           ;mTouchAcquistion.c: 135: prevTris = pPreviousSensor->trisReg;
  5922                           
  5923                           ; BSR set to: 0
  5924                           ;incstack = 0
  5925  0003F4  EE20 F008          	lfsr	2,8
  5926  0003F8  51C9               	movf	MTouchAcquisitionCVD@pPreviousSensor& (0+255),w,b
  5927  0003FA  26D9               	addwf	fsr2l,f,c
  5928  0003FC  51CA               	movf	(MTouchAcquisitionCVD@pPreviousSensor+1)& (0+255),w,b
  5929  0003FE  22DA               	addwfc	fsr2h,f,c
  5930  000400  CFDE F0CF          	movff	postinc2,MTouchAcquisitionCVD@prevTris
  5931  000404  CFDD F0D0          	movff	postdec2,MTouchAcquisitionCVD@prevTris+1
  5932                           
  5933                           ;mTouchAcquistion.c: 136: prevLat = pPreviousSensor->latReg;
  5934  000408  EE20 F00A          	lfsr	2,10
  5935  00040C  51C9               	movf	MTouchAcquisitionCVD@pPreviousSensor& (0+255),w,b
  5936  00040E  26D9               	addwf	fsr2l,f,c
  5937  000410  51CA               	movf	(MTouchAcquisitionCVD@pPreviousSensor+1)& (0+255),w,b
  5938  000412  22DA               	addwfc	fsr2h,f,c
  5939  000414  CFDE F0D3          	movff	postinc2,MTouchAcquisitionCVD@prevLat
  5940  000418  CFDD F0D4          	movff	postdec2,MTouchAcquisitionCVD@prevLat+1
  5941                           
  5942                           ;mTouchAcquistion.c: 137: prevIOMask = pPreviousSensor->ioMask;
  5943  00041C  EE20 F01D          	lfsr	2,29
  5944  000420  51C9               	movf	MTouchAcquisitionCVD@pPreviousSensor& (0+255),w,b
  5945  000422  26D9               	addwf	fsr2l,f,c
  5946  000424  51CA               	movf	(MTouchAcquisitionCVD@pPreviousSensor+1)& (0+255),w,b
  5947  000426  22DA               	addwfc	fsr2h,f,c
  5948  000428  50DF               	movf	indf2,w,c
  5949  00042A  6FD7               	movwf	MTouchAcquisitionCVD@prevIOMask& (0+255),b
  5950                           
  5951                           ;mTouchAcquistion.c: 138: curTris = pCurrentSensor->trisReg;
  5952  00042C  EE20 F008          	lfsr	2,8
  5953  000430  51C7               	movf	MTouchAcquisitionCVD@pCurrentSensor& (0+255),w,b
  5954  000432  26D9               	addwf	fsr2l,f,c
  5955  000434  51C8               	movf	(MTouchAcquisitionCVD@pCurrentSensor+1)& (0+255),w,b
  5956  000436  22DA               	addwfc	fsr2h,f,c
  5957  000438  CFDE F0D8          	movff	postinc2,MTouchAcquisitionCVD@curTris
  5958  00043C  CFDD F0D9          	movff	postdec2,MTouchAcquisitionCVD@curTris+1
  5959                           
  5960                           ;mTouchAcquistion.c: 139: curLat = pCurrentSensor->latReg;
  5961  000440  EE20 F00A          	lfsr	2,10
  5962  000444  51C7               	movf	MTouchAcquisitionCVD@pCurrentSensor& (0+255),w,b
  5963  000446  26D9               	addwf	fsr2l,f,c
  5964  000448  51C8               	movf	(MTouchAcquisitionCVD@pCurrentSensor+1)& (0+255),w,b
  5965  00044A  22DA               	addwfc	fsr2h,f,c
  5966  00044C  CFDE F0D5          	movff	postinc2,MTouchAcquisitionCVD@curLat
  5967  000450  CFDD F0D6          	movff	postdec2,MTouchAcquisitionCVD@curLat+1
  5968                           
  5969                           ;mTouchAcquistion.c: 140: curIOMask = pCurrentSensor->ioMask;
  5970  000454  EE20 F01D          	lfsr	2,29
  5971  000458  51C7               	movf	MTouchAcquisitionCVD@pCurrentSensor& (0+255),w,b
  5972  00045A  26D9               	addwf	fsr2l,f,c
  5973  00045C  51C8               	movf	(MTouchAcquisitionCVD@pCurrentSensor+1)& (0+255),w,b
  5974  00045E  22DA               	addwfc	fsr2h,f,c
  5975  000460  50DF               	movf	indf2,w,c
  5976  000462  6FDA               	movwf	MTouchAcquisitionCVD@curIOMask& (0+255),b
  5977                           
  5978                           ;mTouchAcquistion.c: 141: prevChannelNumber = pPreviousSensor->channelNumber;
  5979  000464  EE20 F01E          	lfsr	2,30
  5980  000468  51C9               	movf	MTouchAcquisitionCVD@pPreviousSensor& (0+255),w,b
  5981  00046A  26D9               	addwf	fsr2l,f,c
  5982  00046C  51CA               	movf	(MTouchAcquisitionCVD@pPreviousSensor+1)& (0+255),w,b
  5983  00046E  22DA               	addwfc	fsr2h,f,c
  5984  000470  50DF               	movf	indf2,w,c
  5985  000472  6FD1               	movwf	MTouchAcquisitionCVD@prevChannelNumber& (0+255),b
  5986                           
  5987                           ;mTouchAcquistion.c: 142: curChannelNumber = pCurrentSensor->channelNumber;
  5988  000474  EE20 F01E          	lfsr	2,30
  5989  000478  51C7               	movf	MTouchAcquisitionCVD@pCurrentSensor& (0+255),w,b
  5990  00047A  26D9               	addwf	fsr2l,f,c
  5991  00047C  51C8               	movf	(MTouchAcquisitionCVD@pCurrentSensor+1)& (0+255),w,b
  5992  00047E  22DA               	addwfc	fsr2h,f,c
  5993  000480  50DF               	movf	indf2,w,c
  5994  000482  6FD2               	movwf	MTouchAcquisitionCVD@curChannelNumber& (0+255),b
  5995                           
  5996                           ; BSR set to: 0
  5997                           ;mTouchAcquistion.c: 148: {ADCON0bits.CHS = prevChannelNumber;};
  5998  000484  C0D1  F0CB         	movff	MTouchAcquisitionCVD@prevChannelNumber,??_MTouchAcquisitionCVD
  5999  000488  D8A6               	call	PL16	;call to abstracted procedure
  6000                           
  6001                           ; BSR set to: 0
  6002                           ;mTouchAcquistion.c: 151: *prevLat |= prevIOMask; *prevTris &= ~prevIOMask;
  6003  00048A  C0D3  FFD9         	movff	MTouchAcquisitionCVD@prevLat,fsr2l
  6004  00048E  C0D4  FFDA         	movff	MTouchAcquisitionCVD@prevLat+1,fsr2h
  6005  000492  51D7               	movf	MTouchAcquisitionCVD@prevIOMask& (0+255),w,b
  6006  000494  12DF               	iorwf	indf2,f,c
  6007                           
  6008                           ; BSR set to: 0
  6009  000496  D8B3               	call	PL24	;call to abstracted procedure
  6010                           
  6011                           ; BSR set to: 0
  6012                           ;mTouchAcquistion.c: 154: *curLat &= ~curIOMask; *curTris &= ~curIOMask;
  6013  000498  D895               	call	PL14	;call to abstracted procedure
  6014                           
  6015                           ; BSR set to: 0
  6016  00049A  D88B               	call	PL6	;call to abstracted procedure
  6017                           
  6018                           ; BSR set to: 0
  6019                           ;mTouchAcquistion.c: 157: { __nop();__nop();__nop();__nop();__nop();__nop();__nop();__no
      +                          p();__nop();__nop(); __nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__n
      +                          op();__nop(); };
  6020  00049C  F000               	nop	
  6021  00049E  F000               	nop	
  6022  0004A0  F000               	nop	
  6023  0004A2  F000               	nop	
  6024  0004A4  F000               	nop	
  6025  0004A6  F000               	nop	
  6026  0004A8  F000               	nop	
  6027  0004AA  F000               	nop	
  6028  0004AC  F000               	nop	
  6029  0004AE  F000               	nop	
  6030  0004B0  F000               	nop	
  6031  0004B2  F000               	nop	
  6032  0004B4  F000               	nop	
  6033  0004B6  F000               	nop	
  6034  0004B8  F000               	nop	
  6035  0004BA  F000               	nop	
  6036  0004BC  F000               	nop	
  6037  0004BE  F000               	nop	
  6038  0004C0  F000               	nop	
  6039  0004C2  F000               	nop	
  6040                           
  6041                           ;mTouchAcquistion.c: 160: *curTris |= curIOMask;
  6042  0004C4  C0D8  FFD9         	movff	MTouchAcquisitionCVD@curTris,fsr2l
  6043  0004C8  C0D9  FFDA         	movff	MTouchAcquisitionCVD@curTris+1,fsr2h
  6044  0004CC  0100               	movlb	0	; () banked
  6045  0004CE  51DA               	movf	MTouchAcquisitionCVD@curIOMask& (0+255),w,b
  6046  0004D0  12DF               	iorwf	indf2,f,c
  6047                           
  6048                           ;mTouchAcquistion.c: 163: {ADCON0bits.CHS = curChannelNumber;};
  6049  0004D2  C0D2  F0CB         	movff	MTouchAcquisitionCVD@curChannelNumber,??_MTouchAcquisitionCVD
  6050  0004D6  D87F               	call	PL16	;call to abstracted procedure
  6051                           
  6052                           ; BSR set to: 0
  6053                           ;mTouchAcquistion.c: 166: { __nop();__nop();__nop();__nop();__nop();__nop();__nop();__no
      +                          p();__nop();__nop(); __nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__n
      +                          op();__nop(); };
  6054  0004D8  F000               	nop	
  6055  0004DA  F000               	nop	
  6056  0004DC  F000               	nop	
  6057  0004DE  F000               	nop	
  6058  0004E0  F000               	nop	
  6059  0004E2  F000               	nop	
  6060  0004E4  F000               	nop	
  6061  0004E6  F000               	nop	
  6062  0004E8  F000               	nop	
  6063  0004EA  F000               	nop	
  6064  0004EC  F000               	nop	
  6065  0004EE  F000               	nop	
  6066  0004F0  F000               	nop	
  6067  0004F2  F000               	nop	
  6068  0004F4  F000               	nop	
  6069  0004F6  F000               	nop	
  6070  0004F8  F000               	nop	
  6071  0004FA  F000               	nop	
  6072  0004FC  F000               	nop	
  6073  0004FE  F000               	nop	
  6074                           
  6075                           ;mTouchAcquistion.c: 169: {ADCON0bits.DONE = 1;while(ADCON0bits.DONE);};
  6076  000500  82C2               	bsf	4034,1,c	;volatile
  6077  000502                     i2l11:
  6078  000502  B2C2               	btfsc	4034,1,c	;volatile
  6079  000504  D7FE               	goto	i2l11
  6080                           
  6081                           ;mTouchAcquistion.c: 172: *curTris &= ~curIOMask;
  6082  000506  0100               	movlb	0	; () banked
  6083  000508  D854               	call	PL6	;call to abstracted procedure
  6084                           
  6085                           ;mTouchAcquistion.c: 173: *prevLat &= ~prevIOMask;
  6086  00050A  D882               	call	PL26	;call to abstracted procedure
  6087                           
  6088                           ; BSR set to: 0
  6089                           ;mTouchAcquistion.c: 179: result = 1024;
  6090  00050C  0E04               	movlw	4
  6091  00050E  6FCE               	movwf	(MTouchAcquisitionCVD@result+1)& (0+255),b
  6092  000510  6BCD               	clrf	MTouchAcquisitionCVD@result& (0+255),b
  6093                           
  6094                           ; BSR set to: 0
  6095                           ;mTouchAcquistion.c: 181: result -= (((INT16)ADRESH << 8)+ADRESL);
  6096  000512  D869               	call	PL18	;call to abstracted procedure
  6097  000514  5FCD               	subwf	MTouchAcquisitionCVD@result& (0+255),f,b
  6098  000516  51CC               	movf	(??_MTouchAcquisitionCVD+1)& (0+255),w,b
  6099  000518  5BCE               	subwfb	(MTouchAcquisitionCVD@result+1)& (0+255),f,b
  6100                           
  6101                           ; BSR set to: 0
  6102                           ;mTouchAcquistion.c: 186: {ADCON0bits.CHS = prevChannelNumber;};
  6103  00051A  C0D1  F0CB         	movff	MTouchAcquisitionCVD@prevChannelNumber,??_MTouchAcquisitionCVD
  6104  00051E  D85B               	call	PL16	;call to abstracted procedure
  6105                           
  6106                           ; BSR set to: 0
  6107                           ;mTouchAcquistion.c: 189: *prevLat &= ~prevIOMask; *prevTris &= ~prevIOMask;
  6108  000520  D877               	call	PL26	;call to abstracted procedure
  6109                           
  6110                           ; BSR set to: 0
  6111  000522  D86D               	call	PL24	;call to abstracted procedure
  6112                           
  6113                           ; BSR set to: 0
  6114                           ;mTouchAcquistion.c: 192: *curLat |= curIOMask; *curTris &= ~curIOMask;
  6115  000524  C0D5  FFD9         	movff	MTouchAcquisitionCVD@curLat,fsr2l
  6116  000528  C0D6  FFDA         	movff	MTouchAcquisitionCVD@curLat+1,fsr2h
  6117  00052C  51DA               	movf	MTouchAcquisitionCVD@curIOMask& (0+255),w,b
  6118  00052E  12DF               	iorwf	indf2,f,c
  6119                           
  6120                           ; BSR set to: 0
  6121  000530  D840               	call	PL6	;call to abstracted procedure
  6122                           
  6123                           ; BSR set to: 0
  6124                           ;mTouchAcquistion.c: 195: { __nop();__nop();__nop();__nop();__nop();__nop();__nop();__no
      +                          p();__nop();__nop(); __nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__n
      +                          op();__nop(); };
  6125  000532  F000               	nop	
  6126  000534  F000               	nop	
  6127  000536  F000               	nop	
  6128  000538  F000               	nop	
  6129  00053A  F000               	nop	
  6130  00053C  F000               	nop	
  6131  00053E  F000               	nop	
  6132  000540  F000               	nop	
  6133  000542  F000               	nop	
  6134  000544  F000               	nop	
  6135  000546  F000               	nop	
  6136  000548  F000               	nop	
  6137  00054A  F000               	nop	
  6138  00054C  F000               	nop	
  6139  00054E  F000               	nop	
  6140  000550  F000               	nop	
  6141  000552  F000               	nop	
  6142  000554  F000               	nop	
  6143  000556  F000               	nop	
  6144  000558  F000               	nop	
  6145                           
  6146                           ;mTouchAcquistion.c: 198: *curTris |= curIOMask;
  6147  00055A  C0D8  FFD9         	movff	MTouchAcquisitionCVD@curTris,fsr2l
  6148  00055E  C0D9  FFDA         	movff	MTouchAcquisitionCVD@curTris+1,fsr2h
  6149  000562  51DA               	movf	MTouchAcquisitionCVD@curIOMask& (0+255),w,b
  6150  000564  12DF               	iorwf	indf2,f,c
  6151                           
  6152                           ; BSR set to: 0
  6153                           ;mTouchAcquistion.c: 201: {ADCON0bits.CHS = curChannelNumber;};
  6154  000566  C0D2  F0CB         	movff	MTouchAcquisitionCVD@curChannelNumber,??_MTouchAcquisitionCVD
  6155  00056A  D835               	call	PL16	;call to abstracted procedure
  6156                           
  6157                           ; BSR set to: 0
  6158                           ;mTouchAcquistion.c: 204: { __nop();__nop();__nop();__nop();__nop();__nop();__nop();__no
      +                          p();__nop();__nop(); __nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__n
      +                          op();__nop(); };
  6159  00056C  F000               	nop	
  6160  00056E  F000               	nop	
  6161  000570  F000               	nop	
  6162  000572  F000               	nop	
  6163  000574  F000               	nop	
  6164  000576  F000               	nop	
  6165  000578  F000               	nop	
  6166  00057A  F000               	nop	
  6167  00057C  F000               	nop	
  6168  00057E  F000               	nop	
  6169  000580  F000               	nop	
  6170  000582  F000               	nop	
  6171  000584  F000               	nop	
  6172  000586  F000               	nop	
  6173  000588  F000               	nop	
  6174  00058A  F000               	nop	
  6175  00058C  F000               	nop	
  6176  00058E  F000               	nop	
  6177  000590  F000               	nop	
  6178  000592  F000               	nop	
  6179                           
  6180                           ;mTouchAcquistion.c: 207: {ADCON0bits.DONE = 1;while(ADCON0bits.DONE);};
  6181  000594  82C2               	bsf	4034,1,c	;volatile
  6182  000596                     i2l14:
  6183  000596  B2C2               	btfsc	4034,1,c	;volatile
  6184  000598  D7FE               	goto	i2l14
  6185                           
  6186                           ;mTouchAcquistion.c: 210: *curLat &= ~curIOMask;
  6187  00059A  0100               	movlb	0	; () banked
  6188  00059C  D813               	call	PL14	;call to abstracted procedure
  6189                           
  6190                           ;mTouchAcquistion.c: 211: *curTris &= ~curIOMask;
  6191  00059E  D809               	call	PL6	;call to abstracted procedure
  6192                           
  6193                           ; BSR set to: 0
  6194                           ;mTouchAcquistion.c: 214: result += (((INT16)ADRESH << 8)+ADRESL);
  6195  0005A0  D822               	call	PL18	;call to abstracted procedure
  6196  0005A2  27CD               	addwf	MTouchAcquisitionCVD@result& (0+255),f,b
  6197  0005A4  51CC               	movf	(??_MTouchAcquisitionCVD+1)& (0+255),w,b
  6198  0005A6  23CE               	addwfc	(MTouchAcquisitionCVD@result+1)& (0+255),f,b
  6199                           
  6200                           ; BSR set to: 0
  6201                           ;mTouchAcquistion.c: 216: return (UINT16)result;
  6202  0005A8  C0CD  F0C7         	movff	MTouchAcquisitionCVD@result,?_MTouchAcquisitionCVD
  6203  0005AC  C0CE  F0C8         	movff	MTouchAcquisitionCVD@result+1,?_MTouchAcquisitionCVD+1
  6204                           
  6205                           ; BSR set to: 0
  6206  0005B0  0012               	return	
  6207  0005B2                     __end_of_MTouchAcquisitionCVD:
  6208                           	opt stack 0
  6209  0005B2                     PL6:
  6210                           	opt stack 22
  6211  0005B2  1DDA               	comf	MTouchAcquisitionCVD@curIOMask& (0+255),w,b
  6212  0005B4  6FCB               	movwf	??_MTouchAcquisitionCVD& (0+255),b
  6213  0005B6  C0D8  FFD9         	movff	MTouchAcquisitionCVD@curTris,fsr2l
  6214  0005BA  C0D9  FFDA         	movff	MTouchAcquisitionCVD@curTris+1,fsr2h
  6215  0005BE  51CB               	movf	??_MTouchAcquisitionCVD& (0+255),w,b
  6216  0005C0  16DF               	andwf	indf2,f,c
  6217  0005C2  0012               	return	
  6218  0005C4                     __end_ofPL6:
  6219                           	opt stack 0
  6220  0005C4                     PL14:
  6221                           	opt stack 22
  6222  0005C4  1DDA               	comf	MTouchAcquisitionCVD@curIOMask& (0+255),w,b
  6223  0005C6  6FCB               	movwf	??_MTouchAcquisitionCVD& (0+255),b
  6224  0005C8  C0D5  FFD9         	movff	MTouchAcquisitionCVD@curLat,fsr2l
  6225  0005CC  C0D6  FFDA         	movff	MTouchAcquisitionCVD@curLat+1,fsr2h
  6226  0005D0  51CB               	movf	??_MTouchAcquisitionCVD& (0+255),w,b
  6227  0005D2  16DF               	andwf	indf2,f,c
  6228  0005D4  0012               	return	
  6229  0005D6                     __end_ofPL14:
  6230                           	opt stack 0
  6231  0005D6                     PL16:
  6232                           	opt stack 22
  6233  0005D6  47CB               	rlncf	??_MTouchAcquisitionCVD& (0+255),f,b
  6234  0005D8  47CB               	rlncf	??_MTouchAcquisitionCVD& (0+255),f,b
  6235  0005DA  50C2               	movf	4034,w,c	;volatile
  6236  0005DC  19CB               	xorwf	??_MTouchAcquisitionCVD& (0+255),w,b
  6237  0005DE  0B83               	andlw	-125
  6238  0005E0  19CB               	xorwf	??_MTouchAcquisitionCVD& (0+255),w,b
  6239  0005E2  6EC2               	movwf	4034,c	;volatile
  6240  0005E4  0012               	return	
  6241  0005E6                     __end_ofPL16:
  6242                           	opt stack 0
  6243  0005E6                     PL18:
  6244                           	opt stack 22
  6245  0005E6  50C3               	movf	4035,w,c	;volatile
  6246  0005E8  CFC4 F0CB          	movff	4036,??_MTouchAcquisitionCVD	;volatile
  6247  0005EC  6BCC               	clrf	(??_MTouchAcquisitionCVD+1)& (0+255),b
  6248  0005EE  C0CB  F0CC         	movff	??_MTouchAcquisitionCVD,??_MTouchAcquisitionCVD+1
  6249  0005F2  6BCB               	clrf	??_MTouchAcquisitionCVD& (0+255),b
  6250  0005F4  27CB               	addwf	??_MTouchAcquisitionCVD& (0+255),f,b
  6251  0005F6  0E00               	movlw	0
  6252  0005F8  23CC               	addwfc	(??_MTouchAcquisitionCVD+1)& (0+255),f,b
  6253  0005FA  51CB               	movf	??_MTouchAcquisitionCVD& (0+255),w,b
  6254  0005FC  0012               	return	
  6255  0005FE                     __end_ofPL18:
  6256                           	opt stack 0
  6257  0005FE                     PL24:
  6258                           	opt stack 22
  6259  0005FE  1DD7               	comf	MTouchAcquisitionCVD@prevIOMask& (0+255),w,b
  6260  000600  6FCB               	movwf	??_MTouchAcquisitionCVD& (0+255),b
  6261  000602  C0CF  FFD9         	movff	MTouchAcquisitionCVD@prevTris,fsr2l
  6262  000606  C0D0  FFDA         	movff	MTouchAcquisitionCVD@prevTris+1,fsr2h
  6263  00060A  51CB               	movf	??_MTouchAcquisitionCVD& (0+255),w,b
  6264  00060C  16DF               	andwf	indf2,f,c
  6265  00060E  0012               	return	
  6266  000610                     __end_ofPL24:
  6267                           	opt stack 0
  6268  000610                     PL26:
  6269                           	opt stack 22
  6270  000610  1DD7               	comf	MTouchAcquisitionCVD@prevIOMask& (0+255),w,b
  6271  000612  6FCB               	movwf	??_MTouchAcquisitionCVD& (0+255),b
  6272  000614  C0D3  FFD9         	movff	MTouchAcquisitionCVD@prevLat,fsr2l
  6273  000618  C0D4  FFDA         	movff	MTouchAcquisitionCVD@prevLat+1,fsr2h
  6274  00061C  51CB               	movf	??_MTouchAcquisitionCVD& (0+255),w,b
  6275  00061E  16DF               	andwf	indf2,f,c
  6276  000620  0012               	return	
  6277  000622                     __end_ofPL26:
  6278                           	opt stack 0
  6279                           tblptru	equ	0xFF8
  6280                           tblptrh	equ	0xFF7
  6281                           tblptrl	equ	0xFF6
  6282                           tablat	equ	0xFF5
  6283                           prodh	equ	0xFF4
  6284                           prodl	equ	0xFF3
  6285                           intcon	equ	0xFF2
  6286                           postinc0	equ	0xFEE
  6287                           wreg	equ	0xFE8
  6288                           postinc1	equ	0xFE6
  6289                           postdec1	equ	0xFE5
  6290                           fsr1h	equ	0xFE2
  6291                           fsr1l	equ	0xFE1
  6292                           bsr	equ	0xFE0
  6293                           indf2	equ	0xFDF
  6294                           postinc2	equ	0xFDE
  6295                           postdec2	equ	0xFDD
  6296                           fsr2h	equ	0xFDA
  6297                           fsr2l	equ	0xFD9
  6298                           status	equ	0xFD8
  6299                           tblptru	equ	0xFF8
  6300                           tblptrh	equ	0xFF7
  6301                           tblptrl	equ	0xFF6
  6302                           tablat	equ	0xFF5
  6303                           prodh	equ	0xFF4
  6304                           prodl	equ	0xFF3
  6305                           intcon	equ	0xFF2
  6306                           postinc0	equ	0xFEE
  6307                           wreg	equ	0xFE8
  6308                           postinc1	equ	0xFE6
  6309                           postdec1	equ	0xFE5
  6310                           fsr1h	equ	0xFE2
  6311                           fsr1l	equ	0xFE1
  6312                           bsr	equ	0xFE0
  6313                           indf2	equ	0xFDF
  6314                           postinc2	equ	0xFDE
  6315                           postdec2	equ	0xFDD
  6316                           fsr2h	equ	0xFDA
  6317                           fsr2l	equ	0xFD9
  6318                           status	equ	0xFD8
  6319                           
  6320                           	psect	param0
  6321  0000                     tblptru	equ	0xFF8
  6322                           tblptrh	equ	0xFF7
  6323                           tblptrl	equ	0xFF6
  6324                           tablat	equ	0xFF5
  6325                           prodh	equ	0xFF4
  6326                           prodl	equ	0xFF3
  6327                           intcon	equ	0xFF2
  6328                           postinc0	equ	0xFEE
  6329                           wreg	equ	0xFE8
  6330                           postinc1	equ	0xFE6
  6331                           postdec1	equ	0xFE5
  6332                           fsr1h	equ	0xFE2
  6333                           fsr1l	equ	0xFE1
  6334                           bsr	equ	0xFE0
  6335                           indf2	equ	0xFDF
  6336                           postinc2	equ	0xFDE
  6337                           postdec2	equ	0xFDD
  6338                           fsr2h	equ	0xFDA
  6339                           fsr2l	equ	0xFD9
  6340                           status	equ	0xFD8
  6341                           tblptru	equ	0xFF8
  6342                           tblptrh	equ	0xFF7
  6343                           tblptrl	equ	0xFF6
  6344                           tablat	equ	0xFF5
  6345                           prodh	equ	0xFF4
  6346                           prodl	equ	0xFF3
  6347                           intcon	equ	0xFF2
  6348                           postinc0	equ	0xFEE
  6349                           wreg	equ	0xFE8
  6350                           postinc1	equ	0xFE6
  6351                           postdec1	equ	0xFE5
  6352                           fsr1h	equ	0xFE2
  6353                           fsr1l	equ	0xFE1
  6354                           bsr	equ	0xFE0
  6355                           indf2	equ	0xFDF
  6356                           postinc2	equ	0xFDE
  6357                           postdec2	equ	0xFDD
  6358                           fsr2h	equ	0xFDA
  6359                           fsr2l	equ	0xFD9
  6360                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    256
    Data        0
    BSS         707
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     35      63
    BANK0           160     39     142
    BANK1           256     18     146
    BANK2           256      0     192
    BANK3           256      0     256
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    buttons.pSensor	PTR struct tag_SENSOR size(2) Largest target is 0
		 -> sensors(BANK2[192]), 

    sensors.latReg	PTR volatile unsigned char  size(2) Largest target is 0
		 -> LATE(ABS[1]), LATA(ABS[1]), 

    sensors.trisReg	PTR volatile unsigned char  size(2) Largest target is 0
		 -> TRISE(ABS[1]), TRISA(ABS[1]), 

    crc_mb_check@buffer	PTR unsigned char  size(2) Largest target is 128
		 -> RxTxBuff(BANK1[128]), 

    crc_mb@buffer	PTR unsigned char  size(2) Largest target is 128
		 -> RxTxBuff(BANK1[128]), 

    crc_mb_calc@code	PTR unsigned int  size(1) Largest target is 2
		 -> crc_mb_check@crc(COMRAM[2]), crc_mb@CRC(COMRAM[2]), 

    crc_mb_init@code	PTR unsigned int  size(1) Largest target is 2
		 -> crc_mb_check@crc(COMRAM[2]), crc_mb@CRC(COMRAM[2]), 

    read___ee@var	PTR unsigned char  size(1) Largest target is 1
		 -> set_ee_default@c1(COMRAM[1]), 

    write___ee@var	PTR unsigned char  size(1) Largest target is 1
		 -> set_ee_default@c(COMRAM[1]), 

    MTouchAcquisition@pCurrentSensor.latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATE(ABS[1]), LATA(ABS[1]), 

    MTouchAcquisition@pCurrentSensor.trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISE(ABS[1]), TRISA(ABS[1]), 

    MTouchAcquisition@pPreviousSensor.latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATE(ABS[1]), LATA(ABS[1]), 

    MTouchAcquisition@pPreviousSensor.trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISE(ABS[1]), TRISA(ABS[1]), 

    MTouchAcquisition@pPreviousSensor	PTR struct tag_SENSOR size(2) Largest target is 204
		 -> sensors(BANK2[192]), 

    MTouchAcquisition@pLastSensor	PTR struct tag_SENSOR size(2) Largest target is 204
		 -> sensors(BANK2[192]), 

    MTouchAcquisition@pCurrentSensor	PTR struct tag_SENSOR size(2) Largest target is 204
		 -> sensors(BANK2[192]), 

    MTouchUpdateSensorAverage@pSensor.latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATE(ABS[1]), LATA(ABS[1]), 

    MTouchUpdateSensorAverage@pSensor.trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISE(ABS[1]), TRISA(ABS[1]), 

    MTouchUpdateSensorAverage@pSensor	PTR struct tag_SENSOR size(2) Largest target is 204
		 -> sensors(BANK2[192]), 

    MTouchSensorDecode@pSensor.latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATE(ABS[1]), LATA(ABS[1]), 

    MTouchSensorDecode@pSensor.trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISE(ABS[1]), TRISA(ABS[1]), 

    MTouchSensorDecode@pSensor	PTR struct tag_SENSOR size(2) Largest target is 204
		 -> sensors(BANK2[192]), 

    MTouchSetSensor@lat	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATE(ABS[1]), LATA(ABS[1]), 

    MTouchSetSensor@tris	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISE(ABS[1]), TRISA(ABS[1]), 

    MTouchSetSensor@pSensor.latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATE(ABS[1]), LATA(ABS[1]), 

    MTouchSetSensor@pSensor.trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISE(ABS[1]), TRISA(ABS[1]), 

    MTouchSetSensor@pSensor	PTR struct tag_SENSOR size(2) Largest target is 204
		 -> sensors(BANK2[192]), 

    MTouchDecodeButtons@pMostPressedButton.pSensor.latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATE(ABS[1]), LATA(ABS[1]), 

    MTouchDecodeButtons@pMostPressedButton.pSensor.trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISE(ABS[1]), TRISA(ABS[1]), 

    MTouchDecodeButtons@pMostPressedButton.pSensor	PTR struct tag_SENSOR size(2) Largest target is 204
		 -> sensors(BANK2[192]), 

    MTouchDecodeButtons@pSensor.latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATE(ABS[1]), LATA(ABS[1]), 

    MTouchDecodeButtons@pSensor.trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISE(ABS[1]), TRISA(ABS[1]), 

    MTouchDecodeButtons@pButton.pSensor	PTR struct tag_SENSOR size(2) Largest target is 204
		 -> sensors(BANK2[192]), 

    S180tag_MTOUCHBUTTON$pSensor	PTR struct tag_SENSOR size(2) Largest target is 204
		 -> sensors(BANK2[192]), 

    MTouchSetButton@pButton.pSensor	PTR struct tag_SENSOR size(2) Largest target is 204
		 -> sensors(BANK2[192]), 

    MTouchSetButton@pButton	PTR struct tag_MTOUCHBUTTON size(1) Largest target is 90
		 -> buttons(BANK0[80]), 

    MTouchAcquisitionCVD@curLat	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATE(ABS[1]), LATA(ABS[1]), 

    MTouchAcquisitionCVD@pCurrentSensor.latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATE(ABS[1]), LATA(ABS[1]), 

    MTouchAcquisitionCVD@pCurrentSensor.trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISE(ABS[1]), TRISA(ABS[1]), 

    MTouchAcquisitionCVD@pCurrentSensor	PTR struct tag_SENSOR size(2) Largest target is 204
		 -> sensors(BANK2[192]), 

    MTouchAcquisitionCVD@curTris	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISE(ABS[1]), TRISA(ABS[1]), 

    MTouchAcquisitionCVD@prevLat	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATE(ABS[1]), LATA(ABS[1]), 

    S21tag_SENSOR$latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATE(ABS[1]), LATA(ABS[1]), 

    MTouchAcquisitionCVD@pPreviousSensor.latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATE(ABS[1]), LATA(ABS[1]), 

    S21tag_SENSOR$trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISE(ABS[1]), TRISA(ABS[1]), 

    MTouchAcquisitionCVD@pPreviousSensor.trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISE(ABS[1]), TRISA(ABS[1]), 

    MTouchAcquisitionCVD@pPreviousSensor	PTR struct tag_SENSOR size(2) Largest target is 204
		 -> sensors(BANK2[192]), 

    MTouchAcquisitionCVD@prevTris	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISE(ABS[1]), TRISA(ABS[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _HI_ISR in COMRAM

    None.

Critical Paths under _LO_ISR in COMRAM

    _LO_ISR->_crc_mb_check
    _set_ee_default->_write___ee
    _write___ee->_Write_b_eep
    _read___ee->_Read_b_eep
    _crc_mb_check->_crc_mb_calc
    _crc_mb->_crc_mb_calc

Critical Paths under _main in BANK0

    None.

Critical Paths under _HI_ISR in BANK0

    _HI_ISR->_MTouchAcquisition
    _MTouchAcquisition->_MTouchAcquisitionCVD
    _MTouchSensorDecode->_MTouchUpdateSensorAverage

Critical Paths under _LO_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_InitializeSystem
    _InitializeSystem->_MTouchSetSensor

Critical Paths under _HI_ISR in BANK1

    None.

Critical Paths under _LO_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HI_ISR in BANK2

    None.

Critical Paths under _LO_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HI_ISR in BANK3

    None.

Critical Paths under _LO_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HI_ISR in BANK4

    None.

Critical Paths under _LO_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HI_ISR in BANK5

    None.

Critical Paths under _LO_ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HI_ISR in BANK6

    None.

Critical Paths under _LO_ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HI_ISR in BANK7

    None.

Critical Paths under _LO_ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HI_ISR in BANK8

    None.

Critical Paths under _LO_ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HI_ISR in BANK9

    None.

Critical Paths under _LO_ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HI_ISR in BANK10

    None.

Critical Paths under _LO_ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HI_ISR in BANK11

    None.

Critical Paths under _LO_ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HI_ISR in BANK12

    None.

Critical Paths under _LO_ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HI_ISR in BANK13

    None.

Critical Paths under _LO_ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _HI_ISR in BANK14

    None.

Critical Paths under _LO_ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _HI_ISR in BANK15

    None.

Critical Paths under _LO_ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6642
                               _Beep
                       _InitMessages
                   _InitializeSystem
                    _ProcessMessages
                        _tsk_display
                        _tsk_process
 ---------------------------------------------------------------------------------
 (1) _tsk_process                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tsk_display                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ProcessMessages                                      1     1      0     384
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitializeSystem                                     2     2      0    5930
                                             16 BANK1      2     2      0
                         _MTouchInit
                    _MTouchSetButton
                    _MTouchSetSensor
                        _uart16_init
 ---------------------------------------------------------------------------------
 (2) _uart16_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTouchSetSensor                                     16     5     11    4074
                                              0 BANK1     16     5     11
 ---------------------------------------------------------------------------------
 (2) _MTouchSetButton                                      6     4      2    1822
                                              0 BANK1      6     4      2
 ---------------------------------------------------------------------------------
 (2) _MTouchInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitMessages                                         1     1      0     297
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Beep                                                 1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _LO_ISR                                              17    17      0    5024
                                             18 COMRAM    17    17      0
                             _BSemOn
                           _Busy_eep
                         _Read_b_eep
                        _SendMessage
                        _Write_b_eep
                             _crc_mb
                       _crc_mb_check
                            _putbyte
                     _set_ee_default
                         _timed_getc
 ---------------------------------------------------------------------------------
 (4) _timed_getc                                           2     2      0      23
                                              0 COMRAM     2     2      0
                            _getbyte
 ---------------------------------------------------------------------------------
 (5) _getbyte                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _set_ee_default                                       4     4      0    1377
                                             11 COMRAM     4     4      0
                          _read___ee
                         _write___ee
 ---------------------------------------------------------------------------------
 (5) _write___ee                                           4     0      4     648
                                              7 COMRAM     4     0      4
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (6) _Write_b_eep                                          7     4      3     346
                                              0 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (6) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _read___ee                                            4     0      4     525
                                              5 COMRAM     4     0      4
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (6) _Read_b_eep                                           5     3      2     223
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (4) _putbyte                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _crc_mb_check                                        10     7      3    1163
                                              8 COMRAM    10     7      3
                        _crc_mb_calc
                        _crc_mb_init
 ---------------------------------------------------------------------------------
 (4) _crc_mb                                               9     6      3    1075
                                              8 COMRAM     9     6      3
                        _crc_mb_calc
                        _crc_mb_init
 ---------------------------------------------------------------------------------
 (5) _crc_mb_init                                          1     1      0      82
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _crc_mb_calc                                          8     7      1     395
                                              0 COMRAM     8     7      1
 ---------------------------------------------------------------------------------
 (4) _SendMessage                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _BSemOn                                               1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _HI_ISR                                               7     7      0    3331
                                             32 BANK0      7     7      0
                  _MTouchAcquisition
 ---------------------------------------------------------------------------------
 (8) _MTouchAcquisition                                   12    12      0    3331
                                             20 BANK0     12    12      0
               _MTouchAcquisitionCVD
                 _MTouchSensorDecode
 ---------------------------------------------------------------------------------
 (9) _MTouchSensorDecode                                   8     6      2    1294
                                              9 BANK0      8     6      2
          _MTouchUpdateSensorAverage
 ---------------------------------------------------------------------------------
 (10) _MTouchUpdateSensorAverage                           9     5      4     445
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (9) _MTouchAcquisitionCVD                                20    16      4    1418
                                              0 BANK0     20    16      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Beep
   _InitMessages
   _InitializeSystem
     _MTouchInit
     _MTouchSetButton
     _MTouchSetSensor
     _uart16_init
   _ProcessMessages
   _tsk_display
   _tsk_process

 _LO_ISR (ROOT)
   _BSemOn
   _Busy_eep
   _Read_b_eep
   _SendMessage
   _Write_b_eep
   _crc_mb
     _crc_mb_calc
     _crc_mb_init
   _crc_mb_check
     _crc_mb_calc
     _crc_mb_init
   _putbyte
   _set_ee_default
     _read___ee
       _Read_b_eep
     _write___ee
       _Busy_eep
       _Write_b_eep
   _timed_getc
     _getbyte

 _HI_ISR (ROOT)
   _MTouchAcquisition
     _MTouchAcquisitionCVD
     _MTouchSensorDecode
       _MTouchUpdateSensorAverage

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0     100      11      100.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C0       9       75.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     12      92       7       57.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     27      8E       5       88.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     23      3F       1       66.3%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     31F      12        0.0%
DATA                 0      0     31F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Jul 27 12:24:49 2016

                                    _a 003A                                      _b 003B  
                                    _c 0034                                      _d 0036  
                                    _e 0024                                      _f 0028  
                                    _k 002C                                      _l 0030  
                                   PL2 0CA0                                     PL4 0914  
                                   PL6 05B2                                     PL8 092C  
                                   l78 09C8                          write___ee@adr 0008  
                                   bsr 000FE0                          write___ee@var 000A  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
                                  PL10 07A4                                    PL20 0C00  
                                  PL12 07B2                                    PL30 0D44  
                                  PL22 093C                                    PL14 05C4  
                                  PL32 0D4E                                    PL24 05FE  
                                  PL16 05D6                                    PL26 0610  
                                  PL18 05E6                                    PL28 0C16  
                                  l550 109E                                    l552 1098  
                                  l843 0CEA                                    l847 0D22  
                                  _GIE 007F97                           __CFG_CPB$OFF 000000  
                                  _PR2 000FBB                                    _PR4 000F52  
                         __CFG_CPD$OFF 000000                         write___ee@byte 000B  
                                  fsr2 000FD9                            _tsk_display 11E8  
                 __size_of_Write_b_eep 0044                                    prod 000FF3  
                                  wreg 000FE8                           __CFG_LVP$OFF 000000  
                          _tsk_process 11E6                                   l4022 0CD4  
                                 l4042 0D38                                   l4036 0D0C  
                                 l4028 0D00                                   l4084 107E  
                                 l3760 09A4                                   l3906 0FEA  
                                 l3916 1000                                   l3926 1014  
                                 l3766 0A68                                   l3768 0A7A  
                                 l3936 0630                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATE 000F8D  
                                 u2394 0A0C                                   u2395 0A08  
                                 i2l11 0502                                   _RCIE 007CED  
                                 _RCIF 007CF5                                   i2l14 0596  
                                 _RCIP 007CFD                                   _RX91 007D5E  
                                 _BSem 006A                                   _TX91 007D66  
                                 _TMR2 000FBC                                   _TMR4 000F53  
                                 _TXIE 007CEC                                   _Beep 117E  
                                 _j_rx 0038                                   _main 106E  
                                 fsr1h 000FE2                                   fsr2h 000FDA  
                                 fsr1l 000FE1                                   indf2 000FDF  
                                 fsr2l 000FD9                          __CFG_BORV$190 000000  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 03F0                          __CFG_IESO$OFF 000000  
                        ?_InitMessages 0001            MTouchSetButton@buttonNumber 0184  
                           _MTouchInit 1162                                  ?_Beep 0001  
                       SendMessage@Msg 0001                                  _DC1B0 007DEC  
                                _DC1B1 007DED                                  _DC2B0 007B34  
                                _DC2B1 007B35                                  ?_main 0001  
                                _EEADR 000FA9                                  _BRGH1 007D62  
                                _CREN1 007D5C                                  _FERR1 007D5A  
                                i1l211 11CC                                  i1l212 11CA  
                                i1l222 10DC                                  i1l225 10F0  
                                i1l407 03B8                                  i2l116 0B68  
                                i1l199 11D6                                  i2l400 0E18  
                                i2l401 0E1E                                  i1l482 03CA  
                                i1l476 0396                                  i1l903 105C  
                                i1l872 11E0                                  i2l397 0E16  
                                _OERR1 007D59                                  _RCREG 000FAE  
                                _SPEN1 007D5F                                  _SREN1 007D5D  
                                _SPBRG 000FAF                                  _PORTB 000F81  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRMT1 007D61                                  _TRISE 000F96  
                                _TXEN1 007D65                                  _SYNC1 007D64  
                                _TXREG 000FAD                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                         Read_b_eep@badd 0001  
                      __end_of_getbyte 11D4           __end_of_MTouchAcquisitionCVD 05B2  
                       __CFG_EBTRB$OFF 000000                 Write_b_eep@GIE_BIT_VAL 0007  
                                _dummy 003E                __end_of_ProcessMessages 0D44  
                   __CFG_MCLRE$EXTMCLR 000000               __size_of_MTouchSetButton 0078  
                                tablat 000FF5               __size_of_MTouchSetSensor 0184  
                     ProcessMessages@i 0180                                  status 000FD8  
                      __end_of_putbyte 11E0                         __CFG_HFOFST$ON 000000  
                       ??_InitMessages 0180       MTouchAcquisition@pPreviousSensor 00E2  
                         __end_of_Beep 1196                        __initialization 0F98  
                         __end_of_main 10AA                             _Read_b_eep 1122  
                        ??_SendMessage 0001                       __end_of_Busy_eep 11E6  
                         ?_uart16_init 0001                                 ??_Beep 0180  
                               ??_main 0192                       set_ee_default@c1 000D  
            __size_of_InitializeSystem 0182                          __activetblptr 000002  
                 __end_of_crc_mb_check 0EF2                         __CFG_PLLCFG$ON 000000  
              MTouchSensorDecode@delta 00D6                     _MTouchSensorDecode 07C0  
                 __size_of_crc_mb_calc 0060                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                                 _ADCON2 000FC0  
                 __size_of_crc_mb_init 000E                                 _ADRESH 000FC4  
                               _EEADRH 000FAA                                 _ADRESL 000FC3  
                               _BRG161 007DC3                                 _EEDATA 000FA8  
                               _CCPR1L 000FBE                                 _CCPR2L 000F67  
                               _CCPR4L 000F58                                 _EECON2 000FA7  
                               _ANSELA 000F38                                 _ANSELB 000F39  
                               _ANSELC 000F3A                                 _ANSELD 000F3B  
                               _ANSELE 000F3C                __size_of_set_ee_default 0056  
                               i1l3016 0F36                                 i1l3008 0EF6  
                               i1l3050 0EBA                                 i1l3060 0EF0  
                               i1l3044 0EA2                                 i1l3074 0F6A  
                               i1l3330 0136                                 i1l3068 0F52  
                               i1l3340 0150                                 i1l3324 010E  
                               i1l3308 00AA                                 i1l3422 02B6  
                               i1l3318 00CA                                 i1l3416 0298  
                               i1l3352 0172                                 i1l3346 016E  
                               i1l2820 10FE                                 i1l2812 10AC  
                               i1l3460 032C                                 i1l3428 02BA  
                               i1l3380 01FA                                 i1l3292 007E  
                               i1l2822 1118                                 i1l3454 030E  
                               i1l3374 01DC                                 i1l2816 10CC  
                               i1l3392 023E                                 i1l3384 0210  
                               i1l3368 01BE                                 i1l3482 036E  
                               i1l3490 0386                                 i1l3466 0330  
                               i1l3386 023A                                 i1l3484 0376  
                               i1l3486 037E                                 i1l3494 039C  
                               i1l2872 0E8E                                 i1l2866 0E4A  
                               i2l4058 0DF2                                 i2l3802 0888  
                               i2l3812 08CA                                 i2l3804 088E  
                               i2l3820 08FE                                 i2l3814 08D0  
                               i2l3806 08A2                                 i2l3818 08E6  
                               i2l3790 081C                                 i2l3872 0B62  
                               i2l3864 0B0A                                 i2l3856 0AFC  
                               i2l3794 082C                                 i2l3858 0B08  
                               i2l3796 0852                                 i2l3788 0806  
                               i2l3884 0BE6                                 i2l3886 0BEE  
                               i2l3878 0BC6                                 _HI_ISR 0008  
                  ?_MTouchSensorDecode 00D0                                 _OSCCON 000FD3  
                               _BSemOn 11A8          MTouchUpdateSensorAverage@rate 00C9  
                               _LO_ISR 0018                                 _SWDTEN 007E88  
                       __CFG_XINST$OFF 000000                                 _RxBuff 0300  
                       __CFG_STVREN$ON 000000                                 _eedata FEFF  
                               _crc_mb 0F48                            ?_MTouchInit 0001  
                 ??_MTouchSensorDecode 00D2                                 clear_0 0FA0  
                               clear_1 0FB2                                 clear_2 0FBE  
                               clear_3 0FCA                                 clear_4 0FD6  
          MTouchAcquisitionCVD@curTris 00D8                              ??_getbyte 0001  
          MTouchAcquisitionCVD@prevLat 00D3                    __end_of_SendMessage 11A8  
            MTouchSensorDecode@pSensor 00D0                           __mediumconst FEFE  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                              ??_putbyte 0001  
                     ?_ProcessMessages 0001                  MTouchAcquisition@data 00DE  
           ?_MTouchUpdateSensorAverage 00C7                             __accesstop 0060  
              __end_of__initialization 0FDC                        __CFG_PBADEN$OFF 000000  
                    ??_MTouchSetButton 0182                      ??_MTouchSetSensor 018B  
                       __pcstackCOMRAM 0001                   _MTouchAcquisitionCVD 03F4  
                          ?_Read_b_eep 0001                             __end_ofPL2 0CD0  
                           __end_ofPL4 092C                             __end_ofPL6 05C4  
                           __end_ofPL8 093C                           ?_tsk_display 0001  
                 __end_of_InitMessages 102A                             _beep_count 003C  
                           _beep_timer 0070                           ?_tsk_process 0001  
                           __pbssBANK0 0060                             __pbssBANK1 0100  
                           __pbssBANK2 0200                             __pbssBANK3 0300  
                              ?_HI_ISR 0001                    __size_of_MTouchInit 001C  
                              ?_BSemOn 0001                              ?_Busy_eep 0001  
                              ?_LO_ISR 0001      __end_of_MTouchUpdateSensorAverage 0CA0  
          MTouchSetButton@sensorNumber 0180                     __size_of_read___ee 0026  
                      crc_mb_calc@code 0008                        crc_mb_calc@flag 0006  
                            BSemOn@Sem 0001                        crc_mb_calc@next 0001  
                   __CFG_CCP2MX$PORTC1 000000                                LO_ISR@i 0023  
                ?_MTouchAcquisitionCVD 00C7                     __CFG_CCP3MX$PORTB5 000000  
                __size_of_crc_mb_check 005A                                ?_crc_mb 0009  
                      crc_mb_check@crc 0011                        crc_mb_check@cnt 000B  
                          _SendMessage 1196                          ??_Write_b_eep 0004  
                     _InitializeSystem 0622                   __size_of_uart16_init 001E  
                      __CFG_WDTEN$SWON 000000                            LO_ISR@lcAdr 0021  
                              _SSPCON1 000FC6                         _set_ee_default 0EF2  
                              _SSPSTAT 000FC7                    __size_of_Read_b_eep 0022  
                      __size_of_HI_ISR 0E30                             ??_Busy_eep 0001  
                      __size_of_BSemOn 0012                        __size_of_LO_ISR 03D8  
         MTouchSetSensor@channelNumber 0185                        crc_mb_init@code 0001  
                         _crc_mb_check 0E98                        __CFG_PWRTEN$OFF 000000  
                              __Hparam 0000                                __Lparam 0000  
                        InitMessages@i 0180                        __size_of_crc_mb 0050  
     MTouchUpdateSensorAverage@pSensor 00C7                                __pcinit 0F98  
                              __ramtop 1000                                __ptext0 106E  
                              __ptext1 11E6                                __ptext2 11E8  
                              __ptext3 0CD0                                __ptext4 0622  
                              __ptext5 1144                                __ptext6 094E  
                              __ptext7 0D56                                __ptext8 1162  
                              __ptext9 0FE6                                _getbyte 11C8  
                            _T2CONbits 000FBA                      __end_of_read___ee 1122  
                              _buttons 0077                              _T4CONbits 000F51  
                         read___ee@adr 0006                 __end_of_set_ee_default 0F48  
                         read___ee@var 0008                                crc_mb@i 000F  
        MTouchAcquisitionCVD@curIOMask 00DA                    __end_of_Write_b_eep 106E  
                              _sensors 0200                      timed_getc@timeout 0001  
                              _putbyte 11D4                         __pintcode_body 0DCE  
                 end_of_initialization 0FDC                          __Lmediumconst FEFE  
                              int_func 0DCE           MTouchAcquisitionCVD@prevTris 00CF  
               ??_MTouchAcquisitionCVD 00CB                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc1 000FE6                                postinc2 000FDE  
                         ??_MTouchInit 0180                             _timed_getc 10D6  
                __size_of_InitMessages 0044                          ??_crc_mb_calc 0002  
                        ??_crc_mb_init 0001                              _TRISAbits 000F92  
                            _TRISCbits 000F94                        ?_set_ee_default 0001  
                 __size_of_tsk_display 0002                        _MTouchSetButton 0D56  
                      _MTouchSetSensor 094E            ??_MTouchUpdateSensorAverage 00CB  
                 __size_of_tsk_process 0002                     __end_of_MTouchInit 117E  
                       __end_of_HI_ISR 0E38                         __end_of_BSemOn 11BA  
                       __end_of_LO_ISR 03F0  MTouchAcquisitionCVD@prevChannelNumber 00D1  
                          _CCP4CONbits 000F57                           _InitMessages 0FE6  
                         ??_Read_b_eep 0003                             _write___ee 10AA  
                       __end_of_eedata FFFF            __size_of_MTouchSensorDecode 0154  
                       __end_of_crc_mb 0F98                            _Write_b_eep 102A  
                          __end_ofPL10 07B2                            __end_ofPL20 0C16  
                          __end_ofPL12 07C0                            __end_ofPL30 0D4E  
                          __end_ofPL22 094E                            __end_ofPL14 05D6  
                          __end_ofPL32 0D56                            __end_ofPL24 0610  
                          __end_ofPL16 05E6                            __end_ofPL26 0622  
                          __end_ofPL18 05FE                            __end_ofPL28 0C26  
                  start_initialization 0F98                             HI_ISR@beep 0074  
       MTouchAcquisitionCVD@prevIOMask 00D7                        set_ee_default@c 000C  
                      set_ee_default@i 000E                    __end_of_crc_mb_calc 0E98  
                  __end_of_crc_mb_init 11C8                               ??_HI_ISR 00E7  
  MTouchAcquisitionCVD@pPreviousSensor 00C9                               ??_BSemOn 0001  
                   __end_of_Read_b_eep 1144                               ??_LO_ISR 0013  
             __end_of_InitializeSystem 07A4                      __size_of_Busy_eep 0006  
             __size_of_ProcessMessages 0074                               ??_crc_mb 000C  
                          ?_timed_getc 0001                           ?_SendMessage 0001  
            _MTouchUpdateSensorAverage 0C26                    MTouchSetSensor@tris 0180  
              __end_of_MTouchSetButton 0DCE                __end_of_MTouchSetSensor 0AD2  
                          __pbssCOMRAM 0024                          __pcstackBANK0 00C7  
                        __pcstackBANK1 0180                            putbyte@byte 0001  
      MTouchAcquisition@pCurrentSensor 00E5                              __pintcode 0008  
                        __pmediumconst FEFE                          ??_uart16_init 0180  
                          ?_write___ee 0008                            __pintcodelo 0018  
                     __CFG_PRICLKEN$ON 000000                               ?_getbyte 0001  
                            __sys_tick 006E                            _crc_mb_calc 0E38  
                          _crc_mb_init 11BA                               Beep@ms10 0180  
                            _curr_task 003D                              _read___ee 10FC  
                             ?_putbyte 0001                    __size_of_timed_getc 0026  
                             _LATAbits 000F89                               _IPR1bits 000F9F  
                             _PIE1bits 000F9D                               _IPR5bits 000F7F  
                             _PIE5bits 000F7D                               i1u113_25 1068  
                             i1u113_26 106A                               i2u234_45 0CB0  
                             i2u234_46 0CB6                               i2u234_47 0CC4  
                             i2u251_45 0BD8                               _PIR1bits 000F9E  
                            crc_mb@CRC 0010                               _PIR5bits 000F7E  
                             _RCONbits 000FD0                       __CFG_WDTPS$32768 000000  
             MTouchSetSensor@threshold 0186                           LO_ISR@lcData 0022  
                    ??_ProcessMessages 0180                     crc_mb_check@buffer 0009  
                     ??_set_ee_default 000C                             _ADCON0bits 000FC2  
                           _ADCON2bits 000FC0                        Write_b_eep@badd 0001  
                      Write_b_eep@bdat 0003                       ?_MTouchSetButton 0180  
                  __end_of_uart16_init 1162                       ?_MTouchSetSensor 0180  
 MTouchAcquisitionCVD@curChannelNumber 00D2                             ?_read___ee 0006  
                   MTouchAcquisition@i 00E4                    __size_of_write___ee 002C  
                             _Busy_eep 11E0                      _MTouchAcquisition 0AD2  
                             _Messages 0060                             _EECON1bits 000FA6  
                             __Hparam0 0000                     ?_MTouchAcquisition 0001  
           MTouchSetSensor@chargeDelay 018A                               __Lparam0 0000  
                             _RxTxBuff 0100                     __CFG_BOREN$SBORDIS 000000  
                    __CFG_P2BMX$PORTD2 000000                     MTouchSetSensor@lat 0182  
        __size_of_MTouchAcquisitionCVD 01BE                    ??_MTouchAcquisition 00DB  
           MTouchAcquisitionCVD@curLat 00D5                           ?_Write_b_eep 0001  
           MTouchAcquisitionCVD@result 00CD             MTouchSetSensor@ioBitNumber 0184  
                 __size_of_SendMessage 0012            MTouchSetSensor@sensorNumber 018D  
                        ??_tsk_display 0180                       __size_of_getbyte 000C  
  InitializeSystem@pll_startup_counter 0190                          crc_mb_check@i 0010  
   __size_of_MTouchUpdateSensorAverage 007A                               __ptext10 117E  
                             __ptext20 11D4                               __ptext12 10D6  
                             __ptext21 0E98                               __ptext13 11C8  
                             __ptext30 0C26                               __ptext22 0F48  
                             __ptext14 0EF2                               __ptext31 03F4  
                             __ptext23 11BA                               __ptext15 10AA  
                             __ptext24 0E38                               __ptext16 102A  
                             __ptext25 1196                               __ptext17 11E0  
                             __ptext26 11A8                               __ptext18 10FC  
                             __ptext19 1122                               __ptext28 0AD2  
                             __ptext29 07C0                          ??_tsk_process 0180  
            __end_of_MTouchAcquisition 0C00                       __size_of_putbyte 000C  
                        __size_of_Beep 0018                          __size_of_main 003C  
                    ?_InitializeSystem 0001                          read___ee@byte 0009  
                   ??_InitializeSystem 0190             __end_of_MTouchSensorDecode 0914  
   MTouchAcquisitionCVD@pCurrentSensor 00C7                           ??_timed_getc 0001  
                          _uart16_init 1144                               _sys_tick 0072  
                         crc_mb@buffer 0009                            _OSCTUNEbits 000F9B  
                           _INTCONbits 000FF2                 MTouchSetButton@pButton 0185  
          MTouchSetSensor@oversampling 0188                            ??_read___ee 000A  
                    _BroadcastMessages 0076                    __end_of_tsk_display 11EA  
                             intlevel1 0000                               intlevel2 0000  
                         crc_mb_calc@i 0007                     __end_of_timed_getc 10FC  
               MTouchSetSensor@pSensor 018E                          _timeout_error 003F  
                        ?_crc_mb_check 0009                    __end_of_tsk_process 11E8  
                         ??_write___ee 000C                            crc_mb@count 000B  
                MTouchSetButton@decode 0181                           ?_crc_mb_calc 0001  
                         ?_crc_mb_init 0001                      __CFG_T3CMX$PORTC0 000000  
   MTouchAcquisition@startSensorNumber 0075             __size_of_MTouchAcquisition 012E  
                       ??_crc_mb_check 000C                      __CFG_FOSC$INTIO67 000000  
                   __end_of_write___ee 10D6                        _ProcessMessages 0CD0  
         MTouchAcquisition@pLastSensor 00E0  
