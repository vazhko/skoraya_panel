

Microchip Technology PIC18 PRO Macro Assembler V1.33 build 59893 
                                                                                               Fri Jul 29 12:12:56 2016

Microchip Technology Omniscient Code Generator (PRO mode) build 59893
     1                           	processor	18F46K22
     2                           	fnconf	param0,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    16                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1
    79                           	psect	text59,global,reloc=2,class=CODE,delta=1
    80                           	psect	text60,global,reloc=2,class=CODE,delta=1
    81                           	psect	text61,global,reloc=2,class=CODE,delta=1
    82                           	psect	text62,global,reloc=2,class=CODE,delta=1
    83                           	psect	text63,global,reloc=2,class=CODE,delta=1
    84                           	psect	text64,global,reloc=2,class=CODE,delta=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1
    90                           	psect	text70,global,reloc=2,class=CODE,delta=1
    91                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    92                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    93                           	psect	text72,global,reloc=2,class=CODE,delta=1
    94                           	psect	text73,global,reloc=2,class=CODE,delta=1
    95                           	psect	text74,global,reloc=2,class=CODE,delta=1
    96                           	psect	text75,global,reloc=2,class=CODE,delta=1
    97                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    98                           	psect	param0,global,class=BANK0,space=1,delta=1
    99                           	psect	pa_nodes,global,class=CODE,delta=1
   100  0000                     tblptrh	equ	0xFF7
   101                           tblptrl	equ	0xFF6
   102                           tablat	equ	0xFF5
   103                           prodh	equ	0xFF4
   104                           prodl	equ	0xFF3
   105                           intcon	equ	0xFF2
   106                           wreg	equ	0xFE8
   107                           indf1	equ	0xFE7
   108                           postinc1	equ	0xFE6
   109                           postdec1	equ	0xFE5
   110                           fsr1h	equ	0xFE2
   111                           fsr1l	equ	0xFE1
   112                           indf2	equ	0xFDF
   113                           postinc2	equ	0xFDE
   114                           postdec2	equ	0xFDD
   115                           fsr2h	equ	0xFDA
   116                           fsr2l	equ	0xFD9
   117                           status	equ	0xFD8
   118                           
   119                           	psect	eeprom_data
   120  F00000  01 00 01 00 02 00 16 06 	db	1,0,1,0,2,0,22,6	;# 
   121  F00008  25 0B 16 0F 16 06 25 0A 	db	37,11,22,15,22,6,37,10	;# 
   122  F00010  14 00 00 00 00 00 00 00 	db	20,0,0,0,0,0,0,0	;# 
   123  F00018  80 3F 00 00 00 00 00 00 	db	128,63,0,0,0,0,0,0	;# 
   124  F00020  80 3F 00 00 00 00 00 00 	db	128,63,0,0,0,0,0,0	;# 
   125  F00028  80 3F 16 06 25 00 00 00 	db	128,63,22,6,37,0,0,0	;# 
   126  F00030  00 00 00 00 00 00 80 3F 	db	0,0,0,0,0,0,128,63	;# 
   127  F00038  08 07 B8 0B 00 00 40 06 	db	8,7,184,11,0,0,64,6	;# 
   128  F00040  F0 0A 00 00 66 66 26 3F 	db	240,10,0,0,102,102,38,63	;# 
   129  F00048  1B 2F 5D 3D 33 33 F3 3F 	db	27,47,93,61,51,51,243,63	;# 
   130  F00050  66 66 26 3F 42 60 65 3C 	db	102,102,38,63,66,96,101,60	;# 
   131  F00058  00 00 80 40 00 80 BB 45 	db	0,0,128,64,0,128,187,69	;# 
   132  F00060  00 00 00 41 00 00 00 42 	db	0,0,0,65,0,0,0,66	;# 
   133  F00068  F0 0A 02 A4 70 7D 3F A4 	db	240,10,2,164,112,125,63,164	;# 
   134  F00070  70 7D 3F 00 00 00 00 00 	db	112,125,63,0,0,0,0,0	;# 
   135  F00078  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
   136  F00080  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
   137  F00088  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
   138  F00090  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
   139  F00098  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
   140  F000A0  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
   141  F000A8  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
   142  F000B0  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
   143  F000B8  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
   144  F000C0  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
   145  F000C8  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
   146  F000D0  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
   147  F000D8  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
   148  F000E0  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
   149  F000E8  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
   150  F000F0  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
   151  F000F8  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
   152  0000                     tblptrh	equ	0xFF7
   153                           tblptrl	equ	0xFF6
   154                           tablat	equ	0xFF5
   155                           prodh	equ	0xFF4
   156                           prodl	equ	0xFF3
   157                           intcon	equ	0xFF2
   158                           wreg	equ	0xFE8
   159                           indf1	equ	0xFE7
   160                           postinc1	equ	0xFE6
   161                           postdec1	equ	0xFE5
   162                           fsr1h	equ	0xFE2
   163                           fsr1l	equ	0xFE1
   164                           indf2	equ	0xFDF
   165                           postinc2	equ	0xFDE
   166                           postdec2	equ	0xFDD
   167                           fsr2h	equ	0xFDA
   168                           fsr2l	equ	0xFD9
   169                           status	equ	0xFD8
   170                           
   171                           	psect	idataCOMRAM
   172  0036D2                     __pidataCOMRAM:
   173                           	opt stack 0
   174                           
   175                           ;initializer for tsk_display@f_prev_T
   176  0036D2  0000               	dw	0
   177  0036D4  C2C8               	dw	49864
   178                           tblptrh	equ	0xFF7
   179                           tblptrl	equ	0xFF6
   180                           tablat	equ	0xFF5
   181                           prodh	equ	0xFF4
   182                           prodl	equ	0xFF3
   183                           intcon	equ	0xFF2
   184                           wreg	equ	0xFE8
   185                           indf1	equ	0xFE7
   186                           postinc1	equ	0xFE6
   187                           postdec1	equ	0xFE5
   188                           fsr1h	equ	0xFE2
   189                           fsr1l	equ	0xFE1
   190                           indf2	equ	0xFDF
   191                           postinc2	equ	0xFDE
   192                           postdec2	equ	0xFDD
   193                           fsr2h	equ	0xFDA
   194                           fsr2l	equ	0xFD9
   195                           status	equ	0xFD8
   196                           
   197                           	psect	mediumconst
   198  00F21A                     __pmediumconst:
   199                           	opt stack 0
   200  00F21A  00                 	db	0
   201  00F21B                     _dscrc_table:
   202                           	opt stack 0
   203  00F21B  00                 	db	0
   204  00F21C  5E                 	db	94
   205  00F21D  BC                 	db	188
   206  00F21E  E2                 	db	226
   207  00F21F  61                 	db	97
   208  00F220  3F                 	db	63
   209  00F221  DD                 	db	221
   210  00F222  83                 	db	131
   211  00F223  C2                 	db	194
   212  00F224  9C                 	db	156
   213  00F225  7E                 	db	126
   214  00F226  20                 	db	32
   215  00F227  A3                 	db	163
   216  00F228  FD                 	db	253
   217  00F229  1F                 	db	31
   218  00F22A  41                 	db	65
   219  00F22B  9D                 	db	157
   220  00F22C  C3                 	db	195
   221  00F22D  21                 	db	33
   222  00F22E  7F                 	db	127
   223  00F22F  FC                 	db	252
   224  00F230  A2                 	db	162
   225  00F231  40                 	db	64
   226  00F232  1E                 	db	30
   227  00F233  5F                 	db	95
   228  00F234  01                 	db	1
   229  00F235  E3                 	db	227
   230  00F236  BD                 	db	189
   231  00F237  3E                 	db	62
   232  00F238  60                 	db	96
   233  00F239  82                 	db	130
   234  00F23A  DC                 	db	220
   235  00F23B  23                 	db	35
   236  00F23C  7D                 	db	125
   237  00F23D  9F                 	db	159
   238  00F23E  C1                 	db	193
   239  00F23F  42                 	db	66
   240  00F240  1C                 	db	28
   241  00F241  FE                 	db	254
   242  00F242  A0                 	db	160
   243  00F243  E1                 	db	225
   244  00F244  BF                 	db	191
   245  00F245  5D                 	db	93
   246  00F246  03                 	db	3
   247  00F247  80                 	db	128
   248  00F248  DE                 	db	222
   249  00F249  3C                 	db	60
   250  00F24A  62                 	db	98
   251  00F24B  BE                 	db	190
   252  00F24C  E0                 	db	224
   253  00F24D  02                 	db	2
   254  00F24E  5C                 	db	92
   255  00F24F  DF                 	db	223
   256  00F250  81                 	db	129
   257  00F251  63                 	db	99
   258  00F252  3D                 	db	61
   259  00F253  7C                 	db	124
   260  00F254  22                 	db	34
   261  00F255  C0                 	db	192
   262  00F256  9E                 	db	158
   263  00F257  1D                 	db	29
   264  00F258  43                 	db	67
   265  00F259  A1                 	db	161
   266  00F25A  FF                 	db	255
   267  00F25B  46                 	db	70
   268  00F25C  18                 	db	24
   269  00F25D  FA                 	db	250
   270  00F25E  A4                 	db	164
   271  00F25F  27                 	db	39
   272  00F260  79                 	db	121
   273  00F261  9B                 	db	155
   274  00F262  C5                 	db	197
   275  00F263  84                 	db	132
   276  00F264  DA                 	db	218
   277  00F265  38                 	db	56
   278  00F266  66                 	db	102
   279  00F267  E5                 	db	229
   280  00F268  BB                 	db	187
   281  00F269  59                 	db	89
   282  00F26A  07                 	db	7
   283  00F26B  DB                 	db	219
   284  00F26C  85                 	db	133
   285  00F26D  67                 	db	103
   286  00F26E  39                 	db	57
   287  00F26F  BA                 	db	186
   288  00F270  E4                 	db	228
   289  00F271  06                 	db	6
   290  00F272  58                 	db	88
   291  00F273  19                 	db	25
   292  00F274  47                 	db	71
   293  00F275  A5                 	db	165
   294  00F276  FB                 	db	251
   295  00F277  78                 	db	120
   296  00F278  26                 	db	38
   297  00F279  C4                 	db	196
   298  00F27A  9A                 	db	154
   299  00F27B  65                 	db	101
   300  00F27C  3B                 	db	59
   301  00F27D  D9                 	db	217
   302  00F27E  87                 	db	135
   303  00F27F  04                 	db	4
   304  00F280  5A                 	db	90
   305  00F281  B8                 	db	184
   306  00F282  E6                 	db	230
   307  00F283  A7                 	db	167
   308  00F284  F9                 	db	249
   309  00F285  1B                 	db	27
   310  00F286  45                 	db	69
   311  00F287  C6                 	db	198
   312  00F288  98                 	db	152
   313  00F289  7A                 	db	122
   314  00F28A  24                 	db	36
   315  00F28B  F8                 	db	248
   316  00F28C  A6                 	db	166
   317  00F28D  44                 	db	68
   318  00F28E  1A                 	db	26
   319  00F28F  99                 	db	153
   320  00F290  C7                 	db	199
   321  00F291  25                 	db	37
   322  00F292  7B                 	db	123
   323  00F293  3A                 	db	58
   324  00F294  64                 	db	100
   325  00F295  86                 	db	134
   326  00F296  D8                 	db	216
   327  00F297  5B                 	db	91
   328  00F298  05                 	db	5
   329  00F299  E7                 	db	231
   330  00F29A  B9                 	db	185
   331  00F29B  8C                 	db	140
   332  00F29C  D2                 	db	210
   333  00F29D  30                 	db	48
   334  00F29E  6E                 	db	110
   335  00F29F  ED                 	db	237
   336  00F2A0  B3                 	db	179
   337  00F2A1  51                 	db	81
   338  00F2A2  0F                 	db	15
   339  00F2A3  4E                 	db	78
   340  00F2A4  10                 	db	16
   341  00F2A5  F2                 	db	242
   342  00F2A6  AC                 	db	172
   343  00F2A7  2F                 	db	47
   344  00F2A8  71                 	db	113
   345  00F2A9  93                 	db	147
   346  00F2AA  CD                 	db	205
   347  00F2AB  11                 	db	17
   348  00F2AC  4F                 	db	79
   349  00F2AD  AD                 	db	173
   350  00F2AE  F3                 	db	243
   351  00F2AF  70                 	db	112
   352  00F2B0  2E                 	db	46
   353  00F2B1  CC                 	db	204
   354  00F2B2  92                 	db	146
   355  00F2B3  D3                 	db	211
   356  00F2B4  8D                 	db	141
   357  00F2B5  6F                 	db	111
   358  00F2B6  31                 	db	49
   359  00F2B7  B2                 	db	178
   360  00F2B8  EC                 	db	236
   361  00F2B9  0E                 	db	14
   362  00F2BA  50                 	db	80
   363  00F2BB  AF                 	db	175
   364  00F2BC  F1                 	db	241
   365  00F2BD  13                 	db	19
   366  00F2BE  4D                 	db	77
   367  00F2BF  CE                 	db	206
   368  00F2C0  90                 	db	144
   369  00F2C1  72                 	db	114
   370  00F2C2  2C                 	db	44
   371  00F2C3  6D                 	db	109
   372  00F2C4  33                 	db	51
   373  00F2C5  D1                 	db	209
   374  00F2C6  8F                 	db	143
   375  00F2C7  0C                 	db	12
   376  00F2C8  52                 	db	82
   377  00F2C9  B0                 	db	176
   378  00F2CA  EE                 	db	238
   379  00F2CB  32                 	db	50
   380  00F2CC  6C                 	db	108
   381  00F2CD  8E                 	db	142
   382  00F2CE  D0                 	db	208
   383  00F2CF  53                 	db	83
   384  00F2D0  0D                 	db	13
   385  00F2D1  EF                 	db	239
   386  00F2D2  B1                 	db	177
   387  00F2D3  F0                 	db	240
   388  00F2D4  AE                 	db	174
   389  00F2D5  4C                 	db	76
   390  00F2D6  12                 	db	18
   391  00F2D7  91                 	db	145
   392  00F2D8  CF                 	db	207
   393  00F2D9  2D                 	db	45
   394  00F2DA  73                 	db	115
   395  00F2DB  CA                 	db	202
   396  00F2DC  94                 	db	148
   397  00F2DD  76                 	db	118
   398  00F2DE  28                 	db	40
   399  00F2DF  AB                 	db	171
   400  00F2E0  F5                 	db	245
   401  00F2E1  17                 	db	23
   402  00F2E2  49                 	db	73
   403  00F2E3  08                 	db	8
   404  00F2E4  56                 	db	86
   405  00F2E5  B4                 	db	180
   406  00F2E6  EA                 	db	234
   407  00F2E7  69                 	db	105
   408  00F2E8  37                 	db	55
   409  00F2E9  D5                 	db	213
   410  00F2EA  8B                 	db	139
   411  00F2EB  57                 	db	87
   412  00F2EC  09                 	db	9
   413  00F2ED  EB                 	db	235
   414  00F2EE  B5                 	db	181
   415  00F2EF  36                 	db	54
   416  00F2F0  68                 	db	104
   417  00F2F1  8A                 	db	138
   418  00F2F2  D4                 	db	212
   419  00F2F3  95                 	db	149
   420  00F2F4  CB                 	db	203
   421  00F2F5  29                 	db	41
   422  00F2F6  77                 	db	119
   423  00F2F7  F4                 	db	244
   424  00F2F8  AA                 	db	170
   425  00F2F9  48                 	db	72
   426  00F2FA  16                 	db	22
   427  00F2FB  E9                 	db	233
   428  00F2FC  B7                 	db	183
   429  00F2FD  55                 	db	85
   430  00F2FE  0B                 	db	11
   431  00F2FF  88                 	db	136
   432  00F300  D6                 	db	214
   433  00F301  34                 	db	52
   434  00F302  6A                 	db	106
   435  00F303  2B                 	db	43
   436  00F304  75                 	db	117
   437  00F305  97                 	db	151
   438  00F306  C9                 	db	201
   439  00F307  4A                 	db	74
   440  00F308  14                 	db	20
   441  00F309  F6                 	db	246
   442  00F30A  A8                 	db	168
   443  00F30B  74                 	db	116
   444  00F30C  2A                 	db	42
   445  00F30D  C8                 	db	200
   446  00F30E  96                 	db	150
   447  00F30F  15                 	db	21
   448  00F310  4B                 	db	75
   449  00F311  A9                 	db	169
   450  00F312  F7                 	db	247
   451  00F313  B6                 	db	182
   452  00F314  E8                 	db	232
   453  00F315  0A                 	db	10
   454  00F316  54                 	db	84
   455  00F317  D7                 	db	215
   456  00F318  89                 	db	137
   457  00F319  6B                 	db	107
   458  00F31A  35                 	db	53
   459  00F31B                     __end_of_dscrc_table:
   460                           	opt stack 0
   461  00F31B                     _eedata:
   462                           	opt stack 0
   463  00F31B  01                 	db	1
   464  00F31C  00                 	db	0
   465  00F31D  01                 	db	1
   466  00F31E  00                 	db	0
   467  00F31F  02                 	db	2
   468  00F320  00                 	db	0
   469  00F321  16                 	db	22
   470  00F322  06                 	db	6
   471  00F323  25                 	db	37
   472  00F324  0B                 	db	11
   473  00F325  16                 	db	22
   474  00F326  0F                 	db	15
   475  00F327  16                 	db	22
   476  00F328  06                 	db	6
   477  00F329  25                 	db	37
   478  00F32A  0A                 	db	10
   479  00F32B  14                 	db	20
   480  00F32C  00                 	db	0
   481  00F32D  00                 	db	0
   482  00F32E  00                 	db	0
   483  00F32F  00                 	db	0
   484  00F330  00                 	db	0
   485  00F331  00                 	db	0
   486  00F332  00                 	db	0
   487  00F333  80                 	db	128
   488  00F334  3F                 	db	63
   489  00F335  00                 	db	0
   490  00F336  00                 	db	0
   491  00F337  00                 	db	0
   492  00F338  00                 	db	0
   493  00F339  00                 	db	0
   494  00F33A  00                 	db	0
   495  00F33B  80                 	db	128
   496  00F33C  3F                 	db	63
   497  00F33D  00                 	db	0
   498  00F33E  00                 	db	0
   499  00F33F  00                 	db	0
   500  00F340  00                 	db	0
   501  00F341  00                 	db	0
   502  00F342  00                 	db	0
   503  00F343  80                 	db	128
   504  00F344  3F                 	db	63
   505  00F345  16                 	db	22
   506  00F346  06                 	db	6
   507  00F347  25                 	db	37
   508  00F348  00                 	db	0
   509  00F349  00                 	db	0
   510  00F34A  00                 	db	0
   511  00F34B  00                 	db	0
   512  00F34C  00                 	db	0
   513  00F34D  00                 	db	0
   514  00F34E  00                 	db	0
   515  00F34F  00                 	db	0
   516  00F350  00                 	db	0
   517  00F351  80                 	db	128
   518  00F352  3F                 	db	63
   519  00F353  08                 	db	8
   520  00F354  07                 	db	7
   521  00F355  B8                 	db	184
   522  00F356  0B                 	db	11
   523  00F357  00                 	db	0
   524  00F358  00                 	db	0
   525  00F359  40                 	db	64
   526  00F35A  06                 	db	6
   527  00F35B  F0                 	db	240
   528  00F35C  0A                 	db	10
   529  00F35D  00                 	db	0
   530  00F35E  00                 	db	0
   531  00F35F  66                 	db	102
   532  00F360  66                 	db	102
   533  00F361  26                 	db	38
   534  00F362  3F                 	db	63
   535  00F363  1B                 	db	27
   536  00F364  2F                 	db	47
   537  00F365  5D                 	db	93
   538  00F366  3D                 	db	61
   539  00F367  33                 	db	51
   540  00F368  33                 	db	51
   541  00F369  F3                 	db	243
   542  00F36A  3F                 	db	63
   543  00F36B  66                 	db	102
   544  00F36C  66                 	db	102
   545  00F36D  26                 	db	38
   546  00F36E  3F                 	db	63
   547  00F36F  42                 	db	66
   548  00F370  60                 	db	96
   549  00F371  65                 	db	101
   550  00F372  3C                 	db	60
   551  00F373  00                 	db	0
   552  00F374  00                 	db	0
   553  00F375  80                 	db	128
   554  00F376  40                 	db	64
   555  00F377  00                 	db	0
   556  00F378  80                 	db	128
   557  00F379  BB                 	db	187
   558  00F37A  45                 	db	69
   559  00F37B  00                 	db	0
   560  00F37C  00                 	db	0
   561  00F37D  00                 	db	0
   562  00F37E  41                 	db	65
   563  00F37F  00                 	db	0
   564  00F380  00                 	db	0
   565  00F381  00                 	db	0
   566  00F382  42                 	db	66
   567  00F383  F0                 	db	240
   568  00F384  0A                 	db	10
   569  00F385  02                 	db	2
   570  00F386  A4                 	db	164
   571  00F387  70                 	db	112
   572  00F388  7D                 	db	125
   573  00F389  3F                 	db	63
   574  00F38A  A4                 	db	164
   575  00F38B  70                 	db	112
   576  00F38C  7D                 	db	125
   577  00F38D  3F                 	db	63
   578  00F38E  00                 	db	0
   579  00F38F  00                 	db	0
   580  00F390  00                 	db	0
   581  00F391  00                 	db	0
   582  00F392  00                 	db	0
   583  00F393  00                 	db	0
   584  00F394  00                 	db	0
   585  00F395  00                 	db	0
   586  00F396  00                 	db	0
   587  00F397  00                 	db	0
   588  00F398  00                 	db	0
   589  00F399  00                 	db	0
   590  00F39A  00                 	db	0
   591  00F39B  00                 	db	0
   592  00F39C  00                 	db	0
   593  00F39D  00                 	db	0
   594  00F39E  00                 	db	0
   595  00F39F  00                 	db	0
   596  00F3A0  00                 	db	0
   597  00F3A1  00                 	db	0
   598  00F3A2  00                 	db	0
   599  00F3A3  00                 	db	0
   600  00F3A4  00                 	db	0
   601  00F3A5  00                 	db	0
   602  00F3A6  00                 	db	0
   603  00F3A7  00                 	db	0
   604  00F3A8  00                 	db	0
   605  00F3A9  00                 	db	0
   606  00F3AA  00                 	db	0
   607  00F3AB  00                 	db	0
   608  00F3AC  00                 	db	0
   609  00F3AD  00                 	db	0
   610  00F3AE  00                 	db	0
   611  00F3AF  00                 	db	0
   612  00F3B0  00                 	db	0
   613  00F3B1  00                 	db	0
   614  00F3B2  00                 	db	0
   615  00F3B3  00                 	db	0
   616  00F3B4  00                 	db	0
   617  00F3B5  00                 	db	0
   618  00F3B6  00                 	db	0
   619  00F3B7  00                 	db	0
   620  00F3B8  00                 	db	0
   621  00F3B9  00                 	db	0
   622  00F3BA  00                 	db	0
   623  00F3BB  00                 	db	0
   624  00F3BC  00                 	db	0
   625  00F3BD  00                 	db	0
   626  00F3BE  00                 	db	0
   627  00F3BF  00                 	db	0
   628  00F3C0  00                 	db	0
   629  00F3C1  00                 	db	0
   630  00F3C2  00                 	db	0
   631  00F3C3  00                 	db	0
   632  00F3C4  00                 	db	0
   633  00F3C5  00                 	db	0
   634  00F3C6  00                 	db	0
   635  00F3C7  00                 	db	0
   636  00F3C8  00                 	db	0
   637  00F3C9  00                 	db	0
   638  00F3CA  00                 	db	0
   639  00F3CB  00                 	db	0
   640  00F3CC  00                 	db	0
   641  00F3CD  00                 	db	0
   642  00F3CE  00                 	db	0
   643  00F3CF  00                 	db	0
   644  00F3D0  00                 	db	0
   645  00F3D1  00                 	db	0
   646  00F3D2  00                 	db	0
   647  00F3D3  00                 	db	0
   648  00F3D4  00                 	db	0
   649  00F3D5  00                 	db	0
   650  00F3D6  00                 	db	0
   651  00F3D7  00                 	db	0
   652  00F3D8  00                 	db	0
   653  00F3D9  00                 	db	0
   654  00F3DA  00                 	db	0
   655  00F3DB  00                 	db	0
   656  00F3DC  00                 	db	0
   657  00F3DD  00                 	db	0
   658  00F3DE  00                 	db	0
   659  00F3DF  00                 	db	0
   660  00F3E0  00                 	db	0
   661  00F3E1  00                 	db	0
   662  00F3E2  00                 	db	0
   663  00F3E3  00                 	db	0
   664  00F3E4  00                 	db	0
   665  00F3E5  00                 	db	0
   666  00F3E6  00                 	db	0
   667  00F3E7  00                 	db	0
   668  00F3E8  00                 	db	0
   669  00F3E9  00                 	db	0
   670  00F3EA  00                 	db	0
   671  00F3EB  00                 	db	0
   672  00F3EC  00                 	db	0
   673  00F3ED  00                 	db	0
   674  00F3EE  00                 	db	0
   675  00F3EF  00                 	db	0
   676  00F3F0  00                 	db	0
   677  00F3F1  00                 	db	0
   678  00F3F2  00                 	db	0
   679  00F3F3  00                 	db	0
   680  00F3F4  00                 	db	0
   681  00F3F5  00                 	db	0
   682  00F3F6  00                 	db	0
   683  00F3F7  00                 	db	0
   684  00F3F8  00                 	db	0
   685  00F3F9  00                 	db	0
   686  00F3FA  00                 	db	0
   687  00F3FB  00                 	db	0
   688  00F3FC  00                 	db	0
   689  00F3FD  00                 	db	0
   690  00F3FE  00                 	db	0
   691  00F3FF  00                 	db	0
   692  00F400  00                 	db	0
   693  00F401  00                 	db	0
   694  00F402  00                 	db	0
   695  00F403  00                 	db	0
   696  00F404  00                 	db	0
   697  00F405  00                 	db	0
   698  00F406  00                 	db	0
   699  00F407  00                 	db	0
   700  00F408  00                 	db	0
   701  00F409  00                 	db	0
   702  00F40A  00                 	db	0
   703  00F40B  00                 	db	0
   704  00F40C  00                 	db	0
   705  00F40D  00                 	db	0
   706  00F40E  00                 	db	0
   707  00F40F  00                 	db	0
   708  00F410  00                 	db	0
   709  00F411  00                 	db	0
   710  00F412  00                 	db	0
   711  00F413  00                 	db	0
   712  00F414  00                 	db	0
   713  00F415  00                 	db	0
   714  00F416  00                 	db	0
   715  00F417  00                 	db	0
   716  00F418  00                 	db	0
   717  00F419  00                 	db	0
   718  00F41A  00                 	db	0
   719  00F41B                     __end_of_eedata:
   720                           	opt stack 0
   721  00F41B                     __npowers_:
   722                           	opt stack 0
   723  00F41B  0000               	dw	0
   724  00F41D  3F80               	dw	16256
   725  00F41F  CCCD               	dw	52429
   726  00F421  3DCC               	dw	15820
   727  00F423  D70A               	dw	55050
   728  00F425  3C23               	dw	15395
   729  00F427  126F               	dw	4719
   730  00F429  3A83               	dw	14979
   731  00F42B  B717               	dw	46871
   732  00F42D  38D1               	dw	14545
   733  00F42F  C5AC               	dw	50604
   734  00F431  3727               	dw	14119
   735  00F433  37BD               	dw	14269
   736  00F435  3586               	dw	13702
   737  00F437  BF95               	dw	49045
   738  00F439  33D6               	dw	13270
   739  00F43B  CC77               	dw	52343
   740  00F43D  322B               	dw	12843
   741  00F43F  705F               	dw	28767
   742  00F441  3089               	dw	12425
   743  00F443  E6FF               	dw	59135
   744  00F445  2EDB               	dw	11995
   745  00F447  E508               	dw	58632
   746  00F449  1E3C               	dw	7740
   747  00F44B  4260               	dw	16992
   748  00F44D  0DA2               	dw	3490
   749  00F44F                     __end_of__npowers_:
   750                           	opt stack 0
   751  00F44F                     __powers_:
   752                           	opt stack 0
   753  00F44F  0000               	dw	0
   754  00F451  3F80               	dw	16256
   755  00F453  0000               	dw	0
   756  00F455  4120               	dw	16672
   757  00F457  0000               	dw	0
   758  00F459  42C8               	dw	17096
   759  00F45B  0000               	dw	0
   760  00F45D  447A               	dw	17530
   761  00F45F  4000               	dw	16384
   762  00F461  461C               	dw	17948
   763  00F463  5000               	dw	20480
   764  00F465  47C3               	dw	18371
   765  00F467  2400               	dw	9216
   766  00F469  4974               	dw	18804
   767  00F46B  9680               	dw	38528
   768  00F46D  4B18               	dw	19224
   769  00F46F  BC20               	dw	48160
   770  00F471  4CBE               	dw	19646
   771  00F473  6B28               	dw	27432
   772  00F475  4E6E               	dw	20078
   773  00F477  02F9               	dw	761
   774  00F479  5015               	dw	20501
   775  00F47B  78EC               	dw	30956
   776  00F47D  60AD               	dw	24749
   777  00F47F  F2CA               	dw	62154
   778  00F481  7149               	dw	29001
   779  00F483                     __end_of__powers_:
   780                           	opt stack 0
   781  00F483                     _font13:
   782                           	opt stack 0
   783  00F483  0D                 	db	13
   784  00F484  10                 	db	16
   785  00F485  1B                 	db	27
   786  00F486  04                 	db	4
   787  00F487  00                 	db	0
   788  00F488  00                 	db	0
   789  00F489  00                 	db	0
   790  00F48A  00                 	db	0
   791  00F48B  00                 	db	0
   792  00F48C  00                 	db	0
   793  00F48D  00                 	db	0
   794  00F48E  00                 	db	0
   795  00F48F  00                 	db	0
   796  00F490  00                 	db	0
   797  00F491  00                 	db	0
   798  00F492  00                 	db	0
   799  00F493  00                 	db	0
   800  00F494  00                 	db	0
   801  00F495  00                 	db	0
   802  00F496  00                 	db	0
   803  00F497  00                 	db	0
   804  00F498  00                 	db	0
   805  00F499  00                 	db	0
   806  00F49A  00                 	db	0
   807  00F49B  00                 	db	0
   808  00F49C  00                 	db	0
   809  00F49D  00                 	db	0
   810  00F49E  00                 	db	0
   811  00F49F  00                 	db	0
   812  00F4A0  00                 	db	0
   813  00F4A1  04                 	db	4
   814  00F4A2  00                 	db	0
   815  00F4A3  00                 	db	0
   816  00F4A4  00                 	db	0
   817  00F4A5  00                 	db	0
   818  00F4A6  60                 	db	96
   819  00F4A7  00                 	db	0
   820  00F4A8  60                 	db	96
   821  00F4A9  00                 	db	0
   822  00F4AA  60                 	db	96
   823  00F4AB  00                 	db	0
   824  00F4AC  60                 	db	96
   825  00F4AD  00                 	db	0
   826  00F4AE  60                 	db	96
   827  00F4AF  00                 	db	0
   828  00F4B0  60                 	db	96
   829  00F4B1  00                 	db	0
   830  00F4B2  60                 	db	96
   831  00F4B3  00                 	db	0
   832  00F4B4  00                 	db	0
   833  00F4B5  00                 	db	0
   834  00F4B6  60                 	db	96
   835  00F4B7  00                 	db	0
   836  00F4B8  00                 	db	0
   837  00F4B9  00                 	db	0
   838  00F4BA  00                 	db	0
   839  00F4BB  00                 	db	0
   840  00F4BC  06                 	db	6
   841  00F4BD  00                 	db	0
   842  00F4BE  00                 	db	0
   843  00F4BF  00                 	db	0
   844  00F4C0  00                 	db	0
   845  00F4C1  6C                 	db	108
   846  00F4C2  00                 	db	0
   847  00F4C3  6C                 	db	108
   848  00F4C4  00                 	db	0
   849  00F4C5  6C                 	db	108
   850  00F4C6  00                 	db	0
   851  00F4C7  00                 	db	0
   852  00F4C8  00                 	db	0
   853  00F4C9  00                 	db	0
   854  00F4CA  00                 	db	0
   855  00F4CB  00                 	db	0
   856  00F4CC  00                 	db	0
   857  00F4CD  00                 	db	0
   858  00F4CE  00                 	db	0
   859  00F4CF  00                 	db	0
   860  00F4D0  00                 	db	0
   861  00F4D1  00                 	db	0
   862  00F4D2  00                 	db	0
   863  00F4D3  00                 	db	0
   864  00F4D4  00                 	db	0
   865  00F4D5  00                 	db	0
   866  00F4D6  00                 	db	0
   867  00F4D7  08                 	db	8
   868  00F4D8  00                 	db	0
   869  00F4D9  00                 	db	0
   870  00F4DA  00                 	db	0
   871  00F4DB  00                 	db	0
   872  00F4DC  36                 	db	54
   873  00F4DD  00                 	db	0
   874  00F4DE  36                 	db	54
   875  00F4DF  00                 	db	0
   876  00F4E0  7F                 	db	127
   877  00F4E1  00                 	db	0
   878  00F4E2  36                 	db	54
   879  00F4E3  00                 	db	0
   880  00F4E4  36                 	db	54
   881  00F4E5  00                 	db	0
   882  00F4E6  36                 	db	54
   883  00F4E7  00                 	db	0
   884  00F4E8  7F                 	db	127
   885  00F4E9  00                 	db	0
   886  00F4EA  36                 	db	54
   887  00F4EB  00                 	db	0
   888  00F4EC  36                 	db	54
   889  00F4ED  00                 	db	0
   890  00F4EE  00                 	db	0
   891  00F4EF  00                 	db	0
   892  00F4F0  00                 	db	0
   893  00F4F1  00                 	db	0
   894  00F4F2  07                 	db	7
   895  00F4F3  00                 	db	0
   896  00F4F4  00                 	db	0
   897  00F4F5  00                 	db	0
   898  00F4F6  00                 	db	0
   899  00F4F7  18                 	db	24
   900  00F4F8  00                 	db	0
   901  00F4F9  3C                 	db	60
   902  00F4FA  00                 	db	0
   903  00F4FB  7E                 	db	126
   904  00F4FC  00                 	db	0
   905  00F4FD  78                 	db	120
   906  00F4FE  00                 	db	0
   907  00F4FF  38                 	db	56
   908  00F500  00                 	db	0
   909  00F501  1C                 	db	28
   910  00F502  00                 	db	0
   911  00F503  1E                 	db	30
   912  00F504  00                 	db	0
   913  00F505  7E                 	db	126
   914  00F506  00                 	db	0
   915  00F507  3C                 	db	60
   916  00F508  00                 	db	0
   917  00F509  18                 	db	24
   918  00F50A  00                 	db	0
   919  00F50B  00                 	db	0
   920  00F50C  00                 	db	0
   921  00F50D  09                 	db	9
   922  00F50E  00                 	db	0
   923  00F50F  00                 	db	0
   924  00F510  00                 	db	0
   925  00F511  00                 	db	0
   926  00F512  38                 	db	56
   927  00F513  00                 	db	0
   928  00F514  6D                 	db	109
   929  00F515  80                 	db	128
   930  00F516  3B                 	db	59
   931  00F517  00                 	db	0
   932  00F518  06                 	db	6
   933  00F519  00                 	db	0
   934  00F51A  0C                 	db	12
   935  00F51B  00                 	db	0
   936  00F51C  18                 	db	24
   937  00F51D  00                 	db	0
   938  00F51E  37                 	db	55
   939  00F51F  00                 	db	0
   940  00F520  6D                 	db	109
   941  00F521  80                 	db	128
   942  00F522  07                 	db	7
   943  00F523  00                 	db	0
   944  00F524  00                 	db	0
   945  00F525  00                 	db	0
   946  00F526  00                 	db	0
   947  00F527  00                 	db	0
   948  00F528  07                 	db	7
   949  00F529  00                 	db	0
   950  00F52A  00                 	db	0
   951  00F52B  00                 	db	0
   952  00F52C  00                 	db	0
   953  00F52D  30                 	db	48
   954  00F52E  00                 	db	0
   955  00F52F  78                 	db	120
   956  00F530  00                 	db	0
   957  00F531  78                 	db	120
   958  00F532  00                 	db	0
   959  00F533  30                 	db	48
   960  00F534  00                 	db	0
   961  00F535  30                 	db	48
   962  00F536  00                 	db	0
   963  00F537  7E                 	db	126
   964  00F538  00                 	db	0
   965  00F539  6C                 	db	108
   966  00F53A  00                 	db	0
   967  00F53B  6C                 	db	108
   968  00F53C  00                 	db	0
   969  00F53D  3E                 	db	62
   970  00F53E  00                 	db	0
   971  00F53F  00                 	db	0
   972  00F540  00                 	db	0
   973  00F541  00                 	db	0
   974  00F542  00                 	db	0
   975  00F543  03                 	db	3
   976  00F544  00                 	db	0
   977  00F545  00                 	db	0
   978  00F546  00                 	db	0
   979  00F547  00                 	db	0
   980  00F548  60                 	db	96
   981  00F549  00                 	db	0
   982  00F54A  60                 	db	96
   983  00F54B  00                 	db	0
   984  00F54C  60                 	db	96
   985  00F54D  00                 	db	0
   986  00F54E  00                 	db	0
   987  00F54F  00                 	db	0
   988  00F550  00                 	db	0
   989  00F551  00                 	db	0
   990  00F552  00                 	db	0
   991  00F553  00                 	db	0
   992  00F554  00                 	db	0
   993  00F555  00                 	db	0
   994  00F556  00                 	db	0
   995  00F557  00                 	db	0
   996  00F558  00                 	db	0
   997  00F559  00                 	db	0
   998  00F55A  00                 	db	0
   999  00F55B  00                 	db	0
  1000  00F55C  00                 	db	0
  1001  00F55D  00                 	db	0
  1002  00F55E  04                 	db	4
  1003  00F55F  00                 	db	0
  1004  00F560  00                 	db	0
  1005  00F561  00                 	db	0
  1006  00F562  00                 	db	0
  1007  00F563  30                 	db	48
  1008  00F564  00                 	db	0
  1009  00F565  60                 	db	96
  1010  00F566  00                 	db	0
  1011  00F567  60                 	db	96
  1012  00F568  00                 	db	0
  1013  00F569  60                 	db	96
  1014  00F56A  00                 	db	0
  1015  00F56B  60                 	db	96
  1016  00F56C  00                 	db	0
  1017  00F56D  60                 	db	96
  1018  00F56E  00                 	db	0
  1019  00F56F  60                 	db	96
  1020  00F570  00                 	db	0
  1021  00F571  60                 	db	96
  1022  00F572  00                 	db	0
  1023  00F573  60                 	db	96
  1024  00F574  00                 	db	0
  1025  00F575  60                 	db	96
  1026  00F576  00                 	db	0
  1027  00F577  30                 	db	48
  1028  00F578  00                 	db	0
  1029  00F579  04                 	db	4
  1030  00F57A  00                 	db	0
  1031  00F57B  00                 	db	0
  1032  00F57C  00                 	db	0
  1033  00F57D  00                 	db	0
  1034  00F57E  60                 	db	96
  1035  00F57F  00                 	db	0
  1036  00F580  30                 	db	48
  1037  00F581  00                 	db	0
  1038  00F582  30                 	db	48
  1039  00F583  00                 	db	0
  1040  00F584  30                 	db	48
  1041  00F585  00                 	db	0
  1042  00F586  30                 	db	48
  1043  00F587  00                 	db	0
  1044  00F588  30                 	db	48
  1045  00F589  00                 	db	0
  1046  00F58A  30                 	db	48
  1047  00F58B  00                 	db	0
  1048  00F58C  30                 	db	48
  1049  00F58D  00                 	db	0
  1050  00F58E  30                 	db	48
  1051  00F58F  00                 	db	0
  1052  00F590  30                 	db	48
  1053  00F591  00                 	db	0
  1054  00F592  60                 	db	96
  1055  00F593  00                 	db	0
  1056  00F594  05                 	db	5
  1057  00F595  00                 	db	0
  1058  00F596  00                 	db	0
  1059  00F597  00                 	db	0
  1060  00F598  00                 	db	0
  1061  00F599  78                 	db	120
  1062  00F59A  00                 	db	0
  1063  00F59B  30                 	db	48
  1064  00F59C  00                 	db	0
  1065  00F59D  78                 	db	120
  1066  00F59E  00                 	db	0
  1067  00F59F  00                 	db	0
  1068  00F5A0  00                 	db	0
  1069  00F5A1  00                 	db	0
  1070  00F5A2  00                 	db	0
  1071  00F5A3  00                 	db	0
  1072  00F5A4  00                 	db	0
  1073  00F5A5  00                 	db	0
  1074  00F5A6  00                 	db	0
  1075  00F5A7  00                 	db	0
  1076  00F5A8  00                 	db	0
  1077  00F5A9  00                 	db	0
  1078  00F5AA  00                 	db	0
  1079  00F5AB  00                 	db	0
  1080  00F5AC  00                 	db	0
  1081  00F5AD  00                 	db	0
  1082  00F5AE  00                 	db	0
  1083  00F5AF  07                 	db	7
  1084  00F5B0  00                 	db	0
  1085  00F5B1  00                 	db	0
  1086  00F5B2  00                 	db	0
  1087  00F5B3  00                 	db	0
  1088  00F5B4  00                 	db	0
  1089  00F5B5  00                 	db	0
  1090  00F5B6  00                 	db	0
  1091  00F5B7  00                 	db	0
  1092  00F5B8  00                 	db	0
  1093  00F5B9  00                 	db	0
  1094  00F5BA  18                 	db	24
  1095  00F5BB  00                 	db	0
  1096  00F5BC  18                 	db	24
  1097  00F5BD  00                 	db	0
  1098  00F5BE  7E                 	db	126
  1099  00F5BF  00                 	db	0
  1100  00F5C0  18                 	db	24
  1101  00F5C1  00                 	db	0
  1102  00F5C2  18                 	db	24
  1103  00F5C3  00                 	db	0
  1104  00F5C4  00                 	db	0
  1105  00F5C5  00                 	db	0
  1106  00F5C6  00                 	db	0
  1107  00F5C7  00                 	db	0
  1108  00F5C8  00                 	db	0
  1109  00F5C9  00                 	db	0
  1110  00F5CA  04                 	db	4
  1111  00F5CB  00                 	db	0
  1112  00F5CC  00                 	db	0
  1113  00F5CD  00                 	db	0
  1114  00F5CE  00                 	db	0
  1115  00F5CF  00                 	db	0
  1116  00F5D0  00                 	db	0
  1117  00F5D1  00                 	db	0
  1118  00F5D2  00                 	db	0
  1119  00F5D3  00                 	db	0
  1120  00F5D4  00                 	db	0
  1121  00F5D5  00                 	db	0
  1122  00F5D6  00                 	db	0
  1123  00F5D7  00                 	db	0
  1124  00F5D8  00                 	db	0
  1125  00F5D9  00                 	db	0
  1126  00F5DA  00                 	db	0
  1127  00F5DB  00                 	db	0
  1128  00F5DC  00                 	db	0
  1129  00F5DD  00                 	db	0
  1130  00F5DE  00                 	db	0
  1131  00F5DF  30                 	db	48
  1132  00F5E0  00                 	db	0
  1133  00F5E1  60                 	db	96
  1134  00F5E2  00                 	db	0
  1135  00F5E3  00                 	db	0
  1136  00F5E4  00                 	db	0
  1137  00F5E5  04                 	db	4
  1138  00F5E6  00                 	db	0
  1139  00F5E7  00                 	db	0
  1140  00F5E8  00                 	db	0
  1141  00F5E9  00                 	db	0
  1142  00F5EA  00                 	db	0
  1143  00F5EB  00                 	db	0
  1144  00F5EC  00                 	db	0
  1145  00F5ED  00                 	db	0
  1146  00F5EE  00                 	db	0
  1147  00F5EF  00                 	db	0
  1148  00F5F0  00                 	db	0
  1149  00F5F1  00                 	db	0
  1150  00F5F2  00                 	db	0
  1151  00F5F3  00                 	db	0
  1152  00F5F4  70                 	db	112
  1153  00F5F5  00                 	db	0
  1154  00F5F6  00                 	db	0
  1155  00F5F7  00                 	db	0
  1156  00F5F8  00                 	db	0
  1157  00F5F9  00                 	db	0
  1158  00F5FA  00                 	db	0
  1159  00F5FB  00                 	db	0
  1160  00F5FC  00                 	db	0
  1161  00F5FD  00                 	db	0
  1162  00F5FE  00                 	db	0
  1163  00F5FF  00                 	db	0
  1164  00F600  04                 	db	4
  1165  00F601  00                 	db	0
  1166  00F602  00                 	db	0
  1167  00F603  00                 	db	0
  1168  00F604  00                 	db	0
  1169  00F605  00                 	db	0
  1170  00F606  00                 	db	0
  1171  00F607  00                 	db	0
  1172  00F608  00                 	db	0
  1173  00F609  00                 	db	0
  1174  00F60A  00                 	db	0
  1175  00F60B  00                 	db	0
  1176  00F60C  00                 	db	0
  1177  00F60D  00                 	db	0
  1178  00F60E  00                 	db	0
  1179  00F60F  00                 	db	0
  1180  00F610  00                 	db	0
  1181  00F611  00                 	db	0
  1182  00F612  00                 	db	0
  1183  00F613  00                 	db	0
  1184  00F614  00                 	db	0
  1185  00F615  60                 	db	96
  1186  00F616  00                 	db	0
  1187  00F617  00                 	db	0
  1188  00F618  00                 	db	0
  1189  00F619  00                 	db	0
  1190  00F61A  00                 	db	0
  1191  00F61B  06                 	db	6
  1192  00F61C  00                 	db	0
  1193  00F61D  00                 	db	0
  1194  00F61E  00                 	db	0
  1195  00F61F  00                 	db	0
  1196  00F620  0C                 	db	12
  1197  00F621  00                 	db	0
  1198  00F622  0C                 	db	12
  1199  00F623  00                 	db	0
  1200  00F624  0C                 	db	12
  1201  00F625  00                 	db	0
  1202  00F626  18                 	db	24
  1203  00F627  00                 	db	0
  1204  00F628  18                 	db	24
  1205  00F629  00                 	db	0
  1206  00F62A  30                 	db	48
  1207  00F62B  00                 	db	0
  1208  00F62C  30                 	db	48
  1209  00F62D  00                 	db	0
  1210  00F62E  60                 	db	96
  1211  00F62F  00                 	db	0
  1212  00F630  60                 	db	96
  1213  00F631  00                 	db	0
  1214  00F632  00                 	db	0
  1215  00F633  00                 	db	0
  1216  00F634  00                 	db	0
  1217  00F635  00                 	db	0
  1218  00F636  07                 	db	7
  1219  00F637  00                 	db	0
  1220  00F638  00                 	db	0
  1221  00F639  00                 	db	0
  1222  00F63A  00                 	db	0
  1223  00F63B  3C                 	db	60
  1224  00F63C  00                 	db	0
  1225  00F63D  66                 	db	102
  1226  00F63E  00                 	db	0
  1227  00F63F  66                 	db	102
  1228  00F640  00                 	db	0
  1229  00F641  66                 	db	102
  1230  00F642  00                 	db	0
  1231  00F643  66                 	db	102
  1232  00F644  00                 	db	0
  1233  00F645  66                 	db	102
  1234  00F646  00                 	db	0
  1235  00F647  66                 	db	102
  1236  00F648  00                 	db	0
  1237  00F649  66                 	db	102
  1238  00F64A  00                 	db	0
  1239  00F64B  3C                 	db	60
  1240  00F64C  00                 	db	0
  1241  00F64D  00                 	db	0
  1242  00F64E  00                 	db	0
  1243  00F64F  00                 	db	0
  1244  00F650  00                 	db	0
  1245  00F651  07                 	db	7
  1246  00F652  00                 	db	0
  1247  00F653  00                 	db	0
  1248  00F654  00                 	db	0
  1249  00F655  00                 	db	0
  1250  00F656  18                 	db	24
  1251  00F657  00                 	db	0
  1252  00F658  78                 	db	120
  1253  00F659  00                 	db	0
  1254  00F65A  18                 	db	24
  1255  00F65B  00                 	db	0
  1256  00F65C  18                 	db	24
  1257  00F65D  00                 	db	0
  1258  00F65E  18                 	db	24
  1259  00F65F  00                 	db	0
  1260  00F660  18                 	db	24
  1261  00F661  00                 	db	0
  1262  00F662  18                 	db	24
  1263  00F663  00                 	db	0
  1264  00F664  18                 	db	24
  1265  00F665  00                 	db	0
  1266  00F666  18                 	db	24
  1267  00F667  00                 	db	0
  1268  00F668  00                 	db	0
  1269  00F669  00                 	db	0
  1270  00F66A  00                 	db	0
  1271  00F66B  00                 	db	0
  1272  00F66C  07                 	db	7
  1273  00F66D  00                 	db	0
  1274  00F66E  00                 	db	0
  1275  00F66F  00                 	db	0
  1276  00F670  00                 	db	0
  1277  00F671  3C                 	db	60
  1278  00F672  00                 	db	0
  1279  00F673  66                 	db	102
  1280  00F674  00                 	db	0
  1281  00F675  06                 	db	6
  1282  00F676  00                 	db	0
  1283  00F677  06                 	db	6
  1284  00F678  00                 	db	0
  1285  00F679  0C                 	db	12
  1286  00F67A  00                 	db	0
  1287  00F67B  18                 	db	24
  1288  00F67C  00                 	db	0
  1289  00F67D  30                 	db	48
  1290  00F67E  00                 	db	0
  1291  00F67F  60                 	db	96
  1292  00F680  00                 	db	0
  1293  00F681  7E                 	db	126
  1294  00F682  00                 	db	0
  1295  00F683  00                 	db	0
  1296  00F684  00                 	db	0
  1297  00F685  00                 	db	0
  1298  00F686  00                 	db	0
  1299  00F687  07                 	db	7
  1300  00F688  00                 	db	0
  1301  00F689  00                 	db	0
  1302  00F68A  00                 	db	0
  1303  00F68B  00                 	db	0
  1304  00F68C  3C                 	db	60
  1305  00F68D  00                 	db	0
  1306  00F68E  66                 	db	102
  1307  00F68F  00                 	db	0
  1308  00F690  06                 	db	6
  1309  00F691  00                 	db	0
  1310  00F692  06                 	db	6
  1311  00F693  00                 	db	0
  1312  00F694  1C                 	db	28
  1313  00F695  00                 	db	0
  1314  00F696  06                 	db	6
  1315  00F697  00                 	db	0
  1316  00F698  06                 	db	6
  1317  00F699  00                 	db	0
  1318  00F69A  66                 	db	102
  1319  00F69B  00                 	db	0
  1320  00F69C  3C                 	db	60
  1321  00F69D  00                 	db	0
  1322  00F69E  00                 	db	0
  1323  00F69F  00                 	db	0
  1324  00F6A0  00                 	db	0
  1325  00F6A1  00                 	db	0
  1326  00F6A2  07                 	db	7
  1327  00F6A3  00                 	db	0
  1328  00F6A4  00                 	db	0
  1329  00F6A5  00                 	db	0
  1330  00F6A6  00                 	db	0
  1331  00F6A7  0C                 	db	12
  1332  00F6A8  00                 	db	0
  1333  00F6A9  1C                 	db	28
  1334  00F6AA  00                 	db	0
  1335  00F6AB  1C                 	db	28
  1336  00F6AC  00                 	db	0
  1337  00F6AD  3C                 	db	60
  1338  00F6AE  00                 	db	0
  1339  00F6AF  3C                 	db	60
  1340  00F6B0  00                 	db	0
  1341  00F6B1  6C                 	db	108
  1342  00F6B2  00                 	db	0
  1343  00F6B3  7E                 	db	126
  1344  00F6B4  00                 	db	0
  1345  00F6B5  0C                 	db	12
  1346  00F6B6  00                 	db	0
  1347  00F6B7  0C                 	db	12
  1348  00F6B8  00                 	db	0
  1349  00F6B9  00                 	db	0
  1350  00F6BA  00                 	db	0
  1351  00F6BB  00                 	db	0
  1352  00F6BC  00                 	db	0
  1353  00F6BD  07                 	db	7
  1354  00F6BE  00                 	db	0
  1355  00F6BF  00                 	db	0
  1356  00F6C0  00                 	db	0
  1357  00F6C1  00                 	db	0
  1358  00F6C2  7E                 	db	126
  1359  00F6C3  00                 	db	0
  1360  00F6C4  60                 	db	96
  1361  00F6C5  00                 	db	0
  1362  00F6C6  60                 	db	96
  1363  00F6C7  00                 	db	0
  1364  00F6C8  7C                 	db	124
  1365  00F6C9  00                 	db	0
  1366  00F6CA  66                 	db	102
  1367  00F6CB  00                 	db	0
  1368  00F6CC  06                 	db	6
  1369  00F6CD  00                 	db	0
  1370  00F6CE  06                 	db	6
  1371  00F6CF  00                 	db	0
  1372  00F6D0  66                 	db	102
  1373  00F6D1  00                 	db	0
  1374  00F6D2  3C                 	db	60
  1375  00F6D3  00                 	db	0
  1376  00F6D4  00                 	db	0
  1377  00F6D5  00                 	db	0
  1378  00F6D6  00                 	db	0
  1379  00F6D7  00                 	db	0
  1380  00F6D8  07                 	db	7
  1381  00F6D9  00                 	db	0
  1382  00F6DA  00                 	db	0
  1383  00F6DB  00                 	db	0
  1384  00F6DC  00                 	db	0
  1385  00F6DD  3C                 	db	60
  1386  00F6DE  00                 	db	0
  1387  00F6DF  66                 	db	102
  1388  00F6E0  00                 	db	0
  1389  00F6E1  60                 	db	96
  1390  00F6E2  00                 	db	0
  1391  00F6E3  60                 	db	96
  1392  00F6E4  00                 	db	0
  1393  00F6E5  7C                 	db	124
  1394  00F6E6  00                 	db	0
  1395  00F6E7  66                 	db	102
  1396  00F6E8  00                 	db	0
  1397  00F6E9  66                 	db	102
  1398  00F6EA  00                 	db	0
  1399  00F6EB  66                 	db	102
  1400  00F6EC  00                 	db	0
  1401  00F6ED  3C                 	db	60
  1402  00F6EE  00                 	db	0
  1403  00F6EF  00                 	db	0
  1404  00F6F0  00                 	db	0
  1405  00F6F1  00                 	db	0
  1406  00F6F2  00                 	db	0
  1407  00F6F3  07                 	db	7
  1408  00F6F4  00                 	db	0
  1409  00F6F5  00                 	db	0
  1410  00F6F6  00                 	db	0
  1411  00F6F7  00                 	db	0
  1412  00F6F8  7E                 	db	126
  1413  00F6F9  00                 	db	0
  1414  00F6FA  06                 	db	6
  1415  00F6FB  00                 	db	0
  1416  00F6FC  0C                 	db	12
  1417  00F6FD  00                 	db	0
  1418  00F6FE  0C                 	db	12
  1419  00F6FF  00                 	db	0
  1420  00F700  18                 	db	24
  1421  00F701  00                 	db	0
  1422  00F702  18                 	db	24
  1423  00F703  00                 	db	0
  1424  00F704  30                 	db	48
  1425  00F705  00                 	db	0
  1426  00F706  30                 	db	48
  1427  00F707  00                 	db	0
  1428  00F708  30                 	db	48
  1429  00F709  00                 	db	0
  1430  00F70A  00                 	db	0
  1431  00F70B  00                 	db	0
  1432  00F70C  00                 	db	0
  1433  00F70D  00                 	db	0
  1434  00F70E  07                 	db	7
  1435  00F70F  00                 	db	0
  1436  00F710  00                 	db	0
  1437  00F711  00                 	db	0
  1438  00F712  00                 	db	0
  1439  00F713  3C                 	db	60
  1440  00F714  00                 	db	0
  1441  00F715  66                 	db	102
  1442  00F716  00                 	db	0
  1443  00F717  66                 	db	102
  1444  00F718  00                 	db	0
  1445  00F719  66                 	db	102
  1446  00F71A  00                 	db	0
  1447  00F71B  3C                 	db	60
  1448  00F71C  00                 	db	0
  1449  00F71D  66                 	db	102
  1450  00F71E  00                 	db	0
  1451  00F71F  66                 	db	102
  1452  00F720  00                 	db	0
  1453  00F721  66                 	db	102
  1454  00F722  00                 	db	0
  1455  00F723  3C                 	db	60
  1456  00F724  00                 	db	0
  1457  00F725  00                 	db	0
  1458  00F726  00                 	db	0
  1459  00F727  00                 	db	0
  1460  00F728  00                 	db	0
  1461  00F729  07                 	db	7
  1462  00F72A  00                 	db	0
  1463  00F72B  00                 	db	0
  1464  00F72C  00                 	db	0
  1465  00F72D  00                 	db	0
  1466  00F72E  3C                 	db	60
  1467  00F72F  00                 	db	0
  1468  00F730  66                 	db	102
  1469  00F731  00                 	db	0
  1470  00F732  66                 	db	102
  1471  00F733  00                 	db	0
  1472  00F734  66                 	db	102
  1473  00F735  00                 	db	0
  1474  00F736  3E                 	db	62
  1475  00F737  00                 	db	0
  1476  00F738  06                 	db	6
  1477  00F739  00                 	db	0
  1478  00F73A  06                 	db	6
  1479  00F73B  00                 	db	0
  1480  00F73C  66                 	db	102
  1481  00F73D  00                 	db	0
  1482  00F73E  3C                 	db	60
  1483  00F73F  00                 	db	0
  1484  00F740  00                 	db	0
  1485  00F741  00                 	db	0
  1486  00F742  00                 	db	0
  1487  00F743  00                 	db	0
  1488  00F744  04                 	db	4
  1489  00F745  00                 	db	0
  1490  00F746  00                 	db	0
  1491  00F747  00                 	db	0
  1492  00F748  00                 	db	0
  1493  00F749  00                 	db	0
  1494  00F74A  00                 	db	0
  1495  00F74B  00                 	db	0
  1496  00F74C  00                 	db	0
  1497  00F74D  00                 	db	0
  1498  00F74E  00                 	db	0
  1499  00F74F  60                 	db	96
  1500  00F750  00                 	db	0
  1501  00F751  00                 	db	0
  1502  00F752  00                 	db	0
  1503  00F753  00                 	db	0
  1504  00F754  00                 	db	0
  1505  00F755  00                 	db	0
  1506  00F756  00                 	db	0
  1507  00F757  00                 	db	0
  1508  00F758  00                 	db	0
  1509  00F759  60                 	db	96
  1510  00F75A  00                 	db	0
  1511  00F75B  00                 	db	0
  1512  00F75C  00                 	db	0
  1513  00F75D  00                 	db	0
  1514  00F75E  00                 	db	0
  1515  00F75F  04                 	db	4
  1516  00F760  00                 	db	0
  1517  00F761  00                 	db	0
  1518  00F762  00                 	db	0
  1519  00F763  00                 	db	0
  1520  00F764  00                 	db	0
  1521  00F765  00                 	db	0
  1522  00F766  00                 	db	0
  1523  00F767  00                 	db	0
  1524  00F768  00                 	db	0
  1525  00F769  00                 	db	0
  1526  00F76A  30                 	db	48
  1527  00F76B  00                 	db	0
  1528  00F76C  00                 	db	0
  1529  00F76D  00                 	db	0
  1530  00F76E  00                 	db	0
  1531  00F76F  00                 	db	0
  1532  00F770  00                 	db	0
  1533  00F771  00                 	db	0
  1534  00F772  00                 	db	0
  1535  00F773  00                 	db	0
  1536  00F774  30                 	db	48
  1537  00F775  00                 	db	0
  1538  00F776  60                 	db	96
  1539  00F777  00                 	db	0
  1540  00F778  00                 	db	0
  1541  00F779  00                 	db	0
  1542  00F77A  07                 	db	7
  1543  00F77B  00                 	db	0
  1544  00F77C  00                 	db	0
  1545  00F77D  00                 	db	0
  1546  00F77E  00                 	db	0
  1547  00F77F  00                 	db	0
  1548  00F780  00                 	db	0
  1549  00F781  00                 	db	0
  1550  00F782  00                 	db	0
  1551  00F783  0C                 	db	12
  1552  00F784  00                 	db	0
  1553  00F785  18                 	db	24
  1554  00F786  00                 	db	0
  1555  00F787  30                 	db	48
  1556  00F788  00                 	db	0
  1557  00F789  60                 	db	96
  1558  00F78A  00                 	db	0
  1559  00F78B  30                 	db	48
  1560  00F78C  00                 	db	0
  1561  00F78D  18                 	db	24
  1562  00F78E  00                 	db	0
  1563  00F78F  0C                 	db	12
  1564  00F790  00                 	db	0
  1565  00F791  00                 	db	0
  1566  00F792  00                 	db	0
  1567  00F793  00                 	db	0
  1568  00F794  00                 	db	0
  1569  00F795  07                 	db	7
  1570  00F796  00                 	db	0
  1571  00F797  00                 	db	0
  1572  00F798  00                 	db	0
  1573  00F799  00                 	db	0
  1574  00F79A  00                 	db	0
  1575  00F79B  00                 	db	0
  1576  00F79C  00                 	db	0
  1577  00F79D  00                 	db	0
  1578  00F79E  00                 	db	0
  1579  00F79F  00                 	db	0
  1580  00F7A0  00                 	db	0
  1581  00F7A1  00                 	db	0
  1582  00F7A2  7E                 	db	126
  1583  00F7A3  00                 	db	0
  1584  00F7A4  00                 	db	0
  1585  00F7A5  00                 	db	0
  1586  00F7A6  7E                 	db	126
  1587  00F7A7  00                 	db	0
  1588  00F7A8  00                 	db	0
  1589  00F7A9  00                 	db	0
  1590  00F7AA  00                 	db	0
  1591  00F7AB  00                 	db	0
  1592  00F7AC  00                 	db	0
  1593  00F7AD  00                 	db	0
  1594  00F7AE  00                 	db	0
  1595  00F7AF  00                 	db	0
  1596  00F7B0  07                 	db	7
  1597  00F7B1  00                 	db	0
  1598  00F7B2  00                 	db	0
  1599  00F7B3  00                 	db	0
  1600  00F7B4  00                 	db	0
  1601  00F7B5  00                 	db	0
  1602  00F7B6  00                 	db	0
  1603  00F7B7  00                 	db	0
  1604  00F7B8  00                 	db	0
  1605  00F7B9  60                 	db	96
  1606  00F7BA  00                 	db	0
  1607  00F7BB  30                 	db	48
  1608  00F7BC  00                 	db	0
  1609  00F7BD  18                 	db	24
  1610  00F7BE  00                 	db	0
  1611  00F7BF  0C                 	db	12
  1612  00F7C0  00                 	db	0
  1613  00F7C1  18                 	db	24
  1614  00F7C2  00                 	db	0
  1615  00F7C3  30                 	db	48
  1616  00F7C4  00                 	db	0
  1617  00F7C5  60                 	db	96
  1618  00F7C6  00                 	db	0
  1619  00F7C7  00                 	db	0
  1620  00F7C8  00                 	db	0
  1621  00F7C9  00                 	db	0
  1622  00F7CA  00                 	db	0
  1623  00F7CB  07                 	db	7
  1624  00F7CC  00                 	db	0
  1625  00F7CD  00                 	db	0
  1626  00F7CE  00                 	db	0
  1627  00F7CF  00                 	db	0
  1628  00F7D0  3C                 	db	60
  1629  00F7D1  00                 	db	0
  1630  00F7D2  66                 	db	102
  1631  00F7D3  00                 	db	0
  1632  00F7D4  06                 	db	6
  1633  00F7D5  00                 	db	0
  1634  00F7D6  06                 	db	6
  1635  00F7D7  00                 	db	0
  1636  00F7D8  0C                 	db	12
  1637  00F7D9  00                 	db	0
  1638  00F7DA  18                 	db	24
  1639  00F7DB  00                 	db	0
  1640  00F7DC  18                 	db	24
  1641  00F7DD  00                 	db	0
  1642  00F7DE  00                 	db	0
  1643  00F7DF  00                 	db	0
  1644  00F7E0  18                 	db	24
  1645  00F7E1  00                 	db	0
  1646  00F7E2  00                 	db	0
  1647  00F7E3  00                 	db	0
  1648  00F7E4  00                 	db	0
  1649  00F7E5  00                 	db	0
  1650  00F7E6  0C                 	db	12
  1651  00F7E7  00                 	db	0
  1652  00F7E8  00                 	db	0
  1653  00F7E9  00                 	db	0
  1654  00F7EA  00                 	db	0
  1655  00F7EB  0F                 	db	15
  1656  00F7EC  80                 	db	128
  1657  00F7ED  38                 	db	56
  1658  00F7EE  E0                 	db	224
  1659  00F7EF  30                 	db	48
  1660  00F7F0  60                 	db	96
  1661  00F7F1  67                 	db	103
  1662  00F7F2  B0                 	db	176
  1663  00F7F3  6D                 	db	109
  1664  00F7F4  B0                 	db	176
  1665  00F7F5  6D                 	db	109
  1666  00F7F6  B0                 	db	176
  1667  00F7F7  67                 	db	103
  1668  00F7F8  F0                 	db	240
  1669  00F7F9  30                 	db	48
  1670  00F7FA  00                 	db	0
  1671  00F7FB  38                 	db	56
  1672  00F7FC  00                 	db	0
  1673  00F7FD  0F                 	db	15
  1674  00F7FE  C0                 	db	192
  1675  00F7FF  00                 	db	0
  1676  00F800  00                 	db	0
  1677  00F801  08                 	db	8
  1678  00F802  00                 	db	0
  1679  00F803  00                 	db	0
  1680  00F804  00                 	db	0
  1681  00F805  00                 	db	0
  1682  00F806  18                 	db	24
  1683  00F807  00                 	db	0
  1684  00F808  18                 	db	24
  1685  00F809  00                 	db	0
  1686  00F80A  3C                 	db	60
  1687  00F80B  00                 	db	0
  1688  00F80C  3C                 	db	60
  1689  00F80D  00                 	db	0
  1690  00F80E  66                 	db	102
  1691  00F80F  00                 	db	0
  1692  00F810  66                 	db	102
  1693  00F811  00                 	db	0
  1694  00F812  7E                 	db	126
  1695  00F813  00                 	db	0
  1696  00F814  C3                 	db	195
  1697  00F815  00                 	db	0
  1698  00F816  C3                 	db	195
  1699  00F817  00                 	db	0
  1700  00F818  00                 	db	0
  1701  00F819  00                 	db	0
  1702  00F81A  00                 	db	0
  1703  00F81B  00                 	db	0
  1704  00F81C  08                 	db	8
  1705  00F81D  00                 	db	0
  1706  00F81E  00                 	db	0
  1707  00F81F  00                 	db	0
  1708  00F820  00                 	db	0
  1709  00F821  7C                 	db	124
  1710  00F822  00                 	db	0
  1711  00F823  66                 	db	102
  1712  00F824  00                 	db	0
  1713  00F825  66                 	db	102
  1714  00F826  00                 	db	0
  1715  00F827  66                 	db	102
  1716  00F828  00                 	db	0
  1717  00F829  7C                 	db	124
  1718  00F82A  00                 	db	0
  1719  00F82B  66                 	db	102
  1720  00F82C  00                 	db	0
  1721  00F82D  66                 	db	102
  1722  00F82E  00                 	db	0
  1723  00F82F  66                 	db	102
  1724  00F830  00                 	db	0
  1725  00F831  7C                 	db	124
  1726  00F832  00                 	db	0
  1727  00F833  00                 	db	0
  1728  00F834  00                 	db	0
  1729  00F835  00                 	db	0
  1730  00F836  00                 	db	0
  1731  00F837  08                 	db	8
  1732  00F838  00                 	db	0
  1733  00F839  00                 	db	0
  1734  00F83A  00                 	db	0
  1735  00F83B  00                 	db	0
  1736  00F83C  3E                 	db	62
  1737  00F83D  00                 	db	0
  1738  00F83E  63                 	db	99
  1739  00F83F  00                 	db	0
  1740  00F840  60                 	db	96
  1741  00F841  00                 	db	0
  1742  00F842  60                 	db	96
  1743  00F843  00                 	db	0
  1744  00F844  60                 	db	96
  1745  00F845  00                 	db	0
  1746  00F846  60                 	db	96
  1747  00F847  00                 	db	0
  1748  00F848  60                 	db	96
  1749  00F849  00                 	db	0
  1750  00F84A  63                 	db	99
  1751  00F84B  00                 	db	0
  1752  00F84C  3E                 	db	62
  1753  00F84D  00                 	db	0
  1754  00F84E  00                 	db	0
  1755  00F84F  00                 	db	0
  1756  00F850  00                 	db	0
  1757  00F851  00                 	db	0
  1758  00F852  09                 	db	9
  1759  00F853  00                 	db	0
  1760  00F854  00                 	db	0
  1761  00F855  00                 	db	0
  1762  00F856  00                 	db	0
  1763  00F857  7C                 	db	124
  1764  00F858  00                 	db	0
  1765  00F859  66                 	db	102
  1766  00F85A  00                 	db	0
  1767  00F85B  63                 	db	99
  1768  00F85C  00                 	db	0
  1769  00F85D  63                 	db	99
  1770  00F85E  00                 	db	0
  1771  00F85F  63                 	db	99
  1772  00F860  00                 	db	0
  1773  00F861  63                 	db	99
  1774  00F862  00                 	db	0
  1775  00F863  63                 	db	99
  1776  00F864  00                 	db	0
  1777  00F865  66                 	db	102
  1778  00F866  00                 	db	0
  1779  00F867  7C                 	db	124
  1780  00F868  00                 	db	0
  1781  00F869  00                 	db	0
  1782  00F86A  00                 	db	0
  1783  00F86B  00                 	db	0
  1784  00F86C  00                 	db	0
  1785  00F86D  08                 	db	8
  1786  00F86E  00                 	db	0
  1787  00F86F  00                 	db	0
  1788  00F870  00                 	db	0
  1789  00F871  00                 	db	0
  1790  00F872  7E                 	db	126
  1791  00F873  00                 	db	0
  1792  00F874  60                 	db	96
  1793  00F875  00                 	db	0
  1794  00F876  60                 	db	96
  1795  00F877  00                 	db	0
  1796  00F878  60                 	db	96
  1797  00F879  00                 	db	0
  1798  00F87A  7C                 	db	124
  1799  00F87B  00                 	db	0
  1800  00F87C  60                 	db	96
  1801  00F87D  00                 	db	0
  1802  00F87E  60                 	db	96
  1803  00F87F  00                 	db	0
  1804  00F880  60                 	db	96
  1805  00F881  00                 	db	0
  1806  00F882  7E                 	db	126
  1807  00F883  00                 	db	0
  1808  00F884  00                 	db	0
  1809  00F885  00                 	db	0
  1810  00F886  00                 	db	0
  1811  00F887  00                 	db	0
  1812  00F888  07                 	db	7
  1813  00F889  00                 	db	0
  1814  00F88A  00                 	db	0
  1815  00F88B  00                 	db	0
  1816  00F88C  00                 	db	0
  1817  00F88D  7E                 	db	126
  1818  00F88E  00                 	db	0
  1819  00F88F  60                 	db	96
  1820  00F890  00                 	db	0
  1821  00F891  60                 	db	96
  1822  00F892  00                 	db	0
  1823  00F893  60                 	db	96
  1824  00F894  00                 	db	0
  1825  00F895  7C                 	db	124
  1826  00F896  00                 	db	0
  1827  00F897  60                 	db	96
  1828  00F898  00                 	db	0
  1829  00F899  60                 	db	96
  1830  00F89A  00                 	db	0
  1831  00F89B  60                 	db	96
  1832  00F89C  00                 	db	0
  1833  00F89D  60                 	db	96
  1834  00F89E  00                 	db	0
  1835  00F89F  00                 	db	0
  1836  00F8A0  00                 	db	0
  1837  00F8A1  00                 	db	0
  1838  00F8A2  00                 	db	0
  1839  00F8A3  09                 	db	9
  1840  00F8A4  00                 	db	0
  1841  00F8A5  00                 	db	0
  1842  00F8A6  00                 	db	0
  1843  00F8A7  00                 	db	0
  1844  00F8A8  3E                 	db	62
  1845  00F8A9  00                 	db	0
  1846  00F8AA  63                 	db	99
  1847  00F8AB  00                 	db	0
  1848  00F8AC  60                 	db	96
  1849  00F8AD  00                 	db	0
  1850  00F8AE  60                 	db	96
  1851  00F8AF  00                 	db	0
  1852  00F8B0  6F                 	db	111
  1853  00F8B1  00                 	db	0
  1854  00F8B2  63                 	db	99
  1855  00F8B3  00                 	db	0
  1856  00F8B4  63                 	db	99
  1857  00F8B5  00                 	db	0
  1858  00F8B6  67                 	db	103
  1859  00F8B7  00                 	db	0
  1860  00F8B8  3F                 	db	63
  1861  00F8B9  00                 	db	0
  1862  00F8BA  00                 	db	0
  1863  00F8BB  00                 	db	0
  1864  00F8BC  00                 	db	0
  1865  00F8BD  00                 	db	0
  1866  00F8BE  09                 	db	9
  1867  00F8BF  00                 	db	0
  1868  00F8C0  00                 	db	0
  1869  00F8C1  00                 	db	0
  1870  00F8C2  00                 	db	0
  1871  00F8C3  63                 	db	99
  1872  00F8C4  00                 	db	0
  1873  00F8C5  63                 	db	99
  1874  00F8C6  00                 	db	0
  1875  00F8C7  63                 	db	99
  1876  00F8C8  00                 	db	0
  1877  00F8C9  63                 	db	99
  1878  00F8CA  00                 	db	0
  1879  00F8CB  7F                 	db	127
  1880  00F8CC  00                 	db	0
  1881  00F8CD  63                 	db	99
  1882  00F8CE  00                 	db	0
  1883  00F8CF  63                 	db	99
  1884  00F8D0  00                 	db	0
  1885  00F8D1  63                 	db	99
  1886  00F8D2  00                 	db	0
  1887  00F8D3  63                 	db	99
  1888  00F8D4  00                 	db	0
  1889  00F8D5  00                 	db	0
  1890  00F8D6  00                 	db	0
  1891  00F8D7  00                 	db	0
  1892  00F8D8  00                 	db	0
  1893  00F8D9  04                 	db	4
  1894  00F8DA  00                 	db	0
  1895  00F8DB  00                 	db	0
  1896  00F8DC  00                 	db	0
  1897  00F8DD  00                 	db	0
  1898  00F8DE  60                 	db	96
  1899  00F8DF  00                 	db	0
  1900  00F8E0  60                 	db	96
  1901  00F8E1  00                 	db	0
  1902  00F8E2  60                 	db	96
  1903  00F8E3  00                 	db	0
  1904  00F8E4  60                 	db	96
  1905  00F8E5  00                 	db	0
  1906  00F8E6  60                 	db	96
  1907  00F8E7  00                 	db	0
  1908  00F8E8  60                 	db	96
  1909  00F8E9  00                 	db	0
  1910  00F8EA  60                 	db	96
  1911  00F8EB  00                 	db	0
  1912  00F8EC  60                 	db	96
  1913  00F8ED  00                 	db	0
  1914  00F8EE  60                 	db	96
  1915  00F8EF  00                 	db	0
  1916  00F8F0  00                 	db	0
  1917  00F8F1  00                 	db	0
  1918  00F8F2  00                 	db	0
  1919  00F8F3  00                 	db	0
  1920  00F8F4  06                 	db	6
  1921  00F8F5  00                 	db	0
  1922  00F8F6  00                 	db	0
  1923  00F8F7  00                 	db	0
  1924  00F8F8  00                 	db	0
  1925  00F8F9  18                 	db	24
  1926  00F8FA  00                 	db	0
  1927  00F8FB  18                 	db	24
  1928  00F8FC  00                 	db	0
  1929  00F8FD  18                 	db	24
  1930  00F8FE  00                 	db	0
  1931  00F8FF  18                 	db	24
  1932  00F900  00                 	db	0
  1933  00F901  18                 	db	24
  1934  00F902  00                 	db	0
  1935  00F903  18                 	db	24
  1936  00F904  00                 	db	0
  1937  00F905  D8                 	db	216
  1938  00F906  00                 	db	0
  1939  00F907  D8                 	db	216
  1940  00F908  00                 	db	0
  1941  00F909  70                 	db	112
  1942  00F90A  00                 	db	0
  1943  00F90B  00                 	db	0
  1944  00F90C  00                 	db	0
  1945  00F90D  00                 	db	0
  1946  00F90E  00                 	db	0
  1947  00F90F  08                 	db	8
  1948  00F910  00                 	db	0
  1949  00F911  00                 	db	0
  1950  00F912  00                 	db	0
  1951  00F913  00                 	db	0
  1952  00F914  66                 	db	102
  1953  00F915  00                 	db	0
  1954  00F916  6C                 	db	108
  1955  00F917  00                 	db	0
  1956  00F918  78                 	db	120
  1957  00F919  00                 	db	0
  1958  00F91A  70                 	db	112
  1959  00F91B  00                 	db	0
  1960  00F91C  70                 	db	112
  1961  00F91D  00                 	db	0
  1962  00F91E  78                 	db	120
  1963  00F91F  00                 	db	0
  1964  00F920  6C                 	db	108
  1965  00F921  00                 	db	0
  1966  00F922  66                 	db	102
  1967  00F923  00                 	db	0
  1968  00F924  63                 	db	99
  1969  00F925  00                 	db	0
  1970  00F926  00                 	db	0
  1971  00F927  00                 	db	0
  1972  00F928  00                 	db	0
  1973  00F929  00                 	db	0
  1974  00F92A  07                 	db	7
  1975  00F92B  00                 	db	0
  1976  00F92C  00                 	db	0
  1977  00F92D  00                 	db	0
  1978  00F92E  00                 	db	0
  1979  00F92F  60                 	db	96
  1980  00F930  00                 	db	0
  1981  00F931  60                 	db	96
  1982  00F932  00                 	db	0
  1983  00F933  60                 	db	96
  1984  00F934  00                 	db	0
  1985  00F935  60                 	db	96
  1986  00F936  00                 	db	0
  1987  00F937  60                 	db	96
  1988  00F938  00                 	db	0
  1989  00F939  60                 	db	96
  1990  00F93A  00                 	db	0
  1991  00F93B  60                 	db	96
  1992  00F93C  00                 	db	0
  1993  00F93D  60                 	db	96
  1994  00F93E  00                 	db	0
  1995  00F93F  7E                 	db	126
  1996  00F940  00                 	db	0
  1997  00F941  00                 	db	0
  1998  00F942  00                 	db	0
  1999  00F943  00                 	db	0
  2000  00F944  00                 	db	0
  2001  00F945  0A                 	db	10
  2002  00F946  00                 	db	0
  2003  00F947  00                 	db	0
  2004  00F948  00                 	db	0
  2005  00F949  00                 	db	0
  2006  00F94A  61                 	db	97
  2007  00F94B  80                 	db	128
  2008  00F94C  61                 	db	97
  2009  00F94D  80                 	db	128
  2010  00F94E  73                 	db	115
  2011  00F94F  80                 	db	128
  2012  00F950  73                 	db	115
  2013  00F951  80                 	db	128
  2014  00F952  7F                 	db	127
  2015  00F953  80                 	db	128
  2016  00F954  7F                 	db	127
  2017  00F955  80                 	db	128
  2018  00F956  6D                 	db	109
  2019  00F957  80                 	db	128
  2020  00F958  6D                 	db	109
  2021  00F959  80                 	db	128
  2022  00F95A  61                 	db	97
  2023  00F95B  80                 	db	128
  2024  00F95C  00                 	db	0
  2025  00F95D  00                 	db	0
  2026  00F95E  00                 	db	0
  2027  00F95F  00                 	db	0
  2028  00F960  09                 	db	9
  2029  00F961  00                 	db	0
  2030  00F962  00                 	db	0
  2031  00F963  00                 	db	0
  2032  00F964  00                 	db	0
  2033  00F965  63                 	db	99
  2034  00F966  00                 	db	0
  2035  00F967  73                 	db	115
  2036  00F968  00                 	db	0
  2037  00F969  73                 	db	115
  2038  00F96A  00                 	db	0
  2039  00F96B  7B                 	db	123
  2040  00F96C  00                 	db	0
  2041  00F96D  7B                 	db	123
  2042  00F96E  00                 	db	0
  2043  00F96F  6F                 	db	111
  2044  00F970  00                 	db	0
  2045  00F971  67                 	db	103
  2046  00F972  00                 	db	0
  2047  00F973  67                 	db	103
  2048  00F974  00                 	db	0
  2049  00F975  63                 	db	99
  2050  00F976  00                 	db	0
  2051  00F977  00                 	db	0
  2052  00F978  00                 	db	0
  2053  00F979  00                 	db	0
  2054  00F97A  00                 	db	0
  2055  00F97B  09                 	db	9
  2056  00F97C  00                 	db	0
  2057  00F97D  00                 	db	0
  2058  00F97E  00                 	db	0
  2059  00F97F  00                 	db	0
  2060  00F980  3E                 	db	62
  2061  00F981  00                 	db	0
  2062  00F982  63                 	db	99
  2063  00F983  00                 	db	0
  2064  00F984  63                 	db	99
  2065  00F985  00                 	db	0
  2066  00F986  63                 	db	99
  2067  00F987  00                 	db	0
  2068  00F988  63                 	db	99
  2069  00F989  00                 	db	0
  2070  00F98A  63                 	db	99
  2071  00F98B  00                 	db	0
  2072  00F98C  63                 	db	99
  2073  00F98D  00                 	db	0
  2074  00F98E  63                 	db	99
  2075  00F98F  00                 	db	0
  2076  00F990  3E                 	db	62
  2077  00F991  00                 	db	0
  2078  00F992  00                 	db	0
  2079  00F993  00                 	db	0
  2080  00F994  00                 	db	0
  2081  00F995  00                 	db	0
  2082  00F996  08                 	db	8
  2083  00F997  00                 	db	0
  2084  00F998  00                 	db	0
  2085  00F999  00                 	db	0
  2086  00F99A  00                 	db	0
  2087  00F99B  7E                 	db	126
  2088  00F99C  00                 	db	0
  2089  00F99D  63                 	db	99
  2090  00F99E  00                 	db	0
  2091  00F99F  63                 	db	99
  2092  00F9A0  00                 	db	0
  2093  00F9A1  63                 	db	99
  2094  00F9A2  00                 	db	0
  2095  00F9A3  7E                 	db	126
  2096  00F9A4  00                 	db	0
  2097  00F9A5  60                 	db	96
  2098  00F9A6  00                 	db	0
  2099  00F9A7  60                 	db	96
  2100  00F9A8  00                 	db	0
  2101  00F9A9  60                 	db	96
  2102  00F9AA  00                 	db	0
  2103  00F9AB  60                 	db	96
  2104  00F9AC  00                 	db	0
  2105  00F9AD  00                 	db	0
  2106  00F9AE  00                 	db	0
  2107  00F9AF  00                 	db	0
  2108  00F9B0  00                 	db	0
  2109  00F9B1  09                 	db	9
  2110  00F9B2  00                 	db	0
  2111  00F9B3  00                 	db	0
  2112  00F9B4  00                 	db	0
  2113  00F9B5  00                 	db	0
  2114  00F9B6  3E                 	db	62
  2115  00F9B7  00                 	db	0
  2116  00F9B8  63                 	db	99
  2117  00F9B9  00                 	db	0
  2118  00F9BA  63                 	db	99
  2119  00F9BB  00                 	db	0
  2120  00F9BC  63                 	db	99
  2121  00F9BD  00                 	db	0
  2122  00F9BE  63                 	db	99
  2123  00F9BF  00                 	db	0
  2124  00F9C0  63                 	db	99
  2125  00F9C1  00                 	db	0
  2126  00F9C2  6F                 	db	111
  2127  00F9C3  00                 	db	0
  2128  00F9C4  67                 	db	103
  2129  00F9C5  00                 	db	0
  2130  00F9C6  3E                 	db	62
  2131  00F9C7  00                 	db	0
  2132  00F9C8  03                 	db	3
  2133  00F9C9  00                 	db	0
  2134  00F9CA  00                 	db	0
  2135  00F9CB  00                 	db	0
  2136  00F9CC  09                 	db	9
  2137  00F9CD  00                 	db	0
  2138  00F9CE  00                 	db	0
  2139  00F9CF  00                 	db	0
  2140  00F9D0  00                 	db	0
  2141  00F9D1  7E                 	db	126
  2142  00F9D2  00                 	db	0
  2143  00F9D3  63                 	db	99
  2144  00F9D4  00                 	db	0
  2145  00F9D5  63                 	db	99
  2146  00F9D6  00                 	db	0
  2147  00F9D7  63                 	db	99
  2148  00F9D8  00                 	db	0
  2149  00F9D9  7E                 	db	126
  2150  00F9DA  00                 	db	0
  2151  00F9DB  63                 	db	99
  2152  00F9DC  00                 	db	0
  2153  00F9DD  63                 	db	99
  2154  00F9DE  00                 	db	0
  2155  00F9DF  63                 	db	99
  2156  00F9E0  00                 	db	0
  2157  00F9E1  63                 	db	99
  2158  00F9E2  00                 	db	0
  2159  00F9E3  00                 	db	0
  2160  00F9E4  00                 	db	0
  2161  00F9E5  00                 	db	0
  2162  00F9E6  00                 	db	0
  2163  00F9E7  08                 	db	8
  2164  00F9E8  00                 	db	0
  2165  00F9E9  00                 	db	0
  2166  00F9EA  00                 	db	0
  2167  00F9EB  00                 	db	0
  2168  00F9EC  3C                 	db	60
  2169  00F9ED  00                 	db	0
  2170  00F9EE  66                 	db	102
  2171  00F9EF  00                 	db	0
  2172  00F9F0  60                 	db	96
  2173  00F9F1  00                 	db	0
  2174  00F9F2  60                 	db	96
  2175  00F9F3  00                 	db	0
  2176  00F9F4  3C                 	db	60
  2177  00F9F5  00                 	db	0
  2178  00F9F6  06                 	db	6
  2179  00F9F7  00                 	db	0
  2180  00F9F8  06                 	db	6
  2181  00F9F9  00                 	db	0
  2182  00F9FA  66                 	db	102
  2183  00F9FB  00                 	db	0
  2184  00F9FC  3C                 	db	60
  2185  00F9FD  00                 	db	0
  2186  00F9FE  00                 	db	0
  2187  00F9FF  00                 	db	0
  2188  00FA00  00                 	db	0
  2189  00FA01  00                 	db	0
  2190  00FA02  08                 	db	8
  2191  00FA03  00                 	db	0
  2192  00FA04  00                 	db	0
  2193  00FA05  00                 	db	0
  2194  00FA06  00                 	db	0
  2195  00FA07  7E                 	db	126
  2196  00FA08  00                 	db	0
  2197  00FA09  18                 	db	24
  2198  00FA0A  00                 	db	0
  2199  00FA0B  18                 	db	24
  2200  00FA0C  00                 	db	0
  2201  00FA0D  18                 	db	24
  2202  00FA0E  00                 	db	0
  2203  00FA0F  18                 	db	24
  2204  00FA10  00                 	db	0
  2205  00FA11  18                 	db	24
  2206  00FA12  00                 	db	0
  2207  00FA13  18                 	db	24
  2208  00FA14  00                 	db	0
  2209  00FA15  18                 	db	24
  2210  00FA16  00                 	db	0
  2211  00FA17  18                 	db	24
  2212  00FA18  00                 	db	0
  2213  00FA19  00                 	db	0
  2214  00FA1A  00                 	db	0
  2215  00FA1B  00                 	db	0
  2216  00FA1C  00                 	db	0
  2217  00FA1D  09                 	db	9
  2218  00FA1E  00                 	db	0
  2219  00FA1F  00                 	db	0
  2220  00FA20  00                 	db	0
  2221  00FA21  00                 	db	0
  2222  00FA22  63                 	db	99
  2223  00FA23  00                 	db	0
  2224  00FA24  63                 	db	99
  2225  00FA25  00                 	db	0
  2226  00FA26  63                 	db	99
  2227  00FA27  00                 	db	0
  2228  00FA28  63                 	db	99
  2229  00FA29  00                 	db	0
  2230  00FA2A  63                 	db	99
  2231  00FA2B  00                 	db	0
  2232  00FA2C  63                 	db	99
  2233  00FA2D  00                 	db	0
  2234  00FA2E  63                 	db	99
  2235  00FA2F  00                 	db	0
  2236  00FA30  63                 	db	99
  2237  00FA31  00                 	db	0
  2238  00FA32  3E                 	db	62
  2239  00FA33  00                 	db	0
  2240  00FA34  00                 	db	0
  2241  00FA35  00                 	db	0
  2242  00FA36  00                 	db	0
  2243  00FA37  00                 	db	0
  2244  00FA38  08                 	db	8
  2245  00FA39  00                 	db	0
  2246  00FA3A  00                 	db	0
  2247  00FA3B  00                 	db	0
  2248  00FA3C  00                 	db	0
  2249  00FA3D  C3                 	db	195
  2250  00FA3E  00                 	db	0
  2251  00FA3F  C3                 	db	195
  2252  00FA40  00                 	db	0
  2253  00FA41  66                 	db	102
  2254  00FA42  00                 	db	0
  2255  00FA43  66                 	db	102
  2256  00FA44  00                 	db	0
  2257  00FA45  66                 	db	102
  2258  00FA46  00                 	db	0
  2259  00FA47  3C                 	db	60
  2260  00FA48  00                 	db	0
  2261  00FA49  3C                 	db	60
  2262  00FA4A  00                 	db	0
  2263  00FA4B  18                 	db	24
  2264  00FA4C  00                 	db	0
  2265  00FA4D  18                 	db	24
  2266  00FA4E  00                 	db	0
  2267  00FA4F  00                 	db	0
  2268  00FA50  00                 	db	0
  2269  00FA51  00                 	db	0
  2270  00FA52  00                 	db	0
  2271  00FA53  0C                 	db	12
  2272  00FA54  00                 	db	0
  2273  00FA55  00                 	db	0
  2274  00FA56  00                 	db	0
  2275  00FA57  00                 	db	0
  2276  00FA58  C0                 	db	192
  2277  00FA59  30                 	db	48
  2278  00FA5A  C0                 	db	192
  2279  00FA5B  30                 	db	48
  2280  00FA5C  66                 	db	102
  2281  00FA5D  60                 	db	96
  2282  00FA5E  66                 	db	102
  2283  00FA5F  60                 	db	96
  2284  00FA60  66                 	db	102
  2285  00FA61  60                 	db	96
  2286  00FA62  3F                 	db	63
  2287  00FA63  C0                 	db	192
  2288  00FA64  3F                 	db	63
  2289  00FA65  C0                 	db	192
  2290  00FA66  19                 	db	25
  2291  00FA67  80                 	db	128
  2292  00FA68  19                 	db	25
  2293  00FA69  80                 	db	128
  2294  00FA6A  00                 	db	0
  2295  00FA6B  00                 	db	0
  2296  00FA6C  00                 	db	0
  2297  00FA6D  00                 	db	0
  2298  00FA6E  08                 	db	8
  2299  00FA6F  00                 	db	0
  2300  00FA70  00                 	db	0
  2301  00FA71  00                 	db	0
  2302  00FA72  00                 	db	0
  2303  00FA73  C3                 	db	195
  2304  00FA74  00                 	db	0
  2305  00FA75  C3                 	db	195
  2306  00FA76  00                 	db	0
  2307  00FA77  66                 	db	102
  2308  00FA78  00                 	db	0
  2309  00FA79  3C                 	db	60
  2310  00FA7A  00                 	db	0
  2311  00FA7B  18                 	db	24
  2312  00FA7C  00                 	db	0
  2313  00FA7D  3C                 	db	60
  2314  00FA7E  00                 	db	0
  2315  00FA7F  66                 	db	102
  2316  00FA80  00                 	db	0
  2317  00FA81  C3                 	db	195
  2318  00FA82  00                 	db	0
  2319  00FA83  C3                 	db	195
  2320  00FA84  00                 	db	0
  2321  00FA85  00                 	db	0
  2322  00FA86  00                 	db	0
  2323  00FA87  00                 	db	0
  2324  00FA88  00                 	db	0
  2325  00FA89  08                 	db	8
  2326  00FA8A  00                 	db	0
  2327  00FA8B  00                 	db	0
  2328  00FA8C  00                 	db	0
  2329  00FA8D  00                 	db	0
  2330  00FA8E  C3                 	db	195
  2331  00FA8F  00                 	db	0
  2332  00FA90  C3                 	db	195
  2333  00FA91  00                 	db	0
  2334  00FA92  66                 	db	102
  2335  00FA93  00                 	db	0
  2336  00FA94  3C                 	db	60
  2337  00FA95  00                 	db	0
  2338  00FA96  18                 	db	24
  2339  00FA97  00                 	db	0
  2340  00FA98  18                 	db	24
  2341  00FA99  00                 	db	0
  2342  00FA9A  18                 	db	24
  2343  00FA9B  00                 	db	0
  2344  00FA9C  18                 	db	24
  2345  00FA9D  00                 	db	0
  2346  00FA9E  18                 	db	24
  2347  00FA9F  00                 	db	0
  2348  00FAA0  00                 	db	0
  2349  00FAA1  00                 	db	0
  2350  00FAA2  00                 	db	0
  2351  00FAA3  00                 	db	0
  2352  00FAA4  08                 	db	8
  2353  00FAA5  00                 	db	0
  2354  00FAA6  00                 	db	0
  2355  00FAA7  00                 	db	0
  2356  00FAA8  00                 	db	0
  2357  00FAA9  FF                 	db	255
  2358  00FAAA  00                 	db	0
  2359  00FAAB  03                 	db	3
  2360  00FAAC  00                 	db	0
  2361  00FAAD  06                 	db	6
  2362  00FAAE  00                 	db	0
  2363  00FAAF  0C                 	db	12
  2364  00FAB0  00                 	db	0
  2365  00FAB1  18                 	db	24
  2366  00FAB2  00                 	db	0
  2367  00FAB3  30                 	db	48
  2368  00FAB4  00                 	db	0
  2369  00FAB5  60                 	db	96
  2370  00FAB6  00                 	db	0
  2371  00FAB7  C0                 	db	192
  2372  00FAB8  00                 	db	0
  2373  00FAB9  FF                 	db	255
  2374  00FABA  00                 	db	0
  2375  00FABB  00                 	db	0
  2376  00FABC  00                 	db	0
  2377  00FABD  00                 	db	0
  2378  00FABE  00                 	db	0
  2379  00FABF  04                 	db	4
  2380  00FAC0  00                 	db	0
  2381  00FAC1  00                 	db	0
  2382  00FAC2  00                 	db	0
  2383  00FAC3  00                 	db	0
  2384  00FAC4  70                 	db	112
  2385  00FAC5  00                 	db	0
  2386  00FAC6  60                 	db	96
  2387  00FAC7  00                 	db	0
  2388  00FAC8  60                 	db	96
  2389  00FAC9  00                 	db	0
  2390  00FACA  60                 	db	96
  2391  00FACB  00                 	db	0
  2392  00FACC  60                 	db	96
  2393  00FACD  00                 	db	0
  2394  00FACE  60                 	db	96
  2395  00FACF  00                 	db	0
  2396  00FAD0  60                 	db	96
  2397  00FAD1  00                 	db	0
  2398  00FAD2  60                 	db	96
  2399  00FAD3  00                 	db	0
  2400  00FAD4  60                 	db	96
  2401  00FAD5  00                 	db	0
  2402  00FAD6  60                 	db	96
  2403  00FAD7  00                 	db	0
  2404  00FAD8  70                 	db	112
  2405  00FAD9  00                 	db	0
  2406  00FADA  06                 	db	6
  2407  00FADB  00                 	db	0
  2408  00FADC  00                 	db	0
  2409  00FADD  00                 	db	0
  2410  00FADE  00                 	db	0
  2411  00FADF  60                 	db	96
  2412  00FAE0  00                 	db	0
  2413  00FAE1  60                 	db	96
  2414  00FAE2  00                 	db	0
  2415  00FAE3  60                 	db	96
  2416  00FAE4  00                 	db	0
  2417  00FAE5  30                 	db	48
  2418  00FAE6  00                 	db	0
  2419  00FAE7  30                 	db	48
  2420  00FAE8  00                 	db	0
  2421  00FAE9  18                 	db	24
  2422  00FAEA  00                 	db	0
  2423  00FAEB  18                 	db	24
  2424  00FAEC  00                 	db	0
  2425  00FAED  0C                 	db	12
  2426  00FAEE  00                 	db	0
  2427  00FAEF  0C                 	db	12
  2428  00FAF0  00                 	db	0
  2429  00FAF1  00                 	db	0
  2430  00FAF2  00                 	db	0
  2431  00FAF3  00                 	db	0
  2432  00FAF4  00                 	db	0
  2433  00FAF5  04                 	db	4
  2434  00FAF6  00                 	db	0
  2435  00FAF7  00                 	db	0
  2436  00FAF8  00                 	db	0
  2437  00FAF9  00                 	db	0
  2438  00FAFA  70                 	db	112
  2439  00FAFB  00                 	db	0
  2440  00FAFC  30                 	db	48
  2441  00FAFD  00                 	db	0
  2442  00FAFE  30                 	db	48
  2443  00FAFF  00                 	db	0
  2444  00FB00  30                 	db	48
  2445  00FB01  00                 	db	0
  2446  00FB02  30                 	db	48
  2447  00FB03  00                 	db	0
  2448  00FB04  30                 	db	48
  2449  00FB05  00                 	db	0
  2450  00FB06  30                 	db	48
  2451  00FB07  00                 	db	0
  2452  00FB08  30                 	db	48
  2453  00FB09  00                 	db	0
  2454  00FB0A  30                 	db	48
  2455  00FB0B  00                 	db	0
  2456  00FB0C  30                 	db	48
  2457  00FB0D  00                 	db	0
  2458  00FB0E  70                 	db	112
  2459  00FB0F  00                 	db	0
  2460  00FB10  07                 	db	7
  2461  00FB11  00                 	db	0
  2462  00FB12  00                 	db	0
  2463  00FB13  18                 	db	24
  2464  00FB14  00                 	db	0
  2465  00FB15  3C                 	db	60
  2466  00FB16  00                 	db	0
  2467  00FB17  66                 	db	102
  2468  00FB18  00                 	db	0
  2469  00FB19  00                 	db	0
  2470  00FB1A  00                 	db	0
  2471  00FB1B  00                 	db	0
  2472  00FB1C  00                 	db	0
  2473  00FB1D  00                 	db	0
  2474  00FB1E  00                 	db	0
  2475  00FB1F  00                 	db	0
  2476  00FB20  00                 	db	0
  2477  00FB21  00                 	db	0
  2478  00FB22  00                 	db	0
  2479  00FB23  00                 	db	0
  2480  00FB24  00                 	db	0
  2481  00FB25  00                 	db	0
  2482  00FB26  00                 	db	0
  2483  00FB27  00                 	db	0
  2484  00FB28  00                 	db	0
  2485  00FB29  00                 	db	0
  2486  00FB2A  00                 	db	0
  2487  00FB2B  07                 	db	7
  2488  00FB2C  00                 	db	0
  2489  00FB2D  00                 	db	0
  2490  00FB2E  00                 	db	0
  2491  00FB2F  00                 	db	0
  2492  00FB30  00                 	db	0
  2493  00FB31  00                 	db	0
  2494  00FB32  00                 	db	0
  2495  00FB33  00                 	db	0
  2496  00FB34  00                 	db	0
  2497  00FB35  00                 	db	0
  2498  00FB36  00                 	db	0
  2499  00FB37  00                 	db	0
  2500  00FB38  00                 	db	0
  2501  00FB39  00                 	db	0
  2502  00FB3A  00                 	db	0
  2503  00FB3B  00                 	db	0
  2504  00FB3C  00                 	db	0
  2505  00FB3D  00                 	db	0
  2506  00FB3E  00                 	db	0
  2507  00FB3F  00                 	db	0
  2508  00FB40  00                 	db	0
  2509  00FB41  00                 	db	0
  2510  00FB42  00                 	db	0
  2511  00FB43  00                 	db	0
  2512  00FB44  FE                 	db	254
  2513  00FB45  00                 	db	0
  2514  00FB46  04                 	db	4
  2515  00FB47  00                 	db	0
  2516  00FB48  00                 	db	0
  2517  00FB49  00                 	db	0
  2518  00FB4A  00                 	db	0
  2519  00FB4B  60                 	db	96
  2520  00FB4C  00                 	db	0
  2521  00FB4D  30                 	db	48
  2522  00FB4E  00                 	db	0
  2523  00FB4F  00                 	db	0
  2524  00FB50  00                 	db	0
  2525  00FB51  00                 	db	0
  2526  00FB52  00                 	db	0
  2527  00FB53  00                 	db	0
  2528  00FB54  00                 	db	0
  2529  00FB55  00                 	db	0
  2530  00FB56  00                 	db	0
  2531  00FB57  00                 	db	0
  2532  00FB58  00                 	db	0
  2533  00FB59  00                 	db	0
  2534  00FB5A  00                 	db	0
  2535  00FB5B  00                 	db	0
  2536  00FB5C  00                 	db	0
  2537  00FB5D  00                 	db	0
  2538  00FB5E  00                 	db	0
  2539  00FB5F  00                 	db	0
  2540  00FB60  00                 	db	0
  2541  00FB61  07                 	db	7
  2542  00FB62  00                 	db	0
  2543  00FB63  00                 	db	0
  2544  00FB64  00                 	db	0
  2545  00FB65  00                 	db	0
  2546  00FB66  00                 	db	0
  2547  00FB67  00                 	db	0
  2548  00FB68  00                 	db	0
  2549  00FB69  00                 	db	0
  2550  00FB6A  00                 	db	0
  2551  00FB6B  00                 	db	0
  2552  00FB6C  3C                 	db	60
  2553  00FB6D  00                 	db	0
  2554  00FB6E  06                 	db	6
  2555  00FB6F  00                 	db	0
  2556  00FB70  3E                 	db	62
  2557  00FB71  00                 	db	0
  2558  00FB72  66                 	db	102
  2559  00FB73  00                 	db	0
  2560  00FB74  66                 	db	102
  2561  00FB75  00                 	db	0
  2562  00FB76  3E                 	db	62
  2563  00FB77  00                 	db	0
  2564  00FB78  00                 	db	0
  2565  00FB79  00                 	db	0
  2566  00FB7A  00                 	db	0
  2567  00FB7B  00                 	db	0
  2568  00FB7C  07                 	db	7
  2569  00FB7D  00                 	db	0
  2570  00FB7E  00                 	db	0
  2571  00FB7F  00                 	db	0
  2572  00FB80  00                 	db	0
  2573  00FB81  60                 	db	96
  2574  00FB82  00                 	db	0
  2575  00FB83  60                 	db	96
  2576  00FB84  00                 	db	0
  2577  00FB85  60                 	db	96
  2578  00FB86  00                 	db	0
  2579  00FB87  7C                 	db	124
  2580  00FB88  00                 	db	0
  2581  00FB89  66                 	db	102
  2582  00FB8A  00                 	db	0
  2583  00FB8B  66                 	db	102
  2584  00FB8C  00                 	db	0
  2585  00FB8D  66                 	db	102
  2586  00FB8E  00                 	db	0
  2587  00FB8F  66                 	db	102
  2588  00FB90  00                 	db	0
  2589  00FB91  7C                 	db	124
  2590  00FB92  00                 	db	0
  2591  00FB93  00                 	db	0
  2592  00FB94  00                 	db	0
  2593  00FB95  00                 	db	0
  2594  00FB96  00                 	db	0
  2595  00FB97  07                 	db	7
  2596  00FB98  00                 	db	0
  2597  00FB99  00                 	db	0
  2598  00FB9A  00                 	db	0
  2599  00FB9B  00                 	db	0
  2600  00FB9C  00                 	db	0
  2601  00FB9D  00                 	db	0
  2602  00FB9E  00                 	db	0
  2603  00FB9F  00                 	db	0
  2604  00FBA0  00                 	db	0
  2605  00FBA1  00                 	db	0
  2606  00FBA2  3C                 	db	60
  2607  00FBA3  00                 	db	0
  2608  00FBA4  66                 	db	102
  2609  00FBA5  00                 	db	0
  2610  00FBA6  60                 	db	96
  2611  00FBA7  00                 	db	0
  2612  00FBA8  60                 	db	96
  2613  00FBA9  00                 	db	0
  2614  00FBAA  66                 	db	102
  2615  00FBAB  00                 	db	0
  2616  00FBAC  3C                 	db	60
  2617  00FBAD  00                 	db	0
  2618  00FBAE  00                 	db	0
  2619  00FBAF  00                 	db	0
  2620  00FBB0  00                 	db	0
  2621  00FBB1  00                 	db	0
  2622  00FBB2  07                 	db	7
  2623  00FBB3  00                 	db	0
  2624  00FBB4  00                 	db	0
  2625  00FBB5  00                 	db	0
  2626  00FBB6  00                 	db	0
  2627  00FBB7  06                 	db	6
  2628  00FBB8  00                 	db	0
  2629  00FBB9  06                 	db	6
  2630  00FBBA  00                 	db	0
  2631  00FBBB  06                 	db	6
  2632  00FBBC  00                 	db	0
  2633  00FBBD  3E                 	db	62
  2634  00FBBE  00                 	db	0
  2635  00FBBF  66                 	db	102
  2636  00FBC0  00                 	db	0
  2637  00FBC1  66                 	db	102
  2638  00FBC2  00                 	db	0
  2639  00FBC3  66                 	db	102
  2640  00FBC4  00                 	db	0
  2641  00FBC5  66                 	db	102
  2642  00FBC6  00                 	db	0
  2643  00FBC7  3E                 	db	62
  2644  00FBC8  00                 	db	0
  2645  00FBC9  00                 	db	0
  2646  00FBCA  00                 	db	0
  2647  00FBCB  00                 	db	0
  2648  00FBCC  00                 	db	0
  2649  00FBCD  07                 	db	7
  2650  00FBCE  00                 	db	0
  2651  00FBCF  00                 	db	0
  2652  00FBD0  00                 	db	0
  2653  00FBD1  00                 	db	0
  2654  00FBD2  00                 	db	0
  2655  00FBD3  00                 	db	0
  2656  00FBD4  00                 	db	0
  2657  00FBD5  00                 	db	0
  2658  00FBD6  00                 	db	0
  2659  00FBD7  00                 	db	0
  2660  00FBD8  3C                 	db	60
  2661  00FBD9  00                 	db	0
  2662  00FBDA  66                 	db	102
  2663  00FBDB  00                 	db	0
  2664  00FBDC  7E                 	db	126
  2665  00FBDD  00                 	db	0
  2666  00FBDE  60                 	db	96
  2667  00FBDF  00                 	db	0
  2668  00FBE0  66                 	db	102
  2669  00FBE1  00                 	db	0
  2670  00FBE2  3C                 	db	60
  2671  00FBE3  00                 	db	0
  2672  00FBE4  00                 	db	0
  2673  00FBE5  00                 	db	0
  2674  00FBE6  00                 	db	0
  2675  00FBE7  00                 	db	0
  2676  00FBE8  04                 	db	4
  2677  00FBE9  00                 	db	0
  2678  00FBEA  00                 	db	0
  2679  00FBEB  00                 	db	0
  2680  00FBEC  00                 	db	0
  2681  00FBED  30                 	db	48
  2682  00FBEE  00                 	db	0
  2683  00FBEF  60                 	db	96
  2684  00FBF0  00                 	db	0
  2685  00FBF1  60                 	db	96
  2686  00FBF2  00                 	db	0
  2687  00FBF3  70                 	db	112
  2688  00FBF4  00                 	db	0
  2689  00FBF5  60                 	db	96
  2690  00FBF6  00                 	db	0
  2691  00FBF7  60                 	db	96
  2692  00FBF8  00                 	db	0
  2693  00FBF9  60                 	db	96
  2694  00FBFA  00                 	db	0
  2695  00FBFB  60                 	db	96
  2696  00FBFC  00                 	db	0
  2697  00FBFD  60                 	db	96
  2698  00FBFE  00                 	db	0
  2699  00FBFF  00                 	db	0
  2700  00FC00  00                 	db	0
  2701  00FC01  00                 	db	0
  2702  00FC02  00                 	db	0
  2703  00FC03  07                 	db	7
  2704  00FC04  00                 	db	0
  2705  00FC05  00                 	db	0
  2706  00FC06  00                 	db	0
  2707  00FC07  00                 	db	0
  2708  00FC08  00                 	db	0
  2709  00FC09  00                 	db	0
  2710  00FC0A  00                 	db	0
  2711  00FC0B  00                 	db	0
  2712  00FC0C  00                 	db	0
  2713  00FC0D  00                 	db	0
  2714  00FC0E  3E                 	db	62
  2715  00FC0F  00                 	db	0
  2716  00FC10  66                 	db	102
  2717  00FC11  00                 	db	0
  2718  00FC12  66                 	db	102
  2719  00FC13  00                 	db	0
  2720  00FC14  66                 	db	102
  2721  00FC15  00                 	db	0
  2722  00FC16  66                 	db	102
  2723  00FC17  00                 	db	0
  2724  00FC18  3E                 	db	62
  2725  00FC19  00                 	db	0
  2726  00FC1A  06                 	db	6
  2727  00FC1B  00                 	db	0
  2728  00FC1C  7C                 	db	124
  2729  00FC1D  00                 	db	0
  2730  00FC1E  07                 	db	7
  2731  00FC1F  00                 	db	0
  2732  00FC20  00                 	db	0
  2733  00FC21  00                 	db	0
  2734  00FC22  00                 	db	0
  2735  00FC23  60                 	db	96
  2736  00FC24  00                 	db	0
  2737  00FC25  60                 	db	96
  2738  00FC26  00                 	db	0
  2739  00FC27  60                 	db	96
  2740  00FC28  00                 	db	0
  2741  00FC29  7C                 	db	124
  2742  00FC2A  00                 	db	0
  2743  00FC2B  76                 	db	118
  2744  00FC2C  00                 	db	0
  2745  00FC2D  66                 	db	102
  2746  00FC2E  00                 	db	0
  2747  00FC2F  66                 	db	102
  2748  00FC30  00                 	db	0
  2749  00FC31  66                 	db	102
  2750  00FC32  00                 	db	0
  2751  00FC33  66                 	db	102
  2752  00FC34  00                 	db	0
  2753  00FC35  00                 	db	0
  2754  00FC36  00                 	db	0
  2755  00FC37  00                 	db	0
  2756  00FC38  00                 	db	0
  2757  00FC39  03                 	db	3
  2758  00FC3A  00                 	db	0
  2759  00FC3B  00                 	db	0
  2760  00FC3C  00                 	db	0
  2761  00FC3D  00                 	db	0
  2762  00FC3E  60                 	db	96
  2763  00FC3F  00                 	db	0
  2764  00FC40  00                 	db	0
  2765  00FC41  00                 	db	0
  2766  00FC42  00                 	db	0
  2767  00FC43  00                 	db	0
  2768  00FC44  60                 	db	96
  2769  00FC45  00                 	db	0
  2770  00FC46  60                 	db	96
  2771  00FC47  00                 	db	0
  2772  00FC48  60                 	db	96
  2773  00FC49  00                 	db	0
  2774  00FC4A  60                 	db	96
  2775  00FC4B  00                 	db	0
  2776  00FC4C  60                 	db	96
  2777  00FC4D  00                 	db	0
  2778  00FC4E  60                 	db	96
  2779  00FC4F  00                 	db	0
  2780  00FC50  00                 	db	0
  2781  00FC51  00                 	db	0
  2782  00FC52  00                 	db	0
  2783  00FC53  00                 	db	0
  2784  00FC54  03                 	db	3
  2785  00FC55  00                 	db	0
  2786  00FC56  00                 	db	0
  2787  00FC57  00                 	db	0
  2788  00FC58  00                 	db	0
  2789  00FC59  60                 	db	96
  2790  00FC5A  00                 	db	0
  2791  00FC5B  00                 	db	0
  2792  00FC5C  00                 	db	0
  2793  00FC5D  00                 	db	0
  2794  00FC5E  00                 	db	0
  2795  00FC5F  60                 	db	96
  2796  00FC60  00                 	db	0
  2797  00FC61  60                 	db	96
  2798  00FC62  00                 	db	0
  2799  00FC63  60                 	db	96
  2800  00FC64  00                 	db	0
  2801  00FC65  60                 	db	96
  2802  00FC66  00                 	db	0
  2803  00FC67  60                 	db	96
  2804  00FC68  00                 	db	0
  2805  00FC69  60                 	db	96
  2806  00FC6A  00                 	db	0
  2807  00FC6B  60                 	db	96
  2808  00FC6C  00                 	db	0
  2809  00FC6D  60                 	db	96
  2810  00FC6E  00                 	db	0
  2811  00FC6F  07                 	db	7
  2812  00FC70  00                 	db	0
  2813  00FC71  00                 	db	0
  2814  00FC72  00                 	db	0
  2815  00FC73  00                 	db	0
  2816  00FC74  60                 	db	96
  2817  00FC75  00                 	db	0
  2818  00FC76  60                 	db	96
  2819  00FC77  00                 	db	0
  2820  00FC78  60                 	db	96
  2821  00FC79  00                 	db	0
  2822  00FC7A  6C                 	db	108
  2823  00FC7B  00                 	db	0
  2824  00FC7C  78                 	db	120
  2825  00FC7D  00                 	db	0
  2826  00FC7E  70                 	db	112
  2827  00FC7F  00                 	db	0
  2828  00FC80  78                 	db	120
  2829  00FC81  00                 	db	0
  2830  00FC82  6C                 	db	108
  2831  00FC83  00                 	db	0
  2832  00FC84  66                 	db	102
  2833  00FC85  00                 	db	0
  2834  00FC86  00                 	db	0
  2835  00FC87  00                 	db	0
  2836  00FC88  00                 	db	0
  2837  00FC89  00                 	db	0
  2838  00FC8A  03                 	db	3
  2839  00FC8B  00                 	db	0
  2840  00FC8C  00                 	db	0
  2841  00FC8D  00                 	db	0
  2842  00FC8E  00                 	db	0
  2843  00FC8F  60                 	db	96
  2844  00FC90  00                 	db	0
  2845  00FC91  60                 	db	96
  2846  00FC92  00                 	db	0
  2847  00FC93  60                 	db	96
  2848  00FC94  00                 	db	0
  2849  00FC95  60                 	db	96
  2850  00FC96  00                 	db	0
  2851  00FC97  60                 	db	96
  2852  00FC98  00                 	db	0
  2853  00FC99  60                 	db	96
  2854  00FC9A  00                 	db	0
  2855  00FC9B  60                 	db	96
  2856  00FC9C  00                 	db	0
  2857  00FC9D  60                 	db	96
  2858  00FC9E  00                 	db	0
  2859  00FC9F  60                 	db	96
  2860  00FCA0  00                 	db	0
  2861  00FCA1  00                 	db	0
  2862  00FCA2  00                 	db	0
  2863  00FCA3  00                 	db	0
  2864  00FCA4  00                 	db	0
  2865  00FCA5  09                 	db	9
  2866  00FCA6  00                 	db	0
  2867  00FCA7  00                 	db	0
  2868  00FCA8  00                 	db	0
  2869  00FCA9  00                 	db	0
  2870  00FCAA  00                 	db	0
  2871  00FCAB  00                 	db	0
  2872  00FCAC  00                 	db	0
  2873  00FCAD  00                 	db	0
  2874  00FCAE  00                 	db	0
  2875  00FCAF  00                 	db	0
  2876  00FCB0  7F                 	db	127
  2877  00FCB1  00                 	db	0
  2878  00FCB2  6D                 	db	109
  2879  00FCB3  80                 	db	128
  2880  00FCB4  6D                 	db	109
  2881  00FCB5  80                 	db	128
  2882  00FCB6  6D                 	db	109
  2883  00FCB7  80                 	db	128
  2884  00FCB8  6D                 	db	109
  2885  00FCB9  80                 	db	128
  2886  00FCBA  6D                 	db	109
  2887  00FCBB  80                 	db	128
  2888  00FCBC  00                 	db	0
  2889  00FCBD  00                 	db	0
  2890  00FCBE  00                 	db	0
  2891  00FCBF  00                 	db	0
  2892  00FCC0  07                 	db	7
  2893  00FCC1  00                 	db	0
  2894  00FCC2  00                 	db	0
  2895  00FCC3  00                 	db	0
  2896  00FCC4  00                 	db	0
  2897  00FCC5  00                 	db	0
  2898  00FCC6  00                 	db	0
  2899  00FCC7  00                 	db	0
  2900  00FCC8  00                 	db	0
  2901  00FCC9  00                 	db	0
  2902  00FCCA  00                 	db	0
  2903  00FCCB  7C                 	db	124
  2904  00FCCC  00                 	db	0
  2905  00FCCD  76                 	db	118
  2906  00FCCE  00                 	db	0
  2907  00FCCF  66                 	db	102
  2908  00FCD0  00                 	db	0
  2909  00FCD1  66                 	db	102
  2910  00FCD2  00                 	db	0
  2911  00FCD3  66                 	db	102
  2912  00FCD4  00                 	db	0
  2913  00FCD5  66                 	db	102
  2914  00FCD6  00                 	db	0
  2915  00FCD7  00                 	db	0
  2916  00FCD8  00                 	db	0
  2917  00FCD9  00                 	db	0
  2918  00FCDA  00                 	db	0
  2919  00FCDB  07                 	db	7
  2920  00FCDC  00                 	db	0
  2921  00FCDD  00                 	db	0
  2922  00FCDE  00                 	db	0
  2923  00FCDF  00                 	db	0
  2924  00FCE0  00                 	db	0
  2925  00FCE1  00                 	db	0
  2926  00FCE2  00                 	db	0
  2927  00FCE3  00                 	db	0
  2928  00FCE4  00                 	db	0
  2929  00FCE5  00                 	db	0
  2930  00FCE6  3C                 	db	60
  2931  00FCE7  00                 	db	0
  2932  00FCE8  66                 	db	102
  2933  00FCE9  00                 	db	0
  2934  00FCEA  66                 	db	102
  2935  00FCEB  00                 	db	0
  2936  00FCEC  66                 	db	102
  2937  00FCED  00                 	db	0
  2938  00FCEE  66                 	db	102
  2939  00FCEF  00                 	db	0
  2940  00FCF0  3C                 	db	60
  2941  00FCF1  00                 	db	0
  2942  00FCF2  00                 	db	0
  2943  00FCF3  00                 	db	0
  2944  00FCF4  00                 	db	0
  2945  00FCF5  00                 	db	0
  2946  00FCF6  07                 	db	7
  2947  00FCF7  00                 	db	0
  2948  00FCF8  00                 	db	0
  2949  00FCF9  00                 	db	0
  2950  00FCFA  00                 	db	0
  2951  00FCFB  00                 	db	0
  2952  00FCFC  00                 	db	0
  2953  00FCFD  00                 	db	0
  2954  00FCFE  00                 	db	0
  2955  00FCFF  00                 	db	0
  2956  00FD00  00                 	db	0
  2957  00FD01  7C                 	db	124
  2958  00FD02  00                 	db	0
  2959  00FD03  66                 	db	102
  2960  00FD04  00                 	db	0
  2961  00FD05  66                 	db	102
  2962  00FD06  00                 	db	0
  2963  00FD07  66                 	db	102
  2964  00FD08  00                 	db	0
  2965  00FD09  66                 	db	102
  2966  00FD0A  00                 	db	0
  2967  00FD0B  7C                 	db	124
  2968  00FD0C  00                 	db	0
  2969  00FD0D  60                 	db	96
  2970  00FD0E  00                 	db	0
  2971  00FD0F  60                 	db	96
  2972  00FD10  00                 	db	0
  2973  00FD11  07                 	db	7
  2974  00FD12  00                 	db	0
  2975  00FD13  00                 	db	0
  2976  00FD14  00                 	db	0
  2977  00FD15  00                 	db	0
  2978  00FD16  00                 	db	0
  2979  00FD17  00                 	db	0
  2980  00FD18  00                 	db	0
  2981  00FD19  00                 	db	0
  2982  00FD1A  00                 	db	0
  2983  00FD1B  00                 	db	0
  2984  00FD1C  3E                 	db	62
  2985  00FD1D  00                 	db	0
  2986  00FD1E  66                 	db	102
  2987  00FD1F  00                 	db	0
  2988  00FD20  66                 	db	102
  2989  00FD21  00                 	db	0
  2990  00FD22  66                 	db	102
  2991  00FD23  00                 	db	0
  2992  00FD24  66                 	db	102
  2993  00FD25  00                 	db	0
  2994  00FD26  3E                 	db	62
  2995  00FD27  00                 	db	0
  2996  00FD28  06                 	db	6
  2997  00FD29  00                 	db	0
  2998  00FD2A  06                 	db	6
  2999  00FD2B  00                 	db	0
  3000  00FD2C  04                 	db	4
  3001  00FD2D  00                 	db	0
  3002  00FD2E  00                 	db	0
  3003  00FD2F  00                 	db	0
  3004  00FD30  00                 	db	0
  3005  00FD31  00                 	db	0
  3006  00FD32  00                 	db	0
  3007  00FD33  00                 	db	0
  3008  00FD34  00                 	db	0
  3009  00FD35  00                 	db	0
  3010  00FD36  00                 	db	0
  3011  00FD37  70                 	db	112
  3012  00FD38  00                 	db	0
  3013  00FD39  60                 	db	96
  3014  00FD3A  00                 	db	0
  3015  00FD3B  60                 	db	96
  3016  00FD3C  00                 	db	0
  3017  00FD3D  60                 	db	96
  3018  00FD3E  00                 	db	0
  3019  00FD3F  60                 	db	96
  3020  00FD40  00                 	db	0
  3021  00FD41  60                 	db	96
  3022  00FD42  00                 	db	0
  3023  00FD43  00                 	db	0
  3024  00FD44  00                 	db	0
  3025  00FD45  00                 	db	0
  3026  00FD46  00                 	db	0
  3027  00FD47  06                 	db	6
  3028  00FD48  00                 	db	0
  3029  00FD49  00                 	db	0
  3030  00FD4A  00                 	db	0
  3031  00FD4B  00                 	db	0
  3032  00FD4C  00                 	db	0
  3033  00FD4D  00                 	db	0
  3034  00FD4E  00                 	db	0
  3035  00FD4F  00                 	db	0
  3036  00FD50  00                 	db	0
  3037  00FD51  00                 	db	0
  3038  00FD52  38                 	db	56
  3039  00FD53  00                 	db	0
  3040  00FD54  6C                 	db	108
  3041  00FD55  00                 	db	0
  3042  00FD56  30                 	db	48
  3043  00FD57  00                 	db	0
  3044  00FD58  18                 	db	24
  3045  00FD59  00                 	db	0
  3046  00FD5A  6C                 	db	108
  3047  00FD5B  00                 	db	0
  3048  00FD5C  38                 	db	56
  3049  00FD5D  00                 	db	0
  3050  00FD5E  00                 	db	0
  3051  00FD5F  00                 	db	0
  3052  00FD60  00                 	db	0
  3053  00FD61  00                 	db	0
  3054  00FD62  04                 	db	4
  3055  00FD63  00                 	db	0
  3056  00FD64  00                 	db	0
  3057  00FD65  00                 	db	0
  3058  00FD66  00                 	db	0
  3059  00FD67  00                 	db	0
  3060  00FD68  00                 	db	0
  3061  00FD69  60                 	db	96
  3062  00FD6A  00                 	db	0
  3063  00FD6B  60                 	db	96
  3064  00FD6C  00                 	db	0
  3065  00FD6D  70                 	db	112
  3066  00FD6E  00                 	db	0
  3067  00FD6F  60                 	db	96
  3068  00FD70  00                 	db	0
  3069  00FD71  60                 	db	96
  3070  00FD72  00                 	db	0
  3071  00FD73  60                 	db	96
  3072  00FD74  00                 	db	0
  3073  00FD75  60                 	db	96
  3074  00FD76  00                 	db	0
  3075  00FD77  30                 	db	48
  3076  00FD78  00                 	db	0
  3077  00FD79  00                 	db	0
  3078  00FD7A  00                 	db	0
  3079  00FD7B  00                 	db	0
  3080  00FD7C  00                 	db	0
  3081  00FD7D  07                 	db	7
  3082  00FD7E  00                 	db	0
  3083  00FD7F  00                 	db	0
  3084  00FD80  00                 	db	0
  3085  00FD81  00                 	db	0
  3086  00FD82  00                 	db	0
  3087  00FD83  00                 	db	0
  3088  00FD84  00                 	db	0
  3089  00FD85  00                 	db	0
  3090  00FD86  00                 	db	0
  3091  00FD87  00                 	db	0
  3092  00FD88  66                 	db	102
  3093  00FD89  00                 	db	0
  3094  00FD8A  66                 	db	102
  3095  00FD8B  00                 	db	0
  3096  00FD8C  66                 	db	102
  3097  00FD8D  00                 	db	0
  3098  00FD8E  66                 	db	102
  3099  00FD8F  00                 	db	0
  3100  00FD90  6E                 	db	110
  3101  00FD91  00                 	db	0
  3102  00FD92  3E                 	db	62
  3103  00FD93  00                 	db	0
  3104  00FD94  00                 	db	0
  3105  00FD95  00                 	db	0
  3106  00FD96  00                 	db	0
  3107  00FD97  00                 	db	0
  3108  00FD98  07                 	db	7
  3109  00FD99  00                 	db	0
  3110  00FD9A  00                 	db	0
  3111  00FD9B  00                 	db	0
  3112  00FD9C  00                 	db	0
  3113  00FD9D  00                 	db	0
  3114  00FD9E  00                 	db	0
  3115  00FD9F  00                 	db	0
  3116  00FDA0  00                 	db	0
  3117  00FDA1  00                 	db	0
  3118  00FDA2  00                 	db	0
  3119  00FDA3  66                 	db	102
  3120  00FDA4  00                 	db	0
  3121  00FDA5  66                 	db	102
  3122  00FDA6  00                 	db	0
  3123  00FDA7  3C                 	db	60
  3124  00FDA8  00                 	db	0
  3125  00FDA9  3C                 	db	60
  3126  00FDAA  00                 	db	0
  3127  00FDAB  18                 	db	24
  3128  00FDAC  00                 	db	0
  3129  00FDAD  18                 	db	24
  3130  00FDAE  00                 	db	0
  3131  00FDAF  00                 	db	0
  3132  00FDB0  00                 	db	0
  3133  00FDB1  00                 	db	0
  3134  00FDB2  00                 	db	0
  3135  00FDB3  09                 	db	9
  3136  00FDB4  00                 	db	0
  3137  00FDB5  00                 	db	0
  3138  00FDB6  00                 	db	0
  3139  00FDB7  00                 	db	0
  3140  00FDB8  00                 	db	0
  3141  00FDB9  00                 	db	0
  3142  00FDBA  00                 	db	0
  3143  00FDBB  00                 	db	0
  3144  00FDBC  00                 	db	0
  3145  00FDBD  00                 	db	0
  3146  00FDBE  6D                 	db	109
  3147  00FDBF  80                 	db	128
  3148  00FDC0  6D                 	db	109
  3149  00FDC1  80                 	db	128
  3150  00FDC2  7F                 	db	127
  3151  00FDC3  80                 	db	128
  3152  00FDC4  7F                 	db	127
  3153  00FDC5  80                 	db	128
  3154  00FDC6  33                 	db	51
  3155  00FDC7  00                 	db	0
  3156  00FDC8  33                 	db	51
  3157  00FDC9  00                 	db	0
  3158  00FDCA  00                 	db	0
  3159  00FDCB  00                 	db	0
  3160  00FDCC  00                 	db	0
  3161  00FDCD  00                 	db	0
  3162  00FDCE  06                 	db	6
  3163  00FDCF  00                 	db	0
  3164  00FDD0  00                 	db	0
  3165  00FDD1  00                 	db	0
  3166  00FDD2  00                 	db	0
  3167  00FDD3  00                 	db	0
  3168  00FDD4  00                 	db	0
  3169  00FDD5  00                 	db	0
  3170  00FDD6  00                 	db	0
  3171  00FDD7  00                 	db	0
  3172  00FDD8  00                 	db	0
  3173  00FDD9  6C                 	db	108
  3174  00FDDA  00                 	db	0
  3175  00FDDB  6C                 	db	108
  3176  00FDDC  00                 	db	0
  3177  00FDDD  38                 	db	56
  3178  00FDDE  00                 	db	0
  3179  00FDDF  38                 	db	56
  3180  00FDE0  00                 	db	0
  3181  00FDE1  6C                 	db	108
  3182  00FDE2  00                 	db	0
  3183  00FDE3  6C                 	db	108
  3184  00FDE4  00                 	db	0
  3185  00FDE5  00                 	db	0
  3186  00FDE6  00                 	db	0
  3187  00FDE7  00                 	db	0
  3188  00FDE8  00                 	db	0
  3189  00FDE9  06                 	db	6
  3190  00FDEA  00                 	db	0
  3191  00FDEB  00                 	db	0
  3192  00FDEC  00                 	db	0
  3193  00FDED  00                 	db	0
  3194  00FDEE  00                 	db	0
  3195  00FDEF  00                 	db	0
  3196  00FDF0  00                 	db	0
  3197  00FDF1  00                 	db	0
  3198  00FDF2  00                 	db	0
  3199  00FDF3  00                 	db	0
  3200  00FDF4  6C                 	db	108
  3201  00FDF5  00                 	db	0
  3202  00FDF6  6C                 	db	108
  3203  00FDF7  00                 	db	0
  3204  00FDF8  6C                 	db	108
  3205  00FDF9  00                 	db	0
  3206  00FDFA  6C                 	db	108
  3207  00FDFB  00                 	db	0
  3208  00FDFC  38                 	db	56
  3209  00FDFD  00                 	db	0
  3210  00FDFE  30                 	db	48
  3211  00FDFF  00                 	db	0
  3212  00FE00  30                 	db	48
  3213  00FE01  00                 	db	0
  3214  00FE02  E0                 	db	224
  3215  00FE03  00                 	db	0
  3216  00FE04  06                 	db	6
  3217  00FE05  00                 	db	0
  3218  00FE06  00                 	db	0
  3219  00FE07  00                 	db	0
  3220  00FE08  00                 	db	0
  3221  00FE09  00                 	db	0
  3222  00FE0A  00                 	db	0
  3223  00FE0B  00                 	db	0
  3224  00FE0C  00                 	db	0
  3225  00FE0D  00                 	db	0
  3226  00FE0E  00                 	db	0
  3227  00FE0F  7C                 	db	124
  3228  00FE10  00                 	db	0
  3229  00FE11  0C                 	db	12
  3230  00FE12  00                 	db	0
  3231  00FE13  18                 	db	24
  3232  00FE14  00                 	db	0
  3233  00FE15  30                 	db	48
  3234  00FE16  00                 	db	0
  3235  00FE17  60                 	db	96
  3236  00FE18  00                 	db	0
  3237  00FE19  7C                 	db	124
  3238  00FE1A  00                 	db	0
  3239  00FE1B  00                 	db	0
  3240  00FE1C  00                 	db	0
  3241  00FE1D  00                 	db	0
  3242  00FE1E  00                 	db	0
  3243  00FE1F  05                 	db	5
  3244  00FE20  00                 	db	0
  3245  00FE21  00                 	db	0
  3246  00FE22  18                 	db	24
  3247  00FE23  00                 	db	0
  3248  00FE24  30                 	db	48
  3249  00FE25  00                 	db	0
  3250  00FE26  30                 	db	48
  3251  00FE27  00                 	db	0
  3252  00FE28  30                 	db	48
  3253  00FE29  00                 	db	0
  3254  00FE2A  30                 	db	48
  3255  00FE2B  00                 	db	0
  3256  00FE2C  60                 	db	96
  3257  00FE2D  00                 	db	0
  3258  00FE2E  30                 	db	48
  3259  00FE2F  00                 	db	0
  3260  00FE30  30                 	db	48
  3261  00FE31  00                 	db	0
  3262  00FE32  30                 	db	48
  3263  00FE33  00                 	db	0
  3264  00FE34  30                 	db	48
  3265  00FE35  00                 	db	0
  3266  00FE36  18                 	db	24
  3267  00FE37  00                 	db	0
  3268  00FE38  00                 	db	0
  3269  00FE39  00                 	db	0
  3270  00FE3A  03                 	db	3
  3271  00FE3B  00                 	db	0
  3272  00FE3C  00                 	db	0
  3273  00FE3D  00                 	db	0
  3274  00FE3E  00                 	db	0
  3275  00FE3F  60                 	db	96
  3276  00FE40  00                 	db	0
  3277  00FE41  60                 	db	96
  3278  00FE42  00                 	db	0
  3279  00FE43  60                 	db	96
  3280  00FE44  00                 	db	0
  3281  00FE45  60                 	db	96
  3282  00FE46  00                 	db	0
  3283  00FE47  60                 	db	96
  3284  00FE48  00                 	db	0
  3285  00FE49  60                 	db	96
  3286  00FE4A  00                 	db	0
  3287  00FE4B  60                 	db	96
  3288  00FE4C  00                 	db	0
  3289  00FE4D  60                 	db	96
  3290  00FE4E  00                 	db	0
  3291  00FE4F  60                 	db	96
  3292  00FE50  00                 	db	0
  3293  00FE51  60                 	db	96
  3294  00FE52  00                 	db	0
  3295  00FE53  00                 	db	0
  3296  00FE54  00                 	db	0
  3297  00FE55  05                 	db	5
  3298  00FE56  00                 	db	0
  3299  00FE57  00                 	db	0
  3300  00FE58  60                 	db	96
  3301  00FE59  00                 	db	0
  3302  00FE5A  30                 	db	48
  3303  00FE5B  00                 	db	0
  3304  00FE5C  30                 	db	48
  3305  00FE5D  00                 	db	0
  3306  00FE5E  30                 	db	48
  3307  00FE5F  00                 	db	0
  3308  00FE60  30                 	db	48
  3309  00FE61  00                 	db	0
  3310  00FE62  18                 	db	24
  3311  00FE63  00                 	db	0
  3312  00FE64  30                 	db	48
  3313  00FE65  00                 	db	0
  3314  00FE66  30                 	db	48
  3315  00FE67  00                 	db	0
  3316  00FE68  30                 	db	48
  3317  00FE69  00                 	db	0
  3318  00FE6A  30                 	db	48
  3319  00FE6B  00                 	db	0
  3320  00FE6C  60                 	db	96
  3321  00FE6D  00                 	db	0
  3322  00FE6E  00                 	db	0
  3323  00FE6F  00                 	db	0
  3324  00FE70  08                 	db	8
  3325  00FE71  00                 	db	0
  3326  00FE72  00                 	db	0
  3327  00FE73  00                 	db	0
  3328  00FE74  00                 	db	0
  3329  00FE75  00                 	db	0
  3330  00FE76  00                 	db	0
  3331  00FE77  3B                 	db	59
  3332  00FE78  00                 	db	0
  3333  00FE79  6E                 	db	110
  3334  00FE7A  00                 	db	0
  3335  00FE7B  00                 	db	0
  3336  00FE7C  00                 	db	0
  3337  00FE7D  00                 	db	0
  3338  00FE7E  00                 	db	0
  3339  00FE7F  00                 	db	0
  3340  00FE80  00                 	db	0
  3341  00FE81  00                 	db	0
  3342  00FE82  00                 	db	0
  3343  00FE83  00                 	db	0
  3344  00FE84  00                 	db	0
  3345  00FE85  00                 	db	0
  3346  00FE86  00                 	db	0
  3347  00FE87  00                 	db	0
  3348  00FE88  00                 	db	0
  3349  00FE89  00                 	db	0
  3350  00FE8A  00                 	db	0
  3351  00FE8B  04                 	db	4
  3352  00FE8C  00                 	db	0
  3353  00FE8D  00                 	db	0
  3354  00FE8E  00                 	db	0
  3355  00FE8F  00                 	db	0
  3356  00FE90  00                 	db	0
  3357  00FE91  00                 	db	0
  3358  00FE92  F0                 	db	240
  3359  00FE93  00                 	db	0
  3360  00FE94  F0                 	db	240
  3361  00FE95  00                 	db	0
  3362  00FE96  F0                 	db	240
  3363  00FE97  00                 	db	0
  3364  00FE98  F0                 	db	240
  3365  00FE99  00                 	db	0
  3366  00FE9A  F0                 	db	240
  3367  00FE9B  00                 	db	0
  3368  00FE9C  F0                 	db	240
  3369  00FE9D  00                 	db	0
  3370  00FE9E  F0                 	db	240
  3371  00FE9F  00                 	db	0
  3372  00FEA0  F0                 	db	240
  3373  00FEA1  00                 	db	0
  3374  00FEA2  00                 	db	0
  3375  00FEA3  00                 	db	0
  3376  00FEA4  00                 	db	0
  3377  00FEA5  00                 	db	0
  3378  00FEA6  0A                 	db	10
  3379  00FEA7  00                 	db	0
  3380  00FEA8  00                 	db	0
  3381  00FEA9  00                 	db	0
  3382  00FEAA  00                 	db	0
  3383  00FEAB  FF                 	db	255
  3384  00FEAC  00                 	db	0
  3385  00FEAD  18                 	db	24
  3386  00FEAE  00                 	db	0
  3387  00FEAF  18                 	db	24
  3388  00FEB0  00                 	db	0
  3389  00FEB1  18                 	db	24
  3390  00FEB2  00                 	db	0
  3391  00FEB3  1F                 	db	31
  3392  00FEB4  00                 	db	0
  3393  00FEB5  19                 	db	25
  3394  00FEB6  80                 	db	128
  3395  00FEB7  19                 	db	25
  3396  00FEB8  80                 	db	128
  3397  00FEB9  1F                 	db	31
  3398  00FEBA  80                 	db	128
  3399  00FEBB  1F                 	db	31
  3400  00FEBC  00                 	db	0
  3401  00FEBD  00                 	db	0
  3402  00FEBE  00                 	db	0
  3403  00FEBF  00                 	db	0
  3404  00FEC0  00                 	db	0
  3405  00FEC1  07                 	db	7
  3406  00FEC2  0C                 	db	12
  3407  00FEC3  00                 	db	0
  3408  00FEC4  18                 	db	24
  3409  00FEC5  00                 	db	0
  3410  00FEC6  7E                 	db	126
  3411  00FEC7  00                 	db	0
  3412  00FEC8  60                 	db	96
  3413  00FEC9  00                 	db	0
  3414  00FECA  60                 	db	96
  3415  00FECB  00                 	db	0
  3416  00FECC  60                 	db	96
  3417  00FECD  00                 	db	0
  3418  00FECE  60                 	db	96
  3419  00FECF  00                 	db	0
  3420  00FED0  60                 	db	96
  3421  00FED1  00                 	db	0
  3422  00FED2  60                 	db	96
  3423  00FED3  00                 	db	0
  3424  00FED4  60                 	db	96
  3425  00FED5  00                 	db	0
  3426  00FED6  60                 	db	96
  3427  00FED7  00                 	db	0
  3428  00FED8  00                 	db	0
  3429  00FED9  00                 	db	0
  3430  00FEDA  00                 	db	0
  3431  00FEDB  00                 	db	0
  3432  00FEDC  04                 	db	4
  3433  00FEDD  00                 	db	0
  3434  00FEDE  00                 	db	0
  3435  00FEDF  00                 	db	0
  3436  00FEE0  00                 	db	0
  3437  00FEE1  00                 	db	0
  3438  00FEE2  00                 	db	0
  3439  00FEE3  00                 	db	0
  3440  00FEE4  00                 	db	0
  3441  00FEE5  00                 	db	0
  3442  00FEE6  00                 	db	0
  3443  00FEE7  00                 	db	0
  3444  00FEE8  00                 	db	0
  3445  00FEE9  00                 	db	0
  3446  00FEEA  00                 	db	0
  3447  00FEEB  00                 	db	0
  3448  00FEEC  00                 	db	0
  3449  00FEED  00                 	db	0
  3450  00FEEE  00                 	db	0
  3451  00FEEF  00                 	db	0
  3452  00FEF0  00                 	db	0
  3453  00FEF1  30                 	db	48
  3454  00FEF2  00                 	db	0
  3455  00FEF3  60                 	db	96
  3456  00FEF4  00                 	db	0
  3457  00FEF5  00                 	db	0
  3458  00FEF6  00                 	db	0
  3459  00FEF7  06                 	db	6
  3460  00FEF8  00                 	db	0
  3461  00FEF9  00                 	db	0
  3462  00FEFA  00                 	db	0
  3463  00FEFB  00                 	db	0
  3464  00FEFC  0C                 	db	12
  3465  00FEFD  00                 	db	0
  3466  00FEFE  18                 	db	24
  3467  00FEFF  00                 	db	0
  3468  00FF00  00                 	db	0
  3469  00FF01  00                 	db	0
  3470  00FF02  7C                 	db	124
  3471  00FF03  00                 	db	0
  3472  00FF04  60                 	db	96
  3473  00FF05  00                 	db	0
  3474  00FF06  60                 	db	96
  3475  00FF07  00                 	db	0
  3476  00FF08  60                 	db	96
  3477  00FF09  00                 	db	0
  3478  00FF0A  60                 	db	96
  3479  00FF0B  00                 	db	0
  3480  00FF0C  60                 	db	96
  3481  00FF0D  00                 	db	0
  3482  00FF0E  00                 	db	0
  3483  00FF0F  00                 	db	0
  3484  00FF10  00                 	db	0
  3485  00FF11  00                 	db	0
  3486  00FF12  0E                 	db	14
  3487  00FF13  02                 	db	2
  3488  00FF14  00                 	db	0
  3489  00FF15  0A                 	db	10
  3490  00FF16  80                 	db	128
  3491  00FF17  07                 	db	7
  3492  00FF18  00                 	db	0
  3493  00FF19  52                 	db	82
  3494  00FF1A  50                 	db	80
  3495  00FF1B  32                 	db	50
  3496  00FF1C  60                 	db	96
  3497  00FF1D  6F                 	db	111
  3498  00FF1E  B0                 	db	176
  3499  00FF1F  07                 	db	7
  3500  00FF20  00                 	db	0
  3501  00FF21  6F                 	db	111
  3502  00FF22  B0                 	db	176
  3503  00FF23  32                 	db	50
  3504  00FF24  60                 	db	96
  3505  00FF25  52                 	db	82
  3506  00FF26  50                 	db	80
  3507  00FF27  07                 	db	7
  3508  00FF28  00                 	db	0
  3509  00FF29  0A                 	db	10
  3510  00FF2A  80                 	db	128
  3511  00FF2B  02                 	db	2
  3512  00FF2C  00                 	db	0
  3513  00FF2D  0E                 	db	14
  3514  00FF2E  03                 	db	3
  3515  00FF2F  80                 	db	128
  3516  00FF30  07                 	db	7
  3517  00FF31  80                 	db	128
  3518  00FF32  07                 	db	7
  3519  00FF33  80                 	db	128
  3520  00FF34  07                 	db	7
  3521  00FF35  80                 	db	128
  3522  00FF36  07                 	db	7
  3523  00FF37  80                 	db	128
  3524  00FF38  07                 	db	7
  3525  00FF39  00                 	db	0
  3526  00FF3A  0F                 	db	15
  3527  00FF3B  80                 	db	128
  3528  00FF3C  7D                 	db	125
  3529  00FF3D  E0                 	db	224
  3530  00FF3E  FF                 	db	255
  3531  00FF3F  F0                 	db	240
  3532  00FF40  F7                 	db	247
  3533  00FF41  78                 	db	120
  3534  00FF42  E0                 	db	224
  3535  00FF43  7C                 	db	124
  3536  00FF44  C0                 	db	192
  3537  00FF45  3C                 	db	60
  3538  00FF46  00                 	db	0
  3539  00FF47  1C                 	db	28
  3540  00FF48  0D                 	db	13
  3541  00FF49  07                 	db	7
  3542  00FF4A  00                 	db	0
  3543  00FF4B  07                 	db	7
  3544  00FF4C  00                 	db	0
  3545  00FF4D  07                 	db	7
  3546  00FF4E  00                 	db	0
  3547  00FF4F  07                 	db	7
  3548  00FF50  00                 	db	0
  3549  00FF51  07                 	db	7
  3550  00FF52  00                 	db	0
  3551  00FF53  07                 	db	7
  3552  00FF54  00                 	db	0
  3553  00FF55  07                 	db	7
  3554  00FF56  00                 	db	0
  3555  00FF57  07                 	db	7
  3556  00FF58  00                 	db	0
  3557  00FF59  3F                 	db	63
  3558  00FF5A  E0                 	db	224
  3559  00FF5B  1F                 	db	31
  3560  00FF5C  C0                 	db	192
  3561  00FF5D  0F                 	db	15
  3562  00FF5E  80                 	db	128
  3563  00FF5F  07                 	db	7
  3564  00FF60  00                 	db	0
  3565  00FF61  02                 	db	2
  3566  00FF62  00                 	db	0
  3567  00FF63  0D                 	db	13
  3568  00FF64  02                 	db	2
  3569  00FF65  00                 	db	0
  3570  00FF66  07                 	db	7
  3571  00FF67  00                 	db	0
  3572  00FF68  0F                 	db	15
  3573  00FF69  80                 	db	128
  3574  00FF6A  1F                 	db	31
  3575  00FF6B  C0                 	db	192
  3576  00FF6C  3F                 	db	63
  3577  00FF6D  E0                 	db	224
  3578  00FF6E  07                 	db	7
  3579  00FF6F  00                 	db	0
  3580  00FF70  07                 	db	7
  3581  00FF71  00                 	db	0
  3582  00FF72  07                 	db	7
  3583  00FF73  00                 	db	0
  3584  00FF74  07                 	db	7
  3585  00FF75  00                 	db	0
  3586  00FF76  07                 	db	7
  3587  00FF77  00                 	db	0
  3588  00FF78  07                 	db	7
  3589  00FF79  00                 	db	0
  3590  00FF7A  07                 	db	7
  3591  00FF7B  00                 	db	0
  3592  00FF7C  07                 	db	7
  3593  00FF7D  00                 	db	0
  3594  00FF7E  10                 	db	16
  3595  00FF7F  3C                 	db	60
  3596  00FF80  3C                 	db	60
  3597  00FF81  24                 	db	36
  3598  00FF82  24                 	db	36
  3599  00FF83  FF                 	db	255
  3600  00FF84  FF                 	db	255
  3601  00FF85  80                 	db	128
  3602  00FF86  01                 	db	1
  3603  00FF87  88                 	db	136
  3604  00FF88  01                 	db	1
  3605  00FF89  9C                 	db	156
  3606  00FF8A  39                 	db	57
  3607  00FF8B  88                 	db	136
  3608  00FF8C  01                 	db	1
  3609  00FF8D  80                 	db	128
  3610  00FF8E  01                 	db	1
  3611  00FF8F  80                 	db	128
  3612  00FF90  01                 	db	1
  3613  00FF91  80                 	db	128
  3614  00FF92  01                 	db	1
  3615  00FF93  FF                 	db	255
  3616  00FF94  FF                 	db	255
  3617  00FF95  FF                 	db	255
  3618  00FF96  FF                 	db	255
  3619  00FF97  FF                 	db	255
  3620  00FF98  FF                 	db	255
  3621  00FF99  0D                 	db	13
  3622  00FF9A  00                 	db	0
  3623  00FF9B  00                 	db	0
  3624  00FF9C  02                 	db	2
  3625  00FF9D  00                 	db	0
  3626  00FF9E  07                 	db	7
  3627  00FF9F  00                 	db	0
  3628  00FFA0  07                 	db	7
  3629  00FFA1  00                 	db	0
  3630  00FFA2  07                 	db	7
  3631  00FFA3  00                 	db	0
  3632  00FFA4  0A                 	db	10
  3633  00FFA5  80                 	db	128
  3634  00FFA6  12                 	db	18
  3635  00FFA7  40                 	db	64
  3636  00FFA8  17                 	db	23
  3637  00FFA9  40                 	db	64
  3638  00FFAA  10                 	db	16
  3639  00FFAB  40                 	db	64
  3640  00FFAC  48                 	db	72
  3641  00FFAD  90                 	db	144
  3642  00FFAE  07                 	db	7
  3643  00FFAF  00                 	db	0
  3644  00FFB0  10                 	db	16
  3645  00FFB1  40                 	db	64
  3646  00FFB2  02                 	db	2
  3647  00FFB3  00                 	db	0
  3648  00FFB4  10                 	db	16
  3649  00FFB5  00                 	db	0
  3650  00FFB6  00                 	db	0
  3651  00FFB7  00                 	db	0
  3652  00FFB8  00                 	db	0
  3653  00FFB9  00                 	db	0
  3654  00FFBA  00                 	db	0
  3655  00FFBB  3F                 	db	63
  3656  00FFBC  FC                 	db	252
  3657  00FFBD  20                 	db	32
  3658  00FFBE  04                 	db	4
  3659  00FFBF  20                 	db	32
  3660  00FFC0  04                 	db	4
  3661  00FFC1  FF                 	db	255
  3662  00FFC2  FF                 	db	255
  3663  00FFC3  20                 	db	32
  3664  00FFC4  04                 	db	4
  3665  00FFC5  20                 	db	32
  3666  00FFC6  04                 	db	4
  3667  00FFC7  3F                 	db	63
  3668  00FFC8  FC                 	db	252
  3669  00FFC9  00                 	db	0
  3670  00FFCA  00                 	db	0
  3671  00FFCB  00                 	db	0
  3672  00FFCC  00                 	db	0
  3673  00FFCD  00                 	db	0
  3674  00FFCE  00                 	db	0
  3675  00FFCF                     __end_of_font13:
  3676                           	opt stack 0
  3677  00FFCF                     _dpowers:
  3678                           	opt stack 0
  3679  00FFCF  0001               	dw	1
  3680  00FFD1  0000               	dw	0
  3681  00FFD3  000A               	dw	10
  3682  00FFD5  0000               	dw	0
  3683  00FFD7  0064               	dw	100
  3684  00FFD9  0000               	dw	0
  3685  00FFDB  03E8               	dw	1000
  3686  00FFDD  0000               	dw	0
  3687  00FFDF  2710               	dw	10000
  3688  00FFE1  0000               	dw	0
  3689  00FFE3  86A0               	dw	34464
  3690  00FFE5  0001               	dw	1
  3691  00FFE7  4240               	dw	16960
  3692  00FFE9  000F               	dw	15
  3693  00FFEB  9680               	dw	38528
  3694  00FFED  0098               	dw	152
  3695  00FFEF  E100               	dw	57600
  3696  00FFF1  05F5               	dw	1525
  3697  00FFF3  CA00               	dw	51712
  3698  00FFF5  3B9A               	dw	15258
  3699  00FFF7                     __end_of_dpowers:
  3700                           	opt stack 0
  3701  0000                     _ADCON0	set	4034
  3702  0000                     _ADCON0bits	set	4034
  3703  0000                     _ADCON1	set	4033
  3704  0000                     _ADCON2	set	4032
  3705  0000                     _ADCON2bits	set	4032
  3706  0000                     _ADRESH	set	4036
  3707  0000                     _ADRESL	set	4035
  3708  0000                     _ANSELA	set	3896
  3709  0000                     _ANSELB	set	3897
  3710  0000                     _ANSELC	set	3898
  3711  0000                     _ANSELD	set	3899
  3712  0000                     _ANSELE	set	3900
  3713  0000                     _CCP4CONbits	set	3927
  3714  0000                     _CCPR1L	set	4030
  3715  0000                     _CCPR2L	set	3943
  3716  0000                     _CCPR4L	set	3928
  3717  0000                     _EEADR	set	4009
  3718  0000                     _EEADRH	set	4010
  3719  0000                     _EECON1bits	set	4006
  3720  0000                     _EECON2	set	4007
  3721  0000                     _EEDATA	set	4008
  3722  0000                     _INTCONbits	set	4082
  3723  0000                     _IPR1bits	set	3999
  3724  0000                     _IPR5bits	set	3967
  3725  0000                     _LATAbits	set	3977
  3726  0000                     _LATBbits	set	3978
  3727  0000                     _LATC	set	3979
  3728  0000                     _LATCbits	set	3979
  3729  0000                     _LATD	set	3980
  3730  0000                     _OSCCON	set	4051
  3731  0000                     _OSCTUNEbits	set	3995
  3732  0000                     _PIE1bits	set	3997
  3733  0000                     _PIE5bits	set	3965
  3734  0000                     _PIR1bits	set	3998
  3735  0000                     _PIR5bits	set	3966
  3736  0000                     _PORTC	set	3970
  3737  0000                     _PORTD	set	3971
  3738  0000                     _PR2	set	4027
  3739  0000                     _PR4	set	3922
  3740  0000                     _RCONbits	set	4048
  3741  0000                     _RCREG	set	4014
  3742  0000                     _SPBRG	set	4015
  3743  0000                     _T2CONbits	set	4026
  3744  0000                     _T4CONbits	set	3921
  3745  0000                     _TMR2	set	4028
  3746  0000                     _TMR4	set	3923
  3747  0000                     _TRISAbits	set	3986
  3748  0000                     _TRISBbits	set	3987
  3749  0000                     _TRISC	set	3988
  3750  0000                     _TRISCbits	set	3988
  3751  0000                     _TRISD	set	3989
  3752  0000                     _TRISEbits	set	3990
  3753  0000                     _TXREG	set	4013
  3754  0000                     _BRG161	set	32195
  3755  0000                     _BRGH1	set	32098
  3756  0000                     _CREN1	set	32092
  3757  0000                     _DC1B0	set	32236
  3758  0000                     _DC1B1	set	32237
  3759  0000                     _DC2B0	set	31540
  3760  0000                     _DC2B1	set	31541
  3761  0000                     _FERR1	set	32090
  3762  0000                     _GIE	set	32663
  3763  0000                     _LATC0	set	31832
  3764  0000                     _LATC2	set	31834
  3765  0000                     _LATC3	set	31835
  3766  0000                     _LATE0	set	31848
  3767  0000                     _LATE1	set	31849
  3768  0000                     _LATE2	set	31850
  3769  0000                     _OERR1	set	32089
  3770  0000                     _RCIE	set	31981
  3771  0000                     _RCIF	set	31989
  3772  0000                     _RCIP	set	31997
  3773  0000                     _RX91	set	32094
  3774  0000                     _SPEN1	set	32095
  3775  0000                     _SREN1	set	32093
  3776  0000                     _SWDTEN	set	32392
  3777  0000                     _SYNC1	set	32100
  3778  0000                     _TRMT1	set	32097
  3779  0000                     _TX91	set	32102
  3780  0000                     _TXEN1	set	32101
  3781  0000                     _TXIE	set	31980
  3782  0000                     _LATA	set	3977
  3783  0000                     _LATB	set	3978
  3784  0000                     _TRISA	set	3986
  3785  0000                     _TRISB	set	3987
  3786  00FFF7                     __stringdata:
  3787                           	opt stack 0
  3788  00FFF7                     STR_1:
  3789  00FFF7  54                 	db	84	;'T'
  3790  00FFF8  3D                 	db	61	;'='
  3791  00FFF9  25                 	db	37
  3792  00FFFA  32                 	db	50	;'2'
  3793  00FFFB  2E                 	db	46
  3794  00FFFC  31                 	db	49	;'1'
  3795  00FFFD  66                 	db	102	;'f'
  3796  00FFFE  00                 	db	0
  3797  00FFFF                     __end_of__stringdata:
  3798                           	opt stack 0
  3799                           
  3800                           ; #config settings
  3801  00FFFF  00                 	db	0	; dummy byte at the end
  3802  0000                     tblptrh	equ	0xFF7
  3803                           tblptrl	equ	0xFF6
  3804                           tablat	equ	0xFF5
  3805                           prodh	equ	0xFF4
  3806                           prodl	equ	0xFF3
  3807                           intcon	equ	0xFF2
  3808                           wreg	equ	0xFE8
  3809                           indf1	equ	0xFE7
  3810                           postinc1	equ	0xFE6
  3811                           postdec1	equ	0xFE5
  3812                           fsr1h	equ	0xFE2
  3813                           fsr1l	equ	0xFE1
  3814                           indf2	equ	0xFDF
  3815                           postinc2	equ	0xFDE
  3816                           postdec2	equ	0xFDD
  3817                           fsr2h	equ	0xFDA
  3818                           fsr2l	equ	0xFD9
  3819                           status	equ	0xFD8
  3820                           
  3821                           	psect	cinit
  3822  002BF6                     __pcinit:
  3823                           	opt stack 0
  3824  002BF6                     start_initialization:
  3825                           	opt stack 0
  3826  002BF6                     __initialization:
  3827                           	opt stack 0
  3828                           
  3829                           ; Clear objects allocated to BIGRAM (352 bytes)
  3830  002BF6  EE04  F000         	lfsr	0,__pbssBIGRAM
  3831  002BFA  EE11 F060          	lfsr	1,352
  3832  002BFE                     clear_0:
  3833  002BFE  6AEE               	clrf	postinc0,c
  3834  002C00  50E5               	movf	postdec1,w,c
  3835  002C02  50E1               	movf	fsr1l,w,c
  3836  002C04  E1FC               	bnz	clear_0
  3837  002C06  50E2               	movf	fsr1h,w,c
  3838  002C08  E1FA               	bnz	clear_0
  3839                           
  3840                           ; Clear objects allocated to BANK3 (256 bytes)
  3841  002C0A  EE03  F000         	lfsr	0,__pbssBANK3
  3842  002C0E  EE11 F000          	lfsr	1,256
  3843  002C12                     clear_1:
  3844  002C12  6AEE               	clrf	postinc0,c
  3845  002C14  50E5               	movf	postdec1,w,c
  3846  002C16  50E1               	movf	fsr1l,w,c
  3847  002C18  E1FC               	bnz	clear_1
  3848  002C1A  50E2               	movf	fsr1h,w,c
  3849  002C1C  E1FA               	bnz	clear_1
  3850                           
  3851                           ; Clear objects allocated to BANK2 (104 bytes)
  3852  002C1E  EE02  F000         	lfsr	0,__pbssBANK2
  3853  002C22  0E68               	movlw	104
  3854  002C24                     clear_2:
  3855  002C24  6AEE               	clrf	postinc0,c
  3856  002C26  06E8               	decf	wreg,f,c
  3857  002C28  E1FD               	bnz	clear_2
  3858                           
  3859                           ; Clear objects allocated to BANK1 (200 bytes)
  3860  002C2A  EE01  F000         	lfsr	0,__pbssBANK1
  3861  002C2E  0EC8               	movlw	200
  3862  002C30                     clear_3:
  3863  002C30  6AEE               	clrf	postinc0,c
  3864  002C32  06E8               	decf	wreg,f,c
  3865  002C34  E1FD               	bnz	clear_3
  3866                           
  3867                           ; Clear objects allocated to BANK0 (23 bytes)
  3868  002C36  EE00  F0C2         	lfsr	0,__pbssBANK0
  3869  002C3A  0E17               	movlw	23
  3870  002C3C                     clear_4:
  3871  002C3C  6AEE               	clrf	postinc0,c
  3872  002C3E  06E8               	decf	wreg,f,c
  3873  002C40  E1FD               	bnz	clear_4
  3874                           
  3875                           ; Clear objects allocated to COMRAM (32 bytes)
  3876  002C42  EE00  F024         	lfsr	0,__pbssCOMRAM
  3877  002C46  0E20               	movlw	32
  3878  002C48                     clear_5:
  3879  002C48  6AEE               	clrf	postinc0,c
  3880  002C4A  06E8               	decf	wreg,f,c
  3881  002C4C  E1FD               	bnz	clear_5
  3882                           
  3883                           ; Initialize objects allocated to COMRAM (4 bytes)
  3884                           ; load TBLPTR registers with __pidataCOMRAM
  3885  002C4E  0ED2               	movlw	low __pidataCOMRAM
  3886  002C50  6EF6               	movwf	tblptrl,c
  3887  002C52  0E36               	movlw	high __pidataCOMRAM
  3888  002C54  6EF7               	movwf	tblptrh,c
  3889  002C56  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  3890  002C58  6EF8               	movwf	tblptru,c
  3891  002C5A  EE00  F044         	lfsr	0,__pdataCOMRAM
  3892  002C5E  EE10 F004          	lfsr	1,4
  3893  002C62                     copy_data0:
  3894  002C62  0009               	tblrd		*+
  3895  002C64  CFF5 FFEE          	movff	tablat,postinc0
  3896  002C68  50E5               	movf	postdec1,w,c
  3897  002C6A  50E1               	movf	fsr1l,w,c
  3898  002C6C  E1FA               	bnz	copy_data0
  3899  002C6E                     end_of_initialization:
  3900                           	opt stack 0
  3901  002C6E                     __end_of__initialization:
  3902                           	opt stack 0
  3903  002C6E  0E00               	movlw	low (__Lmediumconst shr (0+16))
  3904  002C70  6EF8               	movwf	tblptru,c
  3905  002C72  0100               	movlb	0
  3906  002C74  EF99  F014         	goto	_main	;jump to C main() function
  3907                           tblptru	equ	0xFF8
  3908                           tblptrh	equ	0xFF7
  3909                           tblptrl	equ	0xFF6
  3910                           tablat	equ	0xFF5
  3911                           prodh	equ	0xFF4
  3912                           prodl	equ	0xFF3
  3913                           intcon	equ	0xFF2
  3914                           postinc0	equ	0xFEE
  3915                           wreg	equ	0xFE8
  3916                           indf1	equ	0xFE7
  3917                           postinc1	equ	0xFE6
  3918                           postdec1	equ	0xFE5
  3919                           fsr1h	equ	0xFE2
  3920                           fsr1l	equ	0xFE1
  3921                           indf2	equ	0xFDF
  3922                           postinc2	equ	0xFDE
  3923                           postdec2	equ	0xFDD
  3924                           fsr2h	equ	0xFDA
  3925                           fsr2l	equ	0xFD9
  3926                           status	equ	0xFD8
  3927                           
  3928                           	psect	bssCOMRAM
  3929  000024                     __pbssCOMRAM:
  3930                           	opt stack 0
  3931  000024                     _Messages:
  3932                           	opt stack 0
  3933  000024                     	ds	10
  3934  00002E                     _BSem:
  3935                           	opt stack 0
  3936  00002E                     	ds	4
  3937  000032                     tsk_ds18b20@f_temp:
  3938                           	opt stack 0
  3939  000032                     	ds	4
  3940  000036                     _c:
  3941                           	opt stack 0
  3942  000036                     	ds	2
  3943  000038                     _d:
  3944                           	opt stack 0
  3945  000038                     	ds	2
  3946  00003A                     _j_rx:
  3947                           	opt stack 0
  3948  00003A                     	ds	2
  3949  00003C                     _sys_tick:
  3950                           	opt stack 0
  3951  00003C                     	ds	2
  3952  00003E                     _a:
  3953                           	opt stack 0
  3954  00003E                     	ds	1
  3955  00003F                     _b:
  3956                           	opt stack 0
  3957  00003F                     	ds	1
  3958  000040                     _beep_count:
  3959                           	opt stack 0
  3960  000040                     	ds	1
  3961  000041                     _curr_task:
  3962                           	opt stack 0
  3963  000041                     	ds	1
  3964  000042                     _dummy:
  3965                           	opt stack 0
  3966  000042                     	ds	1
  3967  000043                     _timeout_error:
  3968                           	opt stack 0
  3969  000043                     	ds	1
  3970                           tblptru	equ	0xFF8
  3971                           tblptrh	equ	0xFF7
  3972                           tblptrl	equ	0xFF6
  3973                           tablat	equ	0xFF5
  3974                           prodh	equ	0xFF4
  3975                           prodl	equ	0xFF3
  3976                           intcon	equ	0xFF2
  3977                           postinc0	equ	0xFEE
  3978                           wreg	equ	0xFE8
  3979                           indf1	equ	0xFE7
  3980                           postinc1	equ	0xFE6
  3981                           postdec1	equ	0xFE5
  3982                           fsr1h	equ	0xFE2
  3983                           fsr1l	equ	0xFE1
  3984                           indf2	equ	0xFDF
  3985                           postinc2	equ	0xFDE
  3986                           postdec2	equ	0xFDD
  3987                           fsr2h	equ	0xFDA
  3988                           fsr2l	equ	0xFD9
  3989                           status	equ	0xFD8
  3990                           
  3991                           	psect	dataCOMRAM
  3992  000044                     __pdataCOMRAM:
  3993                           	opt stack 0
  3994  000044                     tsk_display@f_prev_T:
  3995                           	opt stack 0
  3996  000044                     	ds	4
  3997                           tblptru	equ	0xFF8
  3998                           tblptrh	equ	0xFF7
  3999                           tblptrl	equ	0xFF6
  4000                           tablat	equ	0xFF5
  4001                           prodh	equ	0xFF4
  4002                           prodl	equ	0xFF3
  4003                           intcon	equ	0xFF2
  4004                           postinc0	equ	0xFEE
  4005                           wreg	equ	0xFE8
  4006                           indf1	equ	0xFE7
  4007                           postinc1	equ	0xFE6
  4008                           postdec1	equ	0xFE5
  4009                           fsr1h	equ	0xFE2
  4010                           fsr1l	equ	0xFE1
  4011                           indf2	equ	0xFDF
  4012                           postinc2	equ	0xFDE
  4013                           postdec2	equ	0xFDD
  4014                           fsr2h	equ	0xFDA
  4015                           fsr2l	equ	0xFD9
  4016                           status	equ	0xFD8
  4017                           
  4018                           	psect	bssBANK0
  4019  0000C2                     __pbssBANK0:
  4020                           	opt stack 0
  4021  0000C2                     _f_T_salona:
  4022                           	opt stack 0
  4023  0000C2                     	ds	4
  4024  0000C6                     __sys_tick:
  4025                           	opt stack 0
  4026  0000C6                     	ds	2
  4027  0000C8                     _beep_timer:
  4028                           	opt stack 0
  4029  0000C8                     	ds	2
  4030  0000CA                     tsk_ds18b20@_prev_tick:
  4031                           	opt stack 0
  4032  0000CA                     	ds	2
  4033  0000CC                     tsk_ds18b20@_state:
  4034                           	opt stack 0
  4035  0000CC                     	ds	2
  4036  0000CE                     HI_ISR@beep:
  4037                           	opt stack 0
  4038  0000CE                     	ds	1
  4039  0000CF                     MTouchAcquisition@startSensorNumber:
  4040                           	opt stack 0
  4041  0000CF                     	ds	1
  4042  0000D0                     _BroadcastMessages:
  4043                           	opt stack 0
  4044  0000D0                     	ds	1
  4045  0000D1                     ___gie:
  4046                           	opt stack 0
  4047  0000D1                     	ds	1
  4048  0000D2                     _delayus_variable:
  4049                           	opt stack 0
  4050  0000D2                     	ds	1
  4051  0000D3                     _ow_bit:
  4052                           	opt stack 0
  4053  0000D3                     	ds	1
  4054  0000D4                     tsk_ds18b20@_interrupt_state:
  4055                           	opt stack 0
  4056  0000D4                     	ds	1
  4057  0000D5                     tsk_ds18b20@ow_err:
  4058                           	opt stack 0
  4059  0000D5                     	ds	1
  4060  0000D6                     _pos:
  4061                           	opt stack 0
  4062  0000D6                     	ds	3
  4063                           tblptru	equ	0xFF8
  4064                           tblptrh	equ	0xFF7
  4065                           tblptrl	equ	0xFF6
  4066                           tablat	equ	0xFF5
  4067                           prodh	equ	0xFF4
  4068                           prodl	equ	0xFF3
  4069                           intcon	equ	0xFF2
  4070                           postinc0	equ	0xFEE
  4071                           wreg	equ	0xFE8
  4072                           indf1	equ	0xFE7
  4073                           postinc1	equ	0xFE6
  4074                           postdec1	equ	0xFE5
  4075                           fsr1h	equ	0xFE2
  4076                           fsr1l	equ	0xFE1
  4077                           indf2	equ	0xFDF
  4078                           postinc2	equ	0xFDE
  4079                           postdec2	equ	0xFDD
  4080                           fsr2h	equ	0xFDA
  4081                           fsr2l	equ	0xFD9
  4082                           status	equ	0xFD8
  4083                           
  4084                           	psect	bssBANK1
  4085  000100                     __pbssBANK1:
  4086                           	opt stack 0
  4087  000100                     _scratch:
  4088                           	opt stack 0
  4089  000100                     	ds	9
  4090  000109                     _e:
  4091                           	opt stack 0
  4092  000109                     	ds	4
  4093  00010D                     _f:
  4094                           	opt stack 0
  4095  00010D                     	ds	4
  4096  000111                     _k:
  4097                           	opt stack 0
  4098  000111                     	ds	4
  4099  000115                     _l:
  4100                           	opt stack 0
  4101  000115                     	ds	4
  4102  000119                     _RxTxBuff:
  4103                           	opt stack 0
  4104  000119                     	ds	128
  4105  000199                     _lb_temp:
  4106                           	opt stack 0
  4107  000199                     	ds	27
  4108  0001B4                     _str:
  4109                           	opt stack 0
  4110  0001B4                     	ds	20
  4111                           tblptru	equ	0xFF8
  4112                           tblptrh	equ	0xFF7
  4113                           tblptrl	equ	0xFF6
  4114                           tablat	equ	0xFF5
  4115                           prodh	equ	0xFF4
  4116                           prodl	equ	0xFF3
  4117                           intcon	equ	0xFF2
  4118                           postinc0	equ	0xFEE
  4119                           wreg	equ	0xFE8
  4120                           indf1	equ	0xFE7
  4121                           postinc1	equ	0xFE6
  4122                           postdec1	equ	0xFE5
  4123                           fsr1h	equ	0xFE2
  4124                           fsr1l	equ	0xFE1
  4125                           indf2	equ	0xFDF
  4126                           postinc2	equ	0xFDE
  4127                           postdec2	equ	0xFDD
  4128                           fsr2h	equ	0xFDA
  4129                           fsr2l	equ	0xFD9
  4130                           status	equ	0xFD8
  4131                           
  4132                           	psect	bssBANK2
  4133  000200                     __pbssBANK2:
  4134                           	opt stack 0
  4135  000200                     _buttons:
  4136                           	opt stack 0
  4137  000200                     	ds	104
  4138                           tblptru	equ	0xFF8
  4139                           tblptrh	equ	0xFF7
  4140                           tblptrl	equ	0xFF6
  4141                           tablat	equ	0xFF5
  4142                           prodh	equ	0xFF4
  4143                           prodl	equ	0xFF3
  4144                           intcon	equ	0xFF2
  4145                           postinc0	equ	0xFEE
  4146                           wreg	equ	0xFE8
  4147                           indf1	equ	0xFE7
  4148                           postinc1	equ	0xFE6
  4149                           postdec1	equ	0xFE5
  4150                           fsr1h	equ	0xFE2
  4151                           fsr1l	equ	0xFE1
  4152                           indf2	equ	0xFDF
  4153                           postinc2	equ	0xFDE
  4154                           postdec2	equ	0xFDD
  4155                           fsr2h	equ	0xFDA
  4156                           fsr2l	equ	0xFD9
  4157                           status	equ	0xFD8
  4158                           
  4159                           	psect	bssBANK3
  4160  000300                     __pbssBANK3:
  4161                           	opt stack 0
  4162  000300                     _RxBuff:
  4163                           	opt stack 0
  4164  000300                     	ds	256
  4165                           tblptru	equ	0xFF8
  4166                           tblptrh	equ	0xFF7
  4167                           tblptrl	equ	0xFF6
  4168                           tablat	equ	0xFF5
  4169                           prodh	equ	0xFF4
  4170                           prodl	equ	0xFF3
  4171                           intcon	equ	0xFF2
  4172                           postinc0	equ	0xFEE
  4173                           wreg	equ	0xFE8
  4174                           indf1	equ	0xFE7
  4175                           postinc1	equ	0xFE6
  4176                           postdec1	equ	0xFE5
  4177                           fsr1h	equ	0xFE2
  4178                           fsr1l	equ	0xFE1
  4179                           indf2	equ	0xFDF
  4180                           postinc2	equ	0xFDE
  4181                           postdec2	equ	0xFDD
  4182                           fsr2h	equ	0xFDA
  4183                           fsr2l	equ	0xFD9
  4184                           status	equ	0xFD8
  4185                           
  4186                           	psect	bssBIGRAM
  4187  000400                     __pbssBIGRAM:
  4188                           	opt stack 0
  4189  000400                     _sensors:
  4190                           	opt stack 0
  4191  000400                     	ds	352
  4192                           tblptru	equ	0xFF8
  4193                           tblptrh	equ	0xFF7
  4194                           tblptrl	equ	0xFF6
  4195                           tablat	equ	0xFF5
  4196                           prodh	equ	0xFF4
  4197                           prodl	equ	0xFF3
  4198                           intcon	equ	0xFF2
  4199                           postinc0	equ	0xFEE
  4200                           wreg	equ	0xFE8
  4201                           indf1	equ	0xFE7
  4202                           postinc1	equ	0xFE6
  4203                           postdec1	equ	0xFE5
  4204                           fsr1h	equ	0xFE2
  4205                           fsr1l	equ	0xFE1
  4206                           indf2	equ	0xFDF
  4207                           postinc2	equ	0xFDE
  4208                           postdec2	equ	0xFDD
  4209                           fsr2h	equ	0xFDA
  4210                           fsr2l	equ	0xFD9
  4211                           status	equ	0xFD8
  4212                           
  4213                           	psect	cstackBANK2
  4214  000268                     __pcstackBANK2:
  4215                           	opt stack 0
  4216  000268                     _sprintf$3207:
  4217                           	opt stack 0
  4218                           
  4219                           ; 4 bytes @ 0x0
  4220  000268                     	ds	4
  4221  00026C                     _sprintf$2387:
  4222                           	opt stack 0
  4223                           
  4224                           ; 4 bytes @ 0x4
  4225  00026C                     	ds	4
  4226  000270                     sprintf@ap:
  4227                           	opt stack 0
  4228                           
  4229                           ; 2 bytes @ 0x8
  4230  000270                     	ds	2
  4231  000272                     sprintf@vd:
  4232                           	opt stack 0
  4233                           
  4234                           ; 4 bytes @ 0xA
  4235  000272                     	ds	4
  4236  000276                     sprintf@vd_2389:
  4237                           	opt stack 0
  4238                           
  4239                           ; 4 bytes @ 0xE
  4240  000276                     	ds	4
  4241  00027A                     sprintf@integ:
  4242                           	opt stack 0
  4243                           
  4244                           ; 4 bytes @ 0x12
  4245  00027A                     	ds	4
  4246  00027E                     sprintf@_val:
  4247                           	opt stack 0
  4248                           
  4249                           ; 5 bytes @ 0x16
  4250  00027E                     	ds	5
  4251  000283                     sprintf@flag:
  4252                           	opt stack 0
  4253                           
  4254                           ; 2 bytes @ 0x1B
  4255  000283                     	ds	2
  4256  000285                     sprintf@width:
  4257                           	opt stack 0
  4258                           
  4259                           ; 2 bytes @ 0x1D
  4260  000285                     	ds	2
  4261  000287                     sprintf@exp:
  4262                           	opt stack 0
  4263                           
  4264                           ; 2 bytes @ 0x1F
  4265  000287                     	ds	2
  4266  000289                     sprintf@fval:
  4267                           	opt stack 0
  4268                           
  4269                           ; 4 bytes @ 0x21
  4270  000289                     	ds	4
  4271  00028D                     sprintf@prec:
  4272                           	opt stack 0
  4273                           
  4274                           ; 2 bytes @ 0x25
  4275  00028D                     	ds	2
  4276  00028F                     sprintf@c:
  4277                           	opt stack 0
  4278                           
  4279                           ; 1 bytes @ 0x27
  4280  00028F                     	ds	1
  4281                           tblptru	equ	0xFF8
  4282                           tblptrh	equ	0xFF7
  4283                           tblptrl	equ	0xFF6
  4284                           tablat	equ	0xFF5
  4285                           prodh	equ	0xFF4
  4286                           prodl	equ	0xFF3
  4287                           intcon	equ	0xFF2
  4288                           postinc0	equ	0xFEE
  4289                           wreg	equ	0xFE8
  4290                           indf1	equ	0xFE7
  4291                           postinc1	equ	0xFE6
  4292                           postdec1	equ	0xFE5
  4293                           fsr1h	equ	0xFE2
  4294                           fsr1l	equ	0xFE1
  4295                           indf2	equ	0xFDF
  4296                           postinc2	equ	0xFDE
  4297                           postdec2	equ	0xFDD
  4298                           fsr2h	equ	0xFDA
  4299                           fsr2l	equ	0xFD9
  4300                           status	equ	0xFD8
  4301                           
  4302                           	psect	cstackBANK1
  4303  0001C8                     __pcstackBANK1:
  4304                           	opt stack 0
  4305  0001C8                     ??___fladd:
  4306                           
  4307                           ; 0 bytes @ 0x0
  4308  0001C8                     	ds	4
  4309  0001CC                     ___fladd@sign:
  4310                           	opt stack 0
  4311                           
  4312                           ; 1 bytes @ 0x4
  4313  0001CC                     	ds	1
  4314  0001CD                     ___fladd@exp2:
  4315                           	opt stack 0
  4316                           
  4317                           ; 1 bytes @ 0x5
  4318  0001CD                     	ds	1
  4319  0001CE                     ___fladd@exp1:
  4320                           	opt stack 0
  4321                           
  4322                           ; 1 bytes @ 0x6
  4323  0001CE                     	ds	1
  4324  0001CF                     ?___flsub:
  4325                           	opt stack 0
  4326  0001CF                     ?_ds18b20_read:
  4327                           	opt stack 0
  4328  0001CF                     ___flsub@f1:
  4329                           	opt stack 0
  4330                           
  4331                           ; 4 bytes @ 0x7
  4332  0001CF                     	ds	4
  4333  0001D3                     ??_ds18b20_read:
  4334  0001D3                     ___flsub@f2:
  4335                           	opt stack 0
  4336                           
  4337                           ; 4 bytes @ 0xB
  4338  0001D3                     	ds	2
  4339  0001D5                     ds18b20_read@t:
  4340                           	opt stack 0
  4341                           
  4342                           ; 2 bytes @ 0xD
  4343  0001D5                     	ds	2
  4344  0001D7                     ?_sprintf:
  4345                           	opt stack 0
  4346  0001D7                     sprintf@sp:
  4347                           	opt stack 0
  4348  0001D7                     ds18b20_read@f:
  4349                           	opt stack 0
  4350                           
  4351                           ; 4 bytes @ 0xF
  4352  0001D7                     	ds	2
  4353  0001D9                     sprintf@f:
  4354                           	opt stack 0
  4355                           
  4356                           ; 2 bytes @ 0x11
  4357  0001D9                     	ds	2
  4358  0001DB                     ds18b20_read@dowcrc:
  4359                           	opt stack 0
  4360                           
  4361                           ; 1 bytes @ 0x13
  4362  0001DB                     	ds	1
  4363  0001DC                     ds18b20_read@i:
  4364                           	opt stack 0
  4365                           
  4366                           ; 1 bytes @ 0x14
  4367  0001DC                     	ds	1
  4368  0001DD                     ??_tsk_ds18b20:
  4369                           
  4370                           ; 0 bytes @ 0x15
  4371  0001DD                     	ds	2
  4372  0001DF                     ??_sprintf:
  4373                           
  4374                           ; 0 bytes @ 0x17
  4375  0001DF                     	ds	4
  4376                           tblptru	equ	0xFF8
  4377                           tblptrh	equ	0xFF7
  4378                           tblptrl	equ	0xFF6
  4379                           tablat	equ	0xFF5
  4380                           prodh	equ	0xFF4
  4381                           prodl	equ	0xFF3
  4382                           intcon	equ	0xFF2
  4383                           postinc0	equ	0xFEE
  4384                           wreg	equ	0xFE8
  4385                           indf1	equ	0xFE7
  4386                           postinc1	equ	0xFE6
  4387                           postdec1	equ	0xFE5
  4388                           fsr1h	equ	0xFE2
  4389                           fsr1l	equ	0xFE1
  4390                           indf2	equ	0xFDF
  4391                           postinc2	equ	0xFDE
  4392                           postdec2	equ	0xFDD
  4393                           fsr2h	equ	0xFDA
  4394                           fsr2l	equ	0xFD9
  4395                           status	equ	0xFD8
  4396                           
  4397                           	psect	cstackBANK0
  4398  000060                     __pcstackBANK0:
  4399                           	opt stack 0
  4400  000060                     ?_MTouchAcquisitionCVD:
  4401                           	opt stack 0
  4402  000060                     MTouchAcquisitionCVD@pCurrentSensor:
  4403                           	opt stack 0
  4404  000060                     MTouchUpdateSensorAverage@pSensor:
  4405                           	opt stack 0
  4406                           
  4407                           ; 2 bytes @ 0x0
  4408  000060                     	ds	2
  4409  000062                     MTouchAcquisitionCVD@pPreviousSensor:
  4410                           	opt stack 0
  4411  000062                     MTouchUpdateSensorAverage@rate:
  4412                           	opt stack 0
  4413                           
  4414                           ; 2 bytes @ 0x2
  4415  000062                     	ds	2
  4416  000064                     ??_MTouchUpdateSensorAverage:
  4417  000064                     ??_MTouchAcquisitionCVD:
  4418                           
  4419                           ; 0 bytes @ 0x4
  4420  000064                     	ds	2
  4421  000066                     MTouchAcquisitionCVD@result:
  4422                           	opt stack 0
  4423                           
  4424                           ; 2 bytes @ 0x6
  4425  000066                     	ds	2
  4426  000068                     MTouchAcquisitionCVD@prevTris:
  4427                           	opt stack 0
  4428                           
  4429                           ; 2 bytes @ 0x8
  4430  000068                     	ds	1
  4431  000069                     MTouchSensorDecode@pSensor:
  4432                           	opt stack 0
  4433                           
  4434                           ; 2 bytes @ 0x9
  4435  000069                     	ds	1
  4436  00006A                     MTouchAcquisitionCVD@prevChannelNumber:
  4437                           	opt stack 0
  4438                           
  4439                           ; 1 bytes @ 0xA
  4440  00006A                     	ds	1
  4441  00006B                     ??_MTouchSensorDecode:
  4442  00006B                     MTouchAcquisitionCVD@curChannelNumber:
  4443                           	opt stack 0
  4444                           
  4445                           ; 1 bytes @ 0xB
  4446  00006B                     	ds	1
  4447  00006C                     MTouchAcquisitionCVD@prevLat:
  4448                           	opt stack 0
  4449                           
  4450                           ; 2 bytes @ 0xC
  4451  00006C                     	ds	2
  4452  00006E                     MTouchAcquisitionCVD@curLat:
  4453                           	opt stack 0
  4454                           
  4455                           ; 2 bytes @ 0xE
  4456  00006E                     	ds	1
  4457  00006F                     MTouchSensorDecode@delta:
  4458                           	opt stack 0
  4459                           
  4460                           ; 2 bytes @ 0xF
  4461  00006F                     	ds	1
  4462  000070                     MTouchAcquisitionCVD@prevIOMask:
  4463                           	opt stack 0
  4464                           
  4465                           ; 1 bytes @ 0x10
  4466  000070                     	ds	1
  4467  000071                     MTouchAcquisitionCVD@curTris:
  4468                           	opt stack 0
  4469                           
  4470                           ; 2 bytes @ 0x11
  4471  000071                     	ds	2
  4472  000073                     MTouchAcquisitionCVD@curIOMask:
  4473                           	opt stack 0
  4474                           
  4475                           ; 1 bytes @ 0x13
  4476  000073                     	ds	1
  4477  000074                     ??_MTouchAcquisition:
  4478                           
  4479                           ; 0 bytes @ 0x14
  4480  000074                     	ds	3
  4481  000077                     MTouchAcquisition@data:
  4482                           	opt stack 0
  4483                           
  4484                           ; 2 bytes @ 0x17
  4485  000077                     	ds	2
  4486  000079                     MTouchAcquisition@pLastSensor:
  4487                           	opt stack 0
  4488                           
  4489                           ; 2 bytes @ 0x19
  4490  000079                     	ds	2
  4491  00007B                     MTouchAcquisition@pPreviousSensor:
  4492                           	opt stack 0
  4493                           
  4494                           ; 2 bytes @ 0x1B
  4495  00007B                     	ds	2
  4496  00007D                     MTouchAcquisition@i:
  4497                           	opt stack 0
  4498                           
  4499                           ; 1 bytes @ 0x1D
  4500  00007D                     	ds	1
  4501  00007E                     MTouchAcquisition@pCurrentSensor:
  4502                           	opt stack 0
  4503                           
  4504                           ; 2 bytes @ 0x1E
  4505  00007E                     	ds	2
  4506  000080                     ??_HI_ISR:
  4507                           
  4508                           ; 0 bytes @ 0x20
  4509  000080                     	ds	7
  4510  000087                     ??_isdigit:
  4511  000087                     ??_MTouchDecodeButtons:
  4512  000087                     ?___wmul:
  4513                           	opt stack 0
  4514  000087                     ?___awmod:
  4515                           	opt stack 0
  4516  000087                     ?__tdiv_to_l_:
  4517                           	opt stack 0
  4518  000087                     ?__div_to_l_:
  4519                           	opt stack 0
  4520  000087                     ?___flpack:
  4521                           	opt stack 0
  4522  000087                     ?___flneg:
  4523                           	opt stack 0
  4524  000087                     ?___lldiv:
  4525                           	opt stack 0
  4526  000087                     ?___llmod:
  4527                           	opt stack 0
  4528  000087                     MTouchSetButton@sensorNumber:
  4529                           	opt stack 0
  4530  000087                     Beep@ms10:
  4531                           	opt stack 0
  4532  000087                     InitMessages@i:
  4533                           	opt stack 0
  4534  000087                     ProcessMessages@i:
  4535                           	opt stack 0
  4536  000087                     ks0108WriteCommand@chip:
  4537                           	opt stack 0
  4538  000087                     DelayMs@cnt:
  4539                           	opt stack 0
  4540  000087                     ___lbmod@divisor:
  4541                           	opt stack 0
  4542  000087                     MTouchSetSensor@tris:
  4543                           	opt stack 0
  4544  000087                     ow_delay@del:
  4545                           	opt stack 0
  4546  000087                     ___wmul@multiplier:
  4547                           	opt stack 0
  4548  000087                     ___awmod@dividend:
  4549                           	opt stack 0
  4550  000087                     ___flpack@arg:
  4551                           	opt stack 0
  4552  000087                     __div_to_l_@f1:
  4553                           	opt stack 0
  4554  000087                     ___flge@ff1:
  4555                           	opt stack 0
  4556  000087                     ___flneg@f1:
  4557                           	opt stack 0
  4558  000087                     __tdiv_to_l_@f1:
  4559                           	opt stack 0
  4560  000087                     ___lldiv@dividend:
  4561                           	opt stack 0
  4562  000087                     ___llmod@dividend:
  4563                           	opt stack 0
  4564                           
  4565                           ; 4 bytes @ 0x27
  4566  000087                     	ds	1
  4567  000088                     MTouchSetButton@decode:
  4568                           	opt stack 0
  4569  000088                     ks0108WriteCommand@cmd:
  4570                           	opt stack 0
  4571  000088                     DelayMs@i:
  4572                           	opt stack 0
  4573  000088                     _isdigit$2795:
  4574                           	opt stack 0
  4575  000088                     ___lbmod@dividend:
  4576                           	opt stack 0
  4577                           
  4578                           ; 1 bytes @ 0x28
  4579  000088                     	ds	1
  4580  000089                     ??_MTouchSetButton:
  4581  000089                     ??_init_1wire:
  4582  000089                     ??_read_1wire:
  4583  000089                     ??_write_1wire:
  4584  000089                     ks0108GotoXY@y:
  4585                           	opt stack 0
  4586  000089                     ks0108WriteData@data:
  4587                           	opt stack 0
  4588  000089                     isdigit@c:
  4589                           	opt stack 0
  4590  000089                     ___lbmod@counter:
  4591                           	opt stack 0
  4592  000089                     MTouchSetSensor@lat:
  4593                           	opt stack 0
  4594  000089                     ___wmul@multiplicand:
  4595                           	opt stack 0
  4596  000089                     ___awmod@divisor:
  4597                           	opt stack 0
  4598                           
  4599                           ; 2 bytes @ 0x29
  4600  000089                     	ds	1
  4601  00008A                     ks0108GotoXY@chip:
  4602                           	opt stack 0
  4603  00008A                     ___lbmod@rem:
  4604                           	opt stack 0
  4605                           
  4606                           ; 1 bytes @ 0x2A
  4607  00008A                     	ds	1
  4608  00008B                     MTouchSetButton@buttonNumber:
  4609                           	opt stack 0
  4610  00008B                     MTouchSetSensor@ioBitNumber:
  4611                           	opt stack 0
  4612  00008B                     init_1wire@st:
  4613                           	opt stack 0
  4614  00008B                     read_1wire@data:
  4615                           	opt stack 0
  4616  00008B                     write_1wire@data:
  4617                           	opt stack 0
  4618  00008B                     ks0108GotoXY@cmd:
  4619                           	opt stack 0
  4620  00008B                     ___awmod@counter:
  4621                           	opt stack 0
  4622  00008B                     ___flpack@exp:
  4623                           	opt stack 0
  4624  00008B                     ___lbdiv@divisor:
  4625                           	opt stack 0
  4626  00008B                     MTouchDecodeButtons@pSensor:
  4627                           	opt stack 0
  4628  00008B                     ___wmul@product:
  4629                           	opt stack 0
  4630  00008B                     __div_to_l_@f2:
  4631                           	opt stack 0
  4632  00008B                     ___flge@ff2:
  4633                           	opt stack 0
  4634  00008B                     __tdiv_to_l_@f2:
  4635                           	opt stack 0
  4636  00008B                     ___lldiv@divisor:
  4637                           	opt stack 0
  4638  00008B                     ___llmod@divisor:
  4639                           	opt stack 0
  4640                           
  4641                           ; 4 bytes @ 0x2B
  4642  00008B                     	ds	1
  4643  00008C                     MTouchSetSensor@channelNumber:
  4644                           	opt stack 0
  4645  00008C                     read_1wire@i:
  4646                           	opt stack 0
  4647  00008C                     write_1wire@i:
  4648                           	opt stack 0
  4649  00008C                     ks0108GotoXY@x:
  4650                           	opt stack 0
  4651  00008C                     ___awmod@sign:
  4652                           	opt stack 0
  4653  00008C                     ___flpack@sign:
  4654                           	opt stack 0
  4655  00008C                     ___lbdiv@dividend:
  4656                           	opt stack 0
  4657  00008C                     MTouchSetButton@pButton:
  4658                           	opt stack 0
  4659                           
  4660                           ; 2 bytes @ 0x2C
  4661  00008C                     	ds	1
  4662  00008D                     ??___flpack:
  4663  00008D                     ??_ds18b20_start:
  4664  00008D                     ?___awdiv:
  4665                           	opt stack 0
  4666  00008D                     MTouchDecodeButtons@i:
  4667                           	opt stack 0
  4668  00008D                     ks0108Fill@mode:
  4669                           	opt stack 0
  4670  00008D                     ks0108ReadData@incXAdd:
  4671                           	opt stack 0
  4672  00008D                     ___lbdiv@counter:
  4673                           	opt stack 0
  4674  00008D                     MTouchSetSensor@threshold:
  4675                           	opt stack 0
  4676  00008D                     ___awdiv@dividend:
  4677                           	opt stack 0
  4678                           
  4679                           ; 2 bytes @ 0x2D
  4680  00008D                     	ds	1
  4681  00008E                     MTouchDecodeButtons@state:
  4682                           	opt stack 0
  4683  00008E                     ks0108Fill@j:
  4684                           	opt stack 0
  4685  00008E                     ks0108ReadData@data:
  4686                           	opt stack 0
  4687  00008E                     ___lbdiv@quotient:
  4688                           	opt stack 0
  4689                           
  4690                           ; 1 bytes @ 0x2E
  4691  00008E                     	ds	1
  4692  00008F                     ??__tdiv_to_l_:
  4693  00008F                     ??__div_to_l_:
  4694  00008F                     MTouchDecodeButtons@decode:
  4695                           	opt stack 0
  4696  00008F                     ks0108Fill@i:
  4697                           	opt stack 0
  4698  00008F                     ks0108ReadData@i:
  4699                           	opt stack 0
  4700  00008F                     ___llmod@counter:
  4701                           	opt stack 0
  4702  00008F                     MTouchSetSensor@oversampling:
  4703                           	opt stack 0
  4704  00008F                     ___awdiv@divisor:
  4705                           	opt stack 0
  4706  00008F                     ___lldiv@quotient:
  4707                           	opt stack 0
  4708                           
  4709                           ; 4 bytes @ 0x2F
  4710  00008F                     	ds	1
  4711  000090                     ks0108SetDot@y:
  4712                           	opt stack 0
  4713  000090                     ks0108ClearDot@y:
  4714                           	opt stack 0
  4715  000090                     MTouchDecodeButtons@pMostPressedButton:
  4716                           	opt stack 0
  4717                           
  4718                           ; 2 bytes @ 0x30
  4719  000090                     	ds	1
  4720  000091                     ??_ks0108SetDot:
  4721  000091                     ??_ks0108ClearDot:
  4722  000091                     ?___awtofl:
  4723                           	opt stack 0
  4724  000091                     ?___lltofl:
  4725                           	opt stack 0
  4726  000091                     MTouchSetSensor@chargeDelay:
  4727                           	opt stack 0
  4728  000091                     ___awdiv@counter:
  4729                           	opt stack 0
  4730  000091                     ___awtofl@c:
  4731                           	opt stack 0
  4732  000091                     ___lltofl@c:
  4733                           	opt stack 0
  4734                           
  4735                           ; 4 bytes @ 0x31
  4736  000091                     	ds	1
  4737  000092                     ??_MTouchSetSensor:
  4738  000092                     MTouchDecodeButtons@sensorState:
  4739                           	opt stack 0
  4740  000092                     ___awdiv@sign:
  4741                           	opt stack 0
  4742  000092                     __tdiv_to_l_@quot:
  4743                           	opt stack 0
  4744                           
  4745                           ; 4 bytes @ 0x32
  4746  000092                     	ds	1
  4747  000093                     ks0108SetDot@x:
  4748                           	opt stack 0
  4749  000093                     ks0108ClearDot@x:
  4750                           	opt stack 0
  4751  000093                     ___lldiv@counter:
  4752                           	opt stack 0
  4753  000093                     MTouchDecodeButtons@pButton:
  4754                           	opt stack 0
  4755  000093                     ___awdiv@quotient:
  4756                           	opt stack 0
  4757  000093                     __div_to_l_@quot:
  4758                           	opt stack 0
  4759                           
  4760                           ; 4 bytes @ 0x33
  4761  000093                     	ds	1
  4762  000094                     MTouchSetSensor@sensorNumber:
  4763                           	opt stack 0
  4764  000094                     ks0108SetDot@data:
  4765                           	opt stack 0
  4766  000094                     ks0108ClearDot@data:
  4767                           	opt stack 0
  4768                           
  4769                           ; 1 bytes @ 0x34
  4770  000094                     	ds	1
  4771  000095                     ___awtofl@sign:
  4772                           	opt stack 0
  4773  000095                     MTouchSetSensor@pSensor:
  4774                           	opt stack 0
  4775  000095                     ks0108PutChar@p_font:
  4776                           	opt stack 0
  4777                           
  4778                           ; 2 bytes @ 0x35
  4779  000095                     	ds	1
  4780  000096                     ?___flmul:
  4781                           	opt stack 0
  4782  000096                     __tdiv_to_l_@cntr:
  4783                           	opt stack 0
  4784  000096                     ___flmul@f1:
  4785                           	opt stack 0
  4786                           
  4787                           ; 4 bytes @ 0x36
  4788  000096                     	ds	1
  4789  000097                     ks0108PutChar@mode:
  4790                           	opt stack 0
  4791  000097                     __div_to_l_@cntr:
  4792                           	opt stack 0
  4793  000097                     __tdiv_to_l_@exp1:
  4794                           	opt stack 0
  4795  000097                     InitializeSystem@pll_startup_counter:
  4796                           	opt stack 0
  4797                           
  4798                           ; 2 bytes @ 0x37
  4799  000097                     	ds	1
  4800  000098                     ??_ks0108PutChar:
  4801  000098                     __div_to_l_@exp1:
  4802                           	opt stack 0
  4803                           
  4804                           ; 1 bytes @ 0x38
  4805  000098                     	ds	2
  4806  00009A                     ks0108PutChar@s:
  4807                           	opt stack 0
  4808  00009A                     ___flmul@f2:
  4809                           	opt stack 0
  4810                           
  4811                           ; 4 bytes @ 0x3A
  4812  00009A                     	ds	1
  4813  00009B                     ks0108PutChar@_fontHeight:
  4814                           	opt stack 0
  4815                           
  4816                           ; 1 bytes @ 0x3B
  4817  00009B                     	ds	1
  4818  00009C                     ks0108PutChar@_fontWidth:
  4819                           	opt stack 0
  4820                           
  4821                           ; 1 bytes @ 0x3C
  4822  00009C                     	ds	1
  4823  00009D                     ks0108PutChar@pChImage:
  4824                           	opt stack 0
  4825                           
  4826                           ; 2 bytes @ 0x3D
  4827  00009D                     	ds	1
  4828  00009E                     ??___flmul:
  4829                           
  4830                           ; 0 bytes @ 0x3E
  4831  00009E                     	ds	1
  4832  00009F                     ks0108PutChar@xCnt:
  4833                           	opt stack 0
  4834                           
  4835                           ; 1 bytes @ 0x3F
  4836  00009F                     	ds	1
  4837  0000A0                     ks0108PutChar@yCnt:
  4838                           	opt stack 0
  4839                           
  4840                           ; 1 bytes @ 0x40
  4841  0000A0                     	ds	1
  4842  0000A1                     ks0108PutChar@temp:
  4843                           	opt stack 0
  4844                           
  4845                           ; 1 bytes @ 0x41
  4846  0000A1                     	ds	1
  4847  0000A2                     ks0108PutChar@x_:
  4848                           	opt stack 0
  4849  0000A2                     ___flmul@exp:
  4850                           	opt stack 0
  4851                           
  4852                           ; 1 bytes @ 0x42
  4853  0000A2                     	ds	1
  4854  0000A3                     ks0108PutChar@y_:
  4855                           	opt stack 0
  4856  0000A3                     ___flmul@f3_as_product:
  4857                           	opt stack 0
  4858                           
  4859                           ; 4 bytes @ 0x43
  4860  0000A3                     	ds	1
  4861  0000A4                     ks0108PutChar@chWidth:
  4862                           	opt stack 0
  4863                           
  4864                           ; 1 bytes @ 0x44
  4865  0000A4                     	ds	1
  4866  0000A5                     ks0108PutChar@y:
  4867                           	opt stack 0
  4868                           
  4869                           ; 1 bytes @ 0x45
  4870  0000A5                     	ds	1
  4871  0000A6                     ks0108PutChar@x:
  4872                           	opt stack 0
  4873                           
  4874                           ; 1 bytes @ 0x46
  4875  0000A6                     	ds	1
  4876  0000A7                     ks0108PutChar@mask:
  4877                           	opt stack 0
  4878  0000A7                     ___flmul@cntr:
  4879                           	opt stack 0
  4880                           
  4881                           ; 1 bytes @ 0x47
  4882  0000A7                     	ds	1
  4883  0000A8                     ___flmul@sign:
  4884                           	opt stack 0
  4885  0000A8                     ks0108PutChar@base:
  4886                           	opt stack 0
  4887                           
  4888                           ; 2 bytes @ 0x48
  4889  0000A8                     	ds	1
  4890  0000A9                     ?_fround:
  4891                           	opt stack 0
  4892  0000A9                     ?_scale:
  4893                           	opt stack 0
  4894                           
  4895                           ; 4 bytes @ 0x49
  4896  0000A9                     	ds	1
  4897  0000AA                     LabelSetTxt@lb:
  4898                           	opt stack 0
  4899                           
  4900                           ; 2 bytes @ 0x4A
  4901  0000AA                     	ds	2
  4902  0000AC                     LabelSetTxt@str:
  4903                           	opt stack 0
  4904                           
  4905                           ; 2 bytes @ 0x4C
  4906  0000AC                     	ds	1
  4907  0000AD                     ??_fround:
  4908  0000AD                     _scale$3206:
  4909                           	opt stack 0
  4910                           
  4911                           ; 4 bytes @ 0x4D
  4912  0000AD                     	ds	1
  4913  0000AE                     ??_LabelSetTxt:
  4914                           
  4915                           ; 0 bytes @ 0x4E
  4916  0000AE                     	ds	2
  4917  0000B0                     LabelSetTxt@temp:
  4918                           	opt stack 0
  4919                           
  4920                           ; 1 bytes @ 0x50
  4921  0000B0                     	ds	1
  4922  0000B1                     LabelSetTxt@i:
  4923                           	opt stack 0
  4924  0000B1                     scale@scl:
  4925                           	opt stack 0
  4926  0000B1                     _fround$3205:
  4927                           	opt stack 0
  4928                           
  4929                           ; 4 bytes @ 0x51
  4930  0000B1                     	ds	1
  4931  0000B2                     ?___fltol:
  4932                           	opt stack 0
  4933  0000B2                     LabelCreate@lb:
  4934                           	opt stack 0
  4935  0000B2                     ___fltol@f1:
  4936                           	opt stack 0
  4937                           
  4938                           ; 4 bytes @ 0x52
  4939  0000B2                     	ds	2
  4940  0000B4                     LabelCreate@x:
  4941                           	opt stack 0
  4942                           
  4943                           ; 1 bytes @ 0x54
  4944  0000B4                     	ds	1
  4945  0000B5                     LabelCreate@y:
  4946                           	opt stack 0
  4947  0000B5                     _fround$3204:
  4948                           	opt stack 0
  4949                           
  4950                           ; 4 bytes @ 0x55
  4951  0000B5                     	ds	1
  4952  0000B6                     ??___fltol:
  4953  0000B6                     LabelCreate@font:
  4954                           	opt stack 0
  4955                           
  4956                           ; 2 bytes @ 0x56
  4957  0000B6                     	ds	2
  4958  0000B8                     LabelCreate@ln:
  4959                           	opt stack 0
  4960                           
  4961                           ; 1 bytes @ 0x58
  4962  0000B8                     	ds	1
  4963  0000B9                     ??_LabelCreate:
  4964  0000B9                     fround@prec:
  4965                           	opt stack 0
  4966                           
  4967                           ; 1 bytes @ 0x59
  4968  0000B9                     	ds	1
  4969  0000BA                     ?___fladd:
  4970                           	opt stack 0
  4971  0000BA                     ___fltol@sign1:
  4972                           	opt stack 0
  4973  0000BA                     ___fladd@f1:
  4974                           	opt stack 0
  4975                           
  4976                           ; 4 bytes @ 0x5A
  4977  0000BA                     	ds	1
  4978  0000BB                     LabelCreate@i:
  4979                           	opt stack 0
  4980  0000BB                     ___fltol@exp1:
  4981                           	opt stack 0
  4982                           
  4983                           ; 1 bytes @ 0x5B
  4984  0000BB                     	ds	3
  4985  0000BE                     ___fladd@f2:
  4986                           	opt stack 0
  4987                           
  4988                           ; 4 bytes @ 0x5E
  4989  0000BE                     	ds	4
  4990  0000C2                     tblptru	equ	0xFF8
  4991                           tblptrh	equ	0xFF7
  4992                           tblptrl	equ	0xFF6
  4993                           tablat	equ	0xFF5
  4994                           prodh	equ	0xFF4
  4995                           prodl	equ	0xFF3
  4996                           intcon	equ	0xFF2
  4997                           postinc0	equ	0xFEE
  4998                           wreg	equ	0xFE8
  4999                           indf1	equ	0xFE7
  5000                           postinc1	equ	0xFE6
  5001                           postdec1	equ	0xFE5
  5002                           fsr1h	equ	0xFE2
  5003                           fsr1l	equ	0xFE1
  5004                           indf2	equ	0xFDF
  5005                           postinc2	equ	0xFDE
  5006                           postdec2	equ	0xFDD
  5007                           fsr2h	equ	0xFDA
  5008                           fsr2l	equ	0xFD9
  5009                           status	equ	0xFD8
  5010                           
  5011                           ; 0 bytes @ 0x62
  5012                           
  5013                           	psect	cstackCOMRAM
  5014  000001                     __pcstackCOMRAM:
  5015                           	opt stack 0
  5016  000001                     putbyte@byte:
  5017                           	opt stack 0
  5018  000001                     crc_mb_init@code:
  5019                           	opt stack 0
  5020  000001                     crc_mb_calc@next:
  5021                           	opt stack 0
  5022  000001                     SendMessage@Msg:
  5023                           	opt stack 0
  5024  000001                     BSemOn@Sem:
  5025                           	opt stack 0
  5026  000001                     timed_getc@timeout:
  5027                           	opt stack 0
  5028  000001                     Read_b_eep@badd:
  5029                           	opt stack 0
  5030  000001                     Write_b_eep@badd:
  5031                           	opt stack 0
  5032                           
  5033                           ; 2 bytes @ 0x0
  5034  000001                     	ds	1
  5035  000002                     ??_crc_mb_calc:
  5036                           
  5037                           ; 0 bytes @ 0x1
  5038  000002                     	ds	1
  5039  000003                     ??_Read_b_eep:
  5040  000003                     Write_b_eep@bdat:
  5041                           	opt stack 0
  5042                           
  5043                           ; 1 bytes @ 0x2
  5044  000003                     	ds	1
  5045  000004                     ??_Write_b_eep:
  5046                           
  5047                           ; 0 bytes @ 0x3
  5048  000004                     	ds	2
  5049  000006                     crc_mb_calc@flag:
  5050                           	opt stack 0
  5051  000006                     read___ee@adr:
  5052                           	opt stack 0
  5053                           
  5054                           ; 2 bytes @ 0x5
  5055  000006                     	ds	1
  5056  000007                     crc_mb_calc@i:
  5057                           	opt stack 0
  5058  000007                     Write_b_eep@GIE_BIT_VAL:
  5059                           	opt stack 0
  5060                           
  5061                           ; 1 bytes @ 0x6
  5062  000007                     	ds	1
  5063  000008                     read___ee@var:
  5064                           	opt stack 0
  5065  000008                     crc_mb_calc@code:
  5066                           	opt stack 0
  5067  000008                     write___ee@adr:
  5068                           	opt stack 0
  5069                           
  5070                           ; 2 bytes @ 0x7
  5071  000008                     	ds	1
  5072  000009                     read___ee@byte:
  5073                           	opt stack 0
  5074  000009                     crc_mb@buffer:
  5075                           	opt stack 0
  5076  000009                     crc_mb_check@buffer:
  5077                           	opt stack 0
  5078                           
  5079                           ; 2 bytes @ 0x8
  5080  000009                     	ds	1
  5081  00000A                     write___ee@var:
  5082                           	opt stack 0
  5083                           
  5084                           ; 1 bytes @ 0x9
  5085  00000A                     	ds	1
  5086  00000B                     write___ee@byte:
  5087                           	opt stack 0
  5088  00000B                     crc_mb@count:
  5089                           	opt stack 0
  5090  00000B                     crc_mb_check@cnt:
  5091                           	opt stack 0
  5092                           
  5093                           ; 1 bytes @ 0xA
  5094  00000B                     	ds	1
  5095  00000C                     ??_crc_mb_check:
  5096  00000C                     ??_crc_mb:
  5097  00000C                     set_ee_default@c:
  5098                           	opt stack 0
  5099                           
  5100                           ; 1 bytes @ 0xB
  5101  00000C                     	ds	1
  5102  00000D                     set_ee_default@c1:
  5103                           	opt stack 0
  5104                           
  5105                           ; 1 bytes @ 0xC
  5106  00000D                     	ds	1
  5107  00000E                     set_ee_default@i:
  5108                           	opt stack 0
  5109                           
  5110                           ; 2 bytes @ 0xD
  5111  00000E                     	ds	1
  5112  00000F                     crc_mb@i:
  5113                           	opt stack 0
  5114                           
  5115                           ; 1 bytes @ 0xE
  5116  00000F                     	ds	1
  5117  000010                     crc_mb_check@i:
  5118                           	opt stack 0
  5119  000010                     crc_mb@CRC:
  5120                           	opt stack 0
  5121                           
  5122                           ; 2 bytes @ 0xF
  5123  000010                     	ds	1
  5124  000011                     crc_mb_check@crc:
  5125                           	opt stack 0
  5126                           
  5127                           ; 2 bytes @ 0x10
  5128  000011                     	ds	2
  5129  000013                     ??_LO_ISR:
  5130                           
  5131                           ; 0 bytes @ 0x12
  5132  000013                     	ds	14
  5133  000021                     LO_ISR@lcAdr:
  5134                           	opt stack 0
  5135                           
  5136                           ; 1 bytes @ 0x20
  5137  000021                     	ds	1
  5138  000022                     LO_ISR@lcData:
  5139                           	opt stack 0
  5140                           
  5141                           ; 1 bytes @ 0x21
  5142  000022                     	ds	1
  5143  000023                     LO_ISR@i:
  5144                           	opt stack 0
  5145                           
  5146                           ; 1 bytes @ 0x22
  5147  000023                     	ds	1
  5148                           tblptru	equ	0xFF8
  5149                           tblptrh	equ	0xFF7
  5150                           tblptrl	equ	0xFF6
  5151                           tablat	equ	0xFF5
  5152                           prodh	equ	0xFF4
  5153                           prodl	equ	0xFF3
  5154                           intcon	equ	0xFF2
  5155                           postinc0	equ	0xFEE
  5156                           wreg	equ	0xFE8
  5157                           indf1	equ	0xFE7
  5158                           postinc1	equ	0xFE6
  5159                           postdec1	equ	0xFE5
  5160                           fsr1h	equ	0xFE2
  5161                           fsr1l	equ	0xFE1
  5162                           indf2	equ	0xFDF
  5163                           postinc2	equ	0xFDE
  5164                           postdec2	equ	0xFDD
  5165                           fsr2h	equ	0xFDA
  5166                           fsr2l	equ	0xFD9
  5167                           status	equ	0xFD8
  5168                           
  5169 ;;
  5170 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  5171 ;;
  5172 ;; *************** function _main *****************
  5173 ;; Defined at:
  5174 ;;		line 39 in file "../Main.c"
  5175 ;; Parameters:    Size  Location     Type
  5176 ;;		None
  5177 ;; Auto vars:     Size  Location     Type
  5178 ;;		None
  5179 ;; Return value:  Size  Location     Type
  5180 ;;		None               void
  5181 ;; Registers used:
  5182 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5183 ;; Tracked objects:
  5184 ;;		On entry : 0/0
  5185 ;;		On exit  : F/0
  5186 ;;		Unchanged: 0/0
  5187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5192 ;;Total ram usage:        0 bytes
  5193 ;; Hardware stack levels required when called:   16
  5194 ;; This function calls:
  5195 ;;		_Beep
  5196 ;;		_InitMessages
  5197 ;;		_InitializeSystem
  5198 ;;		_LabelCreate
  5199 ;;		_ProcessMessages
  5200 ;;		_ks0108GotoXY
  5201 ;;		_ks0108Init
  5202 ;;		_ks0108PutChar
  5203 ;;		_tsk_display
  5204 ;;		_tsk_ds18b20
  5205 ;;		_tsk_process
  5206 ;; This function is called by:
  5207 ;;		Startup code after reset
  5208 ;; This function uses a non-reentrant model
  5209 ;;
  5210                           
  5211                           	psect	text0
  5212  002932                     __ptext0:
  5213                           	opt stack 0
  5214  002932                     _main:
  5215                           	opt stack 15
  5216                           
  5217                           ;Main.c: 41: __nop();
  5218                           
  5219                           ;incstack = 0
  5220  002932  F000               	nop	
  5221                           
  5222                           ;Main.c: 42: InitMessages();
  5223  002934  ECB4  F019         	call	_InitMessages	;wreg free
  5224                           
  5225                           ; BSR set to: 0
  5226                           ;Main.c: 43: InitializeSystem();
  5227  002938  EC89  F007         	call	_InitializeSystem	;wreg free
  5228                           
  5229                           ; BSR set to: 0
  5230                           ;Main.c: 45: ks0108Init();
  5231  00293C  EC2A  F019         	call	_ks0108Init	;wreg free
  5232                           
  5233                           ; BSR set to: 0
  5234                           ;Main.c: 49: LabelCreate(&lb_temp, 60, 22, font13, 10);
  5235  002940  0E01               	movlw	high _lb_temp
  5236  002942  0100               	movlb	0	; () banked
  5237  002944  6FB3               	movwf	(LabelCreate@lb+1)& (0+255),b
  5238  002946  0E99               	movlw	low _lb_temp
  5239  002948  6FB2               	movwf	LabelCreate@lb& (0+255),b
  5240  00294A  0E3C               	movlw	60
  5241  00294C  6FB4               	movwf	LabelCreate@x& (0+255),b
  5242  00294E  0E16               	movlw	22
  5243  002950  6FB5               	movwf	LabelCreate@y& (0+255),b
  5244  002952  0EF4               	movlw	high _font13
  5245  002954  6FB7               	movwf	(LabelCreate@font+1)& (0+255),b
  5246  002956  0E83               	movlw	low _font13
  5247  002958  6FB6               	movwf	LabelCreate@font& (0+255),b
  5248  00295A  0E0A               	movlw	10
  5249  00295C  6FB8               	movwf	LabelCreate@ln& (0+255),b
  5250  00295E  EC2D  F015         	call	_LabelCreate	;wreg free
  5251                           
  5252                           ; BSR set to: 0
  5253                           ;Main.c: 55: ks0108GotoXY(40, 50);
  5254  002962  0E32               	movlw	50
  5255  002964  6F89               	movwf	ks0108GotoXY@y& (0+255),b
  5256  002966  0E28               	movlw	40
  5257  002968  ECB6  F017         	call	_ks0108GotoXY
  5258                           
  5259                           ;Main.c: 56: ks0108PutChar('A', &font13, 1);
  5260  00296C  D824               	call	PL94	;call to abstracted procedure
  5261  00296E  0E41               	movlw	65
  5262  002970  EC0B  F010         	call	_ks0108PutChar
  5263                           
  5264                           ; BSR set to: 0
  5265                           ;Main.c: 57: ks0108GotoXY(50, 50);
  5266  002974  0E32               	movlw	50
  5267  002976  6F89               	movwf	ks0108GotoXY@y& (0+255),b
  5268  002978  ECB6  F017         	call	_ks0108GotoXY
  5269                           
  5270                           ;Main.c: 58: ks0108PutChar('B', &font13, 1);
  5271  00297C  D81C               	call	PL94	;call to abstracted procedure
  5272  00297E  0E42               	movlw	66
  5273  002980  EC0B  F010         	call	_ks0108PutChar
  5274                           
  5275                           ; BSR set to: 0
  5276                           ;Main.c: 66: __nop();
  5277  002984  F000               	nop	
  5278                           
  5279                           ;Main.c: 67: __nop();
  5280  002986  F000               	nop	
  5281                           
  5282                           ;Main.c: 70: INTCONbits.GIE = 1;
  5283  002988  8EF2               	bsf	intcon,7,c	;volatile
  5284                           
  5285                           ;Main.c: 72: Beep(10);
  5286  00298A  0E0A               	movlw	10
  5287  00298C  EC2B  F01B         	call	_Beep
  5288  002990                     l8451:
  5289                           
  5290                           ; BSR set to: 0
  5291                           ;Main.c: 80: tsk_display();
  5292  002990  ECED  F016         	call	_tsk_display	;wreg free
  5293                           
  5294                           ; BSR set to: 0
  5295                           ;Main.c: 81: tsk_process();
  5296  002994  EC94  F019         	call	_tsk_process	;wreg free
  5297                           
  5298                           ;Main.c: 82: tsk_ds18b20();
  5299  002998  EC04  F00E         	call	_tsk_ds18b20	;wreg free
  5300                           
  5301                           ; BSR set to: 0
  5302                           ;Main.c: 86: __nop();
  5303  00299C  F000               	nop	
  5304                           
  5305                           ;Main.c: 87: __nop();
  5306  00299E  F000               	nop	
  5307                           
  5308                           ;Main.c: 90: if((FERR1) || (OERR1)) {
  5309  0029A0  B4AB               	btfsc	4011,2,c	;volatile
  5310  0029A2  D002               	goto	l575
  5311  0029A4  A2AB               	btfss	4011,1,c	;volatile
  5312  0029A6  D003               	goto	l573
  5313  0029A8                     l575:
  5314                           
  5315                           ;Main.c: 91: CREN1 = 0;
  5316  0029A8  98AB               	bcf	4011,4,c	;volatile
  5317                           
  5318                           ;Main.c: 92: __nop();
  5319  0029AA  F000               	nop	
  5320                           
  5321                           ;Main.c: 93: CREN1 = 1;
  5322  0029AC  88AB               	bsf	4011,4,c	;volatile
  5323  0029AE                     l573:
  5324                           
  5325                           ;Main.c: 94: }
  5326                           ;Main.c: 96: if(SWDTEN == 0) {
  5327  0029AE  0004               	clrwdt		;# 
  5328                           
  5329                           ;Main.c: 102: ProcessMessages();
  5330  0029B0  EC3C  F016         	call	_ProcessMessages	;wreg free
  5331  0029B4  D7ED               	goto	l8451
  5332  0029B6                     __end_of_main:
  5333                           	opt stack 0
  5334  0029B6                     PL94:
  5335                           	opt stack 15
  5336  0029B6  0EF4               	movlw	high _font13
  5337  0029B8  0100               	movlb	0	; () banked
  5338  0029BA  6F96               	movwf	(ks0108PutChar@p_font+1)& (0+255),b
  5339  0029BC  0E83               	movlw	low _font13
  5340  0029BE  6F95               	movwf	ks0108PutChar@p_font& (0+255),b
  5341  0029C0  0E01               	movlw	1
  5342  0029C2  6F97               	movwf	ks0108PutChar@mode& (0+255),b
  5343  0029C4  0C01               	retlw	1
  5344  0029C6                     __end_ofPL94:
  5345                           	opt stack 0
  5346                           tblptru	equ	0xFF8
  5347                           tblptrh	equ	0xFF7
  5348                           tblptrl	equ	0xFF6
  5349                           tablat	equ	0xFF5
  5350                           prodh	equ	0xFF4
  5351                           prodl	equ	0xFF3
  5352                           intcon	equ	0xFF2
  5353                           postinc0	equ	0xFEE
  5354                           wreg	equ	0xFE8
  5355                           indf1	equ	0xFE7
  5356                           postinc1	equ	0xFE6
  5357                           postdec1	equ	0xFE5
  5358                           fsr1h	equ	0xFE2
  5359                           fsr1l	equ	0xFE1
  5360                           indf2	equ	0xFDF
  5361                           postinc2	equ	0xFDE
  5362                           postdec2	equ	0xFDD
  5363                           fsr2h	equ	0xFDA
  5364                           fsr2l	equ	0xFD9
  5365                           status	equ	0xFD8
  5366                           
  5367 ;; *************** function _tsk_process *****************
  5368 ;; Defined at:
  5369 ;;		line 108 in file "../Main.c"
  5370 ;; Parameters:    Size  Location     Type
  5371 ;;		None
  5372 ;; Auto vars:     Size  Location     Type
  5373 ;;		None
  5374 ;; Return value:  Size  Location     Type
  5375 ;;		None               void
  5376 ;; Registers used:
  5377 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5378 ;; Tracked objects:
  5379 ;;		On entry : F/0
  5380 ;;		On exit  : D/0
  5381 ;;		Unchanged: 0/0
  5382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5384 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5386 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5387 ;;Total ram usage:        0 bytes
  5388 ;; Hardware stack levels used:    1
  5389 ;; Hardware stack levels required when called:   10
  5390 ;; This function calls:
  5391 ;;		_Beep
  5392 ;;		_MTouchDecode
  5393 ;; This function is called by:
  5394 ;;		_main
  5395 ;; This function uses a non-reentrant model
  5396 ;;
  5397                           
  5398                           	psect	text1
  5399  003328                     __ptext1:
  5400                           	opt stack 0
  5401  003328                     _tsk_process:
  5402                           	opt stack 20
  5403                           
  5404                           ; BSR set to: 0
  5405                           ;Main.c: 109: static int prev_tick, i;
  5406                           ;Main.c: 113: MTouchDecode();
  5407                           
  5408                           ; BSR set to: 0
  5409                           ;incstack = 0
  5410  003328  EC6B  F01B         	call	_MTouchDecode	;wreg free
  5411                           
  5412                           ; BSR set to: 0
  5413                           ;Main.c: 116: if(((buttons[KEY_7_LT_OUT_BACK].state) == CONTROL_PRESSED)) {
  5414  00332C  0102               	movlb	2	; () banked
  5415  00332E  0538               	decf	(_buttons+56)& (0+255),w,b
  5416  003330  E104               	bnz	l6501
  5417                           
  5418                           ; BSR set to: 2
  5419                           ;Main.c: 117: Beep(10);
  5420  003332  0E0A               	movlw	10
  5421  003334  EC2B  F01B         	call	_Beep
  5422                           
  5423                           ; BSR set to: 0
  5424                           ;Main.c: 118: LATAbits.LATA6 ^= 1;
  5425  003338  7C89               	btg	3977,6,c	;volatile
  5426  00333A                     l6501:
  5427                           
  5428                           ;Main.c: 119: }
  5429                           ;Main.c: 121: if(((buttons[KEY_8_LT_OUT_SIDE].state) == CONTROL_PRESSED)) {
  5430  00333A  0102               	movlb	2	; () banked
  5431  00333C  0540               	decf	(_buttons+64)& (0+255),w,b
  5432  00333E  E104               	bnz	l6507
  5433                           
  5434                           ; BSR set to: 2
  5435                           ;Main.c: 122: Beep(10);
  5436  003340  0E0A               	movlw	10
  5437  003342  EC2B  F01B         	call	_Beep
  5438                           
  5439                           ; BSR set to: 0
  5440                           ;Main.c: 123: LATAbits.LATA7 ^= 1;
  5441  003346  7E89               	btg	3977,7,c	;volatile
  5442  003348                     l6507:
  5443                           
  5444                           ;Main.c: 124: }
  5445                           ;Main.c: 126: if(((buttons[KEY_6_ROZ_ON].state) == CONTROL_PRESSED)) {
  5446  003348  0102               	movlb	2	; () banked
  5447  00334A  0530               	decf	(_buttons+48)& (0+255),w,b
  5448  00334C  E104               	bnz	l6513
  5449                           
  5450                           ; BSR set to: 2
  5451                           ;Main.c: 127: Beep(10);
  5452  00334E  0E0A               	movlw	10
  5453  003350  EC2B  F01B         	call	_Beep
  5454                           
  5455                           ; BSR set to: 0
  5456                           ;Main.c: 128: LATBbits.LATB7 ^= 1;
  5457  003354  7E8A               	btg	3978,7,c	;volatile
  5458  003356                     l6513:
  5459                           
  5460                           ;Main.c: 129: }
  5461                           ;Main.c: 131: if(((buttons[KEY_0_AVT_PWR_220].state) == CONTROL_PRESSED)) {
  5462  003356  0102               	movlb	2	; () banked
  5463  003358  0500               	decf	_buttons& (0+255),w,b
  5464  00335A  A4D8               	btfss	status,2,c
  5465  00335C  0012               	return	
  5466                           
  5467                           ; BSR set to: 2
  5468                           ;Main.c: 132: Beep(10);
  5469  00335E  0E0A               	movlw	10
  5470  003360  EC2B  F01B         	call	_Beep
  5471                           
  5472                           ; BSR set to: 0
  5473                           ;Main.c: 133: LATBbits.LATB6 ^= 1;
  5474  003364  7C8A               	btg	3978,6,c	;volatile
  5475  003366  0012               	return	
  5476  003368                     __end_of_tsk_process:
  5477                           	opt stack 0
  5478                           tblptru	equ	0xFF8
  5479                           tblptrh	equ	0xFF7
  5480                           tblptrl	equ	0xFF6
  5481                           tablat	equ	0xFF5
  5482                           prodh	equ	0xFF4
  5483                           prodl	equ	0xFF3
  5484                           intcon	equ	0xFF2
  5485                           postinc0	equ	0xFEE
  5486                           wreg	equ	0xFE8
  5487                           indf1	equ	0xFE7
  5488                           postinc1	equ	0xFE6
  5489                           postdec1	equ	0xFE5
  5490                           fsr1h	equ	0xFE2
  5491                           fsr1l	equ	0xFE1
  5492                           indf2	equ	0xFDF
  5493                           postinc2	equ	0xFDE
  5494                           postdec2	equ	0xFDD
  5495                           fsr2h	equ	0xFDA
  5496                           fsr2l	equ	0xFD9
  5497                           status	equ	0xFD8
  5498                           
  5499 ;; *************** function _MTouchDecode *****************
  5500 ;; Defined at:
  5501 ;;		line 58 in file "../lib/mTouchCap/mTouchControl.c"
  5502 ;; Parameters:    Size  Location     Type
  5503 ;;		None
  5504 ;; Auto vars:     Size  Location     Type
  5505 ;;		None
  5506 ;; Return value:  Size  Location     Type
  5507 ;;		None               void
  5508 ;; Registers used:
  5509 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, cstack
  5510 ;; Tracked objects:
  5511 ;;		On entry : F/0
  5512 ;;		On exit  : F/0
  5513 ;;		Unchanged: 0/0
  5514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5518 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5519 ;;Total ram usage:        0 bytes
  5520 ;; Hardware stack levels used:    1
  5521 ;; Hardware stack levels required when called:    9
  5522 ;; This function calls:
  5523 ;;		_MTouchDecodeButtons
  5524 ;; This function is called by:
  5525 ;;		_tsk_process
  5526 ;; This function uses a non-reentrant model
  5527 ;;
  5528                           
  5529                           	psect	text2
  5530  0036D6                     __ptext2:
  5531                           	opt stack 0
  5532  0036D6                     _MTouchDecode:
  5533                           	opt stack 20
  5534                           
  5535                           ; BSR set to: 0
  5536                           ;mTouchControl.c: 61: MTouchDecodeButtons();
  5537                           
  5538                           ;incstack = 0
  5539  0036D6  EFBE  F009         	goto	_MTouchDecodeButtons	;wreg free
  5540  0036DA                     __end_of_MTouchDecode:
  5541                           	opt stack 0
  5542                           tblptru	equ	0xFF8
  5543                           tblptrh	equ	0xFF7
  5544                           tblptrl	equ	0xFF6
  5545                           tablat	equ	0xFF5
  5546                           prodh	equ	0xFF4
  5547                           prodl	equ	0xFF3
  5548                           intcon	equ	0xFF2
  5549                           postinc0	equ	0xFEE
  5550                           wreg	equ	0xFE8
  5551                           indf1	equ	0xFE7
  5552                           postinc1	equ	0xFE6
  5553                           postdec1	equ	0xFE5
  5554                           fsr1h	equ	0xFE2
  5555                           fsr1l	equ	0xFE1
  5556                           indf2	equ	0xFDF
  5557                           postinc2	equ	0xFDE
  5558                           postdec2	equ	0xFDD
  5559                           fsr2h	equ	0xFDA
  5560                           fsr2l	equ	0xFD9
  5561                           status	equ	0xFD8
  5562                           
  5563 ;; *************** function _MTouchDecodeButtons *****************
  5564 ;; Defined at:
  5565 ;;		line 82 in file "../lib/mTouchCap/mTouchButton.c"
  5566 ;; Parameters:    Size  Location     Type
  5567 ;;		None
  5568 ;; Auto vars:     Size  Location     Type
  5569 ;;  pButton         2   51[BANK0 ] PTR struct tag_MTOUCHBUT
  5570 ;;		 -> buttons(104), 
  5571 ;;  pMostPressed    2   48[BANK0 ] PTR struct tag_MTOUCHBUT
  5572 ;;		 -> NULL(0), buttons(104), 
  5573 ;;  pSensor         2   43[BANK0 ] PTR struct tag_SENSOR
  5574 ;;		 -> sensors(352), 
  5575 ;;  sensorState     1   50[BANK0 ] unsigned char 
  5576 ;;  decode          1   47[BANK0 ] unsigned char 
  5577 ;;  state           1   46[BANK0 ] unsigned char 
  5578 ;;  i               1   45[BANK0 ] unsigned char 
  5579 ;; Return value:  Size  Location     Type
  5580 ;;		None               void
  5581 ;; Registers used:
  5582 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl
  5583 ;; Tracked objects:
  5584 ;;		On entry : F/0
  5585 ;;		On exit  : F/0
  5586 ;;		Unchanged: 0/0
  5587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5589 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5590 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5591 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5592 ;;Total ram usage:       14 bytes
  5593 ;; Hardware stack levels used:    1
  5594 ;; Hardware stack levels required when called:    8
  5595 ;; This function calls:
  5596 ;;		Nothing
  5597 ;; This function is called by:
  5598 ;;		_MTouchDecode
  5599 ;; This function uses a non-reentrant model
  5600 ;;
  5601                           
  5602                           	psect	text3
  5603  00137C                     __ptext3:
  5604                           	opt stack 0
  5605  00137C                     _MTouchDecodeButtons:
  5606                           	opt stack 20
  5607                           
  5608                           ; BSR set to: 0
  5609                           ;mTouchButton.c: 84: MTOUCHBUTTON* pButton = (MTOUCHBUTTON*)buttons;
  5610                           
  5611                           ; BSR set to: 0
  5612                           ;incstack = 0
  5613  00137C  0E02               	movlw	high _buttons
  5614  00137E  0100               	movlb	0	; () banked
  5615  001380  6F94               	movwf	(MTouchDecodeButtons@pButton+1)& (0+255),b
  5616  001382  0E00               	movlw	low _buttons
  5617  001384  6F93               	movwf	MTouchDecodeButtons@pButton& (0+255),b
  5618                           
  5619                           ; BSR set to: 0
  5620                           ;mTouchButton.c: 86: MTOUCHBUTTON* pMostPressedButton = (0);
  5621  001386  6B90               	clrf	MTouchDecodeButtons@pMostPressedButton& (0+255),b
  5622  001388  6B91               	clrf	(MTouchDecodeButtons@pMostPressedButton+1)& (0+255),b
  5623                           
  5624                           ; BSR set to: 0
  5625                           ;mTouchButton.c: 88: SENSOR* pSensor;
  5626                           ;mTouchButton.c: 90: UINT8 i;
  5627                           ;mTouchButton.c: 92: UINT8 sensorState;
  5628                           ;mTouchButton.c: 94: UINT8 decode;
  5629                           ;mTouchButton.c: 96: UINT8 state;
  5630                           ;mTouchButton.c: 98: for(i = 0; i < 13; i++) {
  5631  00138A  6B8D               	clrf	MTouchDecodeButtons@i& (0+255),b
  5632  00138C                     l4879:
  5633                           
  5634                           ; BSR set to: 0
  5635                           ;mTouchButton.c: 100: pSensor = pButton->pSensor;
  5636  00138C  EE20 F004          	lfsr	2,4
  5637  001390  5193               	movf	MTouchDecodeButtons@pButton& (0+255),w,b
  5638  001392  26D9               	addwf	fsr2l,f,c
  5639  001394  5194               	movf	(MTouchDecodeButtons@pButton+1)& (0+255),w,b
  5640  001396  22DA               	addwfc	fsr2h,f,c
  5641  001398  CFDE F08B          	movff	postinc2,MTouchDecodeButtons@pSensor
  5642  00139C  CFDD F08C          	movff	postdec2,MTouchDecodeButtons@pSensor+1
  5643                           
  5644                           ;mTouchButton.c: 102: sensorState = pSensor->state;
  5645  0013A0  EE20 F01C          	lfsr	2,28
  5646  0013A4  518B               	movf	MTouchDecodeButtons@pSensor& (0+255),w,b
  5647  0013A6  26D9               	addwf	fsr2l,f,c
  5648  0013A8  518C               	movf	(MTouchDecodeButtons@pSensor+1)& (0+255),w,b
  5649  0013AA  22DA               	addwfc	fsr2h,f,c
  5650  0013AC  50DF               	movf	indf2,w,c
  5651  0013AE  6F92               	movwf	MTouchDecodeButtons@sensorState& (0+255),b
  5652                           
  5653                           ; BSR set to: 0
  5654                           ;mTouchButton.c: 104: if(sensorState != SENSOR_INITIALIZING) {
  5655  0013B0  5192               	movf	MTouchDecodeButtons@sensorState& (0+255),w,b
  5656  0013B2  E101 D0BF          	bz	l4939
  5657                           
  5658                           ; BSR set to: 0
  5659                           ;mTouchButton.c: 105: decode = pButton->decode;
  5660  0013B6  EE20 F002          	lfsr	2,2
  5661  0013BA  5193               	movf	MTouchDecodeButtons@pButton& (0+255),w,b
  5662  0013BC  26D9               	addwf	fsr2l,f,c
  5663  0013BE  5194               	movf	(MTouchDecodeButtons@pButton+1)& (0+255),w,b
  5664  0013C0  22DA               	addwfc	fsr2h,f,c
  5665  0013C2  50DF               	movf	indf2,w,c
  5666  0013C4  6F8F               	movwf	MTouchDecodeButtons@decode& (0+255),b
  5667                           
  5668                           ;mTouchButton.c: 107: state = pButton->curState;
  5669  0013C6  EE20 F001          	lfsr	2,1
  5670  0013CA  5193               	movf	MTouchDecodeButtons@pButton& (0+255),w,b
  5671  0013CC  26D9               	addwf	fsr2l,f,c
  5672  0013CE  5194               	movf	(MTouchDecodeButtons@pButton+1)& (0+255),w,b
  5673  0013D0  22DA               	addwfc	fsr2h,f,c
  5674  0013D2  50DF               	movf	indf2,w,c
  5675  0013D4  6F8E               	movwf	MTouchDecodeButtons@state& (0+255),b
  5676                           
  5677                           ; BSR set to: 0
  5678                           ;mTouchButton.c: 109: if(decode & DECODE_PRESS_REPEAT) {
  5679  0013D6  A78F               	btfss	MTouchDecodeButtons@decode& (0+255),3,b
  5680  0013D8  D037               	goto	l4901
  5681                           
  5682                           ; BSR set to: 0
  5683                           ;mTouchButton.c: 111: if(state == CONTROL_RELEASED) {
  5684  0013DA  518E               	movf	MTouchDecodeButtons@state& (0+255),w,b
  5685  0013DC  0A02               	xorlw	2
  5686  0013DE  E104               	bnz	l4891
  5687                           
  5688                           ; BSR set to: 0
  5689                           ;mTouchButton.c: 112: pButton->pressCounter = 6400;
  5690  0013E0  D8C5               	call	PL102	;call to abstracted procedure
  5691  0013E2  0E19               	movlw	25
  5692  0013E4  6EDD               	movwf	postdec2,c
  5693                           
  5694                           ;mTouchButton.c: 114: } else {
  5695  0013E6  D030               	goto	l4901
  5696  0013E8                     l4891:
  5697                           
  5698                           ; BSR set to: 0
  5699                           ;mTouchButton.c: 116: if(pButton->pressCounter > 0) {
  5700  0013E8  EE20 F006          	lfsr	2,6
  5701  0013EC  5193               	movf	MTouchDecodeButtons@pButton& (0+255),w,b
  5702  0013EE  26D9               	addwf	fsr2l,f,c
  5703  0013F0  5194               	movf	(MTouchDecodeButtons@pButton+1)& (0+255),w,b
  5704  0013F2  22DA               	addwfc	fsr2h,f,c
  5705  0013F4  52DE               	movf	postinc2,f,c
  5706  0013F6  50DD               	movf	postdec2,w,c
  5707  0013F8  0A80               	xorlw	128
  5708  0013FA  0F80               	addlw	128
  5709  0013FC  0E01               	movlw	1
  5710  0013FE  B4D8               	btfsc	status,2,c
  5711  001400  5CDF               	subwf	indf2,w,c
  5712                           
  5713                           ; BSR set to: 0
  5714                           ;mTouchButton.c: 117: state = CONTROL_PRESSED;
  5715  001402  0E01               	movlw	1
  5716  001404  A0D8               	btfss	status,0,c
  5717                           
  5718                           ; BSR set to: 0
  5719                           ;mTouchButton.c: 119: state = CONTROL_RELEASED;
  5720                           
  5721                           ;mTouchButton.c: 118: } else {
  5722  001406  0E02               	movlw	2
  5723  001408  6F8E               	movwf	MTouchDecodeButtons@state& (0+255),b
  5724                           
  5725                           ; BSR set to: 0
  5726                           ;mTouchButton.c: 120: }
  5727                           ;mTouchButton.c: 122: if(pButton->pressCounter < -1280) {
  5728  00140A  EE20 F006          	lfsr	2,6
  5729  00140E  5193               	movf	MTouchDecodeButtons@pButton& (0+255),w,b
  5730  001410  26D9               	addwf	fsr2l,f,c
  5731  001412  5194               	movf	(MTouchDecodeButtons@pButton+1)& (0+255),w,b
  5732  001414  22DA               	addwfc	fsr2h,f,c
  5733  001416  CFDE F087          	movff	postinc2,??_MTouchDecodeButtons
  5734  00141A  CFDD F088          	movff	postdec2,??_MTouchDecodeButtons+1
  5735  00141E  5188               	movf	(??_MTouchDecodeButtons+1)& (0+255),w,b
  5736  001420  0A80               	xorlw	128
  5737  001422  6EF3               	movwf	prodl,c
  5738  001424  0E7B               	movlw	123
  5739  001426  5CF3               	subwf	prodl,w,c
  5740  001428  0E00               	movlw	0
  5741  00142A  B4D8               	btfsc	status,2,c
  5742  00142C  5D87               	subwf	??_MTouchDecodeButtons& (0+255),w,b
  5743  00142E  E203               	bc	l35
  5744                           
  5745                           ; BSR set to: 0
  5746                           ;mTouchButton.c: 123: pButton->pressCounter = 1280;
  5747  001430  D89D               	call	PL102	;call to abstracted procedure
  5748  001432  0E05               	movlw	5
  5749  001434  6EDD               	movwf	postdec2,c
  5750  001436                     l35:
  5751                           
  5752                           ; BSR set to: 0
  5753                           ;mTouchButton.c: 124: }
  5754                           ;mTouchButton.c: 126: pButton->pressCounter--;
  5755  001436  EE20 F006          	lfsr	2,6
  5756  00143A  5193               	movf	MTouchDecodeButtons@pButton& (0+255),w,b
  5757  00143C  26D9               	addwf	fsr2l,f,c
  5758  00143E  5194               	movf	(MTouchDecodeButtons@pButton+1)& (0+255),w,b
  5759  001440  22DA               	addwfc	fsr2h,f,c
  5760  001442  06DE               	decf	postinc2,f,c
  5761  001444  0E00               	movlw	0
  5762  001446  5ADD               	subwfb	postdec2,f,c
  5763  001448                     l4901:
  5764                           
  5765                           ; BSR set to: 0
  5766                           ;mTouchButton.c: 127: }
  5767                           ;mTouchButton.c: 128: }
  5768                           ;mTouchButton.c: 131: if(decode & DECODE_ONE_EVENT) {
  5769  001448  A98F               	btfss	MTouchDecodeButtons@decode& (0+255),4,b
  5770  00144A  D008               	goto	l4907
  5771                           
  5772                           ; BSR set to: 0
  5773                           ;mTouchButton.c: 132: if(pButton->state & state) {
  5774  00144C  C093  FFD9         	movff	MTouchDecodeButtons@pButton,fsr2l
  5775  001450  C094  FFDA         	movff	MTouchDecodeButtons@pButton+1,fsr2h
  5776  001454  50DF               	movf	indf2,w,c
  5777  001456  158E               	andwf	MTouchDecodeButtons@state& (0+255),w,b
  5778  001458  A4D8               	btfss	status,2,c
  5779                           
  5780                           ; BSR set to: 0
  5781                           ;mTouchButton.c: 133: state |= CONTROL_IDLE;
  5782  00145A  8F8E               	bsf	MTouchDecodeButtons@state& (0+255),7,b
  5783  00145C                     l4907:
  5784                           
  5785                           ; BSR set to: 0
  5786                           ;mTouchButton.c: 134: }
  5787                           ;mTouchButton.c: 135: }
  5788                           ;mTouchButton.c: 137: pButton->state = state;
  5789  00145C  C093  FFD9         	movff	MTouchDecodeButtons@pButton,fsr2l
  5790  001460  C094  FFDA         	movff	MTouchDecodeButtons@pButton+1,fsr2h
  5791  001464  C08E  FFDF         	movff	MTouchDecodeButtons@state,indf2
  5792                           
  5793                           ; BSR set to: 0
  5794                           ;mTouchButton.c: 140: if(decode & DECODE_TOGGLE) {
  5795  001468  A18F               	btfss	MTouchDecodeButtons@decode& (0+255),0,b
  5796  00146A  D022               	goto	l38
  5797                           
  5798                           ; BSR set to: 0
  5799                           ;mTouchButton.c: 141: if(sensorState != pButton->prevSensorState) {
  5800  00146C  EE20 F003          	lfsr	2,3
  5801  001470  5193               	movf	MTouchDecodeButtons@pButton& (0+255),w,b
  5802  001472  26D9               	addwf	fsr2l,f,c
  5803  001474  5194               	movf	(MTouchDecodeButtons@pButton+1)& (0+255),w,b
  5804  001476  22DA               	addwfc	fsr2h,f,c
  5805  001478  50DF               	movf	indf2,w,c
  5806  00147A  1992               	xorwf	MTouchDecodeButtons@sensorState& (0+255),w,b
  5807  00147C  E010               	bz	l39
  5808                           
  5809                           ; BSR set to: 0
  5810                           ;mTouchButton.c: 142: if(sensorState == SENSOR_PRESSED) {
  5811  00147E  5192               	movf	MTouchDecodeButtons@sensorState& (0+255),w,b
  5812  001480  0A02               	xorlw	2
  5813  001482  E10D               	bnz	l39
  5814                           
  5815                           ; BSR set to: 0
  5816                           ;mTouchButton.c: 143: if(pButton->curState == CONTROL_PRESSED) {
  5817  001484  D86C               	call	PL58	;call to abstracted procedure
  5818  001486  62DF               	cpfseq	indf2,c
  5819  001488  D008               	goto	l4919
  5820                           
  5821                           ; BSR set to: 0
  5822                           ;mTouchButton.c: 144: pButton->curState = CONTROL_RELEASED;
  5823  00148A  EE20 F001          	lfsr	2,1
  5824  00148E  5193               	movf	MTouchDecodeButtons@pButton& (0+255),w,b
  5825  001490  26D9               	addwf	fsr2l,f,c
  5826  001492  5194               	movf	(MTouchDecodeButtons@pButton+1)& (0+255),w,b
  5827  001494  22DA               	addwfc	fsr2h,f,c
  5828  001496  0E02               	movlw	2
  5829  001498  D001               	goto	L2
  5830  00149A                     l4919:
  5831                           
  5832                           ; BSR set to: 0
  5833                           ;mTouchButton.c: 146: pButton->curState = CONTROL_PRESSED;
  5834  00149A  D861               	call	PL58	;call to abstracted procedure
  5835  00149C                     L2:
  5836  00149C  6EDF               	movwf	indf2,c
  5837  00149E                     l39:
  5838                           
  5839                           ; BSR set to: 0
  5840                           ;mTouchButton.c: 147: }
  5841                           ;mTouchButton.c: 149: }
  5842                           ;mTouchButton.c: 150: }
  5843                           ;mTouchButton.c: 151: pButton->prevSensorState = sensorState;
  5844  00149E  EE20 F003          	lfsr	2,3
  5845  0014A2  5193               	movf	MTouchDecodeButtons@pButton& (0+255),w,b
  5846  0014A4  26D9               	addwf	fsr2l,f,c
  5847  0014A6  5194               	movf	(MTouchDecodeButtons@pButton+1)& (0+255),w,b
  5848  0014A8  22DA               	addwfc	fsr2h,f,c
  5849  0014AA  C092  FFDF         	movff	MTouchDecodeButtons@sensorState,indf2
  5850                           
  5851                           ;mTouchButton.c: 152: } else
  5852  0014AE  D042               	goto	l4939
  5853  0014B0                     l38:
  5854                           
  5855                           ; BSR set to: 0
  5856                           ;mTouchButton.c: 154: if(decode & DECODE_MOST_PRESSED) {
  5857  0014B0  A58F               	btfss	MTouchDecodeButtons@decode& (0+255),2,b
  5858  0014B2  D033               	goto	l4933
  5859                           
  5860                           ; BSR set to: 0
  5861                           ;mTouchButton.c: 155: pButton->curState = CONTROL_RELEASED;
  5862  0014B4  EE20 F001          	lfsr	2,1
  5863  0014B8  5193               	movf	MTouchDecodeButtons@pButton& (0+255),w,b
  5864  0014BA  26D9               	addwf	fsr2l,f,c
  5865  0014BC  5194               	movf	(MTouchDecodeButtons@pButton+1)& (0+255),w,b
  5866  0014BE  22DA               	addwfc	fsr2h,f,c
  5867  0014C0  0E02               	movlw	2
  5868  0014C2  6EDF               	movwf	indf2,c
  5869                           
  5870                           ; BSR set to: 0
  5871                           ;mTouchButton.c: 156: if(sensorState == SENSOR_PRESSED) {
  5872  0014C4  5192               	movf	MTouchDecodeButtons@sensorState& (0+255),w,b
  5873  0014C6  0A02               	xorlw	2
  5874  0014C8  E135               	bnz	l4939
  5875                           
  5876                           ; BSR set to: 0
  5877                           ;mTouchButton.c: 157: if(pMostPressedButton == (0)) {
  5878  0014CA  5191               	movf	(MTouchDecodeButtons@pMostPressedButton+1)& (0+255),w,b
  5879  0014CC  1190               	iorwf	MTouchDecodeButtons@pMostPressedButton& (0+255),w,b
  5880  0014CE  E105               	bnz	l4929
  5881  0014D0                     l4927:
  5882                           
  5883                           ; BSR set to: 0
  5884                           ;mTouchButton.c: 158: pMostPressedButton = pButton;
  5885  0014D0  C094  F091         	movff	MTouchDecodeButtons@pButton+1,MTouchDecodeButtons@pMostPressedButton+1
  5886  0014D4  C093  F090         	movff	MTouchDecodeButtons@pButton,MTouchDecodeButtons@pMostPressedButton
  5887                           
  5888                           ;mTouchButton.c: 159: } else {
  5889  0014D8  D02D               	goto	l4939
  5890  0014DA                     l4929:
  5891                           
  5892                           ; BSR set to: 0
  5893                           ;mTouchButton.c: 160: if(pSensor->delta > pMostPressedButton->pSensor->delta) {
  5894  0014DA  EE20 F018          	lfsr	2,24
  5895  0014DE  518B               	movf	MTouchDecodeButtons@pSensor& (0+255),w,b
  5896  0014E0  26D9               	addwf	fsr2l,f,c
  5897  0014E2  518C               	movf	(MTouchDecodeButtons@pSensor+1)& (0+255),w,b
  5898  0014E4  22DA               	addwfc	fsr2h,f,c
  5899  0014E6  CFDE F087          	movff	postinc2,??_MTouchDecodeButtons
  5900  0014EA  CFDD F088          	movff	postdec2,??_MTouchDecodeButtons+1
  5901  0014EE  EE20 F004          	lfsr	2,4
  5902  0014F2  5190               	movf	MTouchDecodeButtons@pMostPressedButton& (0+255),w,b
  5903  0014F4  26D9               	addwf	fsr2l,f,c
  5904  0014F6  5191               	movf	(MTouchDecodeButtons@pMostPressedButton+1)& (0+255),w,b
  5905  0014F8  22DA               	addwfc	fsr2h,f,c
  5906  0014FA  EE10 F018          	lfsr	1,24
  5907  0014FE  50DE               	movf	postinc2,w,c
  5908  001500  26E1               	addwf	fsr1l,f,c
  5909  001502  50DD               	movf	postdec2,w,c
  5910  001504  22E2               	addwfc	fsr1h,f,c
  5911  001506  CFE6 F089          	movff	postinc1,??_MTouchDecodeButtons+2
  5912  00150A  CFE5 F08A          	movff	postdec1,??_MTouchDecodeButtons+3
  5913  00150E  5187               	movf	??_MTouchDecodeButtons& (0+255),w,b
  5914  001510  5D89               	subwf	(??_MTouchDecodeButtons+2)& (0+255),w,b
  5915  001512  5188               	movf	(??_MTouchDecodeButtons+1)& (0+255),w,b
  5916  001514  598A               	subwfb	(??_MTouchDecodeButtons+3)& (0+255),w,b
  5917  001516  E3DC               	bnc	l4927
  5918  001518  D00D               	goto	l4939
  5919  00151A                     l4933:
  5920                           
  5921                           ; BSR set to: 0
  5922                           ;mTouchButton.c: 167: if(sensorState == SENSOR_PRESSED) {
  5923  00151A  5192               	movf	MTouchDecodeButtons@sensorState& (0+255),w,b
  5924  00151C  0A02               	xorlw	2
  5925  00151E  E102               	bnz	l4937
  5926                           
  5927                           ; BSR set to: 0
  5928                           ;mTouchButton.c: 168: pButton->curState = CONTROL_PRESSED;
  5929  001520  D81E               	call	PL58	;call to abstracted procedure
  5930  001522  D007               	goto	L3
  5931  001524                     l4937:
  5932                           
  5933                           ; BSR set to: 0
  5934                           ;mTouchButton.c: 170: pButton->curState = CONTROL_RELEASED;
  5935  001524  EE20 F001          	lfsr	2,1
  5936  001528  5193               	movf	MTouchDecodeButtons@pButton& (0+255),w,b
  5937  00152A  26D9               	addwf	fsr2l,f,c
  5938  00152C  5194               	movf	(MTouchDecodeButtons@pButton+1)& (0+255),w,b
  5939  00152E  22DA               	addwfc	fsr2h,f,c
  5940  001530  0E02               	movlw	2
  5941  001532                     L3:
  5942  001532  6EDF               	movwf	indf2,c
  5943  001534                     l4939:
  5944                           
  5945                           ; BSR set to: 0
  5946                           ;mTouchButton.c: 171: }
  5947                           ;mTouchButton.c: 173: }
  5948                           ;mTouchButton.c: 175: }
  5949                           ;mTouchButton.c: 177: pButton++;
  5950  001534  0E08               	movlw	8
  5951  001536  2793               	addwf	MTouchDecodeButtons@pButton& (0+255),f,b
  5952  001538  0E00               	movlw	0
  5953  00153A  2394               	addwfc	(MTouchDecodeButtons@pButton+1)& (0+255),f,b
  5954                           
  5955                           ; BSR set to: 0
  5956  00153C  2B8D               	incf	MTouchDecodeButtons@i& (0+255),f,b
  5957                           
  5958                           ; BSR set to: 0
  5959  00153E  0E0C               	movlw	12
  5960  001540  658D               	cpfsgt	MTouchDecodeButtons@i& (0+255),b
  5961  001542  D724               	goto	l4879
  5962                           
  5963                           ; BSR set to: 0
  5964                           ;mTouchButton.c: 179: }
  5965                           ;mTouchButton.c: 181: if(pMostPressedButton != (0)) {
  5966  001544  5191               	movf	(MTouchDecodeButtons@pMostPressedButton+1)& (0+255),w,b
  5967  001546  1190               	iorwf	MTouchDecodeButtons@pMostPressedButton& (0+255),w,b
  5968  001548  B4D8               	btfsc	status,2,c
  5969  00154A  0012               	return	
  5970                           
  5971                           ; BSR set to: 0
  5972                           ;mTouchButton.c: 182: pMostPressedButton->curState = CONTROL_PRESSED;
  5973  00154C  EE20 F001          	lfsr	2,1
  5974  001550  5190               	movf	MTouchDecodeButtons@pMostPressedButton& (0+255),w,b
  5975  001552  26D9               	addwf	fsr2l,f,c
  5976  001554  5191               	movf	(MTouchDecodeButtons@pMostPressedButton+1)& (0+255),w,b
  5977  001556  22DA               	addwfc	fsr2h,f,c
  5978  001558  0E01               	movlw	1
  5979  00155A  6EDF               	movwf	indf2,c
  5980                           
  5981                           ; BSR set to: 0
  5982  00155C  0C01               	retlw	1
  5983  00155E                     __end_of_MTouchDecodeButtons:
  5984                           	opt stack 0
  5985  00155E                     PL58:
  5986                           	opt stack 20
  5987  00155E  EE20 F001          	lfsr	2,1
  5988  001562  5193               	movf	MTouchDecodeButtons@pButton& (0+255),w,b
  5989  001564  26D9               	addwf	fsr2l,f,c
  5990  001566  5194               	movf	(MTouchDecodeButtons@pButton+1)& (0+255),w,b
  5991  001568  22DA               	addwfc	fsr2h,f,c
  5992  00156A  0C01               	retlw	1
  5993  00156C                     __end_ofPL58:
  5994                           	opt stack 0
  5995  00156C                     PL102:
  5996                           	opt stack 20
  5997  00156C  EE20 F006          	lfsr	2,6
  5998  001570  5193               	movf	MTouchDecodeButtons@pButton& (0+255),w,b
  5999  001572  26D9               	addwf	fsr2l,f,c
  6000  001574  5194               	movf	(MTouchDecodeButtons@pButton+1)& (0+255),w,b
  6001  001576  22DA               	addwfc	fsr2h,f,c
  6002  001578  6ADE               	clrf	postinc2,c
  6003  00157A  0012               	return	
  6004  00157C                     __end_ofPL102:
  6005                           	opt stack 0
  6006                           tblptru	equ	0xFF8
  6007                           tblptrh	equ	0xFF7
  6008                           tblptrl	equ	0xFF6
  6009                           tablat	equ	0xFF5
  6010                           prodh	equ	0xFF4
  6011                           prodl	equ	0xFF3
  6012                           intcon	equ	0xFF2
  6013                           postinc0	equ	0xFEE
  6014                           wreg	equ	0xFE8
  6015                           indf1	equ	0xFE7
  6016                           postinc1	equ	0xFE6
  6017                           postdec1	equ	0xFE5
  6018                           fsr1h	equ	0xFE2
  6019                           fsr1l	equ	0xFE1
  6020                           indf2	equ	0xFDF
  6021                           postinc2	equ	0xFDE
  6022                           postdec2	equ	0xFDD
  6023                           fsr2h	equ	0xFDA
  6024                           fsr2l	equ	0xFD9
  6025                           status	equ	0xFD8
  6026                           
  6027 ;; *************** function _Beep *****************
  6028 ;; Defined at:
  6029 ;;		line 201 in file "../isr.c"
  6030 ;; Parameters:    Size  Location     Type
  6031 ;;  ms10            1    wreg     unsigned char 
  6032 ;; Auto vars:     Size  Location     Type
  6033 ;;  ms10            1   39[BANK0 ] unsigned char 
  6034 ;; Return value:  Size  Location     Type
  6035 ;;		None               void
  6036 ;; Registers used:
  6037 ;;		wreg, status,2, status,0, prodl, prodh
  6038 ;; Tracked objects:
  6039 ;;		On entry : 0/0
  6040 ;;		On exit  : F/0
  6041 ;;		Unchanged: 0/0
  6042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6044 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6046 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6047 ;;Total ram usage:        1 bytes
  6048 ;; Hardware stack levels used:    1
  6049 ;; Hardware stack levels required when called:    8
  6050 ;; This function calls:
  6051 ;;		Nothing
  6052 ;; This function is called by:
  6053 ;;		_main
  6054 ;;		_tsk_process
  6055 ;; This function uses a non-reentrant model
  6056 ;;
  6057                           
  6058                           	psect	text4
  6059  003656                     __ptext4:
  6060                           	opt stack 0
  6061  003656                     _Beep:
  6062                           	opt stack 21
  6063                           
  6064                           ; BSR set to: 0
  6065                           ;incstack = 0
  6066                           ;Beep@ms10 stored from wreg
  6067  003656  0100               	movlb	0	; () banked
  6068  003658  6F87               	movwf	Beep@ms10& (0+255),b
  6069                           
  6070                           ; BSR set to: 0
  6071                           ;isr.c: 203: TRISAbits.TRISA4 = 0;
  6072  00365A  9892               	bcf	3986,4,c	;volatile
  6073                           
  6074                           ; BSR set to: 0
  6075                           ;isr.c: 207: beep_timer = ms10 * 40;
  6076  00365C  5187               	movf	Beep@ms10& (0+255),w,b
  6077  00365E  0D28               	mullw	40
  6078  003660  CFF3 F0C8          	movff	prodl,_beep_timer	;volatile
  6079  003664  CFF4 F0C9          	movff	prodh,_beep_timer+1	;volatile
  6080                           
  6081                           ; BSR set to: 0
  6082                           ;isr.c: 208: beep_count = 1;
  6083  003668  0E01               	movlw	1
  6084  00366A  6E40               	movwf	_beep_count,c	;volatile
  6085                           
  6086                           ; BSR set to: 0
  6087  00366C  0C01               	retlw	1
  6088  00366E                     __end_of_Beep:
  6089                           	opt stack 0
  6090                           tblptru	equ	0xFF8
  6091                           tblptrh	equ	0xFF7
  6092                           tblptrl	equ	0xFF6
  6093                           tablat	equ	0xFF5
  6094                           prodh	equ	0xFF4
  6095                           prodl	equ	0xFF3
  6096                           intcon	equ	0xFF2
  6097                           postinc0	equ	0xFEE
  6098                           wreg	equ	0xFE8
  6099                           indf1	equ	0xFE7
  6100                           postinc1	equ	0xFE6
  6101                           postdec1	equ	0xFE5
  6102                           fsr1h	equ	0xFE2
  6103                           fsr1l	equ	0xFE1
  6104                           indf2	equ	0xFDF
  6105                           postinc2	equ	0xFDE
  6106                           postdec2	equ	0xFDD
  6107                           fsr2h	equ	0xFDA
  6108                           fsr2l	equ	0xFD9
  6109                           status	equ	0xFD8
  6110                           
  6111 ;; *************** function _tsk_ds18b20 *****************
  6112 ;; Defined at:
  6113 ;;		line 155 in file "../Main.c"
  6114 ;; Parameters:    Size  Location     Type
  6115 ;;		None
  6116 ;; Auto vars:     Size  Location     Type
  6117 ;;		None
  6118 ;; Return value:  Size  Location     Type
  6119 ;;		None               void
  6120 ;; Registers used:
  6121 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, cstack
  6122 ;; Tracked objects:
  6123 ;;		On entry : D/0
  6124 ;;		On exit  : F/0
  6125 ;;		Unchanged: 0/0
  6126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6129 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6130 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6131 ;;Total ram usage:        2 bytes
  6132 ;; Hardware stack levels used:    1
  6133 ;; Hardware stack levels required when called:   11
  6134 ;; This function calls:
  6135 ;;		_ds18b20_read
  6136 ;;		_ds18b20_start
  6137 ;; This function is called by:
  6138 ;;		_main
  6139 ;; This function uses a non-reentrant model
  6140 ;;
  6141                           
  6142                           	psect	text5
  6143  001C08                     __ptext5:
  6144                           	opt stack 0
  6145  001C08                     _tsk_ds18b20:
  6146                           	opt stack 19
  6147                           
  6148                           ; BSR set to: 0
  6149                           ;incstack = 0
  6150  001C08  D08D               	goto	l8393
  6151  001C0A                     l618:
  6152  001C0A  F000               	nop	
  6153                           
  6154                           ;Main.c: 161: ow_bit = 1;
  6155  001C0C  0E01               	movlw	1
  6156  001C0E  0100               	movlb	0	; () banked
  6157  001C10  6FD3               	movwf	_ow_bit& (0+255),b
  6158                           
  6159                           ; BSR set to: 0
  6160                           ;Main.c: 162: ds18b20_start();
  6161  001C12  ECB9  F018         	call	_ds18b20_start	;wreg free
  6162                           
  6163                           ; BSR set to: 0
  6164  001C16  AEF2               	btfss	intcon,7,c	;volatile
  6165  001C18  D003               	goto	l620
  6166                           
  6167                           ; BSR set to: 0
  6168  001C1A  0E01               	movlw	1
  6169  001C1C  6FD4               	movwf	tsk_ds18b20@_interrupt_state& (0+255),b
  6170  001C1E  D001               	goto	l621
  6171  001C20                     l620:
  6172                           
  6173                           ; BSR set to: 0
  6174  001C20  6BD4               	clrf	tsk_ds18b20@_interrupt_state& (0+255),b
  6175  001C22                     l621:
  6176                           
  6177                           ; BSR set to: 0
  6178  001C22  9EF2               	bcf	intcon,7,c	;volatile
  6179  001C24  C0C6  F0CA         	movff	__sys_tick,tsk_ds18b20@_prev_tick	;volatile
  6180  001C28  C0C7  F0CB         	movff	__sys_tick+1,tsk_ds18b20@_prev_tick+1	;volatile
  6181                           
  6182                           ; BSR set to: 0
  6183  001C2C  6BCD               	clrf	(tsk_ds18b20@_state+1)& (0+255),b
  6184  001C2E  0EA4               	movlw	164
  6185  001C30  6FCC               	movwf	tsk_ds18b20@_state& (0+255),b
  6186  001C32                     l8335:
  6187  001C32  D889               	call	PL48	;call to abstracted procedure
  6188  001C34  0E82               	movlw	130
  6189  001C36  5CF3               	subwf	prodl,w,c
  6190  001C38  0EEE               	movlw	238
  6191  001C3A  B4D8               	btfsc	status,2,c
  6192  001C3C  5DDD               	subwf	??_tsk_ds18b20& (0+255),w,b
  6193  001C3E  E205               	bc	l623
  6194                           
  6195                           ; BSR set to: 1
  6196  001C40  0100               	movlb	0	; () banked
  6197  001C42  05D4               	decf	tsk_ds18b20@_interrupt_state& (0+255),w,b
  6198  001C44  B4D8               	btfsc	status,2,c
  6199                           
  6200                           ; BSR set to: 0
  6201  001C46  8EF2               	bsf	intcon,7,c	;volatile
  6202  001C48  0012               	return	
  6203  001C4A                     l623:
  6204                           
  6205                           ; BSR set to: 1
  6206                           
  6207                           ; BSR set to: 1
  6208  001C4A  D88D               	call	PL108	;call to abstracted procedure
  6209  001C4C  B4D8               	btfsc	status,2,c
  6210                           
  6211                           ; BSR set to: 0
  6212  001C4E  8EF2               	bsf	intcon,7,c	;volatile
  6213                           
  6214                           ; BSR set to: 0
  6215  001C50  F000               	nop	
  6216                           
  6217                           ;Main.c: 168: f_temp = ds18b20_read();
  6218  001C52  EC67  F00F         	call	_ds18b20_read	;wreg free
  6219  001C56  C1CF  F032         	movff	?_ds18b20_read,tsk_ds18b20@f_temp
  6220  001C5A  C1D0  F033         	movff	?_ds18b20_read+1,tsk_ds18b20@f_temp+1
  6221  001C5E  C1D1  F034         	movff	?_ds18b20_read+2,tsk_ds18b20@f_temp+2
  6222  001C62  C1D2  F035         	movff	?_ds18b20_read+3,tsk_ds18b20@f_temp+3
  6223                           
  6224                           ;Main.c: 170: __nop();
  6225  001C66  F000               	nop	
  6226                           
  6227                           ;Main.c: 171: __nop();
  6228  001C68  F000               	nop	
  6229                           
  6230                           ;Main.c: 173: if((f_temp != -60.0) && (f_temp != 85.0)) {
  6231  001C6A  D884               	call	PL120	;call to abstracted procedure
  6232  001C6C  B4D8               	btfsc	status,2,c
  6233  001C6E  18DE               	xorwf	postinc2,w,c
  6234  001C70  0E70               	movlw	112
  6235  001C72  B4D8               	btfsc	status,2,c
  6236  001C74  18DE               	xorwf	postinc2,w,c
  6237  001C76  0EC2               	movlw	194
  6238  001C78  B4D8               	btfsc	status,2,c
  6239  001C7A  18DE               	xorwf	postinc2,w,c
  6240  001C7C  E020               	bz	l8365
  6241  001C7E  D87A               	call	PL120	;call to abstracted procedure
  6242  001C80  B4D8               	btfsc	status,2,c
  6243  001C82  18DE               	xorwf	postinc2,w,c
  6244  001C84  0EAA               	movlw	170
  6245  001C86  B4D8               	btfsc	status,2,c
  6246  001C88  18DE               	xorwf	postinc2,w,c
  6247  001C8A  0E42               	movlw	66
  6248  001C8C  B4D8               	btfsc	status,2,c
  6249  001C8E  18DE               	xorwf	postinc2,w,c
  6250  001C90  E016               	bz	l8365
  6251                           
  6252                           ;Main.c: 175: if(INTCONbits.GIE==1) _interrupt_state = 1; else _interrupt_state = 0; INT
      +                          CONbits.GIE=0;
  6253  001C92  AEF2               	btfss	intcon,7,c	;volatile
  6254  001C94  D004               	goto	l630
  6255  001C96  0E01               	movlw	1
  6256  001C98  0100               	movlb	0	; () banked
  6257  001C9A  6FD4               	movwf	tsk_ds18b20@_interrupt_state& (0+255),b
  6258  001C9C  D002               	goto	l631
  6259  001C9E                     l630:
  6260  001C9E  0100               	movlb	0	; () banked
  6261  001CA0  6BD4               	clrf	tsk_ds18b20@_interrupt_state& (0+255),b
  6262  001CA2                     l631:
  6263                           
  6264                           ; BSR set to: 0
  6265  001CA2  9EF2               	bcf	intcon,7,c	;volatile
  6266                           
  6267                           ;Main.c: 176: f_T_salona = f_temp;
  6268  001CA4  C032  F0C2         	movff	tsk_ds18b20@f_temp,_f_T_salona
  6269  001CA8  C033  F0C3         	movff	tsk_ds18b20@f_temp+1,_f_T_salona+1
  6270  001CAC  C034  F0C4         	movff	tsk_ds18b20@f_temp+2,_f_T_salona+2
  6271  001CB0  C035  F0C5         	movff	tsk_ds18b20@f_temp+3,_f_T_salona+3
  6272                           
  6273                           ; BSR set to: 0
  6274                           ;Main.c: 177: if(_interrupt_state==1) INTCONbits.GIE=1;
  6275  001CB4  05D4               	decf	tsk_ds18b20@_interrupt_state& (0+255),w,b
  6276  001CB6  B4D8               	btfsc	status,2,c
  6277                           
  6278                           ; BSR set to: 0
  6279  001CB8  8EF2               	bsf	intcon,7,c	;volatile
  6280                           
  6281                           ; BSR set to: 0
  6282                           ;Main.c: 179: ow_err[0] = 0;
  6283  001CBA  6BD5               	clrf	tsk_ds18b20@ow_err& (0+255),b
  6284                           
  6285                           ;Main.c: 180: } else {
  6286  001CBC  D014               	goto	l638
  6287  001CBE                     l8365:
  6288                           
  6289                           ;Main.c: 181: ow_err[0]++;
  6290  001CBE  0100               	movlb	0	; () banked
  6291  001CC0  2BD5               	incf	tsk_ds18b20@ow_err& (0+255),f,b
  6292                           
  6293                           ; BSR set to: 0
  6294                           ;Main.c: 182: if(ow_err[0] > 4) {
  6295  001CC2  0E04               	movlw	4
  6296  001CC4  65D5               	cpfsgt	tsk_ds18b20@ow_err& (0+255),b
  6297  001CC6  D00F               	goto	l638
  6298                           
  6299                           ; BSR set to: 0
  6300                           ;Main.c: 183: ow_err[0] = 0;
  6301  001CC8  6BD5               	clrf	tsk_ds18b20@ow_err& (0+255),b
  6302                           
  6303                           ;Main.c: 184: if(INTCONbits.GIE==1) _interrupt_state = 1; else _interrupt_state = 0; INT
      +                          CONbits.GIE=0;
  6304  001CCA  AEF2               	btfss	intcon,7,c	;volatile
  6305  001CCC  D003               	goto	l635
  6306                           
  6307                           ; BSR set to: 0
  6308  001CCE  0E01               	movlw	1
  6309  001CD0  6FD4               	movwf	tsk_ds18b20@_interrupt_state& (0+255),b
  6310  001CD2  D001               	goto	l636
  6311  001CD4                     l635:
  6312                           
  6313                           ; BSR set to: 0
  6314  001CD4  6BD4               	clrf	tsk_ds18b20@_interrupt_state& (0+255),b
  6315  001CD6                     l636:
  6316                           
  6317                           ; BSR set to: 0
  6318  001CD6  9EF2               	bcf	intcon,7,c	;volatile
  6319                           
  6320                           ;Main.c: 185: f_T_salona = 0.0;
  6321  001CD8  6BC2               	clrf	_f_T_salona& (0+255),b
  6322  001CDA  6BC3               	clrf	(_f_T_salona+1)& (0+255),b
  6323  001CDC  6BC4               	clrf	(_f_T_salona+2)& (0+255),b
  6324  001CDE  6BC5               	clrf	(_f_T_salona+3)& (0+255),b
  6325                           
  6326                           ; BSR set to: 0
  6327                           ;Main.c: 186: if(_interrupt_state==1) INTCONbits.GIE=1;
  6328  001CE0  05D4               	decf	tsk_ds18b20@_interrupt_state& (0+255),w,b
  6329  001CE2  B4D8               	btfsc	status,2,c
  6330                           
  6331                           ; BSR set to: 0
  6332  001CE4  8EF2               	bsf	intcon,7,c	;volatile
  6333  001CE6                     l638:
  6334                           
  6335                           ; BSR set to: 0
  6336  001CE6  AEF2               	btfss	intcon,7,c	;volatile
  6337  001CE8  D003               	goto	l639
  6338                           
  6339                           ; BSR set to: 0
  6340  001CEA  0E01               	movlw	1
  6341  001CEC  6FD4               	movwf	tsk_ds18b20@_interrupt_state& (0+255),b
  6342  001CEE  D001               	goto	l640
  6343  001CF0                     l639:
  6344                           
  6345                           ; BSR set to: 0
  6346  001CF0  6BD4               	clrf	tsk_ds18b20@_interrupt_state& (0+255),b
  6347  001CF2                     l640:
  6348                           
  6349                           ; BSR set to: 0
  6350  001CF2  9EF2               	bcf	intcon,7,c	;volatile
  6351  001CF4  C0C6  F0CA         	movff	__sys_tick,tsk_ds18b20@_prev_tick	;volatile
  6352  001CF8  C0C7  F0CB         	movff	__sys_tick+1,tsk_ds18b20@_prev_tick+1	;volatile
  6353                           
  6354                           ; BSR set to: 0
  6355  001CFC  6BCD               	clrf	(tsk_ds18b20@_state+1)& (0+255),b
  6356  001CFE  0EC0               	movlw	192
  6357  001D00  6FCC               	movwf	tsk_ds18b20@_state& (0+255),b
  6358  001D02                     l8381:
  6359  001D02  D821               	call	PL48	;call to abstracted procedure
  6360  001D04  0E80               	movlw	128
  6361  001D06  5CF3               	subwf	prodl,w,c
  6362  001D08  0E64               	movlw	100
  6363  001D0A  B4D8               	btfsc	status,2,c
  6364  001D0C  5DDD               	subwf	??_tsk_ds18b20& (0+255),w,b
  6365  001D0E  E205               	bc	l642
  6366                           
  6367                           ; BSR set to: 1
  6368  001D10  0100               	movlb	0	; () banked
  6369  001D12  05D4               	decf	tsk_ds18b20@_interrupt_state& (0+255),w,b
  6370  001D14  B4D8               	btfsc	status,2,c
  6371                           
  6372                           ; BSR set to: 0
  6373  001D16  8EF2               	bsf	intcon,7,c	;volatile
  6374  001D18  0012               	return	
  6375  001D1A                     l642:
  6376                           
  6377                           ; BSR set to: 1
  6378                           
  6379                           ; BSR set to: 1
  6380  001D1A  D825               	call	PL108	;call to abstracted procedure
  6381  001D1C  B4D8               	btfsc	status,2,c
  6382                           
  6383                           ; BSR set to: 0
  6384  001D1E  8EF2               	bsf	intcon,7,c	;volatile
  6385                           
  6386                           ; BSR set to: 0
  6387  001D20  F000               	nop	
  6388                           
  6389                           ;Main.c: 193: }};
  6390  001D22  D773               	goto	l618
  6391  001D24                     l8393:
  6392  001D24  C0CC  F1DD         	movff	tsk_ds18b20@_state,??_tsk_ds18b20
  6393  001D28  C0CD  F1DE         	movff	tsk_ds18b20@_state+1,??_tsk_ds18b20+1
  6394                           
  6395                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6396                           ; Switch size 1, requested type "space"
  6397                           ; Number of cases is 1, Range of values is 0 to 0
  6398                           ; switch strategies available:
  6399                           ; Name         Instructions Cycles
  6400                           ; simple_byte            4     3 (average)
  6401                           ;	Chosen strategy is simple_byte
  6402  001D2C  0101               	movlb	1	; () banked
  6403  001D2E  51DE               	movf	(??_tsk_ds18b20+1)& (0+255),w,b
  6404  001D30  E001 D76B          	bnz	l618
  6405                           
  6406                           ; BSR set to: 1
  6407                           ; Switch size 1, requested type "space"
  6408                           ; Number of cases is 3, Range of values is 0 to 192
  6409                           ; switch strategies available:
  6410                           ; Name         Instructions Cycles
  6411                           ; simple_byte           10     6 (average)
  6412                           ;	Chosen strategy is simple_byte
  6413  001D34  51DD               	movf	??_tsk_ds18b20& (0+255),w,b
  6414  001D36  E101 D768          	bz	l618
  6415  001D3A  0AA4               	xorlw	164	; case 164
  6416  001D3C  E101 D779          	bz	l8335
  6417  001D40  0A64               	xorlw	100	; case 192
  6418  001D42  E0DF               	bz	l8381
  6419  001D44  D762               	goto	l618
  6420  001D46                     __end_of_tsk_ds18b20:
  6421                           	opt stack 0
  6422  001D46                     PL48:
  6423                           	opt stack 19
  6424  001D46  0100               	movlb	0	; () banked
  6425  001D48  C0C6  F1DD         	movff	__sys_tick,??_tsk_ds18b20	;volatile
  6426  001D4C  C0C7  F1DE         	movff	__sys_tick+1,??_tsk_ds18b20+1	;volatile
  6427  001D50  51CA               	movf	tsk_ds18b20@_prev_tick& (0+255),w,b
  6428  001D52  0101               	movlb	1	; () banked
  6429  001D54  5FDD               	subwf	??_tsk_ds18b20& (0+255),f,b
  6430  001D56  0100               	movlb	0	; () banked
  6431  001D58  51CB               	movf	(tsk_ds18b20@_prev_tick+1)& (0+255),w,b
  6432  001D5A  0101               	movlb	1	; () banked
  6433  001D5C  5BDE               	subwfb	(??_tsk_ds18b20+1)& (0+255),f,b
  6434  001D5E  51DE               	movf	(??_tsk_ds18b20+1)& (0+255),w,b
  6435  001D60  0A80               	xorlw	128
  6436  001D62  6EF3               	movwf	prodl,c
  6437  001D64  0012               	return	
  6438  001D66                     __end_ofPL48:
  6439                           	opt stack 0
  6440  001D66                     PL108:
  6441                           	opt stack 19
  6442  001D66  C0C6  F0CA         	movff	__sys_tick,tsk_ds18b20@_prev_tick	;volatile
  6443  001D6A  C0C7  F0CB         	movff	__sys_tick+1,tsk_ds18b20@_prev_tick+1	;volatile
  6444  001D6E  0100               	movlb	0	; () banked
  6445  001D70  05D4               	decf	tsk_ds18b20@_interrupt_state& (0+255),w,b
  6446  001D72  0012               	return	
  6447  001D74                     __end_ofPL108:
  6448                           	opt stack 0
  6449  001D74                     PL120:
  6450                           	opt stack 19
  6451  001D74  EE20  F032         	lfsr	2,tsk_ds18b20@f_temp
  6452  001D78  0E00               	movlw	0
  6453  001D7A  18DE               	xorwf	postinc2,w,c
  6454  001D7C  0C00               	retlw	0
  6455  001D7E                     __end_ofPL120:
  6456                           	opt stack 0
  6457                           tblptru	equ	0xFF8
  6458                           tblptrh	equ	0xFF7
  6459                           tblptrl	equ	0xFF6
  6460                           tablat	equ	0xFF5
  6461                           prodh	equ	0xFF4
  6462                           prodl	equ	0xFF3
  6463                           intcon	equ	0xFF2
  6464                           postinc0	equ	0xFEE
  6465                           wreg	equ	0xFE8
  6466                           indf1	equ	0xFE7
  6467                           postinc1	equ	0xFE6
  6468                           postdec1	equ	0xFE5
  6469                           fsr1h	equ	0xFE2
  6470                           fsr1l	equ	0xFE1
  6471                           indf2	equ	0xFDF
  6472                           postinc2	equ	0xFDE
  6473                           postdec2	equ	0xFDD
  6474                           fsr2h	equ	0xFDA
  6475                           fsr2l	equ	0xFD9
  6476                           status	equ	0xFD8
  6477                           
  6478 ;; *************** function _ds18b20_start *****************
  6479 ;; Defined at:
  6480 ;;		line 205 in file "../lib/ow.c"
  6481 ;; Parameters:    Size  Location     Type
  6482 ;;		None
  6483 ;; Auto vars:     Size  Location     Type
  6484 ;;		None
  6485 ;; Return value:  Size  Location     Type
  6486 ;;		None               void
  6487 ;; Registers used:
  6488 ;;		wreg, status,2, status,0, cstack
  6489 ;; Tracked objects:
  6490 ;;		On entry : F/0
  6491 ;;		On exit  : F/0
  6492 ;;		Unchanged: 0/0
  6493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6496 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6497 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6498 ;;Total ram usage:        2 bytes
  6499 ;; Hardware stack levels used:    1
  6500 ;; Hardware stack levels required when called:   10
  6501 ;; This function calls:
  6502 ;;		_init_1wire
  6503 ;;		_ow_delay
  6504 ;;		_write_1wire
  6505 ;; This function is called by:
  6506 ;;		_tsk_ds18b20
  6507 ;; This function uses a non-reentrant model
  6508 ;;
  6509                           
  6510                           	psect	text6
  6511  003172                     __ptext6:
  6512                           	opt stack 0
  6513  003172                     _ds18b20_start:
  6514                           	opt stack 19
  6515                           
  6516                           ; BSR set to: 0
  6517                           ;ow.c: 207: if(init_1wire()) {
  6518                           
  6519                           ; BSR set to: 0
  6520                           ;incstack = 0
  6521  003172  EC4D  F014         	call	_init_1wire	;wreg free
  6522  003176  0900               	iorlw	0
  6523  003178  E006               	bz	l296
  6524                           
  6525                           ; BSR set to: 0
  6526                           ;ow.c: 208: write_1wire(0xcc);
  6527  00317A  0ECC               	movlw	204
  6528  00317C  EC7E  F012         	call	_write_1wire
  6529                           
  6530                           ;ow.c: 209: write_1wire(0x44);
  6531  003180  0E44               	movlw	68
  6532  003182  EC7E  F012         	call	_write_1wire
  6533  003186                     l296:
  6534                           
  6535                           ; BSR set to: 0
  6536                           ;ow.c: 210: }
  6537                           ;ow.c: 212: ow_delay(16);
  6538  003186  6B88               	clrf	(ow_delay@del+1)& (0+255),b
  6539  003188  0E10               	movlw	16
  6540  00318A  6F87               	movwf	ow_delay@del& (0+255),b
  6541  00318C  EC37  F01B         	call	_ow_delay	;wreg free
  6542                           
  6543                           ; BSR set to: 0
  6544                           ;ow.c: 215: ((TRISC) &= ~(1 << (ow_bit)));
  6545  003190  D810               	call	PL136	;call to abstracted procedure
  6546  003192  D002               	goto	u8574
  6547  003194                     u8575:
  6548  003194  90D8               	bcf	status,0,c
  6549  003196  378E               	rlcf	(??_ds18b20_start+1)& (0+255),f,b
  6550  003198                     u8574:
  6551  003198  2F8D               	decfsz	??_ds18b20_start& (0+255),f,b
  6552  00319A  D7FC               	goto	u8575
  6553  00319C  1D8E               	comf	(??_ds18b20_start+1)& (0+255),w,b
  6554  00319E  1694               	andwf	3988,f,c	;volatile
  6555                           
  6556                           ; BSR set to: 0
  6557                           ;ow.c: 216: ((LATC) |= (1 << (ow_bit)));
  6558  0031A0  D808               	call	PL136	;call to abstracted procedure
  6559  0031A2  D002               	goto	u8584
  6560  0031A4                     u8585:
  6561  0031A4  90D8               	bcf	status,0,c
  6562  0031A6  378E               	rlcf	(??_ds18b20_start+1)& (0+255),f,b
  6563  0031A8                     u8584:
  6564  0031A8  2F8D               	decfsz	??_ds18b20_start& (0+255),f,b
  6565  0031AA  D7FC               	goto	u8585
  6566  0031AC  518E               	movf	(??_ds18b20_start+1)& (0+255),w,b
  6567  0031AE  128B               	iorwf	3979,f,c	;volatile
  6568                           
  6569                           ; BSR set to: 0
  6570  0031B0  0012               	return	
  6571  0031B2                     __end_of_ds18b20_start:
  6572                           	opt stack 0
  6573  0031B2                     PL136:
  6574                           	opt stack 19
  6575  0031B2  C0D3  F08D         	movff	_ow_bit,??_ds18b20_start
  6576  0031B6  0E01               	movlw	1
  6577  0031B8  6F8E               	movwf	(??_ds18b20_start+1)& (0+255),b
  6578  0031BA  2B8D               	incf	??_ds18b20_start& (0+255),f,b
  6579  0031BC  0C01               	retlw	1
  6580  0031BE                     __end_ofPL136:
  6581                           	opt stack 0
  6582                           tblptru	equ	0xFF8
  6583                           tblptrh	equ	0xFF7
  6584                           tblptrl	equ	0xFF6
  6585                           tablat	equ	0xFF5
  6586                           prodh	equ	0xFF4
  6587                           prodl	equ	0xFF3
  6588                           intcon	equ	0xFF2
  6589                           postinc0	equ	0xFEE
  6590                           wreg	equ	0xFE8
  6591                           indf1	equ	0xFE7
  6592                           postinc1	equ	0xFE6
  6593                           postdec1	equ	0xFE5
  6594                           fsr1h	equ	0xFE2
  6595                           fsr1l	equ	0xFE1
  6596                           indf2	equ	0xFDF
  6597                           postinc2	equ	0xFDE
  6598                           postdec2	equ	0xFDD
  6599                           fsr2h	equ	0xFDA
  6600                           fsr2l	equ	0xFD9
  6601                           status	equ	0xFD8
  6602                           
  6603 ;; *************** function _ds18b20_read *****************
  6604 ;; Defined at:
  6605 ;;		line 163 in file "../lib/ow.c"
  6606 ;; Parameters:    Size  Location     Type
  6607 ;;		None
  6608 ;; Auto vars:     Size  Location     Type
  6609 ;;  f               4   15[BANK1 ] unsigned char 
  6610 ;;  t               2   13[BANK1 ] int 
  6611 ;;  i               1   20[BANK1 ] unsigned char 
  6612 ;;  dowcrc          1   19[BANK1 ] unsigned char 
  6613 ;; Return value:  Size  Location     Type
  6614 ;;                  4    7[BANK1 ] unsigned char 
  6615 ;; Registers used:
  6616 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, cstack
  6617 ;; Tracked objects:
  6618 ;;		On entry : 0/0
  6619 ;;		On exit  : E/0
  6620 ;;		Unchanged: 0/0
  6621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6622 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6623 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6624 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6625 ;;      Totals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6626 ;;Total ram usage:       14 bytes
  6627 ;; Hardware stack levels used:    1
  6628 ;; Hardware stack levels required when called:   10
  6629 ;; This function calls:
  6630 ;;		___awtofl
  6631 ;;		___fladd
  6632 ;;		___flmul
  6633 ;;		_init_1wire
  6634 ;;		_read_1wire
  6635 ;;		_write_1wire
  6636 ;; This function is called by:
  6637 ;;		_tsk_ds18b20
  6638 ;; This function uses a non-reentrant model
  6639 ;;
  6640                           
  6641                           	psect	text7
  6642  001ECE                     __ptext7:
  6643                           	opt stack 0
  6644  001ECE                     _ds18b20_read:
  6645                           	opt stack 19
  6646                           
  6647                           ;ow.c: 165: int t;
  6648                           ;ow.c: 166: char i;
  6649                           ;ow.c: 167: double f;
  6650                           ;ow.c: 169: ((TRISC) |= (1 << (ow_bit)));
  6651                           
  6652                           ; BSR set to: 0
  6653                           ;incstack = 0
  6654  001ECE  C0D3  F1D3         	movff	_ow_bit,??_ds18b20_read
  6655  001ED2  0E01               	movlw	1
  6656  001ED4  0101               	movlb	1	; () banked
  6657  001ED6  6FD4               	movwf	(??_ds18b20_read+1)& (0+255),b
  6658  001ED8  2BD3               	incf	??_ds18b20_read& (0+255),f,b
  6659  001EDA  D002               	goto	u8504
  6660  001EDC                     u8505:
  6661  001EDC  90D8               	bcf	status,0,c
  6662  001EDE  37D4               	rlcf	(??_ds18b20_read+1)& (0+255),f,b
  6663  001EE0                     u8504:
  6664  001EE0  2FD3               	decfsz	??_ds18b20_read& (0+255),f,b
  6665  001EE2  D7FC               	goto	u8505
  6666  001EE4  51D4               	movf	(??_ds18b20_read+1)& (0+255),w,b
  6667  001EE6  1294               	iorwf	3988,f,c	;volatile
  6668                           
  6669                           ; BSR set to: 1
  6670                           ;ow.c: 171: if(init_1wire()) {
  6671  001EE8  EC4D  F014         	call	_init_1wire	;wreg free
  6672  001EEC  0900               	iorlw	0
  6673  001EEE  E007               	bz	l7925
  6674                           
  6675                           ; BSR set to: 0
  6676                           ;ow.c: 172: write_1wire(0xcc);
  6677  001EF0  0ECC               	movlw	204
  6678  001EF2  EC7E  F012         	call	_write_1wire
  6679                           
  6680                           ;ow.c: 173: write_1wire(0xbe);
  6681  001EF6  0EBE               	movlw	190
  6682  001EF8  EC7E  F012         	call	_write_1wire
  6683                           
  6684                           ;ow.c: 174: } else return -60.0;
  6685  001EFC  D003               	goto	l287
  6686  001EFE                     l7925:
  6687                           
  6688                           ; BSR set to: 0
  6689  001EFE  0E00               	movlw	0
  6690  001F00  0101               	movlb	1	; () banked
  6691  001F02  D07B               	goto	PL98	;call to abstracted procedure
  6692  001F04                     l287:
  6693                           
  6694                           ; BSR set to: 0
  6695                           ;ow.c: 177: char dowcrc = 0;
  6696  001F04  0101               	movlb	1	; () banked
  6697  001F06  6BDB               	clrf	ds18b20_read@dowcrc& (0+255),b
  6698                           
  6699                           ;ow.c: 178: for(i = 0; i < 9; i++) {
  6700  001F08  6BDC               	clrf	ds18b20_read@i& (0+255),b
  6701  001F0A                     l7933:
  6702                           
  6703                           ; BSR set to: 1
  6704                           ;ow.c: 179: scratch[i] = read_1wire();
  6705  001F0A  D87E               	call	PL112	;call to abstracted procedure
  6706  001F0C  ECFA  F013         	call	_read_1wire	;wreg free
  6707  001F10  6EDF               	movwf	indf2,c
  6708                           
  6709                           ; BSR set to: 0
  6710                           ;ow.c: 181: dowcrc = dscrc_table[dowcrc ^ scratch[i]];
  6711  001F12  0101               	movlb	1	; () banked
  6712  001F14  D879               	call	PL112	;call to abstracted procedure
  6713  001F16  50DF               	movf	indf2,w,c
  6714  001F18  19DB               	xorwf	ds18b20_read@dowcrc& (0+255),w,b
  6715  001F1A  6FD3               	movwf	??_ds18b20_read& (0+255),b
  6716  001F1C  6BD4               	clrf	(??_ds18b20_read+1)& (0+255),b
  6717  001F1E  0E1B               	movlw	low _dscrc_table
  6718  001F20  25D3               	addwf	??_ds18b20_read& (0+255),w,b
  6719  001F22  6EF6               	movwf	tblptrl,c
  6720  001F24  0EF2               	movlw	high _dscrc_table
  6721  001F26  21D4               	addwfc	(??_ds18b20_read+1)& (0+255),w,b
  6722  001F28  6EF7               	movwf	tblptrh,c
  6723  001F2A                     	if	0	;There are less than 3 active tblptr bytes
  6724  001F2A                     	endif
  6725  001F2A  0008               	tblrd		*
  6726  001F2C  CFF5 F1DB          	movff	tablat,ds18b20_read@dowcrc
  6727                           
  6728                           ; BSR set to: 1
  6729  001F30  2BDC               	incf	ds18b20_read@i& (0+255),f,b
  6730                           
  6731                           ; BSR set to: 1
  6732  001F32  0E08               	movlw	8
  6733  001F34  65DC               	cpfsgt	ds18b20_read@i& (0+255),b
  6734  001F36  D7E9               	goto	l7933
  6735                           
  6736                           ; BSR set to: 1
  6737                           ;ow.c: 182: }
  6738                           ;ow.c: 184: if((dowcrc != 0) || (scratch[7]==0)) return -60.0;
  6739  001F38  67DB               	tstfsz	ds18b20_read@dowcrc& (0+255),b
  6740  001F3A  D002               	goto	l7943
  6741                           
  6742                           ; BSR set to: 1
  6743  001F3C  6707               	tstfsz	(_scratch+7)& (0+255),b
  6744  001F3E  D002               	goto	l7947
  6745  001F40                     l7943:
  6746                           
  6747                           ; BSR set to: 1
  6748  001F40  0E00               	movlw	0
  6749  001F42  D05B               	goto	PL98	;call to abstracted procedure
  6750  001F44                     l7947:
  6751                           
  6752                           ; BSR set to: 1
  6753                           ;ow.c: 194: t = (scratch[1] << 8) | scratch[0];
  6754  001F44  5100               	movf	_scratch& (0+255),w,b
  6755  001F46  C101  F1D3         	movff	_scratch+1,??_ds18b20_read
  6756  001F4A  6BD4               	clrf	(??_ds18b20_read+1)& (0+255),b
  6757  001F4C  C1D3  F1D4         	movff	??_ds18b20_read,??_ds18b20_read+1
  6758  001F50  6BD3               	clrf	??_ds18b20_read& (0+255),b
  6759  001F52  11D3               	iorwf	??_ds18b20_read& (0+255),w,b
  6760  001F54  6FD5               	movwf	ds18b20_read@t& (0+255),b
  6761  001F56  51D4               	movf	(??_ds18b20_read+1)& (0+255),w,b
  6762  001F58  6FD6               	movwf	(ds18b20_read@t+1)& (0+255),b
  6763                           
  6764                           ; BSR set to: 1
  6765                           ;ow.c: 196: f = (double)(t & 0x000f) * 0.0625;
  6766  001F5A  0E0F               	movlw	15
  6767  001F5C  15D5               	andwf	ds18b20_read@t& (0+255),w,b
  6768  001F5E  0100               	movlb	0	; () banked
  6769  001F60  6F91               	movwf	___awtofl@c& (0+255),b
  6770  001F62  6B92               	clrf	(___awtofl@c+1)& (0+255),b
  6771  001F64  EC05  F019         	call	___awtofl	;wreg free
  6772  001F68  C091  F096         	movff	?___awtofl,___flmul@f1
  6773  001F6C  C092  F097         	movff	?___awtofl+1,___flmul@f1+1
  6774  001F70  C093  F098         	movff	?___awtofl+2,___flmul@f1+2
  6775  001F74  C094  F099         	movff	?___awtofl+3,___flmul@f1+3
  6776  001F78  6B9A               	clrf	___flmul@f2& (0+255),b
  6777  001F7A  6B9B               	clrf	(___flmul@f2+1)& (0+255),b
  6778  001F7C  0E80               	movlw	128
  6779  001F7E  6F9C               	movwf	(___flmul@f2+2)& (0+255),b
  6780  001F80  0E3D               	movlw	61
  6781  001F82  6F9D               	movwf	(___flmul@f2+3)& (0+255),b
  6782  001F84  EC90  F010         	call	___flmul	;wreg free
  6783  001F88  C096  F1D7         	movff	?___flmul,ds18b20_read@f
  6784  001F8C  C097  F1D8         	movff	?___flmul+1,ds18b20_read@f+1
  6785  001F90  C098  F1D9         	movff	?___flmul+2,ds18b20_read@f+2
  6786  001F94  C099  F1DA         	movff	?___flmul+3,ds18b20_read@f+3
  6787                           
  6788                           ; BSR set to: 0
  6789                           ;ow.c: 198: f = f + (double)(t >>= 4);
  6790  001F98  C1D7  F0BA         	movff	ds18b20_read@f,___fladd@f1
  6791  001F9C  C1D8  F0BB         	movff	ds18b20_read@f+1,___fladd@f1+1
  6792  001FA0  C1D9  F0BC         	movff	ds18b20_read@f+2,___fladd@f1+2
  6793  001FA4  C1DA  F0BD         	movff	ds18b20_read@f+3,___fladd@f1+3
  6794  001FA8  0101               	movlb	1	; () banked
  6795  001FAA  0E04               	movlw	4
  6796  001FAC  6FD3               	movwf	??_ds18b20_read& (0+255),b
  6797  001FAE                     u8555:
  6798  001FAE  35D6               	rlcf	(ds18b20_read@t+1)& (0+255),w,b
  6799  001FB0  33D6               	rrcf	(ds18b20_read@t+1)& (0+255),f,b
  6800  001FB2  33D5               	rrcf	ds18b20_read@t& (0+255),f,b
  6801  001FB4  2FD3               	decfsz	??_ds18b20_read& (0+255),f,b
  6802  001FB6  D7FB               	goto	u8555
  6803  001FB8  C1D5  F091         	movff	ds18b20_read@t,___awtofl@c
  6804  001FBC  C1D6  F092         	movff	ds18b20_read@t+1,___awtofl@c+1
  6805  001FC0  EC05  F019         	call	___awtofl	;wreg free
  6806  001FC4  C091  F0BE         	movff	?___awtofl,___fladd@f2
  6807  001FC8  C092  F0BF         	movff	?___awtofl+1,___fladd@f2+1
  6808  001FCC  C093  F0C0         	movff	?___awtofl+2,___fladd@f2+2
  6809  001FD0  C094  F0C1         	movff	?___awtofl+3,___fladd@f2+3
  6810  001FD4  ECBE  F00A         	call	___fladd	;wreg free
  6811  001FD8  C0BA  F1D7         	movff	?___fladd,ds18b20_read@f
  6812  001FDC  C0BB  F1D8         	movff	?___fladd+1,ds18b20_read@f+1
  6813  001FE0  C0BC  F1D9         	movff	?___fladd+2,ds18b20_read@f+2
  6814  001FE4  C0BD  F1DA         	movff	?___fladd+3,ds18b20_read@f+3
  6815                           
  6816                           ;ow.c: 200: return f;
  6817  001FE8  C1D7  F1CF         	movff	ds18b20_read@f,?_ds18b20_read
  6818  001FEC  C1D8  F1D0         	movff	ds18b20_read@f+1,?_ds18b20_read+1
  6819  001FF0  C1D9  F1D1         	movff	ds18b20_read@f+2,?_ds18b20_read+2
  6820  001FF4  C1DA  F1D2         	movff	ds18b20_read@f+3,?_ds18b20_read+3
  6821  001FF8  0012               	return	
  6822  001FFA                     __end_of_ds18b20_read:
  6823                           	opt stack 0
  6824  001FFA                     PL98:
  6825                           	opt stack 19
  6826  001FFA  6FCF               	movwf	?_ds18b20_read& (0+255),b
  6827  001FFC  6FD0               	movwf	(?_ds18b20_read+1)& (0+255),b
  6828  001FFE  0E70               	movlw	112
  6829  002000  6FD1               	movwf	(?_ds18b20_read+2)& (0+255),b
  6830  002002  0EC2               	movlw	194
  6831  002004  6FD2               	movwf	(?_ds18b20_read+3)& (0+255),b
  6832  002006  0CC2               	retlw	194
  6833  002008                     __end_ofPL98:
  6834                           	opt stack 0
  6835  002008                     PL112:
  6836                           	opt stack 19
  6837  002008  0E00               	movlw	low _scratch
  6838  00200A  25DC               	addwf	ds18b20_read@i& (0+255),w,b
  6839  00200C  6ED9               	movwf	fsr2l,c
  6840  00200E  6ADA               	clrf	fsr2h,c
  6841  002010  0E01               	movlw	high _scratch
  6842  002012  22DA               	addwfc	fsr2h,f,c
  6843  002014  0012               	return	
  6844  002016                     __end_ofPL112:
  6845                           	opt stack 0
  6846                           tblptru	equ	0xFF8
  6847                           tblptrh	equ	0xFF7
  6848                           tblptrl	equ	0xFF6
  6849                           tablat	equ	0xFF5
  6850                           prodh	equ	0xFF4
  6851                           prodl	equ	0xFF3
  6852                           intcon	equ	0xFF2
  6853                           postinc0	equ	0xFEE
  6854                           wreg	equ	0xFE8
  6855                           indf1	equ	0xFE7
  6856                           postinc1	equ	0xFE6
  6857                           postdec1	equ	0xFE5
  6858                           fsr1h	equ	0xFE2
  6859                           fsr1l	equ	0xFE1
  6860                           indf2	equ	0xFDF
  6861                           postinc2	equ	0xFDE
  6862                           postdec2	equ	0xFDD
  6863                           fsr2h	equ	0xFDA
  6864                           fsr2l	equ	0xFD9
  6865                           status	equ	0xFD8
  6866                           
  6867 ;; *************** function _write_1wire *****************
  6868 ;; Defined at:
  6869 ;;		line 132 in file "../lib/ow.c"
  6870 ;; Parameters:    Size  Location     Type
  6871 ;;  data            1    wreg     unsigned char 
  6872 ;; Auto vars:     Size  Location     Type
  6873 ;;  data            1   43[BANK0 ] unsigned char 
  6874 ;;  i               1   44[BANK0 ] unsigned char 
  6875 ;; Return value:  Size  Location     Type
  6876 ;;		None               void
  6877 ;; Registers used:
  6878 ;;		wreg, status,2, status,0, cstack
  6879 ;; Tracked objects:
  6880 ;;		On entry : F/0
  6881 ;;		On exit  : F/0
  6882 ;;		Unchanged: 0/0
  6883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6885 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6886 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6887 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6888 ;;Total ram usage:        4 bytes
  6889 ;; Hardware stack levels used:    1
  6890 ;; Hardware stack levels required when called:    9
  6891 ;; This function calls:
  6892 ;;		_ow_delay
  6893 ;; This function is called by:
  6894 ;;		_ds18b20_read
  6895 ;;		_ds18b20_start
  6896 ;; This function uses a non-reentrant model
  6897 ;;
  6898                           
  6899                           	psect	text8
  6900  0024FC                     __ptext8:
  6901                           	opt stack 0
  6902  0024FC                     _write_1wire:
  6903                           	opt stack 19
  6904                           
  6905                           ;incstack = 0
  6906                           ;write_1wire@data stored from wreg
  6907  0024FC  6F8B               	movwf	write_1wire@data& (0+255),b
  6908                           
  6909                           ; BSR set to: 0
  6910                           ;ow.c: 133: char i;
  6911                           ;ow.c: 135: __gie = (unsigned char)GIE;
  6912  0024FE  0E00               	movlw	0
  6913  002500  BEF2               	btfsc	intcon,7,c	;volatile
  6914  002502  0E01               	movlw	1
  6915  002504  6FD1               	movwf	___gie& (0+255),b
  6916                           
  6917                           ; BSR set to: 0
  6918                           ;ow.c: 136: GIE = 0;
  6919  002506  9EF2               	bcf	intcon,7,c	;volatile
  6920                           
  6921                           ; BSR set to: 0
  6922                           ;ow.c: 138: ((LATC) |= (1 << (ow_bit)));
  6923  002508  D854               	call	PL10	;call to abstracted procedure
  6924  00250A  128B               	iorwf	3979,f,c	;volatile
  6925                           
  6926                           ; BSR set to: 0
  6927                           ;ow.c: 140: for(i = 0; i < 8; i++) {
  6928  00250C  6B8C               	clrf	write_1wire@i& (0+255),b
  6929  00250E                     l7315:
  6930                           
  6931                           ; BSR set to: 0
  6932                           ;ow.c: 142: ((TRISC) &= ~(1 << (ow_bit)));
  6933  00250E  C0D3  F089         	movff	_ow_bit,??_write_1wire
  6934  002512  0E01               	movlw	1
  6935  002514  6F8A               	movwf	(??_write_1wire+1)& (0+255),b
  6936  002516  2B89               	incf	??_write_1wire& (0+255),f,b
  6937  002518  D002               	goto	u7814
  6938  00251A                     u7815:
  6939  00251A  90D8               	bcf	status,0,c
  6940  00251C  378A               	rlcf	(??_write_1wire+1)& (0+255),f,b
  6941  00251E                     u7814:
  6942  00251E  2F89               	decfsz	??_write_1wire& (0+255),f,b
  6943  002520  D7FC               	goto	u7815
  6944  002522  1D8A               	comf	(??_write_1wire+1)& (0+255),w,b
  6945  002524  1694               	andwf	3988,f,c	;volatile
  6946                           
  6947                           ;ow.c: 143: ((LATC) &= ~(1 << (ow_bit)));
  6948  002526  C0D3  F089         	movff	_ow_bit,??_write_1wire
  6949  00252A  0E01               	movlw	1
  6950  00252C  6F8A               	movwf	(??_write_1wire+1)& (0+255),b
  6951  00252E  2B89               	incf	??_write_1wire& (0+255),f,b
  6952  002530  D002               	goto	u7824
  6953  002532                     u7825:
  6954  002532  90D8               	bcf	status,0,c
  6955  002534  378A               	rlcf	(??_write_1wire+1)& (0+255),f,b
  6956  002536                     u7824:
  6957  002536  2F89               	decfsz	??_write_1wire& (0+255),f,b
  6958  002538  D7FC               	goto	u7825
  6959  00253A  1D8A               	comf	(??_write_1wire+1)& (0+255),w,b
  6960  00253C  168B               	andwf	3979,f,c	;volatile
  6961                           
  6962                           ; BSR set to: 0
  6963                           ;ow.c: 145: ow_delay(5);
  6964  00253E  6B88               	clrf	(ow_delay@del+1)& (0+255),b
  6965  002540  0E05               	movlw	5
  6966  002542  6F87               	movwf	ow_delay@del& (0+255),b
  6967  002544  EC37  F01B         	call	_ow_delay	;wreg free
  6968                           
  6969                           ; BSR set to: 0
  6970                           ;ow.c: 147: if(((data) & (1 <<(i)))) ((LATC) |= (1 << (ow_bit))); else ((LATC) &= ~(1 <<
      +                           (ow_bit)));
  6971  002548  C08C  F089         	movff	write_1wire@i,??_write_1wire
  6972  00254C  0E01               	movlw	1
  6973  00254E  6F8A               	movwf	(??_write_1wire+1)& (0+255),b
  6974  002550  2B89               	incf	??_write_1wire& (0+255),f,b
  6975  002552  D002               	goto	u7834
  6976  002554                     u7835:
  6977  002554  90D8               	bcf	status,0,c
  6978  002556  378A               	rlcf	(??_write_1wire+1)& (0+255),f,b
  6979  002558                     u7834:
  6980  002558  2F89               	decfsz	??_write_1wire& (0+255),f,b
  6981  00255A  D7FC               	goto	u7835
  6982  00255C  518A               	movf	(??_write_1wire+1)& (0+255),w,b
  6983  00255E  158B               	andwf	write_1wire@data& (0+255),w,b
  6984  002560  E003               	bz	l7323
  6985                           
  6986                           ; BSR set to: 0
  6987  002562  D827               	call	PL10	;call to abstracted procedure
  6988  002564  128B               	iorwf	3979,f,c	;volatile
  6989  002566  D00C               	goto	l7325
  6990  002568                     l7323:
  6991                           
  6992                           ; BSR set to: 0
  6993  002568  C0D3  F089         	movff	_ow_bit,??_write_1wire
  6994  00256C  0E01               	movlw	1
  6995  00256E  6F8A               	movwf	(??_write_1wire+1)& (0+255),b
  6996  002570  2B89               	incf	??_write_1wire& (0+255),f,b
  6997  002572  D002               	goto	u7864
  6998  002574                     u7865:
  6999  002574  90D8               	bcf	status,0,c
  7000  002576  378A               	rlcf	(??_write_1wire+1)& (0+255),f,b
  7001  002578                     u7864:
  7002  002578  2F89               	decfsz	??_write_1wire& (0+255),f,b
  7003  00257A  D7FC               	goto	u7865
  7004  00257C  1D8A               	comf	(??_write_1wire+1)& (0+255),w,b
  7005  00257E  168B               	andwf	3979,f,c	;volatile
  7006  002580                     l7325:
  7007                           
  7008                           ; BSR set to: 0
  7009                           ;ow.c: 149: ow_delay(78);
  7010  002580  6B88               	clrf	(ow_delay@del+1)& (0+255),b
  7011  002582  0E4E               	movlw	78
  7012  002584  6F87               	movwf	ow_delay@del& (0+255),b
  7013  002586  EC37  F01B         	call	_ow_delay	;wreg free
  7014                           
  7015                           ; BSR set to: 0
  7016                           ;ow.c: 151: ((LATC) |= (1 << (ow_bit)));
  7017  00258A  D813               	call	PL10	;call to abstracted procedure
  7018  00258C  128B               	iorwf	3979,f,c	;volatile
  7019                           
  7020                           ;ow.c: 153: ow_delay(60);
  7021  00258E  6B88               	clrf	(ow_delay@del+1)& (0+255),b
  7022  002590  0E3C               	movlw	60
  7023  002592  6F87               	movwf	ow_delay@del& (0+255),b
  7024  002594  EC37  F01B         	call	_ow_delay	;wreg free
  7025                           
  7026                           ; BSR set to: 0
  7027  002598  2B8C               	incf	write_1wire@i& (0+255),f,b
  7028                           
  7029                           ; BSR set to: 0
  7030  00259A  0E07               	movlw	7
  7031  00259C  658C               	cpfsgt	write_1wire@i& (0+255),b
  7032  00259E  D7B7               	goto	l7315
  7033                           
  7034                           ; BSR set to: 0
  7035                           ;ow.c: 154: }
  7036                           ;ow.c: 156: GIE = (bit)__gie;
  7037  0025A0  A1D1               	btfss	___gie& (0+255),0,b
  7038  0025A2  D001               	bra	u7895
  7039  0025A4  8EF2               	bsf	intcon,7,c	;volatile
  7040  0025A6                     u7895:
  7041  0025A6  B1D1               	btfsc	___gie& (0+255),0,b
  7042  0025A8  D001               	bra	u7896
  7043  0025AA  9EF2               	bcf	intcon,7,c	;volatile
  7044  0025AC                     u7896:
  7045                           
  7046                           ; BSR set to: 0
  7047                           ;ow.c: 158: ((TRISC) |= (1 << (ow_bit)));
  7048  0025AC  D802               	call	PL10	;call to abstracted procedure
  7049  0025AE  1294               	iorwf	3988,f,c	;volatile
  7050                           
  7051                           ; BSR set to: 0
  7052  0025B0  0012               	return	
  7053  0025B2                     __end_of_write_1wire:
  7054                           	opt stack 0
  7055  0025B2                     PL10:
  7056                           	opt stack 19
  7057  0025B2  C0D3  F089         	movff	_ow_bit,??_write_1wire
  7058  0025B6  0E01               	movlw	1
  7059  0025B8  6F8A               	movwf	(??_write_1wire+1)& (0+255),b
  7060  0025BA  2B89               	incf	??_write_1wire& (0+255),f,b
  7061  0025BC  D002               	goto	u7804
  7062  0025BE                     u7805:
  7063  0025BE  90D8               	bcf	status,0,c
  7064  0025C0  378A               	rlcf	(??_write_1wire+1)& (0+255),f,b
  7065  0025C2                     u7804:
  7066  0025C2  2F89               	decfsz	??_write_1wire& (0+255),f,b
  7067  0025C4  D7FC               	goto	u7805
  7068  0025C6  518A               	movf	(??_write_1wire+1)& (0+255),w,b
  7069  0025C8  0012               	return	
  7070  0025CA                     __end_ofPL10:
  7071                           	opt stack 0
  7072                           tblptru	equ	0xFF8
  7073                           tblptrh	equ	0xFF7
  7074                           tblptrl	equ	0xFF6
  7075                           tablat	equ	0xFF5
  7076                           prodh	equ	0xFF4
  7077                           prodl	equ	0xFF3
  7078                           intcon	equ	0xFF2
  7079                           postinc0	equ	0xFEE
  7080                           wreg	equ	0xFE8
  7081                           indf1	equ	0xFE7
  7082                           postinc1	equ	0xFE6
  7083                           postdec1	equ	0xFE5
  7084                           fsr1h	equ	0xFE2
  7085                           fsr1l	equ	0xFE1
  7086                           indf2	equ	0xFDF
  7087                           postinc2	equ	0xFDE
  7088                           postdec2	equ	0xFDD
  7089                           fsr2h	equ	0xFDA
  7090                           fsr2l	equ	0xFD9
  7091                           status	equ	0xFD8
  7092                           
  7093 ;; *************** function _read_1wire *****************
  7094 ;; Defined at:
  7095 ;;		line 97 in file "../lib/ow.c"
  7096 ;; Parameters:    Size  Location     Type
  7097 ;;		None
  7098 ;; Auto vars:     Size  Location     Type
  7099 ;;  i               1   44[BANK0 ] unsigned char 
  7100 ;;  data            1   43[BANK0 ] unsigned char 
  7101 ;; Return value:  Size  Location     Type
  7102 ;;                  1    wreg      unsigned char 
  7103 ;; Registers used:
  7104 ;;		wreg, status,2, status,0, cstack
  7105 ;; Tracked objects:
  7106 ;;		On entry : F/1
  7107 ;;		On exit  : F/0
  7108 ;;		Unchanged: 0/0
  7109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7111 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7112 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7113 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7114 ;;Total ram usage:        4 bytes
  7115 ;; Hardware stack levels used:    1
  7116 ;; Hardware stack levels required when called:    9
  7117 ;; This function calls:
  7118 ;;		_ow_delay
  7119 ;; This function is called by:
  7120 ;;		_ds18b20_read
  7121 ;; This function uses a non-reentrant model
  7122 ;;
  7123                           
  7124                           	psect	text9
  7125  0027F4                     __ptext9:
  7126                           	opt stack 0
  7127  0027F4                     _read_1wire:
  7128                           	opt stack 19
  7129                           
  7130                           ; BSR set to: 1
  7131                           ;ow.c: 99: char i, data = 0;
  7132                           
  7133                           ; BSR set to: 0
  7134                           ;incstack = 0
  7135  0027F4  0100               	movlb	0	; () banked
  7136  0027F6  6B8B               	clrf	read_1wire@data& (0+255),b
  7137                           
  7138                           ; BSR set to: 0
  7139                           ;ow.c: 101: __gie = (unsigned char)GIE;
  7140  0027F8  0E00               	movlw	0
  7141  0027FA  BEF2               	btfsc	intcon,7,c	;volatile
  7142  0027FC  0E01               	movlw	1
  7143  0027FE  6FD1               	movwf	___gie& (0+255),b
  7144                           
  7145                           ; BSR set to: 0
  7146                           ;ow.c: 102: GIE = 0;
  7147  002800  9EF2               	bcf	intcon,7,c	;volatile
  7148                           
  7149                           ; BSR set to: 0
  7150                           ;ow.c: 104: ((LATC) |= (1 << (ow_bit)));
  7151  002802  D83F               	call	PL32	;call to abstracted procedure
  7152  002804  128B               	iorwf	3979,f,c	;volatile
  7153                           
  7154                           ; BSR set to: 0
  7155                           ;ow.c: 106: for(i = 0; i < 8; i++) {
  7156  002806  6B8C               	clrf	read_1wire@i& (0+255),b
  7157  002808                     l7279:
  7158                           
  7159                           ; BSR set to: 0
  7160                           ;ow.c: 108: ((TRISC) &= ~(1 << (ow_bit)));
  7161  002808  C0D3  F089         	movff	_ow_bit,??_read_1wire
  7162  00280C  0E01               	movlw	1
  7163  00280E  6F8A               	movwf	(??_read_1wire+1)& (0+255),b
  7164  002810  2B89               	incf	??_read_1wire& (0+255),f,b
  7165  002812  D002               	goto	u7734
  7166  002814                     u7735:
  7167  002814  90D8               	bcf	status,0,c
  7168  002816  378A               	rlcf	(??_read_1wire+1)& (0+255),f,b
  7169  002818                     u7734:
  7170  002818  2F89               	decfsz	??_read_1wire& (0+255),f,b
  7171  00281A  D7FC               	goto	u7735
  7172  00281C  1D8A               	comf	(??_read_1wire+1)& (0+255),w,b
  7173  00281E  1694               	andwf	3988,f,c	;volatile
  7174                           
  7175                           ;ow.c: 109: ((LATC) &= ~(1 << (ow_bit)));
  7176  002820  C0D3  F089         	movff	_ow_bit,??_read_1wire
  7177  002824  0E01               	movlw	1
  7178  002826  6F8A               	movwf	(??_read_1wire+1)& (0+255),b
  7179  002828  2B89               	incf	??_read_1wire& (0+255),f,b
  7180  00282A  D002               	goto	u7744
  7181  00282C                     u7745:
  7182  00282C  90D8               	bcf	status,0,c
  7183  00282E  378A               	rlcf	(??_read_1wire+1)& (0+255),f,b
  7184  002830                     u7744:
  7185  002830  2F89               	decfsz	??_read_1wire& (0+255),f,b
  7186  002832  D7FC               	goto	u7745
  7187  002834  1D8A               	comf	(??_read_1wire+1)& (0+255),w,b
  7188  002836  168B               	andwf	3979,f,c	;volatile
  7189                           
  7190                           ; BSR set to: 0
  7191                           ;ow.c: 111: ow_delay(5);
  7192  002838  6B88               	clrf	(ow_delay@del+1)& (0+255),b
  7193  00283A  0E05               	movlw	5
  7194  00283C  6F87               	movwf	ow_delay@del& (0+255),b
  7195  00283E  EC37  F01B         	call	_ow_delay	;wreg free
  7196                           
  7197                           ; BSR set to: 0
  7198                           ;ow.c: 113: ((TRISC) |= (1 << (ow_bit)));
  7199  002842  D81F               	call	PL32	;call to abstracted procedure
  7200  002844  1294               	iorwf	3988,f,c	;volatile
  7201                           
  7202                           ;ow.c: 115: ow_delay(16);
  7203  002846  6B88               	clrf	(ow_delay@del+1)& (0+255),b
  7204  002848  0E10               	movlw	16
  7205  00284A  6F87               	movwf	ow_delay@del& (0+255),b
  7206  00284C  EC37  F01B         	call	_ow_delay	;wreg free
  7207                           
  7208                           ; BSR set to: 0
  7209                           ;ow.c: 117: data >>= 1;
  7210  002850  90D8               	bcf	status,0,c
  7211  002852  338B               	rrcf	read_1wire@data& (0+255),f,b
  7212                           
  7213                           ; BSR set to: 0
  7214                           ;ow.c: 119: if(((PORTC) & (1 <<(ow_bit))))data |= 0x80;
  7215  002854  D816               	call	PL32	;call to abstracted procedure
  7216  002856  1482               	andwf	3970,w,c	;volatile
  7217  002858  E002               	bz	l7291
  7218                           
  7219                           ; BSR set to: 0
  7220  00285A  8F8B               	bsf	read_1wire@data& (0+255),7,b
  7221  00285C  D001               	goto	l7293
  7222  00285E                     l7291:
  7223                           
  7224                           ; BSR set to: 0
  7225                           ;ow.c: 120: else data &= 0x7f;
  7226  00285E  9F8B               	bcf	read_1wire@data& (0+255),7,b
  7227  002860                     l7293:
  7228                           
  7229                           ; BSR set to: 0
  7230                           ;ow.c: 122: ow_delay(78);
  7231  002860  6B88               	clrf	(ow_delay@del+1)& (0+255),b
  7232  002862  0E4E               	movlw	78
  7233  002864  6F87               	movwf	ow_delay@del& (0+255),b
  7234  002866  EC37  F01B         	call	_ow_delay	;wreg free
  7235                           
  7236                           ; BSR set to: 0
  7237  00286A  2B8C               	incf	read_1wire@i& (0+255),f,b
  7238                           
  7239                           ; BSR set to: 0
  7240  00286C  0E07               	movlw	7
  7241  00286E  658C               	cpfsgt	read_1wire@i& (0+255),b
  7242  002870  D7CB               	goto	l7279
  7243                           
  7244                           ; BSR set to: 0
  7245                           ;ow.c: 124: }
  7246                           ;ow.c: 126: GIE = (bit)__gie;
  7247  002872  A1D1               	btfss	___gie& (0+255),0,b
  7248  002874  D001               	bra	u7795
  7249  002876  8EF2               	bsf	intcon,7,c	;volatile
  7250  002878                     u7795:
  7251  002878  B1D1               	btfsc	___gie& (0+255),0,b
  7252  00287A  D001               	bra	u7796
  7253  00287C  9EF2               	bcf	intcon,7,c	;volatile
  7254  00287E                     u7796:
  7255                           
  7256                           ; BSR set to: 0
  7257                           ;ow.c: 128: return(data);
  7258  00287E  518B               	movf	read_1wire@data& (0+255),w,b
  7259                           
  7260                           ; BSR set to: 0
  7261  002880  0012               	return	
  7262  002882                     __end_of_read_1wire:
  7263                           	opt stack 0
  7264  002882                     PL32:
  7265                           	opt stack 19
  7266  002882  C0D3  F089         	movff	_ow_bit,??_read_1wire
  7267  002886  0E01               	movlw	1
  7268  002888  6F8A               	movwf	(??_read_1wire+1)& (0+255),b
  7269  00288A  2B89               	incf	??_read_1wire& (0+255),f,b
  7270  00288C  D002               	goto	u7724
  7271  00288E                     u7725:
  7272  00288E  90D8               	bcf	status,0,c
  7273  002890  378A               	rlcf	(??_read_1wire+1)& (0+255),f,b
  7274  002892                     u7724:
  7275  002892  2F89               	decfsz	??_read_1wire& (0+255),f,b
  7276  002894  D7FC               	goto	u7725
  7277  002896  518A               	movf	(??_read_1wire+1)& (0+255),w,b
  7278  002898  0012               	return	
  7279  00289A                     __end_ofPL32:
  7280                           	opt stack 0
  7281                           tblptru	equ	0xFF8
  7282                           tblptrh	equ	0xFF7
  7283                           tblptrl	equ	0xFF6
  7284                           tablat	equ	0xFF5
  7285                           prodh	equ	0xFF4
  7286                           prodl	equ	0xFF3
  7287                           intcon	equ	0xFF2
  7288                           postinc0	equ	0xFEE
  7289                           wreg	equ	0xFE8
  7290                           indf1	equ	0xFE7
  7291                           postinc1	equ	0xFE6
  7292                           postdec1	equ	0xFE5
  7293                           fsr1h	equ	0xFE2
  7294                           fsr1l	equ	0xFE1
  7295                           indf2	equ	0xFDF
  7296                           postinc2	equ	0xFDE
  7297                           postdec2	equ	0xFDD
  7298                           fsr2h	equ	0xFDA
  7299                           fsr2l	equ	0xFD9
  7300                           status	equ	0xFD8
  7301                           
  7302 ;; *************** function _init_1wire *****************
  7303 ;; Defined at:
  7304 ;;		line 64 in file "../lib/ow.c"
  7305 ;; Parameters:    Size  Location     Type
  7306 ;;		None
  7307 ;; Auto vars:     Size  Location     Type
  7308 ;;  st              1   43[BANK0 ] unsigned char 
  7309 ;; Return value:  Size  Location     Type
  7310 ;;                  1    wreg      unsigned char 
  7311 ;; Registers used:
  7312 ;;		wreg, status,2, status,0, cstack
  7313 ;; Tracked objects:
  7314 ;;		On entry : E/0
  7315 ;;		On exit  : F/0
  7316 ;;		Unchanged: 0/0
  7317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7319 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7320 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7321 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7322 ;;Total ram usage:        3 bytes
  7323 ;; Hardware stack levels used:    1
  7324 ;; Hardware stack levels required when called:    9
  7325 ;; This function calls:
  7326 ;;		_ow_delay
  7327 ;; This function is called by:
  7328 ;;		_ds18b20_read
  7329 ;;		_ds18b20_start
  7330 ;; This function uses a non-reentrant model
  7331 ;;
  7332                           
  7333                           	psect	text10
  7334  00289A                     __ptext10:
  7335                           	opt stack 0
  7336  00289A                     _init_1wire:
  7337                           	opt stack 0
  7338                           
  7339                           ;ow.c: 65: unsigned char st;
  7340                           ;ow.c: 68: ((TRISC) &= ~(1 << (ow_bit)));
  7341                           
  7342                           ; BSR set to: 0
  7343                           ;incstack = 0
  7344  00289A  D832               	call	PL56	;call to abstracted procedure
  7345  00289C  1694               	andwf	3988,f,c	;volatile
  7346                           
  7347                           ; BSR set to: 0
  7348                           ;ow.c: 69: __nop();
  7349  00289E  F000               	nop	
  7350                           
  7351                           ;ow.c: 71: ((LATC) &= ~(1 << (ow_bit)));
  7352  0028A0  D82F               	call	PL56	;call to abstracted procedure
  7353  0028A2  168B               	andwf	3979,f,c	;volatile
  7354                           
  7355                           ; BSR set to: 0
  7356                           ;ow.c: 73: ow_delay(295);
  7357  0028A4  0E01               	movlw	1
  7358  0028A6  6F88               	movwf	(ow_delay@del+1)& (0+255),b
  7359  0028A8  0E27               	movlw	39
  7360  0028AA  6F87               	movwf	ow_delay@del& (0+255),b
  7361  0028AC  EC37  F01B         	call	_ow_delay	;wreg free
  7362                           
  7363                           ; BSR set to: 0
  7364                           ;ow.c: 74: ow_delay(295);
  7365  0028B0  0E01               	movlw	1
  7366  0028B2  6F88               	movwf	(ow_delay@del+1)& (0+255),b
  7367  0028B4  0E27               	movlw	39
  7368  0028B6  6F87               	movwf	ow_delay@del& (0+255),b
  7369  0028B8  EC37  F01B         	call	_ow_delay	;wreg free
  7370                           
  7371                           ; BSR set to: 0
  7372                           ;ow.c: 76: __gie = (unsigned char)GIE;
  7373  0028BC  0E00               	movlw	0
  7374  0028BE  BEF2               	btfsc	intcon,7,c	;volatile
  7375  0028C0  0E01               	movlw	1
  7376  0028C2  6FD1               	movwf	___gie& (0+255),b
  7377                           
  7378                           ; BSR set to: 0
  7379                           ;ow.c: 77: GIE = 0;
  7380  0028C4  9EF2               	bcf	intcon,7,c	;volatile
  7381                           
  7382                           ; BSR set to: 0
  7383                           ;ow.c: 79: ((TRISC) |= (1 << (ow_bit)));
  7384  0028C6  D829               	call	PL60	;call to abstracted procedure
  7385  0028C8  1294               	iorwf	3988,f,c	;volatile
  7386                           
  7387                           ; BSR set to: 0
  7388                           ;ow.c: 81: ow_delay(78);
  7389  0028CA  6B88               	clrf	(ow_delay@del+1)& (0+255),b
  7390  0028CC  0E4E               	movlw	78
  7391  0028CE  6F87               	movwf	ow_delay@del& (0+255),b
  7392  0028D0  EC37  F01B         	call	_ow_delay	;wreg free
  7393                           
  7394                           ; BSR set to: 0
  7395                           ;ow.c: 83: st = !((PORTC) & (1 <<(ow_bit)));
  7396  0028D4  D822               	call	PL60	;call to abstracted procedure
  7397  0028D6  1482               	andwf	3970,w,c	;volatile
  7398  0028D8  0E01               	movlw	1
  7399  0028DA  A4D8               	btfss	status,2,c
  7400  0028DC  0E00               	movlw	0
  7401  0028DE  6F8B               	movwf	init_1wire@st& (0+255),b
  7402                           
  7403                           ; BSR set to: 0
  7404                           ;ow.c: 85: GIE = (bit)__gie;
  7405  0028E0  A1D1               	btfss	___gie& (0+255),0,b
  7406  0028E2  D001               	bra	u7705
  7407  0028E4  8EF2               	bsf	intcon,7,c	;volatile
  7408  0028E6                     u7705:
  7409  0028E6  B1D1               	btfsc	___gie& (0+255),0,b
  7410  0028E8  D001               	bra	u7706
  7411  0028EA  9EF2               	bcf	intcon,7,c	;volatile
  7412  0028EC                     u7706:
  7413                           
  7414                           ; BSR set to: 0
  7415                           ;ow.c: 87: ow_delay(295);
  7416  0028EC  0E01               	movlw	1
  7417  0028EE  6F88               	movwf	(ow_delay@del+1)& (0+255),b
  7418  0028F0  0E27               	movlw	39
  7419  0028F2  6F87               	movwf	ow_delay@del& (0+255),b
  7420  0028F4  EC37  F01B         	call	_ow_delay	;wreg free
  7421                           
  7422                           ; BSR set to: 0
  7423                           ;ow.c: 89: if(st)
  7424  0028F8  518B               	movf	init_1wire@st& (0+255),w,b
  7425  0028FA  E001               	bz	l7261
  7426                           
  7427                           ; BSR set to: 0
  7428                           ;ow.c: 90: return(1);
  7429  0028FC  0C01               	retlw	1
  7430  0028FE                     l7261:
  7431                           
  7432                           ; BSR set to: 0
  7433                           
  7434                           ; BSR set to: 0
  7435                           ;ow.c: 91: else
  7436                           ;ow.c: 92: return(0);
  7437  0028FE  0C00               	retlw	0
  7438  002900                     __end_of_init_1wire:
  7439                           	opt stack 0
  7440  002900                     PL56:
  7441                           	opt stack 19
  7442  002900  C0D3  F089         	movff	_ow_bit,??_init_1wire
  7443  002904  0E01               	movlw	1
  7444  002906  0100               	movlb	0	; () banked
  7445  002908  6F8A               	movwf	(??_init_1wire+1)& (0+255),b
  7446  00290A  2B89               	incf	??_init_1wire& (0+255),f,b
  7447  00290C  D002               	goto	u7654
  7448  00290E                     u7655:
  7449  00290E  90D8               	bcf	status,0,c
  7450  002910  378A               	rlcf	(??_init_1wire+1)& (0+255),f,b
  7451  002912                     u7654:
  7452  002912  2F89               	decfsz	??_init_1wire& (0+255),f,b
  7453  002914  D7FC               	goto	u7655
  7454  002916  1D8A               	comf	(??_init_1wire+1)& (0+255),w,b
  7455  002918  0012               	return	
  7456  00291A                     __end_ofPL56:
  7457                           	opt stack 0
  7458  00291A                     PL60:
  7459                           	opt stack 19
  7460  00291A  C0D3  F089         	movff	_ow_bit,??_init_1wire
  7461  00291E  0E01               	movlw	1
  7462  002920  6F8A               	movwf	(??_init_1wire+1)& (0+255),b
  7463  002922  2B89               	incf	??_init_1wire& (0+255),f,b
  7464  002924  D002               	goto	u7674
  7465  002926                     u7675:
  7466  002926  90D8               	bcf	status,0,c
  7467  002928  378A               	rlcf	(??_init_1wire+1)& (0+255),f,b
  7468  00292A                     u7674:
  7469  00292A  2F89               	decfsz	??_init_1wire& (0+255),f,b
  7470  00292C  D7FC               	goto	u7675
  7471  00292E  518A               	movf	(??_init_1wire+1)& (0+255),w,b
  7472  002930  0012               	return	
  7473  002932                     __end_ofPL60:
  7474                           	opt stack 0
  7475                           tblptru	equ	0xFF8
  7476                           tblptrh	equ	0xFF7
  7477                           tblptrl	equ	0xFF6
  7478                           tablat	equ	0xFF5
  7479                           prodh	equ	0xFF4
  7480                           prodl	equ	0xFF3
  7481                           intcon	equ	0xFF2
  7482                           postinc0	equ	0xFEE
  7483                           wreg	equ	0xFE8
  7484                           indf1	equ	0xFE7
  7485                           postinc1	equ	0xFE6
  7486                           postdec1	equ	0xFE5
  7487                           fsr1h	equ	0xFE2
  7488                           fsr1l	equ	0xFE1
  7489                           indf2	equ	0xFDF
  7490                           postinc2	equ	0xFDE
  7491                           postdec2	equ	0xFDD
  7492                           fsr2h	equ	0xFDA
  7493                           fsr2l	equ	0xFD9
  7494                           status	equ	0xFD8
  7495                           
  7496 ;; *************** function _ow_delay *****************
  7497 ;; Defined at:
  7498 ;;		line 59 in file "../lib/ow.c"
  7499 ;; Parameters:    Size  Location     Type
  7500 ;;  del             2   39[BANK0 ] unsigned int 
  7501 ;; Auto vars:     Size  Location     Type
  7502 ;;		None
  7503 ;; Return value:  Size  Location     Type
  7504 ;;		None               void
  7505 ;; Registers used:
  7506 ;;		wreg, status,2, status,0
  7507 ;; Tracked objects:
  7508 ;;		On entry : F/0
  7509 ;;		On exit  : F/0
  7510 ;;		Unchanged: 0/0
  7511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7512 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7515 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7516 ;;Total ram usage:        2 bytes
  7517 ;; Hardware stack levels used:    1
  7518 ;; Hardware stack levels required when called:    8
  7519 ;; This function calls:
  7520 ;;		Nothing
  7521 ;; This function is called by:
  7522 ;;		_init_1wire
  7523 ;;		_read_1wire
  7524 ;;		_write_1wire
  7525 ;;		_ds18b20_start
  7526 ;; This function uses a non-reentrant model
  7527 ;;
  7528                           
  7529                           	psect	text11
  7530  00366E                     __ptext11:
  7531                           	opt stack 0
  7532  00366E                     _ow_delay:
  7533                           	opt stack 19
  7534                           
  7535                           ; BSR set to: 0
  7536                           ;ow.c: 60: while(del--) __nop();
  7537                           
  7538                           ; BSR set to: 0
  7539                           ;incstack = 0
  7540  00366E  D001               	goto	l6981
  7541  003670                     l262:
  7542                           
  7543                           ; BSR set to: 0
  7544  003670  F000               	nop	
  7545  003672                     l6981:
  7546  003672  0100               	movlb	0	; () banked
  7547  003674  0787               	decf	ow_delay@del& (0+255),f,b
  7548  003676  A0D8               	btfss	status,0,c
  7549  003678  0788               	decf	(ow_delay@del+1)& (0+255),f,b
  7550  00367A  2987               	incf	ow_delay@del& (0+255),w,b
  7551  00367C  B4D8               	btfsc	status,2,c
  7552  00367E  2988               	incf	(ow_delay@del+1)& (0+255),w,b
  7553  003680  B4D8               	btfsc	status,2,c
  7554  003682  0012               	return	
  7555  003684  D7F5               	goto	l262
  7556  003686                     __end_of_ow_delay:
  7557                           	opt stack 0
  7558                           tblptru	equ	0xFF8
  7559                           tblptrh	equ	0xFF7
  7560                           tblptrl	equ	0xFF6
  7561                           tablat	equ	0xFF5
  7562                           prodh	equ	0xFF4
  7563                           prodl	equ	0xFF3
  7564                           intcon	equ	0xFF2
  7565                           postinc0	equ	0xFEE
  7566                           wreg	equ	0xFE8
  7567                           indf1	equ	0xFE7
  7568                           postinc1	equ	0xFE6
  7569                           postdec1	equ	0xFE5
  7570                           fsr1h	equ	0xFE2
  7571                           fsr1l	equ	0xFE1
  7572                           indf2	equ	0xFDF
  7573                           postinc2	equ	0xFDE
  7574                           postdec2	equ	0xFDD
  7575                           fsr2h	equ	0xFDA
  7576                           fsr2l	equ	0xFD9
  7577                           status	equ	0xFD8
  7578                           
  7579 ;; *************** function ___awtofl *****************
  7580 ;; Defined at:
  7581 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awtofl.c"
  7582 ;; Parameters:    Size  Location     Type
  7583 ;;  c               2   49[BANK0 ] int 
  7584 ;; Auto vars:     Size  Location     Type
  7585 ;;  f1              4    0        int 
  7586 ;;  sign            1   53[BANK0 ] unsigned char 
  7587 ;; Return value:  Size  Location     Type
  7588 ;;                  4   49[BANK0 ] unsigned char 
  7589 ;; Registers used:
  7590 ;;		wreg, status,2, status,0, prodl, cstack
  7591 ;; Tracked objects:
  7592 ;;		On entry : E/0
  7593 ;;		On exit  : F/0
  7594 ;;		Unchanged: 0/0
  7595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7596 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7597 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7599 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7600 ;;Total ram usage:        5 bytes
  7601 ;; Hardware stack levels used:    1
  7602 ;; Hardware stack levels required when called:    9
  7603 ;; This function calls:
  7604 ;;		___flpack
  7605 ;; This function is called by:
  7606 ;;		_ds18b20_read
  7607 ;; This function uses a non-reentrant model
  7608 ;;
  7609                           
  7610                           	psect	text12
  7611  00320A                     __ptext12:
  7612                           	opt stack 0
  7613  00320A                     ___awtofl:
  7614                           	opt stack 19
  7615                           
  7616                           ; BSR set to: 0
  7617                           ;incstack = 0
  7618  00320A  0100               	movlb	0	; () banked
  7619  00320C  6B95               	clrf	___awtofl@sign& (0+255),b
  7620                           
  7621                           ; BSR set to: 0
  7622  00320E  5192               	movf	(___awtofl@c+1)& (0+255),w,b
  7623  003210  0A80               	xorlw	128
  7624  003212  6EF3               	movwf	prodl,c
  7625  003214  0E80               	movlw	128
  7626  003216  5CF3               	subwf	prodl,w,c
  7627  003218  0E00               	movlw	0
  7628  00321A  B4D8               	btfsc	status,2,c
  7629  00321C  5D91               	subwf	___awtofl@c& (0+255),w,b
  7630  00321E  E205               	bc	l7567
  7631                           
  7632                           ; BSR set to: 0
  7633  003220  6D91               	negf	___awtofl@c& (0+255),b
  7634  003222  1F92               	comf	(___awtofl@c+1)& (0+255),f,b
  7635  003224  B0D8               	btfsc	status,0,c
  7636  003226  2B92               	incf	(___awtofl@c+1)& (0+255),f,b
  7637  003228  2B95               	incf	___awtofl@sign& (0+255),f,b
  7638  00322A                     l7567:
  7639                           
  7640                           ; BSR set to: 0
  7641  00322A  C091  F087         	movff	___awtofl@c,___flpack@arg
  7642  00322E  C092  F088         	movff	___awtofl@c+1,___flpack@arg+1
  7643  003232  6B89               	clrf	(___flpack@arg+2)& (0+255),b
  7644  003234  6B8A               	clrf	(___flpack@arg+3)& (0+255),b
  7645  003236  0E96               	movlw	150
  7646  003238  6F8B               	movwf	___flpack@exp& (0+255),b
  7647  00323A  C095  F08C         	movff	___awtofl@sign,___flpack@sign
  7648  00323E  EC46  F013         	call	___flpack	;wreg free
  7649  003242  C087  F091         	movff	?___flpack,?___awtofl
  7650  003246  C088  F092         	movff	?___flpack+1,?___awtofl+1
  7651  00324A  C089  F093         	movff	?___flpack+2,?___awtofl+2
  7652  00324E  C08A  F094         	movff	?___flpack+3,?___awtofl+3
  7653                           
  7654                           ; BSR set to: 0
  7655  003252  0012               	return	
  7656  003254                     __end_of___awtofl:
  7657                           	opt stack 0
  7658                           tblptru	equ	0xFF8
  7659                           tblptrh	equ	0xFF7
  7660                           tblptrl	equ	0xFF6
  7661                           tablat	equ	0xFF5
  7662                           prodh	equ	0xFF4
  7663                           prodl	equ	0xFF3
  7664                           intcon	equ	0xFF2
  7665                           postinc0	equ	0xFEE
  7666                           wreg	equ	0xFE8
  7667                           indf1	equ	0xFE7
  7668                           postinc1	equ	0xFE6
  7669                           postdec1	equ	0xFE5
  7670                           fsr1h	equ	0xFE2
  7671                           fsr1l	equ	0xFE1
  7672                           indf2	equ	0xFDF
  7673                           postinc2	equ	0xFDE
  7674                           postdec2	equ	0xFDD
  7675                           fsr2h	equ	0xFDA
  7676                           fsr2l	equ	0xFD9
  7677                           status	equ	0xFD8
  7678                           
  7679 ;; *************** function _tsk_display *****************
  7680 ;; Defined at:
  7681 ;;		line 141 in file "../Main.c"
  7682 ;; Parameters:    Size  Location     Type
  7683 ;;		None
  7684 ;; Auto vars:     Size  Location     Type
  7685 ;;		None
  7686 ;; Return value:  Size  Location     Type
  7687 ;;		None               void
  7688 ;; Registers used:
  7689 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7690 ;; Tracked objects:
  7691 ;;		On entry : 0/0
  7692 ;;		On exit  : F/0
  7693 ;;		Unchanged: 0/0
  7694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7699 ;;Total ram usage:        0 bytes
  7700 ;; Hardware stack levels used:    1
  7701 ;; Hardware stack levels required when called:   15
  7702 ;; This function calls:
  7703 ;;		_LabelSetTxt
  7704 ;;		_sprintf
  7705 ;; This function is called by:
  7706 ;;		_main
  7707 ;; This function uses a non-reentrant model
  7708 ;;
  7709                           
  7710                           	psect	text13
  7711  002DDA                     __ptext13:
  7712                           	opt stack 0
  7713  002DDA                     _tsk_display:
  7714                           	opt stack 15
  7715                           
  7716                           ;Main.c: 142: static double f_prev_T = -100.0;
  7717                           ;Main.c: 145: if(f_prev_T != f_T_salona) {
  7718                           
  7719                           ; BSR set to: 0
  7720                           ;incstack = 0
  7721  002DDA  0100               	movlb	0	; () banked
  7722  002DDC  51C5               	movf	(_f_T_salona+3)& (0+255),w,b
  7723  002DDE  1847               	xorwf	tsk_display@f_prev_T+3,w,c
  7724  002DE0  E108               	bnz	u9145
  7725  002DE2  51C4               	movf	(_f_T_salona+2)& (0+255),w,b
  7726  002DE4  1846               	xorwf	tsk_display@f_prev_T+2,w,c
  7727  002DE6  E105               	bnz	u9145
  7728  002DE8  51C3               	movf	(_f_T_salona+1)& (0+255),w,b
  7729  002DEA  1845               	xorwf	tsk_display@f_prev_T+1,w,c
  7730  002DEC  E102               	bnz	u9145
  7731  002DEE  51C2               	movf	_f_T_salona& (0+255),w,b
  7732  002DF0  1844               	xorwf	tsk_display@f_prev_T,w,c
  7733  002DF2                     u9145:
  7734  002DF2  B4D8               	btfsc	status,2,c
  7735  002DF4  0012               	return	
  7736                           
  7737                           ; BSR set to: 0
  7738                           ;Main.c: 146: f_prev_T = f_T_salona;
  7739  002DF6  C0C2  F044         	movff	_f_T_salona,tsk_display@f_prev_T
  7740  002DFA  C0C3  F045         	movff	_f_T_salona+1,tsk_display@f_prev_T+1
  7741  002DFE  C0C4  F046         	movff	_f_T_salona+2,tsk_display@f_prev_T+2
  7742  002E02  C0C5  F047         	movff	_f_T_salona+3,tsk_display@f_prev_T+3
  7743                           
  7744                           ; BSR set to: 0
  7745                           ;Main.c: 147: sprintf(str, "T=%2.1f", f_T_salona);
  7746  002E06  0101               	movlb	1	; () banked
  7747  002E08  0E01               	movlw	high _str
  7748  002E0A  6FD8               	movwf	(sprintf@sp+1)& (0+255),b
  7749  002E0C  0EB4               	movlw	low _str
  7750  002E0E  6FD7               	movwf	sprintf@sp& (0+255),b
  7751  002E10  0EFF               	movlw	high STR_1
  7752  002E12  6FDA               	movwf	(sprintf@f+1)& (0+255),b
  7753  002E14  0EF7               	movlw	low STR_1
  7754  002E16  6FD9               	movwf	sprintf@f& (0+255),b
  7755  002E18  C0C2  F1DB         	movff	_f_T_salona,?_sprintf+4
  7756  002E1C  C0C3  F1DC         	movff	_f_T_salona+1,?_sprintf+5
  7757  002E20  C0C4  F1DD         	movff	_f_T_salona+2,?_sprintf+6
  7758  002E24  C0C5  F1DE         	movff	_f_T_salona+3,?_sprintf+7
  7759  002E28  ECFA  F001         	call	_sprintf	;wreg free
  7760                           
  7761                           ; BSR set to: 2
  7762                           ;Main.c: 148: LabelSetTxt(&lb_temp, str);
  7763  002E2C  0E01               	movlw	high _lb_temp
  7764  002E2E  0100               	movlb	0	; () banked
  7765  002E30  6FAB               	movwf	(LabelSetTxt@lb+1)& (0+255),b
  7766  002E32  0E99               	movlw	low _lb_temp
  7767  002E34  6FAA               	movwf	LabelSetTxt@lb& (0+255),b
  7768  002E36  0E01               	movlw	high _str
  7769  002E38  6FAD               	movwf	(LabelSetTxt@str+1)& (0+255),b
  7770  002E3A  0EB4               	movlw	low _str
  7771  002E3C  6FAC               	movwf	LabelSetTxt@str& (0+255),b
  7772  002E3E  EF97  F011         	goto	_LabelSetTxt	;wreg free
  7773  002E42                     __end_of_tsk_display:
  7774                           	opt stack 0
  7775                           tblptru	equ	0xFF8
  7776                           tblptrh	equ	0xFF7
  7777                           tblptrl	equ	0xFF6
  7778                           tablat	equ	0xFF5
  7779                           prodh	equ	0xFF4
  7780                           prodl	equ	0xFF3
  7781                           intcon	equ	0xFF2
  7782                           postinc0	equ	0xFEE
  7783                           wreg	equ	0xFE8
  7784                           indf1	equ	0xFE7
  7785                           postinc1	equ	0xFE6
  7786                           postdec1	equ	0xFE5
  7787                           fsr1h	equ	0xFE2
  7788                           fsr1l	equ	0xFE1
  7789                           indf2	equ	0xFDF
  7790                           postinc2	equ	0xFDE
  7791                           postdec2	equ	0xFDD
  7792                           fsr2h	equ	0xFDA
  7793                           fsr2l	equ	0xFD9
  7794                           status	equ	0xFD8
  7795                           
  7796 ;; *************** function _sprintf *****************
  7797 ;; Defined at:
  7798 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  7799 ;; Parameters:    Size  Location     Type
  7800 ;;  sp              2   15[BANK1 ] PTR unsigned char 
  7801 ;;		 -> str(20), 
  7802 ;;  f               2   17[BANK1 ] PTR const unsigned char 
  7803 ;;		 -> STR_1(8), 
  7804 ;; Auto vars:     Size  Location     Type
  7805 ;;  vd              4   10[BANK2 ] unsigned long 
  7806 ;;  vd              4   14[BANK2 ] unsigned long 
  7807 ;;  _val            5   22[BANK2 ] struct .
  7808 ;;  fval            4   33[BANK2 ] struct .
  7809 ;;  integ           4   18[BANK2 ] struct .
  7810 ;;  ival            4    0        struct .
  7811 ;;  prec            2   37[BANK2 ] int 
  7812 ;;  exp             2   31[BANK2 ] int 
  7813 ;;  width           2   29[BANK2 ] int 
  7814 ;;  flag            2   27[BANK2 ] unsigned short 
  7815 ;;  ap              2    8[BANK2 ] PTR void [1]
  7816 ;;		 -> ?_sprintf(2), 
  7817 ;;  c               1   39[BANK2 ] char 
  7818 ;;  d               1    0        unsigned char 
  7819 ;; Return value:  Size  Location     Type
  7820 ;;                  2   15[BANK1 ] int 
  7821 ;; Registers used:
  7822 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7823 ;; Tracked objects:
  7824 ;;		On entry : F/1
  7825 ;;		On exit  : F/2
  7826 ;;		Unchanged: 0/0
  7827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7828 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7829 ;;      Locals:         0       0       0      40       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7830 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7831 ;;      Totals:         0       0      12      40       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7832 ;;Total ram usage:       52 bytes
  7833 ;; Hardware stack levels used:    1
  7834 ;; Hardware stack levels required when called:   11
  7835 ;; This function calls:
  7836 ;;		___awdiv
  7837 ;;		___fladd
  7838 ;;		___flge
  7839 ;;		___flmul
  7840 ;;		___flneg
  7841 ;;		___flsub
  7842 ;;		___fltol
  7843 ;;		___lldiv
  7844 ;;		___llmod
  7845 ;;		___lltofl
  7846 ;;		___wmul
  7847 ;;		__div_to_l_
  7848 ;;		__tdiv_to_l_
  7849 ;;		_fround
  7850 ;;		_isdigit
  7851 ;;		_scale
  7852 ;; This function is called by:
  7853 ;;		_tsk_display
  7854 ;; This function uses a non-reentrant model
  7855 ;;
  7856                           
  7857                           	psect	text14
  7858  0003F4                     __ptext14:
  7859                           	opt stack 0
  7860  0003F4                     _sprintf:
  7861                           	opt stack 18
  7862                           
  7863                           ; BSR set to: 1
  7864                           ;doprnt.c: 494: va_list ap;
  7865                           ;doprnt.c: 499: signed char c;
  7866                           ;doprnt.c: 501: int width;
  7867                           ;doprnt.c: 504: int prec;
  7868                           ;doprnt.c: 508: unsigned short flag;
  7869                           ;doprnt.c: 515: char d;
  7870                           ;doprnt.c: 516: double fval, integ;
  7871                           ;doprnt.c: 517: int exp;
  7872                           ;doprnt.c: 518: double ival;
  7873                           ;doprnt.c: 519: union {
  7874                           ;doprnt.c: 520: unsigned long _val;
  7875                           ;doprnt.c: 521: struct {
  7876                           ;doprnt.c: 522: const char * _cp;
  7877                           ;doprnt.c: 523: unsigned _len;
  7878                           ;doprnt.c: 524: } _str;
  7879                           ;doprnt.c: 525: } _val;
  7880                           ;doprnt.c: 542: *ap = __va_start();
  7881                           
  7882                           ; BSR set to: 0
  7883                           ;incstack = 0
  7884  0003F4  0E01               	movlw	high (?_sprintf+4)
  7885  0003F6  0102               	movlb	2	; () banked
  7886  0003F8  6F71               	movwf	(sprintf@ap+1)& (0+255),b
  7887  0003FA  0EDB               	movlw	low (?_sprintf+4)
  7888  0003FC  6F70               	movwf	sprintf@ap& (0+255),b
  7889                           
  7890                           ;doprnt.c: 545: while(c = *f++) {
  7891  0003FE  D3BC               	goto	l8215
  7892  000400                     l7967:
  7893                           
  7894                           ; BSR set to: 2
  7895                           ;doprnt.c: 547: if(c != '%')
  7896  000400  518F               	movf	sprintf@c& (0+255),w,b
  7897  000402  0A25               	xorlw	37
  7898  000404  E00A               	bz	l1208
  7899                           
  7900                           ; BSR set to: 2
  7901                           ;doprnt.c: 549: {
  7902                           ;doprnt.c: 550: ((*sp++ = (c)));
  7903  000406  C1D7  FFD9         	movff	sprintf@sp,fsr2l
  7904  00040A  C1D8  FFDA         	movff	sprintf@sp+1,fsr2h
  7905  00040E  C28F  FFDF         	movff	sprintf@c,indf2
  7906  000412                     l7971:
  7907  000412  0101               	movlb	1	; () banked
  7908  000414  4BD7               	infsnz	sprintf@sp& (0+255),f,b
  7909  000416  2BD8               	incf	(sprintf@sp+1)& (0+255),f,b
  7910                           
  7911                           ;doprnt.c: 551: continue;
  7912  000418  D3AF               	goto	l8215
  7913  00041A                     l1208:
  7914                           
  7915                           ; BSR set to: 2
  7916                           ;doprnt.c: 552: }
  7917                           ;doprnt.c: 555: width = 0;
  7918  00041A  6B85               	clrf	sprintf@width& (0+255),b
  7919  00041C  6B86               	clrf	(sprintf@width+1)& (0+255),b
  7920                           
  7921                           ;doprnt.c: 557: flag = 0;
  7922  00041E  6B83               	clrf	sprintf@flag& (0+255),b
  7923  000420  6B84               	clrf	(sprintf@flag+1)& (0+255),b
  7924                           
  7925                           ; BSR set to: 2
  7926                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
  7927  000422  0101               	movlb	1	; () banked
  7928  000424  DBDB               	call	PL40	;call to abstracted procedure
  7929  000426  ECFF  F01A         	call	_isdigit
  7930  00042A  E32F               	bnc	l7985
  7931                           
  7932                           ; BSR set to: 0
  7933                           ;doprnt.c: 607: width = 0;
  7934  00042C  0102               	movlb	2	; () banked
  7935  00042E  6B85               	clrf	sprintf@width& (0+255),b
  7936  000430  6B86               	clrf	(sprintf@width+1)& (0+255),b
  7937  000432                     l7977:
  7938                           
  7939                           ;doprnt.c: 609: width *= 10;
  7940  000432  C285  F087         	movff	sprintf@width,___wmul@multiplier
  7941  000436  C286  F088         	movff	sprintf@width+1,___wmul@multiplier+1
  7942  00043A  0100               	movlb	0	; () banked
  7943  00043C  6B8A               	clrf	(___wmul@multiplicand+1)& (0+255),b
  7944  00043E  0E0A               	movlw	10
  7945  000440  6F89               	movwf	___wmul@multiplicand& (0+255),b
  7946  000442  ECB5  F01A         	call	___wmul	;wreg free
  7947  000446  C087  F285         	movff	?___wmul,sprintf@width
  7948  00044A  C088  F286         	movff	?___wmul+1,sprintf@width+1
  7949                           
  7950                           ; BSR set to: 0
  7951                           ;doprnt.c: 610: width += *f++ - '0';
  7952  00044E  0ED0               	movlw	208
  7953  000450  0101               	movlb	1	; () banked
  7954  000452  6FDF               	movwf	??_sprintf& (0+255),b
  7955  000454  69E0               	setf	(??_sprintf+1)& (0+255),b
  7956  000456  DBC2               	call	PL40	;call to abstracted procedure
  7957  000458  6FE1               	movwf	(??_sprintf+2)& (0+255),b
  7958  00045A  6BE2               	clrf	(??_sprintf+3)& (0+255),b
  7959  00045C  51DF               	movf	??_sprintf& (0+255),w,b
  7960  00045E  27E1               	addwf	(??_sprintf+2)& (0+255),f,b
  7961  000460  51E0               	movf	(??_sprintf+1)& (0+255),w,b
  7962  000462  23E2               	addwfc	(??_sprintf+3)& (0+255),f,b
  7963  000464  51E1               	movf	(??_sprintf+2)& (0+255),w,b
  7964  000466  0102               	movlb	2	; () banked
  7965  000468  2785               	addwf	sprintf@width& (0+255),f,b
  7966  00046A  0101               	movlb	1	; () banked
  7967  00046C  51E2               	movf	(??_sprintf+3)& (0+255),w,b
  7968  00046E  0102               	movlb	2	; () banked
  7969  000470  2386               	addwfc	(sprintf@width+1)& (0+255),f,b
  7970                           
  7971                           ; BSR set to: 2
  7972  000472  0101               	movlb	1	; () banked
  7973  000474  4BD9               	infsnz	sprintf@f& (0+255),f,b
  7974  000476  2BDA               	incf	(sprintf@f+1)& (0+255),f,b
  7975                           
  7976                           ; BSR set to: 1
  7977                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
  7978  000478  C1D9  FFF6         	movff	sprintf@f,tblptrl
  7979  00047C  C1DA  FFF7         	movff	sprintf@f+1,tblptrh
  7980  000480                     	if	0	;tblptru may be non-zero
  7981  000480                     	endif
  7982  000480                     	if	0	;tblptru may be non-zero
  7983  000480                     	endif
  7984  000480  0008               	tblrd		*
  7985  000482  50F5               	movf	tablat,w,c
  7986  000484  ECFF  F01A         	call	_isdigit
  7987  000488  E2D4               	bc	l7977
  7988  00048A                     l7985:
  7989                           
  7990                           ; BSR set to: 0
  7991                           ;doprnt.c: 617: }
  7992                           ;doprnt.c: 620: if(*f == '.') {
  7993  00048A  DBA8               	call	PL40	;call to abstracted procedure
  7994  00048C  0A2E               	xorlw	46
  7995  00048E  E129               	bnz	l1212
  7996                           
  7997                           ; BSR set to: 1
  7998                           ;doprnt.c: 621: flag |= 0x4000;
  7999  000490  0102               	movlb	2	; () banked
  8000  000492  8D84               	bsf	(sprintf@flag+1)& (0+255),6,b
  8001                           
  8002                           ;doprnt.c: 622: f++;
  8003  000494  0101               	movlb	1	; () banked
  8004  000496  4BD9               	infsnz	sprintf@f& (0+255),f,b
  8005  000498  2BDA               	incf	(sprintf@f+1)& (0+255),f,b
  8006                           
  8007                           ; BSR set to: 1
  8008                           ;doprnt.c: 629: {
  8009                           ;doprnt.c: 630: prec = 0;
  8010  00049A  0102               	movlb	2	; () banked
  8011  00049C  6B8D               	clrf	sprintf@prec& (0+255),b
  8012  00049E  6B8E               	clrf	(sprintf@prec+1)& (0+255),b
  8013                           
  8014                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
  8015  0004A0  D01A               	goto	l7995
  8016  0004A2                     l7991:
  8017                           
  8018                           ; BSR set to: 0
  8019                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
  8020  0004A2  C28D  F087         	movff	sprintf@prec,___wmul@multiplier
  8021  0004A6  C28E  F088         	movff	sprintf@prec+1,___wmul@multiplier+1
  8022  0004AA  6B8A               	clrf	(___wmul@multiplicand+1)& (0+255),b
  8023  0004AC  0E0A               	movlw	10
  8024  0004AE  6F89               	movwf	___wmul@multiplicand& (0+255),b
  8025  0004B0  ECB5  F01A         	call	___wmul	;wreg free
  8026  0004B4  DB93               	call	PL40	;call to abstracted procedure
  8027  0004B6  0100               	movlb	0	; () banked
  8028  0004B8  2787               	addwf	?___wmul& (0+255),f,b
  8029  0004BA  0E00               	movlw	0
  8030  0004BC  2388               	addwfc	(?___wmul+1)& (0+255),f,b
  8031  0004BE  0ED0               	movlw	208
  8032  0004C0  2587               	addwf	?___wmul& (0+255),w,b
  8033  0004C2  0102               	movlb	2	; () banked
  8034  0004C4  6F8D               	movwf	sprintf@prec& (0+255),b
  8035  0004C6  0EFF               	movlw	255
  8036  0004C8  0100               	movlb	0	; () banked
  8037  0004CA  2188               	addwfc	(?___wmul+1)& (0+255),w,b
  8038  0004CC  0102               	movlb	2	; () banked
  8039  0004CE  6F8E               	movwf	(sprintf@prec+1)& (0+255),b
  8040                           
  8041                           ; BSR set to: 2
  8042  0004D0  0101               	movlb	1	; () banked
  8043  0004D2  4BD9               	infsnz	sprintf@f& (0+255),f,b
  8044  0004D4  2BDA               	incf	(sprintf@f+1)& (0+255),f,b
  8045  0004D6                     l7995:
  8046  0004D6  0101               	movlb	1	; () banked
  8047  0004D8  DB81               	call	PL40	;call to abstracted procedure
  8048  0004DA  ECFF  F01A         	call	_isdigit
  8049  0004DE  E308               	bnc	l8003
  8050  0004E0  D7E0               	goto	l7991
  8051  0004E2                     l1212:
  8052                           
  8053                           ; BSR set to: 1
  8054                           ;doprnt.c: 635: prec = 0;
  8055  0004E2  0102               	movlb	2	; () banked
  8056  0004E4  6B8D               	clrf	sprintf@prec& (0+255),b
  8057  0004E6  6B8E               	clrf	(sprintf@prec+1)& (0+255),b
  8058                           
  8059                           ; BSR set to: 2
  8060                           ;doprnt.c: 637: flag |= 0x1000;
  8061  0004E8  8984               	bsf	(sprintf@flag+1)& (0+255),4,b
  8062  0004EA  D002               	goto	l8003
  8063  0004EC                     l7999:
  8064                           
  8065                           ; BSR set to: 2
  8066                           ;doprnt.c: 672: flag |= 0x400;
  8067  0004EC  8584               	bsf	(sprintf@flag+1)& (0+255),2,b
  8068                           
  8069                           ;doprnt.c: 673: break;
  8070  0004EE  D007               	goto	l8005
  8071  0004F0                     l8003:
  8072  0004F0  DB7C               	call	PL62	;call to abstracted procedure
  8073  0004F2  518F               	movf	sprintf@c& (0+255),w,b
  8074                           
  8075                           ; Switch size 1, requested type "space"
  8076                           ; Number of cases is 2, Range of values is 0 to 102
  8077                           ; switch strategies available:
  8078                           ; Name         Instructions Cycles
  8079                           ; simple_byte            7     4 (average)
  8080                           ;	Chosen strategy is simple_byte
  8081  0004F4  E101 D343          	bz	l8217
  8082  0004F8  0A66               	xorlw	102	; case 102
  8083  0004FA  E0F8               	bz	l7999
  8084  0004FC  D33D               	goto	l8215
  8085  0004FE                     l8005:
  8086                           
  8087                           ; BSR set to: 2
  8088                           ;doprnt.c: 834: if(flag & (0x700)) {
  8089  0004FE  0E07               	movlw	7
  8090  000500  1584               	andwf	(sprintf@flag+1)& (0+255),w,b
  8091  000502  E101 D2B1          	bz	l8171
  8092                           
  8093                           ; BSR set to: 2
  8094                           ;doprnt.c: 836: if(flag & 0x1000)
  8095  000506  A984               	btfss	(sprintf@flag+1)& (0+255),4,b
  8096  000508  D003               	goto	l8011
  8097                           
  8098                           ; BSR set to: 2
  8099                           ;doprnt.c: 838: prec = 6;
  8100  00050A  6B8E               	clrf	(sprintf@prec+1)& (0+255),b
  8101  00050C  0E06               	movlw	6
  8102  00050E  6F8D               	movwf	sprintf@prec& (0+255),b
  8103  000510                     l8011:
  8104                           
  8105                           ; BSR set to: 2
  8106                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  8107  000510  C270  FFD9         	movff	sprintf@ap,fsr2l
  8108  000514  C271  FFDA         	movff	sprintf@ap+1,fsr2h
  8109  000518  CFDE F289          	movff	postinc2,sprintf@fval
  8110  00051C  CFDE F28A          	movff	postinc2,sprintf@fval+1
  8111  000520  CFDE F28B          	movff	postinc2,sprintf@fval+2
  8112  000524  CFDE F28C          	movff	postinc2,sprintf@fval+3
  8113                           
  8114                           ; BSR set to: 2
  8115  000528  0E04               	movlw	4
  8116  00052A  2770               	addwf	sprintf@ap& (0+255),f,b
  8117  00052C  0E00               	movlw	0
  8118  00052E  2371               	addwfc	(sprintf@ap+1)& (0+255),f,b
  8119                           
  8120                           ; BSR set to: 2
  8121                           ;doprnt.c: 840: if(fval < 0.0) {
  8122  000530  AF8C               	btfss	(sprintf@fval+3)& (0+255),7,b
  8123  000532  D015               	goto	l8021
  8124                           
  8125                           ; BSR set to: 2
  8126                           ;doprnt.c: 841: fval = -fval;
  8127  000534  C289  F087         	movff	sprintf@fval,___flneg@f1
  8128  000538  C28A  F088         	movff	sprintf@fval+1,___flneg@f1+1
  8129  00053C  C28B  F089         	movff	sprintf@fval+2,___flneg@f1+2
  8130  000540  C28C  F08A         	movff	sprintf@fval+3,___flneg@f1+3
  8131  000544  EC8F  F01A         	call	___flneg	;wreg free
  8132  000548  C087  F289         	movff	?___flneg,sprintf@fval
  8133  00054C  C088  F28A         	movff	?___flneg+1,sprintf@fval+1
  8134  000550  C089  F28B         	movff	?___flneg+2,sprintf@fval+2
  8135  000554  C08A  F28C         	movff	?___flneg+3,sprintf@fval+3
  8136                           
  8137                           ; BSR set to: 0
  8138                           ;doprnt.c: 842: flag |= 0x03;
  8139  000558  0E03               	movlw	3
  8140  00055A  0102               	movlb	2	; () banked
  8141  00055C  1383               	iorwf	sprintf@flag& (0+255),f,b
  8142  00055E                     l8021:
  8143                           
  8144                           ; BSR set to: 2
  8145                           ;doprnt.c: 843: }
  8146                           ;doprnt.c: 844: exp = 0;
  8147  00055E  6B87               	clrf	sprintf@exp& (0+255),b
  8148  000560  6B88               	clrf	(sprintf@exp+1)& (0+255),b
  8149                           
  8150                           ; BSR set to: 2
  8151                           ;doprnt.c: 845: if( fval!=0) {
  8152  000562  EE22  F089         	lfsr	2,sprintf@fval
  8153  000566  50DE               	movf	postinc2,w,c
  8154  000568  10DE               	iorwf	postinc2,w,c
  8155  00056A  10DE               	iorwf	postinc2,w,c
  8156  00056C  10DE               	iorwf	postinc2,w,c
  8157  00056E  E06B               	bz	l8049
  8158                           
  8159                           ; BSR set to: 2
  8160                           ;doprnt.c: 846: (void)(*(&exp) = (unsigned char)((*(unsigned long *)&fval >> 23) & 255) 
      +                          - 126);
  8161  000570  358B               	rlcf	(sprintf@fval+2)& (0+255),w,b
  8162  000572  358C               	rlcf	(sprintf@fval+3)& (0+255),w,b
  8163  000574  0F82               	addlw	130
  8164  000576  6F87               	movwf	sprintf@exp& (0+255),b
  8165  000578  6B88               	clrf	(sprintf@exp+1)& (0+255),b
  8166  00057A  0EFF               	movlw	255
  8167  00057C  2388               	addwfc	(sprintf@exp+1)& (0+255),f,b
  8168                           
  8169                           ; BSR set to: 2
  8170                           ;doprnt.c: 847: exp--;
  8171  00057E  0787               	decf	sprintf@exp& (0+255),f,b
  8172  000580  A0D8               	btfss	status,0,c
  8173  000582  0788               	decf	(sprintf@exp+1)& (0+255),f,b
  8174                           
  8175                           ; BSR set to: 2
  8176                           ;doprnt.c: 848: exp *= 3;
  8177  000584  C287  F087         	movff	sprintf@exp,___wmul@multiplier
  8178  000588  C288  F088         	movff	sprintf@exp+1,___wmul@multiplier+1
  8179  00058C  0100               	movlb	0	; () banked
  8180  00058E  6B8A               	clrf	(___wmul@multiplicand+1)& (0+255),b
  8181  000590  0E03               	movlw	3
  8182  000592  6F89               	movwf	___wmul@multiplicand& (0+255),b
  8183  000594  ECB5  F01A         	call	___wmul	;wreg free
  8184  000598  C087  F287         	movff	?___wmul,sprintf@exp
  8185  00059C  C088  F288         	movff	?___wmul+1,sprintf@exp+1
  8186                           
  8187                           ; BSR set to: 0
  8188                           ;doprnt.c: 849: exp /= 10;
  8189  0005A0  C287  F08D         	movff	sprintf@exp,___awdiv@dividend
  8190  0005A4  C288  F08E         	movff	sprintf@exp+1,___awdiv@dividend+1
  8191  0005A8  6B90               	clrf	(___awdiv@divisor+1)& (0+255),b
  8192  0005AA  0E0A               	movlw	10
  8193  0005AC  6F8F               	movwf	___awdiv@divisor& (0+255),b
  8194  0005AE  ECE3  F014         	call	___awdiv	;wreg free
  8195  0005B2  C08D  F287         	movff	?___awdiv,sprintf@exp
  8196  0005B6  C08E  F288         	movff	?___awdiv+1,sprintf@exp+1
  8197                           
  8198                           ; BSR set to: 0
  8199                           ;doprnt.c: 850: if(exp < 0)
  8200  0005BA  DB3F               	call	PL114	;call to abstracted procedure
  8201  0005BC  0E00               	movlw	0
  8202  0005BE  B4D8               	btfsc	status,2,c
  8203  0005C0  5D87               	subwf	sprintf@exp& (0+255),w,b
  8204  0005C2  E203               	bc	l8037
  8205                           
  8206                           ; BSR set to: 2
  8207                           ;doprnt.c: 851: exp--;
  8208  0005C4  0787               	decf	sprintf@exp& (0+255),f,b
  8209  0005C6  A0D8               	btfss	status,0,c
  8210  0005C8  0788               	decf	(sprintf@exp+1)& (0+255),f,b
  8211  0005CA                     l8037:
  8212                           
  8213                           ; BSR set to: 2
  8214                           ;doprnt.c: 855: integ = scale(-exp);
  8215  0005CA  5187               	movf	sprintf@exp& (0+255),w,b
  8216  0005CC  0800               	sublw	0
  8217  0005CE  EC2F  F006         	call	_scale
  8218  0005D2  C0A9  F27A         	movff	?_scale,sprintf@integ
  8219  0005D6  C0AA  F27B         	movff	?_scale+1,sprintf@integ+1
  8220  0005DA  C0AB  F27C         	movff	?_scale+2,sprintf@integ+2
  8221  0005DE  C0AC  F27D         	movff	?_scale+3,sprintf@integ+3
  8222                           
  8223                           ; BSR set to: 0
  8224                           ;doprnt.c: 856: integ *= fval;
  8225  0005E2  C27A  F096         	movff	sprintf@integ,___flmul@f1
  8226  0005E6  C27B  F097         	movff	sprintf@integ+1,___flmul@f1+1
  8227  0005EA  C27C  F098         	movff	sprintf@integ+2,___flmul@f1+2
  8228  0005EE  C27D  F099         	movff	sprintf@integ+3,___flmul@f1+3
  8229  0005F2  C289  F09A         	movff	sprintf@fval,___flmul@f2
  8230  0005F6  C28A  F09B         	movff	sprintf@fval+1,___flmul@f2+1
  8231  0005FA  C28B  F09C         	movff	sprintf@fval+2,___flmul@f2+2
  8232  0005FE  C28C  F09D         	movff	sprintf@fval+3,___flmul@f2+3
  8233  000602  EC90  F010         	call	___flmul	;wreg free
  8234  000606  C096  F27A         	movff	?___flmul,sprintf@integ
  8235  00060A  C097  F27B         	movff	?___flmul+1,sprintf@integ+1
  8236  00060E  C098  F27C         	movff	?___flmul+2,sprintf@integ+2
  8237  000612  C099  F27D         	movff	?___flmul+3,sprintf@integ+3
  8238                           
  8239                           ; BSR set to: 0
  8240                           ;doprnt.c: 857: if(integ < 1.0)
  8241  000616  DB00               	call	PL70	;call to abstracted procedure
  8242  000618  0E80               	movlw	128
  8243  00061A  6F8D               	movwf	(___flge@ff2+2)& (0+255),b
  8244  00061C  0E3F               	movlw	63
  8245  00061E  6F8E               	movwf	(___flge@ff2+3)& (0+255),b
  8246  000620  ECDF  F018         	call	___flge	;wreg free
  8247  000624  E205               	bc	l8045
  8248                           
  8249                           ; BSR set to: 0
  8250                           ;doprnt.c: 858: exp--;
  8251  000626  0102               	movlb	2	; () banked
  8252  000628  0787               	decf	sprintf@exp& (0+255),f,b
  8253  00062A  A0D8               	btfss	status,0,c
  8254  00062C  0788               	decf	(sprintf@exp+1)& (0+255),f,b
  8255  00062E  D00B               	goto	l8049
  8256  000630                     l8045:
  8257                           
  8258                           ; BSR set to: 0
  8259                           ;doprnt.c: 859: else if(integ >= 10.0)
  8260  000630  DAF3               	call	PL70	;call to abstracted procedure
  8261  000632  0E20               	movlw	32
  8262  000634  6F8D               	movwf	(___flge@ff2+2)& (0+255),b
  8263  000636  0E41               	movlw	65
  8264  000638  6F8E               	movwf	(___flge@ff2+3)& (0+255),b
  8265  00063A  ECDF  F018         	call	___flge	;wreg free
  8266  00063E  E303               	bnc	l8049
  8267                           
  8268                           ; BSR set to: 0
  8269                           ;doprnt.c: 860: exp++;
  8270  000640  0102               	movlb	2	; () banked
  8271  000642  4B87               	infsnz	sprintf@exp& (0+255),f,b
  8272  000644  2B88               	incf	(sprintf@exp+1)& (0+255),f,b
  8273  000646                     l8049:
  8274                           
  8275                           ;doprnt.c: 861: }
  8276                           ;doprnt.c: 1121: if(prec <= 12)
  8277  000646  0102               	movlb	2	; () banked
  8278  000648  518E               	movf	(sprintf@prec+1)& (0+255),w,b
  8279  00064A  0A80               	xorlw	128
  8280  00064C  6EF3               	movwf	prodl,c
  8281  00064E  0E80               	movlw	128
  8282  000650  5CF3               	subwf	prodl,w,c
  8283  000652  0E0D               	movlw	13
  8284  000654  B4D8               	btfsc	status,2,c
  8285  000656  5D8D               	subwf	sprintf@prec& (0+255),w,b
  8286  000658  E21D               	bc	l8053
  8287                           
  8288                           ; BSR set to: 2
  8289                           ;doprnt.c: 1122: fval += fround(prec);
  8290  00065A  C289  F0BA         	movff	sprintf@fval,___fladd@f1
  8291  00065E  C28A  F0BB         	movff	sprintf@fval+1,___fladd@f1+1
  8292  000662  C28B  F0BC         	movff	sprintf@fval+2,___fladd@f1+2
  8293  000666  C28C  F0BD         	movff	sprintf@fval+3,___fladd@f1+3
  8294  00066A  518D               	movf	sprintf@prec& (0+255),w,b
  8295  00066C  ECA4  F00B         	call	_fround
  8296  000670  C0A9  F0BE         	movff	?_fround,___fladd@f2
  8297  000674  C0AA  F0BF         	movff	?_fround+1,___fladd@f2+1
  8298  000678  C0AB  F0C0         	movff	?_fround+2,___fladd@f2+2
  8299  00067C  C0AC  F0C1         	movff	?_fround+3,___fladd@f2+3
  8300  000680  ECBE  F00A         	call	___fladd	;wreg free
  8301  000684  C0BA  F289         	movff	?___fladd,sprintf@fval
  8302  000688  C0BB  F28A         	movff	?___fladd+1,sprintf@fval+1
  8303  00068C  C0BC  F28B         	movff	?___fladd+2,sprintf@fval+2
  8304  000690  C0BD  F28C         	movff	?___fladd+3,sprintf@fval+3
  8305  000694                     l8053:
  8306                           
  8307                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  8308  000694  DAD2               	call	PL114	;call to abstracted procedure
  8309  000696  0E0A               	movlw	10
  8310  000698  B4D8               	btfsc	status,2,c
  8311  00069A  5D87               	subwf	sprintf@exp& (0+255),w,b
  8312  00069C  E227               	bc	l8061
  8313                           
  8314                           ; BSR set to: 2
  8315  00069E  EE22  F089         	lfsr	2,sprintf@fval
  8316  0006A2  50DE               	movf	postinc2,w,c
  8317  0006A4  10DE               	iorwf	postinc2,w,c
  8318  0006A6  10DE               	iorwf	postinc2,w,c
  8319  0006A8  10DE               	iorwf	postinc2,w,c
  8320  0006AA  E06F               	bz	l8077
  8321                           
  8322                           ; BSR set to: 2
  8323  0006AC  C289  F0B2         	movff	sprintf@fval,___fltol@f1
  8324  0006B0  C28A  F0B3         	movff	sprintf@fval+1,___fltol@f1+1
  8325  0006B4  C28B  F0B4         	movff	sprintf@fval+2,___fltol@f1+2
  8326  0006B8  C28C  F0B5         	movff	sprintf@fval+3,___fltol@f1+3
  8327  0006BC  ECE5  F012         	call	___fltol	;wreg free
  8328  0006C0  C0B2  F1DF         	movff	?___fltol,??_sprintf
  8329  0006C4  C0B3  F1E0         	movff	?___fltol+1,??_sprintf+1
  8330  0006C8  C0B4  F1E1         	movff	?___fltol+2,??_sprintf+2
  8331  0006CC  C0B5  F1E2         	movff	?___fltol+3,??_sprintf+3
  8332  0006D0  0101               	movlb	1	; () banked
  8333  0006D2  51E2               	movf	(??_sprintf+3)& (0+255),w,b
  8334  0006D4  11DF               	iorwf	??_sprintf& (0+255),w,b
  8335  0006D6  11E0               	iorwf	(??_sprintf+1)& (0+255),w,b
  8336  0006D8  11E1               	iorwf	(??_sprintf+2)& (0+255),w,b
  8337  0006DA  E157               	bnz	l8077
  8338                           
  8339                           ; BSR set to: 1
  8340  0006DC  0102               	movlb	2	; () banked
  8341  0006DE  5188               	movf	(sprintf@exp+1)& (0+255),w,b
  8342  0006E0  0A80               	xorlw	128
  8343  0006E2  0F80               	addlw	-128
  8344  0006E4  0E02               	movlw	2
  8345  0006E6  B4D8               	btfsc	status,2,c
  8346  0006E8  5D87               	subwf	sprintf@exp& (0+255),w,b
  8347  0006EA  E34F               	bnc	l8077
  8348  0006EC                     l8061:
  8349                           
  8350                           ; BSR set to: 2
  8351                           ;doprnt.c: 1129: if(integ < 4.294967296){
  8352  0006EC  C27A  F087         	movff	sprintf@integ,___flge@ff1
  8353  0006F0  C27B  F088         	movff	sprintf@integ+1,___flge@ff1+1
  8354  0006F4  C27C  F089         	movff	sprintf@integ+2,___flge@ff1+2
  8355  0006F8  C27D  F08A         	movff	sprintf@integ+3,___flge@ff1+3
  8356  0006FC  0E5F               	movlw	95
  8357  0006FE  0100               	movlb	0	; () banked
  8358  000700  6F8B               	movwf	___flge@ff2& (0+255),b
  8359  000702  0E70               	movlw	112
  8360  000704  6F8C               	movwf	(___flge@ff2+1)& (0+255),b
  8361  000706  0E89               	movlw	137
  8362  000708  6F8D               	movwf	(___flge@ff2+2)& (0+255),b
  8363  00070A  0E40               	movlw	64
  8364  00070C  6F8E               	movwf	(___flge@ff2+3)& (0+255),b
  8365  00070E  ECDF  F018         	call	___flge	;wreg free
  8366  000712  E203               	bc	l8065
  8367                           
  8368                           ; BSR set to: 0
  8369                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  8370  000714  0102               	movlb	2	; () banked
  8371  000716  0EF7               	movlw	247
  8372  000718  D002               	goto	L4
  8373  00071A                     l8065:
  8374                           
  8375                           ; BSR set to: 0
  8376                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  8377  00071A  0102               	movlb	2	; () banked
  8378  00071C  0EF8               	movlw	248
  8379  00071E                     L4:
  8380  00071E  2787               	addwf	sprintf@exp& (0+255),f,b
  8381  000720  0EFF               	movlw	255
  8382  000722  2388               	addwfc	(sprintf@exp+1)& (0+255),f,b
  8383                           
  8384                           ; BSR set to: 2
  8385                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  8386  000724  5187               	movf	sprintf@exp& (0+255),w,b
  8387  000726  EC2F  F006         	call	_scale
  8388  00072A  C0A9  F27A         	movff	?_scale,sprintf@integ
  8389  00072E  C0AA  F27B         	movff	?_scale+1,sprintf@integ+1
  8390  000732  C0AB  F27C         	movff	?_scale+2,sprintf@integ+2
  8391  000736  C0AC  F27D         	movff	?_scale+3,sprintf@integ+3
  8392                           
  8393                           ; BSR set to: 0
  8394  00073A  C289  F087         	movff	sprintf@fval,__div_to_l_@f1
  8395  00073E  C28A  F088         	movff	sprintf@fval+1,__div_to_l_@f1+1
  8396  000742  C28B  F089         	movff	sprintf@fval+2,__div_to_l_@f1+2
  8397  000746  C28C  F08A         	movff	sprintf@fval+3,__div_to_l_@f1+3
  8398  00074A  C27A  F08B         	movff	sprintf@integ,__div_to_l_@f2
  8399  00074E  C27B  F08C         	movff	sprintf@integ+1,__div_to_l_@f2+1
  8400  000752  C27C  F08D         	movff	sprintf@integ+2,__div_to_l_@f2+2
  8401  000756  C27D  F08E         	movff	sprintf@integ+3,__div_to_l_@f2+3
  8402  00075A  EC14  F011         	call	__div_to_l_	;wreg free
  8403  00075E  C087  F26C         	movff	?__div_to_l_,_sprintf$2387
  8404  000762  C088  F26D         	movff	?__div_to_l_+1,_sprintf$2387+1
  8405  000766  C089  F26E         	movff	?__div_to_l_+2,_sprintf$2387+2
  8406  00076A  C08A  F26F         	movff	?__div_to_l_+3,_sprintf$2387+3
  8407                           
  8408                           ; BSR set to: 0
  8409  00076E  C26C  F27E         	movff	_sprintf$2387,sprintf@_val
  8410  000772  C26D  F27F         	movff	_sprintf$2387+1,sprintf@_val+1
  8411  000776  C26E  F280         	movff	_sprintf$2387+2,sprintf@_val+2
  8412  00077A  C26F  F281         	movff	_sprintf$2387+3,sprintf@_val+3
  8413                           
  8414                           ; BSR set to: 0
  8415                           ;doprnt.c: 1138: fval = 0.0;
  8416  00077E  0102               	movlb	2	; () banked
  8417  000780  6B89               	clrf	sprintf@fval& (0+255),b
  8418  000782  6B8A               	clrf	(sprintf@fval+1)& (0+255),b
  8419  000784  6B8B               	clrf	(sprintf@fval+2)& (0+255),b
  8420  000786  6B8C               	clrf	(sprintf@fval+3)& (0+255),b
  8421                           
  8422                           ;doprnt.c: 1139: } else {
  8423  000788  D039               	goto	l8081
  8424  00078A                     l8077:
  8425                           
  8426                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  8427  00078A  C289  F0B2         	movff	sprintf@fval,___fltol@f1
  8428  00078E  C28A  F0B3         	movff	sprintf@fval+1,___fltol@f1+1
  8429  000792  C28B  F0B4         	movff	sprintf@fval+2,___fltol@f1+2
  8430  000796  C28C  F0B5         	movff	sprintf@fval+3,___fltol@f1+3
  8431  00079A  ECE5  F012         	call	___fltol	;wreg free
  8432  00079E  C0B2  F27E         	movff	?___fltol,sprintf@_val
  8433  0007A2  C0B3  F27F         	movff	?___fltol+1,sprintf@_val+1
  8434  0007A6  C0B4  F280         	movff	?___fltol+2,sprintf@_val+2
  8435  0007AA  C0B5  F281         	movff	?___fltol+3,sprintf@_val+3
  8436                           
  8437                           ;doprnt.c: 1141: fval -= (double)_val._val;
  8438  0007AE  C289  F1CF         	movff	sprintf@fval,___flsub@f1
  8439  0007B2  C28A  F1D0         	movff	sprintf@fval+1,___flsub@f1+1
  8440  0007B6  C28B  F1D1         	movff	sprintf@fval+2,___flsub@f1+2
  8441  0007BA  C28C  F1D2         	movff	sprintf@fval+3,___flsub@f1+3
  8442  0007BE  C27E  F091         	movff	sprintf@_val,___lltofl@c
  8443  0007C2  C27F  F092         	movff	sprintf@_val+1,___lltofl@c+1
  8444  0007C6  C280  F093         	movff	sprintf@_val+2,___lltofl@c+2
  8445  0007CA  C281  F094         	movff	sprintf@_val+3,___lltofl@c+3
  8446  0007CE  EC23  F01A         	call	___lltofl	;wreg free
  8447  0007D2  C091  F1D3         	movff	?___lltofl,___flsub@f2
  8448  0007D6  C092  F1D4         	movff	?___lltofl+1,___flsub@f2+1
  8449  0007DA  C093  F1D5         	movff	?___lltofl+2,___flsub@f2+2
  8450  0007DE  C094  F1D6         	movff	?___lltofl+3,___flsub@f2+3
  8451  0007E2  ECD3  F019         	call	___flsub	;wreg free
  8452  0007E6  C1CF  F289         	movff	?___flsub,sprintf@fval
  8453  0007EA  C1D0  F28A         	movff	?___flsub+1,sprintf@fval+1
  8454  0007EE  C1D1  F28B         	movff	?___flsub+2,sprintf@fval+2
  8455  0007F2  C1D2  F28C         	movff	?___flsub+3,sprintf@fval+3
  8456                           
  8457                           ;doprnt.c: 1142: exp = 0;
  8458  0007F6  0102               	movlb	2	; () banked
  8459  0007F8  6B87               	clrf	sprintf@exp& (0+255),b
  8460  0007FA  6B88               	clrf	(sprintf@exp+1)& (0+255),b
  8461  0007FC                     l8081:
  8462                           
  8463                           ; BSR set to: 2
  8464                           ;doprnt.c: 1143: }
  8465                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  8466  0007FC  0E01               	movlw	1
  8467  0007FE  6F8F               	movwf	sprintf@c& (0+255),b
  8468  000800                     l8087:
  8469                           
  8470                           ; BSR set to: 2
  8471                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  8472  000800  D9E3               	call	PL24	;call to abstracted procedure
  8473  000802  50F5               	movf	tablat,w,c
  8474  000804  5D7E               	subwf	sprintf@_val& (0+255),w,b
  8475  000806  0009               	tblrd		*+
  8476  000808  50F5               	movf	tablat,w,c
  8477  00080A  597F               	subwfb	(sprintf@_val+1)& (0+255),w,b
  8478  00080C  0009               	tblrd		*+
  8479  00080E  50F5               	movf	tablat,w,c
  8480  000810  5980               	subwfb	(sprintf@_val+2)& (0+255),w,b
  8481  000812  0009               	tblrd		*+
  8482  000814  50F5               	movf	tablat,w,c
  8483  000816  5981               	subwfb	(sprintf@_val+3)& (0+255),w,b
  8484  000818  E304               	bnc	l8095
  8485                           
  8486                           ; BSR set to: 2
  8487  00081A  2B8F               	incf	sprintf@c& (0+255),f,b
  8488                           
  8489                           ; BSR set to: 2
  8490  00081C  518F               	movf	sprintf@c& (0+255),w,b
  8491  00081E  0A0A               	xorlw	10
  8492  000820  E1EF               	bnz	l8087
  8493  000822                     l8095:
  8494                           
  8495                           ; BSR set to: 2
  8496                           ;doprnt.c: 1151: width -= prec + c + exp;
  8497  000822  C28F  F1DF         	movff	sprintf@c,??_sprintf
  8498  000826  0101               	movlb	1	; () banked
  8499  000828  6BE0               	clrf	(??_sprintf+1)& (0+255),b
  8500  00082A  BFDF               	btfsc	??_sprintf& (0+255),7,b
  8501  00082C  07E0               	decf	(??_sprintf+1)& (0+255),f,b
  8502  00082E  0102               	movlb	2	; () banked
  8503  000830  518D               	movf	sprintf@prec& (0+255),w,b
  8504  000832  0101               	movlb	1	; () banked
  8505  000834  27DF               	addwf	??_sprintf& (0+255),f,b
  8506  000836  0102               	movlb	2	; () banked
  8507  000838  518E               	movf	(sprintf@prec+1)& (0+255),w,b
  8508  00083A  0101               	movlb	1	; () banked
  8509  00083C  23E0               	addwfc	(??_sprintf+1)& (0+255),f,b
  8510  00083E  0102               	movlb	2	; () banked
  8511  000840  5187               	movf	sprintf@exp& (0+255),w,b
  8512  000842  0101               	movlb	1	; () banked
  8513  000844  27DF               	addwf	??_sprintf& (0+255),f,b
  8514  000846  0102               	movlb	2	; () banked
  8515  000848  5188               	movf	(sprintf@exp+1)& (0+255),w,b
  8516  00084A  0101               	movlb	1	; () banked
  8517  00084C  23E0               	addwfc	(??_sprintf+1)& (0+255),f,b
  8518  00084E  51DF               	movf	??_sprintf& (0+255),w,b
  8519  000850  0102               	movlb	2	; () banked
  8520  000852  5F85               	subwf	sprintf@width& (0+255),f,b
  8521  000854  0101               	movlb	1	; () banked
  8522  000856  51E0               	movf	(??_sprintf+1)& (0+255),w,b
  8523  000858  0102               	movlb	2	; () banked
  8524  00085A  5B86               	subwfb	(sprintf@width+1)& (0+255),f,b
  8525                           
  8526                           ;doprnt.c: 1152: if(
  8527                           ;doprnt.c: 1156: prec)
  8528  00085C  518E               	movf	(sprintf@prec+1)& (0+255),w,b
  8529  00085E  118D               	iorwf	sprintf@prec& (0+255),w,b
  8530  000860  E003               	bz	l8099
  8531                           
  8532                           ; BSR set to: 2
  8533                           ;doprnt.c: 1157: width--;
  8534  000862  0785               	decf	sprintf@width& (0+255),f,b
  8535  000864  A0D8               	btfss	status,0,c
  8536  000866  0786               	decf	(sprintf@width+1)& (0+255),f,b
  8537  000868                     l8099:
  8538                           
  8539                           ; BSR set to: 2
  8540                           ;doprnt.c: 1158: if(flag & 0x03)
  8541  000868  C283  F1DF         	movff	sprintf@flag,??_sprintf
  8542  00086C  0E03               	movlw	3
  8543  00086E  0101               	movlb	1	; () banked
  8544  000870  17DF               	andwf	??_sprintf& (0+255),f,b
  8545  000872  E00B               	bz	l8109
  8546  000874                     l8101:
  8547                           
  8548                           ; BSR set to: 1
  8549                           ;doprnt.c: 1159: width--;
  8550  000874  0102               	movlb	2	; () banked
  8551  000876  0785               	decf	sprintf@width& (0+255),f,b
  8552  000878  A0D8               	btfss	status,0,c
  8553  00087A  0786               	decf	(sprintf@width+1)& (0+255),f,b
  8554  00087C  D006               	goto	l8109
  8555  00087E                     l8103:
  8556                           
  8557                           ; BSR set to: 2
  8558                           ;doprnt.c: 1190: ((*sp++ = (' ')));
  8559  00087E  C1D7  FFD9         	movff	sprintf@sp,fsr2l
  8560                           
  8561                           ; BSR set to: 2
  8562  000882  D9E2               	call	PL122	;call to abstracted procedure
  8563  000884  4BD7               	infsnz	sprintf@sp& (0+255),f,b
  8564  000886  2BD8               	incf	(sprintf@sp+1)& (0+255),f,b
  8565  000888  D7F5               	goto	l8101
  8566  00088A                     l8109:
  8567  00088A  0102               	movlb	2	; () banked
  8568  00088C  5186               	movf	(sprintf@width+1)& (0+255),w,b
  8569  00088E  D9E2               	call	PL132	;call to abstracted procedure
  8570  000890  B4D8               	btfsc	status,2,c
  8571  000892  5D85               	subwf	sprintf@width& (0+255),w,b
  8572  000894  E2F4               	bc	l8103
  8573                           
  8574                           ; BSR set to: 2
  8575                           ;doprnt.c: 1192: }
  8576                           ;doprnt.c: 1197: if(flag & 0x03)
  8577  000896  C283  F1DF         	movff	sprintf@flag,??_sprintf
  8578  00089A  0E03               	movlw	3
  8579  00089C  0101               	movlb	1	; () banked
  8580  00089E  17DF               	andwf	??_sprintf& (0+255),f,b
  8581  0008A0  E030               	bz	l8125
  8582                           
  8583                           ; BSR set to: 1
  8584                           ;doprnt.c: 1199: ((*sp++ = ('-')));
  8585  0008A2  C1D7  FFD9         	movff	sprintf@sp,fsr2l
  8586  0008A6  C1D8  FFDA         	movff	sprintf@sp+1,fsr2h
  8587  0008AA  0E2D               	movlw	45
  8588  0008AC  6EDF               	movwf	indf2,c
  8589  0008AE  0101               	movlb	1	; () banked
  8590  0008B0  4BD7               	infsnz	sprintf@sp& (0+255),f,b
  8591  0008B2  2BD8               	incf	(sprintf@sp+1)& (0+255),f,b
  8592  0008B4  D026               	goto	l8125
  8593  0008B6                     l8117:
  8594                           
  8595                           ; BSR set to: 2
  8596                           ;doprnt.c: 1209: {
  8597                           ;doprnt.c: 1210: unsigned long vd = _val._val/dpowers[c];
  8598  0008B6  D96A               	call	PL8	;call to abstracted procedure
  8599  0008B8  EC79  F016         	call	___lldiv	;wreg free
  8600  0008BC  C087  F272         	movff	?___lldiv,sprintf@vd
  8601  0008C0  C088  F273         	movff	?___lldiv+1,sprintf@vd+1
  8602  0008C4  C089  F274         	movff	?___lldiv+2,sprintf@vd+2
  8603  0008C8  C08A  F275         	movff	?___lldiv+3,sprintf@vd+3
  8604                           
  8605                           ; BSR set to: 0
  8606                           ;doprnt.c: 1211: vd %= 10;
  8607  0008CC  C272  F087         	movff	sprintf@vd,___llmod@dividend
  8608  0008D0  C273  F088         	movff	sprintf@vd+1,___llmod@dividend+1
  8609  0008D4  C274  F089         	movff	sprintf@vd+2,___llmod@dividend+2
  8610  0008D8  C275  F08A         	movff	sprintf@vd+3,___llmod@dividend+3
  8611  0008DC  D9A8               	call	PL106	;call to abstracted procedure
  8612  0008DE  EC55  F017         	call	___llmod	;wreg free
  8613  0008E2  C087  F272         	movff	?___llmod,sprintf@vd
  8614  0008E6  C088  F273         	movff	?___llmod+1,sprintf@vd+1
  8615  0008EA  C089  F274         	movff	?___llmod+2,sprintf@vd+2
  8616  0008EE  C08A  F275         	movff	?___llmod+3,sprintf@vd+3
  8617                           
  8618                           ; BSR set to: 0
  8619                           ;doprnt.c: 1212: ((*sp++ = ('0' + vd)));
  8620  0008F2  0102               	movlb	2	; () banked
  8621  0008F4  5172               	movf	sprintf@vd& (0+255),w,b
  8622  0008F6  0F30               	addlw	48
  8623  0008F8  C1D7  FFD9         	movff	sprintf@sp,fsr2l
  8624  0008FC  C1D8  FFDA         	movff	sprintf@sp+1,fsr2h
  8625  000900  D7D5               	goto	L5
  8626  000902                     l8125:
  8627                           
  8628                           ; BSR set to: 1
  8629  000902  0102               	movlb	2	; () banked
  8630  000904  078F               	decf	sprintf@c& (0+255),f,b
  8631  000906  298F               	incf	sprintf@c& (0+255),w,b
  8632  000908  E005               	bz	l8133
  8633  00090A  D7D5               	goto	l8117
  8634  00090C                     l8127:
  8635                           
  8636                           ; BSR set to: 2
  8637                           ;doprnt.c: 1217: ((*sp++ = ('0')));
  8638                           
  8639                           ; BSR set to: 2
  8640                           
  8641                           ; BSR set to: 1
  8642                           ;doprnt.c: 1218: exp--;
  8643  00090C  D97A               	call	PL68	;call to abstracted procedure
  8644  00090E  0787               	decf	sprintf@exp& (0+255),f,b
  8645  000910  A0D8               	btfss	status,0,c
  8646  000912  0788               	decf	(sprintf@exp+1)& (0+255),f,b
  8647  000914                     l8133:
  8648                           
  8649                           ; BSR set to: 2
  8650  000914  5188               	movf	(sprintf@exp+1)& (0+255),w,b
  8651  000916  D99E               	call	PL132	;call to abstracted procedure
  8652  000918  B4D8               	btfsc	status,2,c
  8653  00091A  5D87               	subwf	sprintf@exp& (0+255),w,b
  8654  00091C  E2F7               	bc	l8127
  8655                           
  8656                           ; BSR set to: 2
  8657                           ;doprnt.c: 1219: }
  8658                           ;doprnt.c: 1220: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  8659  00091E  518E               	movf	(sprintf@prec+1)& (0+255),w,b
  8660  000920  0A80               	xorlw	128
  8661  000922  0F80               	addlw	-128
  8662  000924  0E09               	movlw	9
  8663  000926  B4D8               	btfsc	status,2,c
  8664  000928  5D8D               	subwf	sprintf@prec& (0+255),w,b
  8665  00092A  E303               	bnc	l1257
  8666                           
  8667                           ; BSR set to: 2
  8668                           ;doprnt.c: 1221: c = (sizeof dpowers/sizeof dpowers[0])-2;
  8669  00092C  0E08               	movlw	8
  8670  00092E  6F8F               	movwf	sprintf@c& (0+255),b
  8671  000930  D002               	goto	l8139
  8672  000932                     l1257:
  8673                           
  8674                           ; BSR set to: 2
  8675                           ;doprnt.c: 1222: else
  8676                           ;doprnt.c: 1223: c = prec;
  8677  000932  C28D  F28F         	movff	sprintf@prec,sprintf@c
  8678  000936                     l8139:
  8679                           
  8680                           ; BSR set to: 2
  8681                           ;doprnt.c: 1224: prec -= c;
  8682  000936  518F               	movf	sprintf@c& (0+255),w,b
  8683  000938  5F8D               	subwf	sprintf@prec& (0+255),f,b
  8684  00093A  0E00               	movlw	0
  8685  00093C  BF8F               	btfsc	sprintf@c& (0+255),7,b
  8686  00093E  0EFF               	movlw	255
  8687  000940  5B8E               	subwfb	(sprintf@prec+1)& (0+255),f,b
  8688                           
  8689                           ; BSR set to: 2
  8690                           ;doprnt.c: 1228: if(c)
  8691  000942  518F               	movf	sprintf@c& (0+255),w,b
  8692  000944  E009               	bz	l8147
  8693                           
  8694                           ; BSR set to: 2
  8695                           ;doprnt.c: 1230: ((*sp++ = ('.')));
  8696  000946  C1D7  FFD9         	movff	sprintf@sp,fsr2l
  8697  00094A  C1D8  FFDA         	movff	sprintf@sp+1,fsr2h
  8698  00094E  0E2E               	movlw	46
  8699  000950  6EDF               	movwf	indf2,c
  8700                           
  8701                           ; BSR set to: 2
  8702  000952  0101               	movlb	1	; () banked
  8703  000954  4BD7               	infsnz	sprintf@sp& (0+255),f,b
  8704  000956  2BD8               	incf	(sprintf@sp+1)& (0+255),f,b
  8705  000958                     l8147:
  8706                           
  8707                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  8708  000958  0102               	movlb	2	; () banked
  8709  00095A  518F               	movf	sprintf@c& (0+255),w,b
  8710  00095C  EC2F  F006         	call	_scale
  8711  000960  C0A9  F268         	movff	?_scale,_sprintf$3207
  8712  000964  C0AA  F269         	movff	?_scale+1,_sprintf$3207+1
  8713  000968  C0AB  F26A         	movff	?_scale+2,_sprintf$3207+2
  8714  00096C  C0AC  F26B         	movff	?_scale+3,_sprintf$3207+3
  8715                           
  8716                           ; BSR set to: 0
  8717                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  8718  000970  C289  F09A         	movff	sprintf@fval,___flmul@f2
  8719  000974  C28A  F09B         	movff	sprintf@fval+1,___flmul@f2+1
  8720  000978  C28B  F09C         	movff	sprintf@fval+2,___flmul@f2+2
  8721  00097C  C28C  F09D         	movff	sprintf@fval+3,___flmul@f2+3
  8722  000980  C268  F096         	movff	_sprintf$3207,___flmul@f1
  8723  000984  C269  F097         	movff	_sprintf$3207+1,___flmul@f1+1
  8724  000988  C26A  F098         	movff	_sprintf$3207+2,___flmul@f1+2
  8725  00098C  C26B  F099         	movff	_sprintf$3207+3,___flmul@f1+3
  8726  000990  EC90  F010         	call	___flmul	;wreg free
  8727  000994  C096  F0B2         	movff	?___flmul,___fltol@f1
  8728  000998  C097  F0B3         	movff	?___flmul+1,___fltol@f1+1
  8729  00099C  C098  F0B4         	movff	?___flmul+2,___fltol@f1+2
  8730  0009A0  C099  F0B5         	movff	?___flmul+3,___fltol@f1+3
  8731  0009A4  ECE5  F012         	call	___fltol	;wreg free
  8732  0009A8  C0B2  F27E         	movff	?___fltol,sprintf@_val
  8733  0009AC  C0B3  F27F         	movff	?___fltol+1,sprintf@_val+1
  8734  0009B0  C0B4  F280         	movff	?___fltol+2,sprintf@_val+2
  8735  0009B4  C0B5  F281         	movff	?___fltol+3,sprintf@_val+3
  8736                           
  8737                           ;doprnt.c: 1237: while(c--) {
  8738  0009B8  D049               	goto	l8161
  8739  0009BA                     l8151:
  8740                           
  8741                           ; BSR set to: 2
  8742                           ;doprnt.c: 1238: unsigned long vd = _val._val/dpowers[c];
  8743  0009BA  D8E8               	call	PL8	;call to abstracted procedure
  8744  0009BC  EC79  F016         	call	___lldiv	;wreg free
  8745  0009C0  C087  F276         	movff	?___lldiv,sprintf@vd_2389
  8746  0009C4  C088  F277         	movff	?___lldiv+1,sprintf@vd_2389+1
  8747  0009C8  C089  F278         	movff	?___lldiv+2,sprintf@vd_2389+2
  8748  0009CC  C08A  F279         	movff	?___lldiv+3,sprintf@vd_2389+3
  8749                           
  8750                           ; BSR set to: 0
  8751                           ;doprnt.c: 1239: vd %= 10;
  8752  0009D0  C276  F087         	movff	sprintf@vd_2389,___llmod@dividend
  8753  0009D4  C277  F088         	movff	sprintf@vd_2389+1,___llmod@dividend+1
  8754  0009D8  C278  F089         	movff	sprintf@vd_2389+2,___llmod@dividend+2
  8755  0009DC  C279  F08A         	movff	sprintf@vd_2389+3,___llmod@dividend+3
  8756  0009E0  D926               	call	PL106	;call to abstracted procedure
  8757  0009E2  EC55  F017         	call	___llmod	;wreg free
  8758  0009E6  C087  F276         	movff	?___llmod,sprintf@vd_2389
  8759  0009EA  C088  F277         	movff	?___llmod+1,sprintf@vd_2389+1
  8760  0009EE  C089  F278         	movff	?___llmod+2,sprintf@vd_2389+2
  8761  0009F2  C08A  F279         	movff	?___llmod+3,sprintf@vd_2389+3
  8762                           
  8763                           ; BSR set to: 0
  8764                           ;doprnt.c: 1240: ((*sp++ = ('0' + vd)));
  8765  0009F6  0102               	movlb	2	; () banked
  8766  0009F8  5176               	movf	sprintf@vd_2389& (0+255),w,b
  8767  0009FA  0F30               	addlw	48
  8768  0009FC  C1D7  FFD9         	movff	sprintf@sp,fsr2l
  8769  000A00  C1D8  FFDA         	movff	sprintf@sp+1,fsr2h
  8770  000A04  6EDF               	movwf	indf2,c
  8771                           
  8772                           ; BSR set to: 2
  8773  000A06  0101               	movlb	1	; () banked
  8774  000A08  4BD7               	infsnz	sprintf@sp& (0+255),f,b
  8775  000A0A  2BD8               	incf	(sprintf@sp+1)& (0+255),f,b
  8776                           
  8777                           ; BSR set to: 1
  8778                           ;doprnt.c: 1241: _val._val %= dpowers[c];
  8779  000A0C  C27E  F087         	movff	sprintf@_val,___llmod@dividend
  8780  000A10  C27F  F088         	movff	sprintf@_val+1,___llmod@dividend+1
  8781  000A14  C280  F089         	movff	sprintf@_val+2,___llmod@dividend+2
  8782  000A18  C281  F08A         	movff	sprintf@_val+3,___llmod@dividend+3
  8783  000A1C  0102               	movlb	2	; () banked
  8784  000A1E  D8D4               	call	PL24	;call to abstracted procedure
  8785  000A20  0100               	movlb	0	; () banked
  8786  000A22  CFF5 F08B          	movff	tablat,___llmod@divisor
  8787  000A26  0009               	tblrd		*+
  8788  000A28  CFF5 F08C          	movff	tablat,___llmod@divisor+1
  8789  000A2C  0009               	tblrd		*+
  8790  000A2E  CFF5 F08D          	movff	tablat,___llmod@divisor+2
  8791  000A32  000A               	tblrd		*-
  8792  000A34  CFF5 F08E          	movff	tablat,___llmod@divisor+3
  8793  000A38  EC55  F017         	call	___llmod	;wreg free
  8794  000A3C  C087  F27E         	movff	?___llmod,sprintf@_val
  8795  000A40  C088  F27F         	movff	?___llmod+1,sprintf@_val+1
  8796  000A44  C089  F280         	movff	?___llmod+2,sprintf@_val+2
  8797  000A48  C08A  F281         	movff	?___llmod+3,sprintf@_val+3
  8798  000A4C                     l8161:
  8799                           
  8800                           ; BSR set to: 0
  8801  000A4C  0102               	movlb	2	; () banked
  8802  000A4E  078F               	decf	sprintf@c& (0+255),f,b
  8803  000A50  298F               	incf	sprintf@c& (0+255),w,b
  8804  000A52  E005               	bz	l8169
  8805  000A54  D7B2               	goto	l8151
  8806  000A56                     l8163:
  8807                           
  8808                           ; BSR set to: 2
  8809                           ;doprnt.c: 1245: ((*sp++ = ('0')));
  8810                           
  8811                           ; BSR set to: 2
  8812                           
  8813                           ; BSR set to: 1
  8814                           ;doprnt.c: 1246: prec--;
  8815  000A56  D8D5               	call	PL68	;call to abstracted procedure
  8816  000A58  078D               	decf	sprintf@prec& (0+255),f,b
  8817  000A5A  A0D8               	btfss	status,0,c
  8818  000A5C  078E               	decf	(sprintf@prec+1)& (0+255),f,b
  8819  000A5E                     l8169:
  8820                           
  8821                           ; BSR set to: 2
  8822  000A5E  518E               	movf	(sprintf@prec+1)& (0+255),w,b
  8823  000A60  118D               	iorwf	sprintf@prec& (0+255),w,b
  8824  000A62  E101 D089          	bz	l8215
  8825  000A66  D7F7               	goto	l8163
  8826  000A68                     l8171:
  8827                           
  8828                           ; BSR set to: 2
  8829                           ;doprnt.c: 1255: }
  8830                           ;doprnt.c: 1299: if(prec == 0 && _val._val == 0)
  8831  000A68  518E               	movf	(sprintf@prec+1)& (0+255),w,b
  8832  000A6A  118D               	iorwf	sprintf@prec& (0+255),w,b
  8833  000A6C  E107               	bnz	l8177
  8834                           
  8835                           ; BSR set to: 2
  8836  000A6E  5181               	movf	(sprintf@_val+3)& (0+255),w,b
  8837  000A70  117E               	iorwf	sprintf@_val& (0+255),w,b
  8838  000A72  117F               	iorwf	(sprintf@_val+1)& (0+255),w,b
  8839  000A74  1180               	iorwf	(sprintf@_val+2)& (0+255),w,b
  8840  000A76  E102               	bnz	l8177
  8841                           
  8842                           ; BSR set to: 2
  8843                           ;doprnt.c: 1300: prec++;
  8844  000A78  4B8D               	infsnz	sprintf@prec& (0+255),f,b
  8845  000A7A  2B8E               	incf	(sprintf@prec+1)& (0+255),f,b
  8846  000A7C                     l8177:
  8847                           
  8848                           ; BSR set to: 2
  8849                           ;doprnt.c: 1348: if(c < prec)
  8850  000A7C  0E80               	movlw	128
  8851  000A7E  BF8F               	btfsc	sprintf@c& (0+255),7,b
  8852  000A80  0E7F               	movlw	127
  8853  000A82  0101               	movlb	1	; () banked
  8854  000A84  6FDF               	movwf	??_sprintf& (0+255),b
  8855  000A86  0102               	movlb	2	; () banked
  8856  000A88  518D               	movf	sprintf@prec& (0+255),w,b
  8857  000A8A  5D8F               	subwf	sprintf@c& (0+255),w,b
  8858  000A8C  518E               	movf	(sprintf@prec+1)& (0+255),w,b
  8859  000A8E  0A80               	xorlw	128
  8860  000A90  0101               	movlb	1	; () banked
  8861  000A92  59DF               	subwfb	??_sprintf& (0+255),w,b
  8862  000A94  E203               	bc	l8181
  8863                           
  8864                           ; BSR set to: 1
  8865                           ;doprnt.c: 1349: c = prec;
  8866  000A96  C28D  F28F         	movff	sprintf@prec,sprintf@c
  8867  000A9A  D014               	goto	l8185
  8868  000A9C                     l8181:
  8869                           
  8870                           ; BSR set to: 1
  8871                           ;doprnt.c: 1350: else if(prec < c)
  8872  000A9C  0102               	movlb	2	; () banked
  8873  000A9E  518E               	movf	(sprintf@prec+1)& (0+255),w,b
  8874  000AA0  0A80               	xorlw	128
  8875  000AA2  0101               	movlb	1	; () banked
  8876  000AA4  6FDF               	movwf	??_sprintf& (0+255),b
  8877  000AA6  0102               	movlb	2	; () banked
  8878  000AA8  518F               	movf	sprintf@c& (0+255),w,b
  8879  000AAA  5D8D               	subwf	sprintf@prec& (0+255),w,b
  8880  000AAC  0E80               	movlw	128
  8881  000AAE  BF8F               	btfsc	sprintf@c& (0+255),7,b
  8882  000AB0  0E7F               	movlw	127
  8883  000AB2  0101               	movlb	1	; () banked
  8884  000AB4  59DF               	subwfb	??_sprintf& (0+255),w,b
  8885  000AB6  E206               	bc	l8185
  8886                           
  8887                           ; BSR set to: 1
  8888                           ;doprnt.c: 1351: prec = c;
  8889  000AB8  0102               	movlb	2	; () banked
  8890  000ABA  518F               	movf	sprintf@c& (0+255),w,b
  8891  000ABC  6F8D               	movwf	sprintf@prec& (0+255),b
  8892  000ABE  6B8E               	clrf	(sprintf@prec+1)& (0+255),b
  8893  000AC0  BF8D               	btfsc	sprintf@prec& (0+255),7,b
  8894  000AC2  078E               	decf	(sprintf@prec+1)& (0+255),f,b
  8895  000AC4                     l8185:
  8896                           
  8897                           ;doprnt.c: 1354: if(width && flag & 0x03)
  8898  000AC4  0102               	movlb	2	; () banked
  8899  000AC6  5186               	movf	(sprintf@width+1)& (0+255),w,b
  8900  000AC8  1185               	iorwf	sprintf@width& (0+255),w,b
  8901  000ACA  E00A               	bz	l8191
  8902                           
  8903                           ; BSR set to: 2
  8904  000ACC  C283  F1DF         	movff	sprintf@flag,??_sprintf
  8905  000AD0  0E03               	movlw	3
  8906  000AD2  0101               	movlb	1	; () banked
  8907  000AD4  17DF               	andwf	??_sprintf& (0+255),f,b
  8908  000AD6  E004               	bz	l8191
  8909                           
  8910                           ; BSR set to: 1
  8911                           ;doprnt.c: 1355: width--;
  8912  000AD8  0102               	movlb	2	; () banked
  8913  000ADA  0785               	decf	sprintf@width& (0+255),f,b
  8914  000ADC  A0D8               	btfss	status,0,c
  8915  000ADE  0786               	decf	(sprintf@width+1)& (0+255),f,b
  8916  000AE0                     l8191:
  8917                           
  8918                           ;doprnt.c: 1357: if(flag & 0x4000) {
  8919  000AE0  0102               	movlb	2	; () banked
  8920  000AE2  AD84               	btfss	(sprintf@flag+1)& (0+255),6,b
  8921  000AE4  D015               	goto	l8197
  8922                           
  8923                           ; BSR set to: 2
  8924                           ;doprnt.c: 1358: if(width > prec)
  8925  000AE6  518E               	movf	(sprintf@prec+1)& (0+255),w,b
  8926  000AE8  0A80               	xorlw	128
  8927  000AEA  0101               	movlb	1	; () banked
  8928  000AEC  6FDF               	movwf	??_sprintf& (0+255),b
  8929  000AEE  0102               	movlb	2	; () banked
  8930  000AF0  5185               	movf	sprintf@width& (0+255),w,b
  8931  000AF2  5D8D               	subwf	sprintf@prec& (0+255),w,b
  8932  000AF4  5186               	movf	(sprintf@width+1)& (0+255),w,b
  8933  000AF6  0A80               	xorlw	128
  8934  000AF8  0101               	movlb	1	; () banked
  8935  000AFA  59DF               	subwfb	??_sprintf& (0+255),w,b
  8936  000AFC  E206               	bc	l1272
  8937                           
  8938                           ; BSR set to: 1
  8939                           ;doprnt.c: 1359: width -= prec;
  8940  000AFE  0102               	movlb	2	; () banked
  8941  000B00  518D               	movf	sprintf@prec& (0+255),w,b
  8942  000B02  5F85               	subwf	sprintf@width& (0+255),f,b
  8943  000B04  518E               	movf	(sprintf@prec+1)& (0+255),w,b
  8944  000B06  5B86               	subwfb	(sprintf@width+1)& (0+255),f,b
  8945  000B08  D003               	goto	l8197
  8946  000B0A                     l1272:
  8947                           
  8948                           ; BSR set to: 1
  8949                           ;doprnt.c: 1360: else
  8950                           ;doprnt.c: 1361: width = 0;
  8951  000B0A  0102               	movlb	2	; () banked
  8952  000B0C  6B85               	clrf	sprintf@width& (0+255),b
  8953  000B0E  6B86               	clrf	(sprintf@width+1)& (0+255),b
  8954  000B10                     l8197:
  8955                           
  8956                           ; BSR set to: 2
  8957                           ;doprnt.c: 1362: }
  8958                           ;doprnt.c: 1390: if(width > c)
  8959  000B10  0E80               	movlw	128
  8960  000B12  BF8F               	btfsc	sprintf@c& (0+255),7,b
  8961  000B14  0E7F               	movlw	127
  8962  000B16  0101               	movlb	1	; () banked
  8963  000B18  6FDF               	movwf	??_sprintf& (0+255),b
  8964  000B1A  0102               	movlb	2	; () banked
  8965  000B1C  5185               	movf	sprintf@width& (0+255),w,b
  8966  000B1E  5D8F               	subwf	sprintf@c& (0+255),w,b
  8967  000B20  5186               	movf	(sprintf@width+1)& (0+255),w,b
  8968  000B22  0A80               	xorlw	128
  8969  000B24  0101               	movlb	1	; () banked
  8970  000B26  59DF               	subwfb	??_sprintf& (0+255),w,b
  8971  000B28  E208               	bc	l1274
  8972                           
  8973                           ; BSR set to: 1
  8974                           ;doprnt.c: 1391: width -= c;
  8975  000B2A  0102               	movlb	2	; () banked
  8976  000B2C  518F               	movf	sprintf@c& (0+255),w,b
  8977  000B2E  5F85               	subwf	sprintf@width& (0+255),f,b
  8978  000B30  0E00               	movlw	0
  8979  000B32  BF8F               	btfsc	sprintf@c& (0+255),7,b
  8980  000B34  0EFF               	movlw	255
  8981  000B36  5B86               	subwfb	(sprintf@width+1)& (0+255),f,b
  8982  000B38  D003               	goto	l8201
  8983  000B3A                     l1274:
  8984                           
  8985                           ; BSR set to: 1
  8986                           ;doprnt.c: 1392: else
  8987                           ;doprnt.c: 1393: width = 0;
  8988  000B3A  0102               	movlb	2	; () banked
  8989  000B3C  6B85               	clrf	sprintf@width& (0+255),b
  8990  000B3E  6B86               	clrf	(sprintf@width+1)& (0+255),b
  8991  000B40                     l8201:
  8992                           
  8993                           ; BSR set to: 2
  8994                           ;doprnt.c: 1431: {
  8995                           ;doprnt.c: 1433: if(width
  8996                           ;doprnt.c: 1437: )
  8997  000B40  5186               	movf	(sprintf@width+1)& (0+255),w,b
  8998  000B42  1185               	iorwf	sprintf@width& (0+255),w,b
  8999  000B44  E00C               	bz	l8209
  9000  000B46                     l8203:
  9001                           
  9002                           ; BSR set to: 2
  9003                           ;doprnt.c: 1439: ((*sp++ = (' ')));
  9004  000B46  C1D7  FFD9         	movff	sprintf@sp,fsr2l
  9005                           
  9006                           ; BSR set to: 2
  9007  000B4A  D87E               	call	PL122	;call to abstracted procedure
  9008  000B4C  4BD7               	infsnz	sprintf@sp& (0+255),f,b
  9009  000B4E  2BD8               	incf	(sprintf@sp+1)& (0+255),f,b
  9010                           
  9011                           ; BSR set to: 1
  9012                           ;doprnt.c: 1440: while(--width);
  9013  000B50  0102               	movlb	2	; () banked
  9014  000B52  0785               	decf	sprintf@width& (0+255),f,b
  9015  000B54  A0D8               	btfss	status,0,c
  9016  000B56  0786               	decf	(sprintf@width+1)& (0+255),f,b
  9017  000B58  5186               	movf	(sprintf@width+1)& (0+255),w,b
  9018  000B5A  1185               	iorwf	sprintf@width& (0+255),w,b
  9019  000B5C  E1F4               	bnz	l8203
  9020  000B5E                     l8209:
  9021                           
  9022                           ; BSR set to: 2
  9023                           ;doprnt.c: 1447: if(flag & 0x03)
  9024  000B5E  C283  F1DF         	movff	sprintf@flag,??_sprintf
  9025  000B62  0E03               	movlw	3
  9026  000B64  0101               	movlb	1	; () banked
  9027  000B66  17DF               	andwf	??_sprintf& (0+255),f,b
  9028  000B68  E007               	bz	l8215
  9029                           
  9030                           ; BSR set to: 1
  9031                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  9032  000B6A  C1D7  FFD9         	movff	sprintf@sp,fsr2l
  9033  000B6E  C1D8  FFDA         	movff	sprintf@sp+1,fsr2h
  9034  000B72  0E2D               	movlw	45
  9035  000B74  6EDF               	movwf	indf2,c
  9036  000B76  D44D               	goto	l7971
  9037  000B78                     l8215:
  9038  000B78  D838               	call	PL62	;call to abstracted procedure
  9039  000B7A  678F               	tstfsz	sprintf@c& (0+255),b
  9040  000B7C  D441               	goto	l7967
  9041  000B7E                     l8217:
  9042                           
  9043                           ; BSR set to: 2
  9044                           ;doprnt.c: 1547: *sp = 0;
  9045  000B7E  C1D7  FFD9         	movff	sprintf@sp,fsr2l
  9046  000B82  C1D8  FFDA         	movff	sprintf@sp+1,fsr2h
  9047  000B86  0E00               	movlw	0
  9048  000B88  6EDF               	movwf	indf2,c
  9049                           
  9050                           ; BSR set to: 2
  9051  000B8A  0C00               	retlw	0
  9052  000B8C                     __end_of_sprintf:
  9053                           	opt stack 0
  9054  000B8C                     PL8:
  9055                           	opt stack 18
  9056  000B8C  C27E  F087         	movff	sprintf@_val,___lldiv@dividend
  9057  000B90  C27F  F088         	movff	sprintf@_val+1,___lldiv@dividend+1
  9058  000B94  C280  F089         	movff	sprintf@_val+2,___lldiv@dividend+2
  9059  000B98  C281  F08A         	movff	sprintf@_val+3,___lldiv@dividend+3
  9060  000B9C  518F               	movf	sprintf@c& (0+255),w,b
  9061  000B9E  0D04               	mullw	4
  9062  000BA0  0ECF               	movlw	low _dpowers
  9063  000BA2  24F3               	addwf	prodl,w,c
  9064  000BA4  6EF6               	movwf	tblptrl,c
  9065  000BA6  0EFF               	movlw	high _dpowers
  9066  000BA8  20F4               	addwfc	prodh,w,c
  9067  000BAA  6EF7               	movwf	tblptrh,c
  9068  000BAC                     	if	0	;There are less than 3 active tblptr bytes
  9069  000BAC                     	endif
  9070  000BAC  0009               	tblrd		*+
  9071  000BAE  0100               	movlb	0	; () banked
  9072  000BB0  CFF5 F08B          	movff	tablat,___lldiv@divisor
  9073  000BB4  0009               	tblrd		*+
  9074  000BB6  CFF5 F08C          	movff	tablat,___lldiv@divisor+1
  9075  000BBA  0009               	tblrd		*+
  9076  000BBC  CFF5 F08D          	movff	tablat,___lldiv@divisor+2
  9077  000BC0  000A               	tblrd		*-
  9078  000BC2  CFF5 F08E          	movff	tablat,___lldiv@divisor+3
  9079  000BC6  0012               	return	
  9080  000BC8                     __end_ofPL8:
  9081                           	opt stack 0
  9082  000BC8                     PL24:
  9083                           	opt stack 18
  9084  000BC8  518F               	movf	sprintf@c& (0+255),w,b
  9085  000BCA  0D04               	mullw	4
  9086  000BCC  0ECF               	movlw	low _dpowers
  9087  000BCE  24F3               	addwf	prodl,w,c
  9088  000BD0  6EF6               	movwf	tblptrl,c
  9089  000BD2  0EFF               	movlw	high _dpowers
  9090  000BD4  20F4               	addwfc	prodh,w,c
  9091  000BD6  6EF7               	movwf	tblptrh,c
  9092  000BD8                     	if	0	;There are less than 3 active tblptr bytes
  9093  000BD8                     	endif
  9094  000BD8  0009               	tblrd		*+
  9095  000BDA  0012               	return	
  9096  000BDC                     __end_ofPL24:
  9097                           	opt stack 0
  9098  000BDC                     PL40:
  9099                           	opt stack 18
  9100  000BDC  C1D9  FFF6         	movff	sprintf@f,tblptrl
  9101  000BE0  C1DA  FFF7         	movff	sprintf@f+1,tblptrh
  9102  000BE4                     	if	0	;tblptru may be non-zero
  9103  000BE4                     	endif
  9104  000BE4                     	if	0	;tblptru may be non-zero
  9105  000BE4                     	endif
  9106  000BE4  0008               	tblrd		*
  9107  000BE6  50F5               	movf	tablat,w,c
  9108  000BE8  0012               	return	
  9109  000BEA                     __end_ofPL40:
  9110                           	opt stack 0
  9111  000BEA                     PL62:
  9112                           	opt stack 18
  9113  000BEA  0101               	movlb	1	; () banked
  9114  000BEC  C1D9  FFF6         	movff	sprintf@f,tblptrl
  9115  000BF0  C1DA  FFF7         	movff	sprintf@f+1,tblptrh
  9116  000BF4  4BD9               	infsnz	sprintf@f& (0+255),f,b
  9117  000BF6  2BDA               	incf	(sprintf@f+1)& (0+255),f,b
  9118  000BF8                     	if	0	;tblptru may be non-zero
  9119  000BF8                     	endif
  9120  000BF8                     	if	0	;tblptru may be non-zero
  9121  000BF8                     	endif
  9122  000BF8  0008               	tblrd		*
  9123  000BFA  CFF5 F28F          	movff	tablat,sprintf@c
  9124  000BFE  0102               	movlb	2	; () banked
  9125  000C00  0012               	return	
  9126  000C02                     __end_ofPL62:
  9127                           	opt stack 0
  9128  000C02                     PL68:
  9129                           	opt stack 18
  9130  000C02  C1D7  FFD9         	movff	sprintf@sp,fsr2l
  9131  000C06  C1D8  FFDA         	movff	sprintf@sp+1,fsr2h
  9132  000C0A  0E30               	movlw	48
  9133  000C0C  6EDF               	movwf	indf2,c
  9134  000C0E  0101               	movlb	1	; () banked
  9135  000C10  4BD7               	infsnz	sprintf@sp& (0+255),f,b
  9136  000C12  2BD8               	incf	(sprintf@sp+1)& (0+255),f,b
  9137  000C14  0102               	movlb	2	; () banked
  9138  000C16  0C30               	retlw	48
  9139  000C18                     __end_ofPL68:
  9140                           	opt stack 0
  9141  000C18                     PL70:
  9142                           	opt stack 18
  9143  000C18  C27A  F087         	movff	sprintf@integ,___flge@ff1
  9144  000C1C  C27B  F088         	movff	sprintf@integ+1,___flge@ff1+1
  9145  000C20  C27C  F089         	movff	sprintf@integ+2,___flge@ff1+2
  9146  000C24  C27D  F08A         	movff	sprintf@integ+3,___flge@ff1+3
  9147  000C28  6B8B               	clrf	___flge@ff2& (0+255),b
  9148  000C2A  6B8C               	clrf	(___flge@ff2+1)& (0+255),b
  9149  000C2C  0012               	return	
  9150  000C2E                     __end_ofPL70:
  9151                           	opt stack 0
  9152  000C2E                     PL106:
  9153                           	opt stack 18
  9154  000C2E  0E0A               	movlw	10
  9155  000C30  6F8B               	movwf	___llmod@divisor& (0+255),b
  9156  000C32  6B8C               	clrf	(___llmod@divisor+1)& (0+255),b
  9157  000C34  6B8D               	clrf	(___llmod@divisor+2)& (0+255),b
  9158  000C36  6B8E               	clrf	(___llmod@divisor+3)& (0+255),b
  9159  000C38  0C00               	retlw	0
  9160  000C3A                     __end_ofPL106:
  9161                           	opt stack 0
  9162  000C3A                     PL114:
  9163                           	opt stack 18
  9164  000C3A  0102               	movlb	2	; () banked
  9165  000C3C  5188               	movf	(sprintf@exp+1)& (0+255),w,b
  9166  000C3E  0A80               	xorlw	128
  9167  000C40  6EF3               	movwf	prodl,c
  9168  000C42  0E80               	movlw	128
  9169  000C44  5CF3               	subwf	prodl,w,c
  9170  000C46  0012               	return	
  9171  000C48                     __end_ofPL114:
  9172                           	opt stack 0
  9173  000C48                     PL122:
  9174                           	opt stack 18
  9175  000C48  C1D8  FFDA         	movff	sprintf@sp+1,fsr2h
  9176  000C4C  0E20               	movlw	32
  9177  000C4E  6EDF               	movwf	indf2,c
  9178  000C50  0101               	movlb	1	; () banked
  9179  000C52  0C20               	retlw	32
  9180  000C54                     __end_ofPL122:
  9181                           	opt stack 0
  9182  000C54                     PL132:
  9183                           	opt stack 18
  9184  000C54  0A80               	xorlw	128
  9185  000C56  6EF3               	movwf	prodl,c
  9186  000C58  0E80               	movlw	128
  9187  000C5A  5CF3               	subwf	prodl,w,c
  9188  000C5C  0C01               	retlw	1
  9189  000C5E                     __end_ofPL132:
  9190                           	opt stack 0
  9191                           tblptru	equ	0xFF8
  9192                           tblptrh	equ	0xFF7
  9193                           tblptrl	equ	0xFF6
  9194                           tablat	equ	0xFF5
  9195                           prodh	equ	0xFF4
  9196                           prodl	equ	0xFF3
  9197                           intcon	equ	0xFF2
  9198                           postinc0	equ	0xFEE
  9199                           wreg	equ	0xFE8
  9200                           indf1	equ	0xFE7
  9201                           postinc1	equ	0xFE6
  9202                           postdec1	equ	0xFE5
  9203                           fsr1h	equ	0xFE2
  9204                           fsr1l	equ	0xFE1
  9205                           indf2	equ	0xFDF
  9206                           postinc2	equ	0xFDE
  9207                           postdec2	equ	0xFDD
  9208                           fsr2h	equ	0xFDA
  9209                           fsr2l	equ	0xFD9
  9210                           status	equ	0xFD8
  9211                           
  9212 ;; *************** function _scale *****************
  9213 ;; Defined at:
  9214 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  9215 ;; Parameters:    Size  Location     Type
  9216 ;;  scl             1    wreg     char 
  9217 ;; Auto vars:     Size  Location     Type
  9218 ;;  scl             1   81[BANK0 ] char 
  9219 ;; Return value:  Size  Location     Type
  9220 ;;                  4   73[BANK0 ] char 
  9221 ;; Registers used:
  9222 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9223 ;; Tracked objects:
  9224 ;;		On entry : F/2
  9225 ;;		On exit  : F/0
  9226 ;;		Unchanged: 0/0
  9227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9228 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9229 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9231 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9232 ;;Total ram usage:        9 bytes
  9233 ;; Hardware stack levels used:    1
  9234 ;; Hardware stack levels required when called:   10
  9235 ;; This function calls:
  9236 ;;		___awdiv
  9237 ;;		___awmod
  9238 ;;		___flmul
  9239 ;; This function is called by:
  9240 ;;		_sprintf
  9241 ;; This function uses a non-reentrant model
  9242 ;;
  9243                           
  9244                           	psect	text15
  9245  000C5E                     __ptext15:
  9246                           	opt stack 0
  9247  000C5E                     _scale:
  9248                           	opt stack 18
  9249                           
  9250                           ; BSR set to: 2
  9251                           ;incstack = 0
  9252                           ;scale@scl stored from wreg
  9253  000C5E  0100               	movlb	0	; () banked
  9254  000C60  6FB1               	movwf	scale@scl& (0+255),b
  9255                           
  9256                           ; BSR set to: 0
  9257                           ;doprnt.c: 428: if(scl < 0) {
  9258  000C62  AFB1               	btfss	scale@scl& (0+255),7,b
  9259  000C64  D074               	goto	l7431
  9260                           
  9261                           ; BSR set to: 0
  9262                           ;doprnt.c: 429: scl = -scl;
  9263  000C66  6DB1               	negf	scale@scl& (0+255),b
  9264                           
  9265                           ;doprnt.c: 430: if(scl>=110)
  9266  000C68  51B1               	movf	scale@scl& (0+255),w,b
  9267  000C6A  0A80               	xorlw	128
  9268  000C6C  0F12               	addlw	-238
  9269  000C6E  E33F               	bnc	l7421
  9270                           
  9271                           ; BSR set to: 0
  9272                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  9273  000C70  6B90               	clrf	(___awdiv@divisor+1)& (0+255),b
  9274  000C72  0E0A               	movlw	10
  9275  000C74  6F8F               	movwf	___awdiv@divisor& (0+255),b
  9276  000C76  6B8A               	clrf	(___awmod@divisor+1)& (0+255),b
  9277  000C78  0E64               	movlw	100
  9278  000C7A  D941               	call	PL72	;call to abstracted procedure
  9279  000C7C  BF87               	btfsc	___awmod@dividend& (0+255),7,b
  9280  000C7E  0788               	decf	(___awmod@dividend+1)& (0+255),f,b
  9281  000C80  ECB9  F015         	call	___awmod	;wreg free
  9282  000C84  C087  F08D         	movff	?___awmod,___awdiv@dividend
  9283  000C88  C088  F08E         	movff	?___awmod+1,___awdiv@dividend+1
  9284  000C8C  ECE3  F014         	call	___awdiv	;wreg free
  9285  000C90  D8ED               	call	PL12	;call to abstracted procedure
  9286  000C92  0E1B               	movlw	low __npowers_
  9287  000C94  258D               	addwf	?___awdiv& (0+255),w,b
  9288  000C96  6EF6               	movwf	tblptrl,c
  9289  000C98  0EF4               	movlw	high __npowers_
  9290  000C9A  218E               	addwfc	(?___awdiv+1)& (0+255),w,b
  9291  000C9C  D8CB               	call	PL2	;call to abstracted procedure
  9292  000C9E  6B90               	clrf	(___awdiv@divisor+1)& (0+255),b
  9293  000CA0  0E64               	movlw	100
  9294  000CA2  D932               	call	PL104	;call to abstracted procedure
  9295  000CA4  BF8D               	btfsc	___awdiv@dividend& (0+255),7,b
  9296  000CA6  078E               	decf	(___awdiv@dividend+1)& (0+255),f,b
  9297  000CA8  ECE3  F014         	call	___awdiv	;wreg free
  9298  000CAC  90D8               	bcf	status,0,c
  9299  000CAE  D907               	call	PL22	;call to abstracted procedure
  9300  000CB0  0E1B               	movlw	low __npowers_
  9301  000CB2  258D               	addwf	?___awdiv& (0+255),w,b
  9302  000CB4  6EF6               	movwf	tblptrl,c
  9303  000CB6  0EF4               	movlw	high __npowers_
  9304  000CB8  218E               	addwfc	(?___awdiv+1)& (0+255),w,b
  9305  000CBA  D8CA               	call	PL4	;call to abstracted procedure
  9306  000CBC  EC90  F010         	call	___flmul	;wreg free
  9307                           
  9308                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  9309  000CC0  D8E7               	call	PL20	;call to abstracted procedure
  9310  000CC2  BF87               	btfsc	___awmod@dividend& (0+255),7,b
  9311  000CC4  0788               	decf	(___awmod@dividend+1)& (0+255),f,b
  9312  000CC6  ECB9  F015         	call	___awmod	;wreg free
  9313  000CCA  D8DB               	call	PL14	;call to abstracted procedure
  9314  000CCC  0E1B               	movlw	low __npowers_
  9315  000CCE  2587               	addwf	?___awmod& (0+255),w,b
  9316  000CD0  6EF6               	movwf	tblptrl,c
  9317  000CD2  0EF4               	movlw	high __npowers_
  9318  000CD4  2188               	addwfc	(?___awmod+1)& (0+255),w,b
  9319  000CD6  D8AE               	call	PL2	;call to abstracted procedure
  9320  000CD8  EC90  F010         	call	___flmul	;wreg free
  9321  000CDC  C096  F0A9         	movff	?___flmul,?_scale
  9322  000CE0  C097  F0AA         	movff	?___flmul+1,?_scale+1
  9323  000CE4  C098  F0AB         	movff	?___flmul+2,?_scale+2
  9324  000CE8  C099  F0AC         	movff	?___flmul+3,?_scale+3
  9325  000CEC  0012               	return	
  9326  000CEE                     l7421:
  9327                           
  9328                           ; BSR set to: 0
  9329                           ;doprnt.c: 432: else if(scl > 10)
  9330  000CEE  51B1               	movf	scale@scl& (0+255),w,b
  9331  000CF0  0A80               	xorlw	128
  9332  000CF2  0F75               	addlw	-139
  9333  000CF4  E325               	bnc	l7427
  9334                           
  9335                           ; BSR set to: 0
  9336                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  9337  000CF6  6B90               	clrf	(___awdiv@divisor+1)& (0+255),b
  9338  000CF8  0E0A               	movlw	10
  9339  000CFA  D906               	call	PL104	;call to abstracted procedure
  9340  000CFC  BF8D               	btfsc	___awdiv@dividend& (0+255),7,b
  9341  000CFE  078E               	decf	(___awdiv@dividend+1)& (0+255),f,b
  9342  000D00  ECE3  F014         	call	___awdiv	;wreg free
  9343  000D04  D8B3               	call	PL12	;call to abstracted procedure
  9344  000D06  0E1B               	movlw	low __npowers_
  9345  000D08  258D               	addwf	?___awdiv& (0+255),w,b
  9346  000D0A  6EF6               	movwf	tblptrl,c
  9347  000D0C  0EF4               	movlw	high __npowers_
  9348  000D0E  218E               	addwfc	(?___awdiv+1)& (0+255),w,b
  9349  000D10  D89F               	call	PL4	;call to abstracted procedure
  9350  000D12  D8EE               	call	PL52	;call to abstracted procedure
  9351  000D14  BF87               	btfsc	___awmod@dividend& (0+255),7,b
  9352  000D16  0788               	decf	(___awmod@dividend+1)& (0+255),f,b
  9353  000D18  ECB9  F015         	call	___awmod	;wreg free
  9354  000D1C  D8B2               	call	PL14	;call to abstracted procedure
  9355  000D1E  0E1B               	movlw	low __npowers_
  9356  000D20  2587               	addwf	?___awmod& (0+255),w,b
  9357  000D22  6EF6               	movwf	tblptrl,c
  9358  000D24  0EF4               	movlw	high __npowers_
  9359  000D26  2188               	addwfc	(?___awmod+1)& (0+255),w,b
  9360  000D28  D885               	call	PL2	;call to abstracted procedure
  9361  000D2A  EC90  F010         	call	___flmul	;wreg free
  9362  000D2E  C096  F0A9         	movff	?___flmul,?_scale
  9363  000D32  C097  F0AA         	movff	?___flmul+1,?_scale+1
  9364  000D36  C098  F0AB         	movff	?___flmul+2,?_scale+2
  9365  000D3A  C099  F0AC         	movff	?___flmul+3,?_scale+3
  9366  000D3E  0012               	return	
  9367  000D40                     l7427:
  9368                           
  9369                           ; BSR set to: 0
  9370                           ;doprnt.c: 434: return _npowers_[scl];
  9371  000D40  51B1               	movf	scale@scl& (0+255),w,b
  9372  000D42  0D04               	mullw	4
  9373  000D44  0E1B               	movlw	low __npowers_
  9374  000D46  24F3               	addwf	prodl,w,c
  9375  000D48  6EF6               	movwf	tblptrl,c
  9376  000D4A  0EF4               	movlw	high __npowers_
  9377  000D4C  D0C2               	goto	PL50	;call to abstracted procedure
  9378  000D4E                     l7431:
  9379                           
  9380                           ; BSR set to: 0
  9381                           ;doprnt.c: 435: }
  9382                           ;doprnt.c: 436: if(scl>=110)
  9383  000D4E  51B1               	movf	scale@scl& (0+255),w,b
  9384  000D50  0A80               	xorlw	128
  9385  000D52  0F12               	addlw	-238
  9386  000D54  E33F               	bnc	l7439
  9387                           
  9388                           ; BSR set to: 0
  9389                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  9390  000D56  6B90               	clrf	(___awdiv@divisor+1)& (0+255),b
  9391  000D58  0E0A               	movlw	10
  9392  000D5A  6F8F               	movwf	___awdiv@divisor& (0+255),b
  9393  000D5C  6B8A               	clrf	(___awmod@divisor+1)& (0+255),b
  9394  000D5E  0E64               	movlw	100
  9395  000D60  D8CE               	call	PL72	;call to abstracted procedure
  9396  000D62  BF87               	btfsc	___awmod@dividend& (0+255),7,b
  9397  000D64  0788               	decf	(___awmod@dividend+1)& (0+255),f,b
  9398  000D66  ECB9  F015         	call	___awmod	;wreg free
  9399  000D6A  C087  F08D         	movff	?___awmod,___awdiv@dividend
  9400  000D6E  C088  F08E         	movff	?___awmod+1,___awdiv@dividend+1
  9401  000D72  ECE3  F014         	call	___awdiv	;wreg free
  9402  000D76  D87A               	call	PL12	;call to abstracted procedure
  9403  000D78  0E4F               	movlw	low __powers_
  9404  000D7A  258D               	addwf	?___awdiv& (0+255),w,b
  9405  000D7C  6EF6               	movwf	tblptrl,c
  9406  000D7E  0EF4               	movlw	high __powers_
  9407  000D80  218E               	addwfc	(?___awdiv+1)& (0+255),w,b
  9408  000D82  D858               	call	PL2	;call to abstracted procedure
  9409  000D84  6B90               	clrf	(___awdiv@divisor+1)& (0+255),b
  9410  000D86  0E64               	movlw	100
  9411  000D88  D8BF               	call	PL104	;call to abstracted procedure
  9412  000D8A  BF8D               	btfsc	___awdiv@dividend& (0+255),7,b
  9413  000D8C  078E               	decf	(___awdiv@dividend+1)& (0+255),f,b
  9414  000D8E  ECE3  F014         	call	___awdiv	;wreg free
  9415  000D92  90D8               	bcf	status,0,c
  9416  000D94  D894               	call	PL22	;call to abstracted procedure
  9417  000D96  0E4F               	movlw	low __powers_
  9418  000D98  258D               	addwf	?___awdiv& (0+255),w,b
  9419  000D9A  6EF6               	movwf	tblptrl,c
  9420  000D9C  0EF4               	movlw	high __powers_
  9421  000D9E  218E               	addwfc	(?___awdiv+1)& (0+255),w,b
  9422  000DA0  D857               	call	PL4	;call to abstracted procedure
  9423  000DA2  EC90  F010         	call	___flmul	;wreg free
  9424                           
  9425                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  9426  000DA6  D874               	call	PL20	;call to abstracted procedure
  9427  000DA8  BF87               	btfsc	___awmod@dividend& (0+255),7,b
  9428  000DAA  0788               	decf	(___awmod@dividend+1)& (0+255),f,b
  9429  000DAC  ECB9  F015         	call	___awmod	;wreg free
  9430  000DB0  D868               	call	PL14	;call to abstracted procedure
  9431  000DB2  0E4F               	movlw	low __powers_
  9432  000DB4  2587               	addwf	?___awmod& (0+255),w,b
  9433  000DB6  6EF6               	movwf	tblptrl,c
  9434  000DB8  0EF4               	movlw	high __powers_
  9435  000DBA  2188               	addwfc	(?___awmod+1)& (0+255),w,b
  9436  000DBC  D83B               	call	PL2	;call to abstracted procedure
  9437  000DBE  EC90  F010         	call	___flmul	;wreg free
  9438  000DC2  C096  F0A9         	movff	?___flmul,?_scale
  9439  000DC6  C097  F0AA         	movff	?___flmul+1,?_scale+1
  9440  000DCA  C098  F0AB         	movff	?___flmul+2,?_scale+2
  9441  000DCE  C099  F0AC         	movff	?___flmul+3,?_scale+3
  9442  000DD2  0012               	return	
  9443  000DD4                     l7439:
  9444                           
  9445                           ; BSR set to: 0
  9446                           ;doprnt.c: 438: else if(scl > 10)
  9447  000DD4  51B1               	movf	scale@scl& (0+255),w,b
  9448  000DD6  0A80               	xorlw	128
  9449  000DD8  0F75               	addlw	-139
  9450  000DDA  E325               	bnc	l7445
  9451                           
  9452                           ; BSR set to: 0
  9453                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  9454  000DDC  6B90               	clrf	(___awdiv@divisor+1)& (0+255),b
  9455  000DDE  0E0A               	movlw	10
  9456  000DE0  D893               	call	PL104	;call to abstracted procedure
  9457  000DE2  BF8D               	btfsc	___awdiv@dividend& (0+255),7,b
  9458  000DE4  078E               	decf	(___awdiv@dividend+1)& (0+255),f,b
  9459  000DE6  ECE3  F014         	call	___awdiv	;wreg free
  9460  000DEA  D840               	call	PL12	;call to abstracted procedure
  9461  000DEC  0E4F               	movlw	low __powers_
  9462  000DEE  258D               	addwf	?___awdiv& (0+255),w,b
  9463  000DF0  6EF6               	movwf	tblptrl,c
  9464  000DF2  0EF4               	movlw	high __powers_
  9465  000DF4  218E               	addwfc	(?___awdiv+1)& (0+255),w,b
  9466  000DF6  D82C               	call	PL4	;call to abstracted procedure
  9467  000DF8  D87B               	call	PL52	;call to abstracted procedure
  9468  000DFA  BF87               	btfsc	___awmod@dividend& (0+255),7,b
  9469  000DFC  0788               	decf	(___awmod@dividend+1)& (0+255),f,b
  9470  000DFE  ECB9  F015         	call	___awmod	;wreg free
  9471  000E02  D83F               	call	PL14	;call to abstracted procedure
  9472  000E04  0E4F               	movlw	low __powers_
  9473  000E06  2587               	addwf	?___awmod& (0+255),w,b
  9474  000E08  6EF6               	movwf	tblptrl,c
  9475  000E0A  0EF4               	movlw	high __powers_
  9476  000E0C  2188               	addwfc	(?___awmod+1)& (0+255),w,b
  9477  000E0E  D812               	call	PL2	;call to abstracted procedure
  9478  000E10  EC90  F010         	call	___flmul	;wreg free
  9479  000E14  C096  F0A9         	movff	?___flmul,?_scale
  9480  000E18  C097  F0AA         	movff	?___flmul+1,?_scale+1
  9481  000E1C  C098  F0AB         	movff	?___flmul+2,?_scale+2
  9482  000E20  C099  F0AC         	movff	?___flmul+3,?_scale+3
  9483  000E24  0012               	return	
  9484  000E26                     l7445:
  9485                           
  9486                           ; BSR set to: 0
  9487                           ;doprnt.c: 440: return _powers_[scl];
  9488  000E26  51B1               	movf	scale@scl& (0+255),w,b
  9489  000E28  0D04               	mullw	4
  9490  000E2A  0E4F               	movlw	low __powers_
  9491  000E2C  24F3               	addwf	prodl,w,c
  9492  000E2E  6EF6               	movwf	tblptrl,c
  9493  000E30  0EF4               	movlw	high __powers_
  9494                           
  9495                           ; BSR set to: 0
  9496  000E32  D04F               	goto	PL50	;call to abstracted procedure
  9497  000E34                     __end_of_scale:
  9498                           	opt stack 0
  9499  000E34                     PL2:
  9500                           	opt stack 18
  9501  000E34  6EF7               	movwf	tblptrh,c
  9502  000E36                     	if	0	;There are less than 3 active tblptr bytes
  9503  000E36                     	endif
  9504  000E36  0009               	tblrd		*+
  9505  000E38  CFF5 F09A          	movff	tablat,___flmul@f2
  9506  000E3C  0009               	tblrd		*+
  9507  000E3E  CFF5 F09B          	movff	tablat,___flmul@f2+1
  9508  000E42  0009               	tblrd		*+
  9509  000E44  CFF5 F09C          	movff	tablat,___flmul@f2+2
  9510  000E48  000A               	tblrd		*-
  9511  000E4A  CFF5 F09D          	movff	tablat,___flmul@f2+3
  9512  000E4E  0012               	return	
  9513  000E50                     __end_ofPL2:
  9514                           	opt stack 0
  9515  000E50                     PL4:
  9516                           	opt stack 18
  9517  000E50  6EF7               	movwf	tblptrh,c
  9518  000E52                     	if	0	;There are less than 3 active tblptr bytes
  9519  000E52                     	endif
  9520  000E52  0009               	tblrd		*+
  9521  000E54  CFF5 F096          	movff	tablat,___flmul@f1
  9522  000E58  0009               	tblrd		*+
  9523  000E5A  CFF5 F097          	movff	tablat,___flmul@f1+1
  9524  000E5E  0009               	tblrd		*+
  9525  000E60  CFF5 F098          	movff	tablat,___flmul@f1+2
  9526  000E64  000A               	tblrd		*-
  9527  000E66  CFF5 F099          	movff	tablat,___flmul@f1+3
  9528  000E6A  0012               	return	
  9529  000E6C                     __end_ofPL4:
  9530                           	opt stack 0
  9531  000E6C                     PL12:
  9532                           	opt stack 18
  9533  000E6C  90D8               	bcf	status,0,c
  9534  000E6E  378D               	rlcf	?___awdiv& (0+255),f,b
  9535  000E70  378E               	rlcf	(?___awdiv+1)& (0+255),f,b
  9536  000E72  90D8               	bcf	status,0,c
  9537  000E74  378D               	rlcf	?___awdiv& (0+255),f,b
  9538  000E76  378E               	rlcf	(?___awdiv+1)& (0+255),f,b
  9539  000E78  0E24               	movlw	36
  9540  000E7A  278D               	addwf	?___awdiv& (0+255),f,b
  9541  000E7C  0E00               	movlw	0
  9542  000E7E  238E               	addwfc	(?___awdiv+1)& (0+255),f,b
  9543  000E80  0C00               	retlw	0
  9544  000E82                     __end_ofPL12:
  9545                           	opt stack 0
  9546  000E82                     PL14:
  9547                           	opt stack 18
  9548  000E82  90D8               	bcf	status,0,c
  9549  000E84  3787               	rlcf	?___awmod& (0+255),f,b
  9550  000E86  3788               	rlcf	(?___awmod+1)& (0+255),f,b
  9551  000E88  90D8               	bcf	status,0,c
  9552  000E8A  3787               	rlcf	?___awmod& (0+255),f,b
  9553  000E8C  3788               	rlcf	(?___awmod+1)& (0+255),f,b
  9554  000E8E  0012               	return	
  9555  000E90                     __end_ofPL14:
  9556                           	opt stack 0
  9557  000E90                     PL20:
  9558                           	opt stack 18
  9559  000E90  C096  F0AD         	movff	?___flmul,_scale$3206
  9560  000E94  C097  F0AE         	movff	?___flmul+1,_scale$3206+1
  9561  000E98  C098  F0AF         	movff	?___flmul+2,_scale$3206+2
  9562  000E9C  C099  F0B0         	movff	?___flmul+3,_scale$3206+3
  9563  000EA0  C0AD  F096         	movff	_scale$3206,___flmul@f1
  9564  000EA4  C0AE  F097         	movff	_scale$3206+1,___flmul@f1+1
  9565  000EA8  C0AF  F098         	movff	_scale$3206+2,___flmul@f1+2
  9566  000EAC  C0B0  F099         	movff	_scale$3206+3,___flmul@f1+3
  9567  000EB0  6B8A               	clrf	(___awmod@divisor+1)& (0+255),b
  9568  000EB2  0E0A               	movlw	10
  9569  000EB4  6F89               	movwf	___awmod@divisor& (0+255),b
  9570  000EB6  51B1               	movf	scale@scl& (0+255),w,b
  9571  000EB8  6F87               	movwf	___awmod@dividend& (0+255),b
  9572  000EBA  6B88               	clrf	(___awmod@dividend+1)& (0+255),b
  9573  000EBC  0012               	return	
  9574  000EBE                     __end_ofPL20:
  9575                           	opt stack 0
  9576  000EBE                     PL22:
  9577                           	opt stack 18
  9578  000EBE  378D               	rlcf	?___awdiv& (0+255),f,b
  9579  000EC0  378E               	rlcf	(?___awdiv+1)& (0+255),f,b
  9580  000EC2  90D8               	bcf	status,0,c
  9581  000EC4  378D               	rlcf	?___awdiv& (0+255),f,b
  9582  000EC6  378E               	rlcf	(?___awdiv+1)& (0+255),f,b
  9583  000EC8  0E48               	movlw	72
  9584  000ECA  278D               	addwf	?___awdiv& (0+255),f,b
  9585  000ECC  0E00               	movlw	0
  9586  000ECE  238E               	addwfc	(?___awdiv+1)& (0+255),f,b
  9587  000ED0  0C00               	retlw	0
  9588  000ED2                     __end_ofPL22:
  9589                           	opt stack 0
  9590  000ED2                     PL50:
  9591                           	opt stack 18
  9592  000ED2  20F4               	addwfc	prodh,w,c
  9593  000ED4  6EF7               	movwf	tblptrh,c
  9594  000ED6                     	if	0	;There are less than 3 active tblptr bytes
  9595  000ED6                     	endif
  9596  000ED6  0009               	tblrd		*+
  9597  000ED8  CFF5 F0A9          	movff	tablat,?_scale
  9598  000EDC  0009               	tblrd		*+
  9599  000EDE  CFF5 F0AA          	movff	tablat,?_scale+1
  9600  000EE2  0009               	tblrd		*+
  9601  000EE4  CFF5 F0AB          	movff	tablat,?_scale+2
  9602  000EE8  000A               	tblrd		*-
  9603  000EEA  CFF5 F0AC          	movff	tablat,?_scale+3
  9604  000EEE  0012               	return	
  9605  000EF0                     __end_ofPL50:
  9606                           	opt stack 0
  9607  000EF0                     PL52:
  9608                           	opt stack 18
  9609  000EF0  6B8A               	clrf	(___awmod@divisor+1)& (0+255),b
  9610  000EF2  0E0A               	movlw	10
  9611  000EF4  6F89               	movwf	___awmod@divisor& (0+255),b
  9612  000EF6  51B1               	movf	scale@scl& (0+255),w,b
  9613  000EF8  6F87               	movwf	___awmod@dividend& (0+255),b
  9614  000EFA  6B88               	clrf	(___awmod@dividend+1)& (0+255),b
  9615  000EFC  0012               	return	
  9616  000EFE                     __end_ofPL52:
  9617                           	opt stack 0
  9618  000EFE                     PL72:
  9619                           	opt stack 18
  9620  000EFE  6F89               	movwf	___awmod@divisor& (0+255),b
  9621  000F00  51B1               	movf	scale@scl& (0+255),w,b
  9622  000F02  6F87               	movwf	___awmod@dividend& (0+255),b
  9623  000F04  6B88               	clrf	(___awmod@dividend+1)& (0+255),b
  9624  000F06  0012               	return	
  9625  000F08                     __end_ofPL72:
  9626                           	opt stack 0
  9627  000F08                     PL104:
  9628                           	opt stack 18
  9629  000F08  6F8F               	movwf	___awdiv@divisor& (0+255),b
  9630  000F0A  51B1               	movf	scale@scl& (0+255),w,b
  9631  000F0C  6F8D               	movwf	___awdiv@dividend& (0+255),b
  9632  000F0E  6B8E               	clrf	(___awdiv@dividend+1)& (0+255),b
  9633  000F10  0012               	return	
  9634  000F12                     __end_ofPL104:
  9635                           	opt stack 0
  9636                           tblptru	equ	0xFF8
  9637                           tblptrh	equ	0xFF7
  9638                           tblptrl	equ	0xFF6
  9639                           tablat	equ	0xFF5
  9640                           prodh	equ	0xFF4
  9641                           prodl	equ	0xFF3
  9642                           intcon	equ	0xFF2
  9643                           postinc0	equ	0xFEE
  9644                           wreg	equ	0xFE8
  9645                           indf1	equ	0xFE7
  9646                           postinc1	equ	0xFE6
  9647                           postdec1	equ	0xFE5
  9648                           fsr1h	equ	0xFE2
  9649                           fsr1l	equ	0xFE1
  9650                           indf2	equ	0xFDF
  9651                           postinc2	equ	0xFDE
  9652                           postdec2	equ	0xFDD
  9653                           fsr2h	equ	0xFDA
  9654                           fsr2l	equ	0xFD9
  9655                           status	equ	0xFD8
  9656                           
  9657 ;; *************** function ___awmod *****************
  9658 ;; Defined at:
  9659 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  9660 ;; Parameters:    Size  Location     Type
  9661 ;;  dividend        2   39[BANK0 ] int 
  9662 ;;  divisor         2   41[BANK0 ] int 
  9663 ;; Auto vars:     Size  Location     Type
  9664 ;;  sign            1   44[BANK0 ] unsigned char 
  9665 ;;  counter         1   43[BANK0 ] unsigned char 
  9666 ;; Return value:  Size  Location     Type
  9667 ;;                  2   39[BANK0 ] int 
  9668 ;; Registers used:
  9669 ;;		wreg, status,2, status,0, prodl
  9670 ;; Tracked objects:
  9671 ;;		On entry : F/0
  9672 ;;		On exit  : F/0
  9673 ;;		Unchanged: 0/0
  9674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9675 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9676 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9678 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9679 ;;Total ram usage:        6 bytes
  9680 ;; Hardware stack levels used:    1
  9681 ;; Hardware stack levels required when called:    8
  9682 ;; This function calls:
  9683 ;;		Nothing
  9684 ;; This function is called by:
  9685 ;;		_scale
  9686 ;; This function uses a non-reentrant model
  9687 ;;
  9688                           
  9689                           	psect	text16
  9690  002B72                     __ptext16:
  9691                           	opt stack 0
  9692  002B72                     ___awmod:
  9693                           	opt stack 19
  9694                           
  9695                           ; BSR set to: 0
  9696                           
  9697                           ; BSR set to: 0
  9698                           ;incstack = 0
  9699  002B72  6B8C               	clrf	___awmod@sign& (0+255),b
  9700                           
  9701                           ; BSR set to: 0
  9702  002B74  5188               	movf	(___awmod@dividend+1)& (0+255),w,b
  9703  002B76  0A80               	xorlw	128
  9704  002B78  6EF3               	movwf	prodl,c
  9705  002B7A  0E80               	movlw	128
  9706  002B7C  5CF3               	subwf	prodl,w,c
  9707  002B7E  0E00               	movlw	0
  9708  002B80  B4D8               	btfsc	status,2,c
  9709  002B82  5D87               	subwf	___awmod@dividend& (0+255),w,b
  9710  002B84  E206               	bc	l7155
  9711                           
  9712                           ; BSR set to: 0
  9713  002B86  6D87               	negf	___awmod@dividend& (0+255),b
  9714  002B88  1F88               	comf	(___awmod@dividend+1)& (0+255),f,b
  9715  002B8A  B0D8               	btfsc	status,0,c
  9716  002B8C  2B88               	incf	(___awmod@dividend+1)& (0+255),f,b
  9717                           
  9718                           ; BSR set to: 0
  9719  002B8E  0E01               	movlw	1
  9720  002B90  6F8C               	movwf	___awmod@sign& (0+255),b
  9721  002B92                     l7155:
  9722                           
  9723                           ; BSR set to: 0
  9724  002B92  518A               	movf	(___awmod@divisor+1)& (0+255),w,b
  9725  002B94  0A80               	xorlw	128
  9726  002B96  6EF3               	movwf	prodl,c
  9727  002B98  0E80               	movlw	128
  9728  002B9A  5CF3               	subwf	prodl,w,c
  9729  002B9C  0E00               	movlw	0
  9730  002B9E  B4D8               	btfsc	status,2,c
  9731  002BA0  5D89               	subwf	___awmod@divisor& (0+255),w,b
  9732  002BA2  E204               	bc	l7159
  9733                           
  9734                           ; BSR set to: 0
  9735  002BA4  6D89               	negf	___awmod@divisor& (0+255),b
  9736  002BA6  1F8A               	comf	(___awmod@divisor+1)& (0+255),f,b
  9737  002BA8  B0D8               	btfsc	status,0,c
  9738  002BAA  2B8A               	incf	(___awmod@divisor+1)& (0+255),f,b
  9739  002BAC                     l7159:
  9740                           
  9741                           ; BSR set to: 0
  9742  002BAC  518A               	movf	(___awmod@divisor+1)& (0+255),w,b
  9743  002BAE  1189               	iorwf	___awmod@divisor& (0+255),w,b
  9744  002BB0  E017               	bz	l7175
  9745                           
  9746                           ; BSR set to: 0
  9747  002BB2  0E01               	movlw	1
  9748  002BB4  6F8B               	movwf	___awmod@counter& (0+255),b
  9749  002BB6  D004               	goto	l7165
  9750  002BB8                     l7163:
  9751                           
  9752                           ; BSR set to: 0
  9753  002BB8  90D8               	bcf	status,0,c
  9754  002BBA  3789               	rlcf	___awmod@divisor& (0+255),f,b
  9755  002BBC  378A               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  9756  002BBE  2B8B               	incf	___awmod@counter& (0+255),f,b
  9757  002BC0                     l7165:
  9758                           
  9759                           ; BSR set to: 0
  9760  002BC0  AF8A               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9761  002BC2  D7FA               	goto	l7163
  9762  002BC4                     l7167:
  9763                           
  9764                           ; BSR set to: 0
  9765  002BC4  5189               	movf	___awmod@divisor& (0+255),w,b
  9766  002BC6  5D87               	subwf	___awmod@dividend& (0+255),w,b
  9767  002BC8  518A               	movf	(___awmod@divisor+1)& (0+255),w,b
  9768  002BCA  5988               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9769  002BCC  E304               	bnc	l7171
  9770                           
  9771                           ; BSR set to: 0
  9772  002BCE  5189               	movf	___awmod@divisor& (0+255),w,b
  9773  002BD0  5F87               	subwf	___awmod@dividend& (0+255),f,b
  9774  002BD2  518A               	movf	(___awmod@divisor+1)& (0+255),w,b
  9775  002BD4  5B88               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9776  002BD6                     l7171:
  9777                           
  9778                           ; BSR set to: 0
  9779  002BD6  90D8               	bcf	status,0,c
  9780  002BD8  338A               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9781  002BDA  3389               	rrcf	___awmod@divisor& (0+255),f,b
  9782                           
  9783                           ; BSR set to: 0
  9784  002BDC  2F8B               	decfsz	___awmod@counter& (0+255),f,b
  9785  002BDE  D7F2               	goto	l7167
  9786  002BE0                     l7175:
  9787                           
  9788                           ; BSR set to: 0
  9789  002BE0  518C               	movf	___awmod@sign& (0+255),w,b
  9790  002BE2  E004               	bz	l7179
  9791                           
  9792                           ; BSR set to: 0
  9793  002BE4  6D87               	negf	___awmod@dividend& (0+255),b
  9794  002BE6  1F88               	comf	(___awmod@dividend+1)& (0+255),f,b
  9795  002BE8  B0D8               	btfsc	status,0,c
  9796  002BEA  2B88               	incf	(___awmod@dividend+1)& (0+255),f,b
  9797  002BEC                     l7179:
  9798                           
  9799                           ; BSR set to: 0
  9800  002BEC  C087  F087         	movff	___awmod@dividend,?___awmod
  9801  002BF0  C088  F088         	movff	___awmod@dividend+1,?___awmod+1
  9802                           
  9803                           ; BSR set to: 0
  9804  002BF4  0012               	return	
  9805  002BF6                     __end_of___awmod:
  9806                           	opt stack 0
  9807                           tblptru	equ	0xFF8
  9808                           tblptrh	equ	0xFF7
  9809                           tblptrl	equ	0xFF6
  9810                           tablat	equ	0xFF5
  9811                           prodh	equ	0xFF4
  9812                           prodl	equ	0xFF3
  9813                           intcon	equ	0xFF2
  9814                           postinc0	equ	0xFEE
  9815                           wreg	equ	0xFE8
  9816                           indf1	equ	0xFE7
  9817                           postinc1	equ	0xFE6
  9818                           postdec1	equ	0xFE5
  9819                           fsr1h	equ	0xFE2
  9820                           fsr1l	equ	0xFE1
  9821                           indf2	equ	0xFDF
  9822                           postinc2	equ	0xFDE
  9823                           postdec2	equ	0xFDD
  9824                           fsr2h	equ	0xFDA
  9825                           fsr2l	equ	0xFD9
  9826                           status	equ	0xFD8
  9827                           
  9828 ;; *************** function ___awdiv *****************
  9829 ;; Defined at:
  9830 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  9831 ;; Parameters:    Size  Location     Type
  9832 ;;  dividend        2   45[BANK0 ] int 
  9833 ;;  divisor         2   47[BANK0 ] int 
  9834 ;; Auto vars:     Size  Location     Type
  9835 ;;  quotient        2   51[BANK0 ] int 
  9836 ;;  sign            1   50[BANK0 ] unsigned char 
  9837 ;;  counter         1   49[BANK0 ] unsigned char 
  9838 ;; Return value:  Size  Location     Type
  9839 ;;                  2   45[BANK0 ] int 
  9840 ;; Registers used:
  9841 ;;		wreg, status,2, status,0, prodl
  9842 ;; Tracked objects:
  9843 ;;		On entry : F/0
  9844 ;;		On exit  : F/0
  9845 ;;		Unchanged: 0/0
  9846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9847 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9848 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9850 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9851 ;;Total ram usage:        8 bytes
  9852 ;; Hardware stack levels used:    1
  9853 ;; Hardware stack levels required when called:    8
  9854 ;; This function calls:
  9855 ;;		Nothing
  9856 ;; This function is called by:
  9857 ;;		_scale
  9858 ;;		_sprintf
  9859 ;; This function uses a non-reentrant model
  9860 ;;
  9861                           
  9862                           	psect	text17
  9863  0029C6                     __ptext17:
  9864                           	opt stack 0
  9865  0029C6                     ___awdiv:
  9866                           	opt stack 19
  9867                           
  9868                           ; BSR set to: 0
  9869                           
  9870                           ; BSR set to: 0
  9871                           ;incstack = 0
  9872  0029C6  6B92               	clrf	___awdiv@sign& (0+255),b
  9873                           
  9874                           ; BSR set to: 0
  9875  0029C8  5190               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9876  0029CA  0A80               	xorlw	128
  9877  0029CC  6EF3               	movwf	prodl,c
  9878  0029CE  0E80               	movlw	128
  9879  0029D0  5CF3               	subwf	prodl,w,c
  9880  0029D2  0E00               	movlw	0
  9881  0029D4  B4D8               	btfsc	status,2,c
  9882  0029D6  5D8F               	subwf	___awdiv@divisor& (0+255),w,b
  9883  0029D8  E206               	bc	l7111
  9884                           
  9885                           ; BSR set to: 0
  9886  0029DA  6D8F               	negf	___awdiv@divisor& (0+255),b
  9887  0029DC  1F90               	comf	(___awdiv@divisor+1)& (0+255),f,b
  9888  0029DE  B0D8               	btfsc	status,0,c
  9889  0029E0  2B90               	incf	(___awdiv@divisor+1)& (0+255),f,b
  9890                           
  9891                           ; BSR set to: 0
  9892  0029E2  0E01               	movlw	1
  9893  0029E4  6F92               	movwf	___awdiv@sign& (0+255),b
  9894  0029E6                     l7111:
  9895                           
  9896                           ; BSR set to: 0
  9897  0029E6  518E               	movf	(___awdiv@dividend+1)& (0+255),w,b
  9898  0029E8  0A80               	xorlw	128
  9899  0029EA  6EF3               	movwf	prodl,c
  9900  0029EC  0E80               	movlw	128
  9901  0029EE  5CF3               	subwf	prodl,w,c
  9902  0029F0  0E00               	movlw	0
  9903  0029F2  B4D8               	btfsc	status,2,c
  9904  0029F4  5D8D               	subwf	___awdiv@dividend& (0+255),w,b
  9905  0029F6  E206               	bc	l7117
  9906                           
  9907                           ; BSR set to: 0
  9908  0029F8  6D8D               	negf	___awdiv@dividend& (0+255),b
  9909  0029FA  1F8E               	comf	(___awdiv@dividend+1)& (0+255),f,b
  9910  0029FC  B0D8               	btfsc	status,0,c
  9911  0029FE  2B8E               	incf	(___awdiv@dividend+1)& (0+255),f,b
  9912                           
  9913                           ; BSR set to: 0
  9914  002A00  0E01               	movlw	1
  9915  002A02  1B92               	xorwf	___awdiv@sign& (0+255),f,b
  9916  002A04                     l7117:
  9917                           
  9918                           ; BSR set to: 0
  9919  002A04  6B93               	clrf	___awdiv@quotient& (0+255),b
  9920  002A06  6B94               	clrf	(___awdiv@quotient+1)& (0+255),b
  9921                           
  9922                           ; BSR set to: 0
  9923  002A08  5190               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9924  002A0A  118F               	iorwf	___awdiv@divisor& (0+255),w,b
  9925  002A0C  E01B               	bz	l7139
  9926                           
  9927                           ; BSR set to: 0
  9928  002A0E  0E01               	movlw	1
  9929  002A10  6F91               	movwf	___awdiv@counter& (0+255),b
  9930  002A12  D004               	goto	l7125
  9931  002A14                     l7123:
  9932                           
  9933                           ; BSR set to: 0
  9934  002A14  90D8               	bcf	status,0,c
  9935  002A16  378F               	rlcf	___awdiv@divisor& (0+255),f,b
  9936  002A18  3790               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  9937  002A1A  2B91               	incf	___awdiv@counter& (0+255),f,b
  9938  002A1C                     l7125:
  9939                           
  9940                           ; BSR set to: 0
  9941  002A1C  AF90               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9942  002A1E  D7FA               	goto	l7123
  9943  002A20                     l7127:
  9944                           
  9945                           ; BSR set to: 0
  9946  002A20  90D8               	bcf	status,0,c
  9947  002A22  3793               	rlcf	___awdiv@quotient& (0+255),f,b
  9948  002A24  3794               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  9949                           
  9950                           ; BSR set to: 0
  9951  002A26  518F               	movf	___awdiv@divisor& (0+255),w,b
  9952  002A28  5D8D               	subwf	___awdiv@dividend& (0+255),w,b
  9953  002A2A  5190               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9954  002A2C  598E               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  9955  002A2E  E305               	bnc	l7135
  9956                           
  9957                           ; BSR set to: 0
  9958  002A30  518F               	movf	___awdiv@divisor& (0+255),w,b
  9959  002A32  5F8D               	subwf	___awdiv@dividend& (0+255),f,b
  9960  002A34  5190               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9961  002A36  5B8E               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  9962                           
  9963                           ; BSR set to: 0
  9964  002A38  8193               	bsf	___awdiv@quotient& (0+255),0,b
  9965  002A3A                     l7135:
  9966                           
  9967                           ; BSR set to: 0
  9968  002A3A  90D8               	bcf	status,0,c
  9969  002A3C  3390               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  9970  002A3E  338F               	rrcf	___awdiv@divisor& (0+255),f,b
  9971                           
  9972                           ; BSR set to: 0
  9973  002A40  2F91               	decfsz	___awdiv@counter& (0+255),f,b
  9974  002A42  D7EE               	goto	l7127
  9975  002A44                     l7139:
  9976                           
  9977                           ; BSR set to: 0
  9978  002A44  5192               	movf	___awdiv@sign& (0+255),w,b
  9979  002A46  E004               	bz	l7143
  9980                           
  9981                           ; BSR set to: 0
  9982  002A48  6D93               	negf	___awdiv@quotient& (0+255),b
  9983  002A4A  1F94               	comf	(___awdiv@quotient+1)& (0+255),f,b
  9984  002A4C  B0D8               	btfsc	status,0,c
  9985  002A4E  2B94               	incf	(___awdiv@quotient+1)& (0+255),f,b
  9986  002A50                     l7143:
  9987                           
  9988                           ; BSR set to: 0
  9989  002A50  C093  F08D         	movff	___awdiv@quotient,?___awdiv
  9990  002A54  C094  F08E         	movff	___awdiv@quotient+1,?___awdiv+1
  9991                           
  9992                           ; BSR set to: 0
  9993  002A58  0012               	return	
  9994  002A5A                     __end_of___awdiv:
  9995                           	opt stack 0
  9996                           tblptru	equ	0xFF8
  9997                           tblptrh	equ	0xFF7
  9998                           tblptrl	equ	0xFF6
  9999                           tablat	equ	0xFF5
 10000                           prodh	equ	0xFF4
 10001                           prodl	equ	0xFF3
 10002                           intcon	equ	0xFF2
 10003                           postinc0	equ	0xFEE
 10004                           wreg	equ	0xFE8
 10005                           indf1	equ	0xFE7
 10006                           postinc1	equ	0xFE6
 10007                           postdec1	equ	0xFE5
 10008                           fsr1h	equ	0xFE2
 10009                           fsr1l	equ	0xFE1
 10010                           indf2	equ	0xFDF
 10011                           postinc2	equ	0xFDE
 10012                           postdec2	equ	0xFDD
 10013                           fsr2h	equ	0xFDA
 10014                           fsr2l	equ	0xFD9
 10015                           status	equ	0xFD8
 10016                           
 10017 ;; *************** function _isdigit *****************
 10018 ;; Defined at:
 10019 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\isdigit.c"
 10020 ;; Parameters:    Size  Location     Type
 10021 ;;  c               1    wreg     unsigned char 
 10022 ;; Auto vars:     Size  Location     Type
 10023 ;;  c               1   41[BANK0 ] unsigned char 
 10024 ;; Return value:  Size  Location     Type
 10025 ;;		None               void
 10026 ;; Registers used:
 10027 ;;		wreg, status,2, status,0
 10028 ;; Tracked objects:
 10029 ;;		On entry : F/1
 10030 ;;		On exit  : F/0
 10031 ;;		Unchanged: 0/0
 10032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10034 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10035 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10036 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10037 ;;Total ram usage:        3 bytes
 10038 ;; Hardware stack levels used:    1
 10039 ;; Hardware stack levels required when called:    8
 10040 ;; This function calls:
 10041 ;;		Nothing
 10042 ;; This function is called by:
 10043 ;;		_sprintf
 10044 ;; This function uses a non-reentrant model
 10045 ;;
 10046                           
 10047                           	psect	text18
 10048  0035FE                     __ptext18:
 10049                           	opt stack 0
 10050  0035FE                     _isdigit:
 10051                           	opt stack 20
 10052                           
 10053                           ; BSR set to: 0
 10054                           ;incstack = 0
 10055                           ;isdigit@c stored from wreg
 10056  0035FE  0100               	movlb	0	; () banked
 10057  003600  6F89               	movwf	isdigit@c& (0+255),b
 10058                           
 10059                           ; BSR set to: 0
 10060  003602  6B88               	clrf	_isdigit$2795& (0+255),b
 10061                           
 10062                           ; BSR set to: 0
 10063  003604  0E3A               	movlw	58
 10064  003606  5D89               	subwf	isdigit@c& (0+255),w,b
 10065  003608  E205               	bc	l7457
 10066                           
 10067                           ; BSR set to: 0
 10068  00360A  0E2F               	movlw	47
 10069  00360C  6589               	cpfsgt	isdigit@c& (0+255),b
 10070  00360E  D002               	goto	l7457
 10071                           
 10072                           ; BSR set to: 0
 10073  003610  0E01               	movlw	1
 10074  003612  6F88               	movwf	_isdigit$2795& (0+255),b
 10075  003614                     l7457:
 10076                           
 10077                           ; BSR set to: 0
 10078  003614  C088  F087         	movff	_isdigit$2795,??_isdigit
 10079  003618  3187               	rrcf	??_isdigit& (0+255),w,b
 10080                           
 10081                           ; BSR set to: 0
 10082  00361A  0012               	return	
 10083  00361C                     __end_of_isdigit:
 10084                           	opt stack 0
 10085                           tblptru	equ	0xFF8
 10086                           tblptrh	equ	0xFF7
 10087                           tblptrl	equ	0xFF6
 10088                           tablat	equ	0xFF5
 10089                           prodh	equ	0xFF4
 10090                           prodl	equ	0xFF3
 10091                           intcon	equ	0xFF2
 10092                           postinc0	equ	0xFEE
 10093                           wreg	equ	0xFE8
 10094                           indf1	equ	0xFE7
 10095                           postinc1	equ	0xFE6
 10096                           postdec1	equ	0xFE5
 10097                           fsr1h	equ	0xFE2
 10098                           fsr1l	equ	0xFE1
 10099                           indf2	equ	0xFDF
 10100                           postinc2	equ	0xFDE
 10101                           postdec2	equ	0xFDD
 10102                           fsr2h	equ	0xFDA
 10103                           fsr2l	equ	0xFD9
 10104                           status	equ	0xFD8
 10105                           
 10106 ;; *************** function _fround *****************
 10107 ;; Defined at:
 10108 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
 10109 ;; Parameters:    Size  Location     Type
 10110 ;;  prec            1    wreg     unsigned char 
 10111 ;; Auto vars:     Size  Location     Type
 10112 ;;  prec            1   89[BANK0 ] unsigned char 
 10113 ;; Return value:  Size  Location     Type
 10114 ;;                  4   73[BANK0 ] unsigned char 
 10115 ;; Registers used:
 10116 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10117 ;; Tracked objects:
 10118 ;;		On entry : F/2
 10119 ;;		On exit  : F/0
 10120 ;;		Unchanged: 0/0
 10121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10122 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10123 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10124 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10125 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10126 ;;Total ram usage:       17 bytes
 10127 ;; Hardware stack levels used:    1
 10128 ;; Hardware stack levels required when called:   10
 10129 ;; This function calls:
 10130 ;;		___flmul
 10131 ;;		___lbdiv
 10132 ;;		___lbmod
 10133 ;; This function is called by:
 10134 ;;		_sprintf
 10135 ;; This function uses a non-reentrant model
 10136 ;;
 10137                           
 10138                           	psect	text19
 10139  001748                     __ptext19:
 10140                           	opt stack 0
 10141  001748                     _fround:
 10142                           	opt stack 18
 10143                           
 10144                           ; BSR set to: 0
 10145                           ;incstack = 0
 10146                           ;fround@prec stored from wreg
 10147  001748  0100               	movlb	0	; () banked
 10148  00174A  6FB9               	movwf	fround@prec& (0+255),b
 10149                           
 10150                           ; BSR set to: 0
 10151                           ;doprnt.c: 413: if(prec>=110)
 10152  00174C  0E6D               	movlw	109
 10153  00174E  65B9               	cpfsgt	fround@prec& (0+255),b
 10154  001750  D065               	goto	l7399
 10155                           
 10156                           ; BSR set to: 0
 10157                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 10158  001752  0E0A               	movlw	10
 10159  001754  6F8B               	movwf	___lbdiv@divisor& (0+255),b
 10160  001756  0E64               	movlw	100
 10161  001758  6F87               	movwf	___lbmod@divisor& (0+255),b
 10162  00175A  51B9               	movf	fround@prec& (0+255),w,b
 10163  00175C  EC7C  F01A         	call	___lbmod
 10164  001760  ECF1  F019         	call	___lbdiv
 10165  001764  6FAD               	movwf	??_fround& (0+255),b
 10166  001766  6BAE               	clrf	(??_fround+1)& (0+255),b
 10167  001768  90D8               	bcf	status,0,c
 10168  00176A  37AD               	rlcf	??_fround& (0+255),f,b
 10169  00176C  37AE               	rlcf	(??_fround+1)& (0+255),f,b
 10170  00176E  90D8               	bcf	status,0,c
 10171  001770  37AD               	rlcf	??_fround& (0+255),f,b
 10172  001772  37AE               	rlcf	(??_fround+1)& (0+255),f,b
 10173  001774  0E24               	movlw	36
 10174  001776  27AD               	addwf	??_fround& (0+255),f,b
 10175  001778  0E00               	movlw	0
 10176  00177A  23AE               	addwfc	(??_fround+1)& (0+255),f,b
 10177  00177C  0E1B               	movlw	low __npowers_
 10178  00177E  25AD               	addwf	??_fround& (0+255),w,b
 10179  001780  6EF6               	movwf	tblptrl,c
 10180  001782  0EF4               	movlw	high __npowers_
 10181  001784  21AE               	addwfc	(??_fround+1)& (0+255),w,b
 10182  001786  EC1A  F007         	call	PL2	;call to abstracted procedure
 10183  00178A  0E64               	movlw	100
 10184  00178C  6F8B               	movwf	___lbdiv@divisor& (0+255),b
 10185  00178E  51B9               	movf	fround@prec& (0+255),w,b
 10186  001790  ECF1  F019         	call	___lbdiv
 10187  001794  D8A9               	call	PL80	;call to abstracted procedure
 10188  001796  0E48               	movlw	72
 10189  001798  D89E               	call	PL28	;call to abstracted procedure
 10190  00179A  EC28  F007         	call	PL4	;call to abstracted procedure
 10191  00179E  EC90  F010         	call	___flmul	;wreg free
 10192  0017A2  C096  F0B5         	movff	?___flmul,_fround$3204
 10193  0017A6  C097  F0B6         	movff	?___flmul+1,_fround$3204+1
 10194  0017AA  C098  F0B7         	movff	?___flmul+2,_fround$3204+2
 10195  0017AE  C099  F0B8         	movff	?___flmul+3,_fround$3204+3
 10196                           
 10197                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 10198  0017B2  0E0A               	movlw	10
 10199  0017B4  6F87               	movwf	___lbmod@divisor& (0+255),b
 10200  0017B6  51B9               	movf	fround@prec& (0+255),w,b
 10201  0017B8  EC7C  F01A         	call	___lbmod
 10202  0017BC  6FAD               	movwf	??_fround& (0+255),b
 10203  0017BE  6BAE               	clrf	(??_fround+1)& (0+255),b
 10204  0017C0  90D8               	bcf	status,0,c
 10205  0017C2  D87E               	call	PL18	;call to abstracted procedure
 10206  0017C4  EC1A  F007         	call	PL2	;call to abstracted procedure
 10207  0017C8  C0B5  F096         	movff	_fround$3204,___flmul@f1
 10208  0017CC  C0B6  F097         	movff	_fround$3204+1,___flmul@f1+1
 10209  0017D0  C0B7  F098         	movff	_fround$3204+2,___flmul@f1+2
 10210  0017D4  C0B8  F099         	movff	_fround$3204+3,___flmul@f1+3
 10211  0017D8  EC90  F010         	call	___flmul	;wreg free
 10212  0017DC  C096  F0B1         	movff	?___flmul,_fround$3205
 10213  0017E0  C097  F0B2         	movff	?___flmul+1,_fround$3205+1
 10214  0017E4  C098  F0B3         	movff	?___flmul+2,_fround$3205+2
 10215  0017E8  C099  F0B4         	movff	?___flmul+3,_fround$3205+3
 10216                           
 10217                           ; BSR set to: 0
 10218                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 10219  0017EC  C0B1  F096         	movff	_fround$3205,___flmul@f1
 10220  0017F0  C0B2  F097         	movff	_fround$3205+1,___flmul@f1+1
 10221  0017F4  C0B3  F098         	movff	_fround$3205+2,___flmul@f1+2
 10222  0017F8  C0B4  F099         	movff	_fround$3205+3,___flmul@f1+3
 10223  0017FC  6B9A               	clrf	___flmul@f2& (0+255),b
 10224  0017FE  6B9B               	clrf	(___flmul@f2+1)& (0+255),b
 10225  001800  6B9C               	clrf	(___flmul@f2+2)& (0+255),b
 10226  001802  0E3F               	movlw	63
 10227  001804  6F9D               	movwf	(___flmul@f2+3)& (0+255),b
 10228  001806  EC90  F010         	call	___flmul	;wreg free
 10229  00180A  C096  F0A9         	movff	?___flmul,?_fround
 10230  00180E  C097  F0AA         	movff	?___flmul+1,?_fround+1
 10231  001812  C098  F0AB         	movff	?___flmul+2,?_fround+2
 10232  001816  C099  F0AC         	movff	?___flmul+3,?_fround+3
 10233  00181A  0012               	return	
 10234  00181C                     l7399:
 10235                           
 10236                           ; BSR set to: 0
 10237                           ;doprnt.c: 415: else if(prec > 10)
 10238  00181C  0E0A               	movlw	10
 10239  00181E  65B9               	cpfsgt	fround@prec& (0+255),b
 10240  001820  D036               	goto	l7407
 10241                           
 10242                           ; BSR set to: 0
 10243                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 10244  001822  6F87               	movwf	___lbmod@divisor& (0+255),b
 10245  001824  51B9               	movf	fround@prec& (0+255),w,b
 10246  001826  EC7C  F01A         	call	___lbmod
 10247  00182A  6FAD               	movwf	??_fround& (0+255),b
 10248  00182C  6BAE               	clrf	(??_fround+1)& (0+255),b
 10249  00182E  90D8               	bcf	status,0,c
 10250  001830  D847               	call	PL18	;call to abstracted procedure
 10251  001832  EC1A  F007         	call	PL2	;call to abstracted procedure
 10252  001836  0E0A               	movlw	10
 10253  001838  6F8B               	movwf	___lbdiv@divisor& (0+255),b
 10254  00183A  51B9               	movf	fround@prec& (0+255),w,b
 10255  00183C  ECF1  F019         	call	___lbdiv
 10256  001840  D853               	call	PL80	;call to abstracted procedure
 10257  001842  0E24               	movlw	36
 10258  001844  D848               	call	PL28	;call to abstracted procedure
 10259  001846  EC28  F007         	call	PL4	;call to abstracted procedure
 10260  00184A  EC90  F010         	call	___flmul	;wreg free
 10261  00184E  C096  F0B5         	movff	?___flmul,_fround$3204
 10262  001852  C097  F0B6         	movff	?___flmul+1,_fround$3204+1
 10263  001856  C098  F0B7         	movff	?___flmul+2,_fround$3204+2
 10264  00185A  C099  F0B8         	movff	?___flmul+3,_fround$3204+3
 10265                           
 10266                           ; BSR set to: 0
 10267                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 10268  00185E  C0B5  F096         	movff	_fround$3204,___flmul@f1
 10269  001862  C0B6  F097         	movff	_fround$3204+1,___flmul@f1+1
 10270  001866  C0B7  F098         	movff	_fround$3204+2,___flmul@f1+2
 10271  00186A  C0B8  F099         	movff	_fround$3204+3,___flmul@f1+3
 10272  00186E  6B9A               	clrf	___flmul@f2& (0+255),b
 10273  001870  6B9B               	clrf	(___flmul@f2+1)& (0+255),b
 10274  001872  6B9C               	clrf	(___flmul@f2+2)& (0+255),b
 10275  001874  0E3F               	movlw	63
 10276  001876  6F9D               	movwf	(___flmul@f2+3)& (0+255),b
 10277  001878  EC90  F010         	call	___flmul	;wreg free
 10278  00187C  C096  F0A9         	movff	?___flmul,?_fround
 10279  001880  C097  F0AA         	movff	?___flmul+1,?_fround+1
 10280  001884  C098  F0AB         	movff	?___flmul+2,?_fround+2
 10281  001888  C099  F0AC         	movff	?___flmul+3,?_fround+3
 10282  00188C  0012               	return	
 10283  00188E                     l7407:
 10284                           
 10285                           ; BSR set to: 0
 10286                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 10287  00188E  51B9               	movf	fround@prec& (0+255),w,b
 10288  001890  0D04               	mullw	4
 10289  001892  0E1B               	movlw	low __npowers_
 10290  001894  24F3               	addwf	prodl,w,c
 10291  001896  6EF6               	movwf	tblptrl,c
 10292  001898  0EF4               	movlw	high __npowers_
 10293  00189A  20F4               	addwfc	prodh,w,c
 10294  00189C  EC28  F007         	call	PL4	;call to abstracted procedure
 10295  0018A0  6B9A               	clrf	___flmul@f2& (0+255),b
 10296  0018A2  6B9B               	clrf	(___flmul@f2+1)& (0+255),b
 10297  0018A4  6B9C               	clrf	(___flmul@f2+2)& (0+255),b
 10298  0018A6  0E3F               	movlw	63
 10299  0018A8  6F9D               	movwf	(___flmul@f2+3)& (0+255),b
 10300  0018AA  EC90  F010         	call	___flmul	;wreg free
 10301  0018AE  C096  F0A9         	movff	?___flmul,?_fround
 10302  0018B2  C097  F0AA         	movff	?___flmul+1,?_fround+1
 10303  0018B6  C098  F0AB         	movff	?___flmul+2,?_fround+2
 10304  0018BA  C099  F0AC         	movff	?___flmul+3,?_fround+3
 10305                           
 10306                           ; BSR set to: 0
 10307  0018BE  0012               	return	
 10308  0018C0                     __end_of_fround:
 10309                           	opt stack 0
 10310  0018C0                     PL18:
 10311                           	opt stack 18
 10312  0018C0  37AD               	rlcf	??_fround& (0+255),f,b
 10313  0018C2  37AE               	rlcf	(??_fround+1)& (0+255),f,b
 10314  0018C4  90D8               	bcf	status,0,c
 10315  0018C6  37AD               	rlcf	??_fround& (0+255),f,b
 10316  0018C8  37AE               	rlcf	(??_fround+1)& (0+255),f,b
 10317  0018CA  0E1B               	movlw	low __npowers_
 10318  0018CC  25AD               	addwf	??_fround& (0+255),w,b
 10319  0018CE  6EF6               	movwf	tblptrl,c
 10320  0018D0  0EF4               	movlw	high __npowers_
 10321  0018D2  21AE               	addwfc	(??_fround+1)& (0+255),w,b
 10322  0018D4  0012               	return	
 10323  0018D6                     __end_ofPL18:
 10324                           	opt stack 0
 10325  0018D6                     PL28:
 10326                           	opt stack 18
 10327  0018D6  27AF               	addwf	(??_fround+2)& (0+255),f,b
 10328  0018D8  0E00               	movlw	0
 10329  0018DA  23B0               	addwfc	(??_fround+3)& (0+255),f,b
 10330  0018DC  0E1B               	movlw	low __npowers_
 10331  0018DE  25AF               	addwf	(??_fround+2)& (0+255),w,b
 10332  0018E0  6EF6               	movwf	tblptrl,c
 10333  0018E2  0EF4               	movlw	high __npowers_
 10334  0018E4  21B0               	addwfc	(??_fround+3)& (0+255),w,b
 10335  0018E6  0012               	return	
 10336  0018E8                     __end_ofPL28:
 10337                           	opt stack 0
 10338  0018E8                     PL80:
 10339                           	opt stack 18
 10340  0018E8  6FAF               	movwf	(??_fround+2)& (0+255),b
 10341  0018EA  6BB0               	clrf	(??_fround+3)& (0+255),b
 10342  0018EC  90D8               	bcf	status,0,c
 10343  0018EE  37AF               	rlcf	(??_fround+2)& (0+255),f,b
 10344  0018F0  37B0               	rlcf	(??_fround+3)& (0+255),f,b
 10345  0018F2  90D8               	bcf	status,0,c
 10346  0018F4  37AF               	rlcf	(??_fround+2)& (0+255),f,b
 10347  0018F6  37B0               	rlcf	(??_fround+3)& (0+255),f,b
 10348  0018F8  0012               	return	
 10349  0018FA                     __end_ofPL80:
 10350                           	opt stack 0
 10351                           tblptru	equ	0xFF8
 10352                           tblptrh	equ	0xFF7
 10353                           tblptrl	equ	0xFF6
 10354                           tablat	equ	0xFF5
 10355                           prodh	equ	0xFF4
 10356                           prodl	equ	0xFF3
 10357                           intcon	equ	0xFF2
 10358                           postinc0	equ	0xFEE
 10359                           wreg	equ	0xFE8
 10360                           indf1	equ	0xFE7
 10361                           postinc1	equ	0xFE6
 10362                           postdec1	equ	0xFE5
 10363                           fsr1h	equ	0xFE2
 10364                           fsr1l	equ	0xFE1
 10365                           indf2	equ	0xFDF
 10366                           postinc2	equ	0xFDE
 10367                           postdec2	equ	0xFDD
 10368                           fsr2h	equ	0xFDA
 10369                           fsr2l	equ	0xFD9
 10370                           status	equ	0xFD8
 10371                           
 10372 ;; *************** function ___lbmod *****************
 10373 ;; Defined at:
 10374 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lbmod.c"
 10375 ;; Parameters:    Size  Location     Type
 10376 ;;  dividend        1    wreg     unsigned char 
 10377 ;;  divisor         1   39[BANK0 ] unsigned char 
 10378 ;; Auto vars:     Size  Location     Type
 10379 ;;  dividend        1   40[BANK0 ] unsigned char 
 10380 ;;  rem             1   42[BANK0 ] unsigned char 
 10381 ;;  counter         1   41[BANK0 ] unsigned char 
 10382 ;; Return value:  Size  Location     Type
 10383 ;;                  1    wreg      unsigned char 
 10384 ;; Registers used:
 10385 ;;		wreg, status,2, status,0
 10386 ;; Tracked objects:
 10387 ;;		On entry : F/0
 10388 ;;		On exit  : F/0
 10389 ;;		Unchanged: 0/0
 10390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10391 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10392 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10394 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10395 ;;Total ram usage:        4 bytes
 10396 ;; Hardware stack levels used:    1
 10397 ;; Hardware stack levels required when called:    8
 10398 ;; This function calls:
 10399 ;;		Nothing
 10400 ;; This function is called by:
 10401 ;;		_fround
 10402 ;; This function uses a non-reentrant model
 10403 ;;
 10404                           
 10405                           	psect	text20
 10406  0034F8                     __ptext20:
 10407                           	opt stack 0
 10408  0034F8                     ___lbmod:
 10409                           	opt stack 19
 10410                           
 10411                           ; BSR set to: 0
 10412                           ;incstack = 0
 10413                           ;___lbmod@dividend stored from wreg
 10414  0034F8  6F88               	movwf	___lbmod@dividend& (0+255),b
 10415                           
 10416                           ; BSR set to: 0
 10417  0034FA  0E08               	movlw	8
 10418  0034FC  6F89               	movwf	___lbmod@counter& (0+255),b
 10419                           
 10420                           ; BSR set to: 0
 10421  0034FE  6B8A               	clrf	___lbmod@rem& (0+255),b
 10422  003500                     l7213:
 10423                           
 10424                           ; BSR set to: 0
 10425  003500  90D8               	bcf	status,0,c
 10426  003502  3588               	rlcf	___lbmod@dividend& (0+255),w,b
 10427  003504  358A               	rlcf	___lbmod@rem& (0+255),w,b
 10428  003506  6F8A               	movwf	___lbmod@rem& (0+255),b
 10429                           
 10430                           ; BSR set to: 0
 10431  003508  90D8               	bcf	status,0,c
 10432  00350A  3788               	rlcf	___lbmod@dividend& (0+255),f,b
 10433                           
 10434                           ; BSR set to: 0
 10435  00350C  5187               	movf	___lbmod@divisor& (0+255),w,b
 10436  00350E  5D8A               	subwf	___lbmod@rem& (0+255),w,b
 10437  003510  E302               	bnc	l7221
 10438                           
 10439                           ; BSR set to: 0
 10440  003512  5187               	movf	___lbmod@divisor& (0+255),w,b
 10441  003514  5F8A               	subwf	___lbmod@rem& (0+255),f,b
 10442  003516                     l7221:
 10443                           
 10444                           ; BSR set to: 0
 10445  003516  2F89               	decfsz	___lbmod@counter& (0+255),f,b
 10446  003518  D7F3               	goto	l7213
 10447                           
 10448                           ; BSR set to: 0
 10449  00351A  518A               	movf	___lbmod@rem& (0+255),w,b
 10450                           
 10451                           ; BSR set to: 0
 10452  00351C  0012               	return	
 10453  00351E                     __end_of___lbmod:
 10454                           	opt stack 0
 10455                           tblptru	equ	0xFF8
 10456                           tblptrh	equ	0xFF7
 10457                           tblptrl	equ	0xFF6
 10458                           tablat	equ	0xFF5
 10459                           prodh	equ	0xFF4
 10460                           prodl	equ	0xFF3
 10461                           intcon	equ	0xFF2
 10462                           postinc0	equ	0xFEE
 10463                           wreg	equ	0xFE8
 10464                           indf1	equ	0xFE7
 10465                           postinc1	equ	0xFE6
 10466                           postdec1	equ	0xFE5
 10467                           fsr1h	equ	0xFE2
 10468                           fsr1l	equ	0xFE1
 10469                           indf2	equ	0xFDF
 10470                           postinc2	equ	0xFDE
 10471                           postdec2	equ	0xFDD
 10472                           fsr2h	equ	0xFDA
 10473                           fsr2l	equ	0xFD9
 10474                           status	equ	0xFD8
 10475                           
 10476 ;; *************** function ___lbdiv *****************
 10477 ;; Defined at:
 10478 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lbdiv.c"
 10479 ;; Parameters:    Size  Location     Type
 10480 ;;  dividend        1    wreg     unsigned char 
 10481 ;;  divisor         1   43[BANK0 ] unsigned char 
 10482 ;; Auto vars:     Size  Location     Type
 10483 ;;  dividend        1   44[BANK0 ] unsigned char 
 10484 ;;  quotient        1   46[BANK0 ] unsigned char 
 10485 ;;  counter         1   45[BANK0 ] unsigned char 
 10486 ;; Return value:  Size  Location     Type
 10487 ;;                  1    wreg      unsigned char 
 10488 ;; Registers used:
 10489 ;;		wreg, status,2, status,0
 10490 ;; Tracked objects:
 10491 ;;		On entry : F/0
 10492 ;;		On exit  : F/0
 10493 ;;		Unchanged: 0/0
 10494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10495 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10496 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10498 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10499 ;;Total ram usage:        4 bytes
 10500 ;; Hardware stack levels used:    1
 10501 ;; Hardware stack levels required when called:    8
 10502 ;; This function calls:
 10503 ;;		Nothing
 10504 ;; This function is called by:
 10505 ;;		_fround
 10506 ;; This function uses a non-reentrant model
 10507 ;;
 10508                           
 10509                           	psect	text21
 10510  0033E2                     __ptext21:
 10511                           	opt stack 0
 10512  0033E2                     ___lbdiv:
 10513                           	opt stack 19
 10514                           
 10515                           ; BSR set to: 0
 10516                           ;incstack = 0
 10517                           ;___lbdiv@dividend stored from wreg
 10518  0033E2  6F8C               	movwf	___lbdiv@dividend& (0+255),b
 10519                           
 10520                           ; BSR set to: 0
 10521  0033E4  6B8E               	clrf	___lbdiv@quotient& (0+255),b
 10522                           
 10523                           ; BSR set to: 0
 10524  0033E6  518B               	movf	___lbdiv@divisor& (0+255),w,b
 10525  0033E8  E014               	bz	l7205
 10526                           
 10527                           ; BSR set to: 0
 10528  0033EA  0E01               	movlw	1
 10529  0033EC  6F8D               	movwf	___lbdiv@counter& (0+255),b
 10530  0033EE  D003               	goto	l7193
 10531  0033F0                     l7189:
 10532                           
 10533                           ; BSR set to: 0
 10534  0033F0  90D8               	bcf	status,0,c
 10535  0033F2  378B               	rlcf	___lbdiv@divisor& (0+255),f,b
 10536                           
 10537                           ; BSR set to: 0
 10538  0033F4  2B8D               	incf	___lbdiv@counter& (0+255),f,b
 10539  0033F6                     l7193:
 10540                           
 10541                           ; BSR set to: 0
 10542  0033F6  AF8B               	btfss	___lbdiv@divisor& (0+255),7,b
 10543  0033F8  D7FB               	goto	l7189
 10544  0033FA                     l7195:
 10545                           
 10546                           ; BSR set to: 0
 10547  0033FA  90D8               	bcf	status,0,c
 10548  0033FC  378E               	rlcf	___lbdiv@quotient& (0+255),f,b
 10549  0033FE  518B               	movf	___lbdiv@divisor& (0+255),w,b
 10550  003400  5D8C               	subwf	___lbdiv@dividend& (0+255),w,b
 10551  003402  E303               	bnc	l7201
 10552                           
 10553                           ; BSR set to: 0
 10554  003404  518B               	movf	___lbdiv@divisor& (0+255),w,b
 10555  003406  5F8C               	subwf	___lbdiv@dividend& (0+255),f,b
 10556                           
 10557                           ; BSR set to: 0
 10558  003408  818E               	bsf	___lbdiv@quotient& (0+255),0,b
 10559  00340A                     l7201:
 10560                           
 10561                           ; BSR set to: 0
 10562  00340A  90D8               	bcf	status,0,c
 10563  00340C  338B               	rrcf	___lbdiv@divisor& (0+255),f,b
 10564                           
 10565                           ; BSR set to: 0
 10566  00340E  2F8D               	decfsz	___lbdiv@counter& (0+255),f,b
 10567  003410  D7F4               	goto	l7195
 10568  003412                     l7205:
 10569                           
 10570                           ; BSR set to: 0
 10571  003412  518E               	movf	___lbdiv@quotient& (0+255),w,b
 10572                           
 10573                           ; BSR set to: 0
 10574  003414  0012               	return	
 10575  003416                     __end_of___lbdiv:
 10576                           	opt stack 0
 10577                           tblptru	equ	0xFF8
 10578                           tblptrh	equ	0xFF7
 10579                           tblptrl	equ	0xFF6
 10580                           tablat	equ	0xFF5
 10581                           prodh	equ	0xFF4
 10582                           prodl	equ	0xFF3
 10583                           intcon	equ	0xFF2
 10584                           postinc0	equ	0xFEE
 10585                           wreg	equ	0xFE8
 10586                           indf1	equ	0xFE7
 10587                           postinc1	equ	0xFE6
 10588                           postdec1	equ	0xFE5
 10589                           fsr1h	equ	0xFE2
 10590                           fsr1l	equ	0xFE1
 10591                           indf2	equ	0xFDF
 10592                           postinc2	equ	0xFDE
 10593                           postdec2	equ	0xFDD
 10594                           fsr2h	equ	0xFDA
 10595                           fsr2l	equ	0xFD9
 10596                           status	equ	0xFD8
 10597                           
 10598 ;; *************** function ___flmul *****************
 10599 ;; Defined at:
 10600 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\flmul.c"
 10601 ;; Parameters:    Size  Location     Type
 10602 ;;  f1              4   54[BANK0 ] unsigned char 
 10603 ;;  f2              4   58[BANK0 ] unsigned char 
 10604 ;; Auto vars:     Size  Location     Type
 10605 ;;  f3_as_produc    4   67[BANK0 ] unsigned long 
 10606 ;;  sign            1   72[BANK0 ] unsigned char 
 10607 ;;  cntr            1   71[BANK0 ] unsigned char 
 10608 ;;  exp             1   66[BANK0 ] unsigned char 
 10609 ;; Return value:  Size  Location     Type
 10610 ;;                  4   54[BANK0 ] unsigned char 
 10611 ;; Registers used:
 10612 ;;		wreg, status,2, status,0, cstack
 10613 ;; Tracked objects:
 10614 ;;		On entry : F/0
 10615 ;;		On exit  : F/0
 10616 ;;		Unchanged: 0/0
 10617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10618 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10619 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10620 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10621 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10622 ;;Total ram usage:       19 bytes
 10623 ;; Hardware stack levels used:    1
 10624 ;; Hardware stack levels required when called:    9
 10625 ;; This function calls:
 10626 ;;		___flpack
 10627 ;; This function is called by:
 10628 ;;		_ds18b20_read
 10629 ;;		_fround
 10630 ;;		_scale
 10631 ;;		_sprintf
 10632 ;; This function uses a non-reentrant model
 10633 ;;
 10634                           
 10635                           	psect	text22
 10636  002120                     __ptext22:
 10637                           	opt stack 0
 10638  002120                     ___flmul:
 10639                           	opt stack 19
 10640                           
 10641                           ; BSR set to: 0
 10642                           
 10643                           ; BSR set to: 0
 10644                           ;incstack = 0
 10645  002120  C096  F09E         	movff	___flmul@f1,??___flmul
 10646  002124  C097  F09F         	movff	___flmul@f1+1,??___flmul+1
 10647  002128  C098  F0A0         	movff	___flmul@f1+2,??___flmul+2
 10648  00212C  C099  F0A1         	movff	___flmul@f1+3,??___flmul+3
 10649  002130  0E18               	movlw	24
 10650  002132  D001               	goto	u7400
 10651  002134                     u7405:
 10652  002134  D873               	call	PL124	;call to abstracted procedure
 10653  002136                     u7400:
 10654  002136  2EE8               	decfsz	wreg,f,c
 10655  002138  D7FD               	goto	u7405
 10656  00213A  519E               	movf	??___flmul& (0+255),w,b
 10657  00213C  6FA2               	movwf	___flmul@exp& (0+255),b
 10658  00213E  0100               	movlb	0	; () banked
 10659  002140  67A2               	tstfsz	___flmul@exp& (0+255),b
 10660  002142  D005               	goto	l7061
 10661                           
 10662                           ; BSR set to: 0
 10663  002144  6B96               	clrf	?___flmul& (0+255),b
 10664  002146  6B97               	clrf	(?___flmul+1)& (0+255),b
 10665  002148  6B98               	clrf	(?___flmul+2)& (0+255),b
 10666  00214A  6B99               	clrf	(?___flmul+3)& (0+255),b
 10667  00214C  0012               	return	
 10668  00214E                     l7061:
 10669                           
 10670                           ; BSR set to: 0
 10671  00214E  C09A  F09E         	movff	___flmul@f2,??___flmul
 10672  002152  C09B  F09F         	movff	___flmul@f2+1,??___flmul+1
 10673  002156  C09C  F0A0         	movff	___flmul@f2+2,??___flmul+2
 10674  00215A  C09D  F0A1         	movff	___flmul@f2+3,??___flmul+3
 10675  00215E  0E18               	movlw	24
 10676  002160  D001               	goto	u7420
 10677  002162                     u7425:
 10678  002162  D85C               	call	PL124	;call to abstracted procedure
 10679  002164                     u7420:
 10680  002164  2EE8               	decfsz	wreg,f,c
 10681  002166  D7FD               	goto	u7425
 10682  002168  519E               	movf	??___flmul& (0+255),w,b
 10683  00216A  6FA8               	movwf	___flmul@sign& (0+255),b
 10684  00216C  0100               	movlb	0	; () banked
 10685  00216E  67A8               	tstfsz	___flmul@sign& (0+255),b
 10686  002170  D005               	goto	l7065
 10687                           
 10688                           ; BSR set to: 0
 10689  002172  6B96               	clrf	?___flmul& (0+255),b
 10690  002174  6B97               	clrf	(?___flmul+1)& (0+255),b
 10691  002176  6B98               	clrf	(?___flmul+2)& (0+255),b
 10692  002178  6B99               	clrf	(?___flmul+3)& (0+255),b
 10693  00217A  0012               	return	
 10694  00217C                     l7065:
 10695                           
 10696                           ; BSR set to: 0
 10697  00217C  51A8               	movf	___flmul@sign& (0+255),w,b
 10698  00217E  0F7B               	addlw	123
 10699  002180  27A2               	addwf	___flmul@exp& (0+255),f,b
 10700                           
 10701                           ; BSR set to: 0
 10702  002182  C099  F0A8         	movff	___flmul@f1+3,___flmul@sign
 10703  002186  519D               	movf	(___flmul@f2+3)& (0+255),w,b
 10704  002188  1BA8               	xorwf	___flmul@sign& (0+255),f,b
 10705  00218A  0E80               	movlw	128
 10706  00218C  17A8               	andwf	___flmul@sign& (0+255),f,b
 10707                           
 10708                           ; BSR set to: 0
 10709  00218E  8F98               	bsf	(___flmul@f1+2)& (0+255),7,b
 10710                           
 10711                           ; BSR set to: 0
 10712  002190  8F9C               	bsf	(___flmul@f2+2)& (0+255),7,b
 10713  002192  6B9D               	clrf	(___flmul@f2+3)& (0+255),b
 10714                           
 10715                           ; BSR set to: 0
 10716  002194  6BA3               	clrf	___flmul@f3_as_product& (0+255),b
 10717  002196  6BA4               	clrf	(___flmul@f3_as_product+1)& (0+255),b
 10718  002198  6BA5               	clrf	(___flmul@f3_as_product+2)& (0+255),b
 10719  00219A  6BA6               	clrf	(___flmul@f3_as_product+3)& (0+255),b
 10720                           
 10721                           ; BSR set to: 0
 10722  00219C  0E07               	movlw	7
 10723  00219E  6FA7               	movwf	___flmul@cntr& (0+255),b
 10724  0021A0                     l7077:
 10725                           
 10726                           ; BSR set to: 0
 10727  0021A0  A196               	btfss	___flmul@f1& (0+255),0,b
 10728  0021A2  D002               	goto	l7081
 10729                           
 10730                           ; BSR set to: 0
 10731  0021A4  519A               	movf	___flmul@f2& (0+255),w,b
 10732  0021A6  D82B               	call	PL96	;call to abstracted procedure
 10733  0021A8                     l7081:
 10734                           
 10735                           ; BSR set to: 0
 10736                           
 10737                           ; BSR set to: 0
 10738  0021A8  D832               	call	PL116	;call to abstracted procedure
 10739  0021AA  379A               	rlcf	___flmul@f2& (0+255),f,b
 10740  0021AC  379B               	rlcf	(___flmul@f2+1)& (0+255),f,b
 10741  0021AE  379C               	rlcf	(___flmul@f2+2)& (0+255),f,b
 10742  0021B0  379D               	rlcf	(___flmul@f2+3)& (0+255),f,b
 10743                           
 10744                           ; BSR set to: 0
 10745  0021B2  2FA7               	decfsz	___flmul@cntr& (0+255),f,b
 10746  0021B4  D7F5               	goto	l7077
 10747                           
 10748                           ; BSR set to: 0
 10749  0021B6  0E11               	movlw	17
 10750  0021B8  6FA7               	movwf	___flmul@cntr& (0+255),b
 10751  0021BA                     l7089:
 10752                           
 10753                           ; BSR set to: 0
 10754  0021BA  A196               	btfss	___flmul@f1& (0+255),0,b
 10755  0021BC  D002               	goto	l7093
 10756                           
 10757                           ; BSR set to: 0
 10758  0021BE  519A               	movf	___flmul@f2& (0+255),w,b
 10759  0021C0  D81E               	call	PL96	;call to abstracted procedure
 10760  0021C2                     l7093:
 10761                           
 10762                           ; BSR set to: 0
 10763                           
 10764                           ; BSR set to: 0
 10765  0021C2  D825               	call	PL116	;call to abstracted procedure
 10766  0021C4  33A6               	rrcf	(___flmul@f3_as_product+3)& (0+255),f,b
 10767  0021C6  33A5               	rrcf	(___flmul@f3_as_product+2)& (0+255),f,b
 10768  0021C8  33A4               	rrcf	(___flmul@f3_as_product+1)& (0+255),f,b
 10769  0021CA  33A3               	rrcf	___flmul@f3_as_product& (0+255),f,b
 10770                           
 10771                           ; BSR set to: 0
 10772  0021CC  2FA7               	decfsz	___flmul@cntr& (0+255),f,b
 10773  0021CE  D7F5               	goto	l7089
 10774                           
 10775                           ; BSR set to: 0
 10776  0021D0  C0A3  F087         	movff	___flmul@f3_as_product,___flpack@arg
 10777  0021D4  C0A4  F088         	movff	___flmul@f3_as_product+1,___flpack@arg+1
 10778  0021D8  C0A5  F089         	movff	___flmul@f3_as_product+2,___flpack@arg+2
 10779  0021DC  C0A6  F08A         	movff	___flmul@f3_as_product+3,___flpack@arg+3
 10780  0021E0  C0A2  F08B         	movff	___flmul@exp,___flpack@exp
 10781  0021E4  C0A8  F08C         	movff	___flmul@sign,___flpack@sign
 10782  0021E8  EC46  F013         	call	___flpack	;wreg free
 10783  0021EC  C087  F096         	movff	?___flpack,?___flmul
 10784  0021F0  C088  F097         	movff	?___flpack+1,?___flmul+1
 10785  0021F4  C089  F098         	movff	?___flpack+2,?___flmul+2
 10786  0021F8  C08A  F099         	movff	?___flpack+3,?___flmul+3
 10787                           
 10788                           ; BSR set to: 0
 10789  0021FC  0012               	return	
 10790  0021FE                     __end_of___flmul:
 10791                           	opt stack 0
 10792  0021FE                     PL96:
 10793                           	opt stack 19
 10794  0021FE  27A3               	addwf	___flmul@f3_as_product& (0+255),f,b
 10795  002200  519B               	movf	(___flmul@f2+1)& (0+255),w,b
 10796  002202  23A4               	addwfc	(___flmul@f3_as_product+1)& (0+255),f,b
 10797  002204  519C               	movf	(___flmul@f2+2)& (0+255),w,b
 10798  002206  23A5               	addwfc	(___flmul@f3_as_product+2)& (0+255),f,b
 10799  002208  519D               	movf	(___flmul@f2+3)& (0+255),w,b
 10800  00220A  23A6               	addwfc	(___flmul@f3_as_product+3)& (0+255),f,b
 10801  00220C  0012               	return	
 10802  00220E                     __end_ofPL96:
 10803                           	opt stack 0
 10804  00220E                     PL116:
 10805                           	opt stack 19
 10806  00220E  90D8               	bcf	status,0,c
 10807  002210  3399               	rrcf	(___flmul@f1+3)& (0+255),f,b
 10808  002212  3398               	rrcf	(___flmul@f1+2)& (0+255),f,b
 10809  002214  3397               	rrcf	(___flmul@f1+1)& (0+255),f,b
 10810  002216  3396               	rrcf	___flmul@f1& (0+255),f,b
 10811  002218  90D8               	bcf	status,0,c
 10812  00221A  0012               	return	
 10813  00221C                     __end_ofPL116:
 10814                           	opt stack 0
 10815  00221C                     PL124:
 10816                           	opt stack 19
 10817  00221C  90D8               	bcf	status,0,c
 10818  00221E  33A1               	rrcf	(??___flmul+3)& (0+255),f,b
 10819  002220  33A0               	rrcf	(??___flmul+2)& (0+255),f,b
 10820  002222  339F               	rrcf	(??___flmul+1)& (0+255),f,b
 10821  002224  339E               	rrcf	??___flmul& (0+255),f,b
 10822  002226  0012               	return	
 10823  002228                     __end_ofPL124:
 10824                           	opt stack 0
 10825                           tblptru	equ	0xFF8
 10826                           tblptrh	equ	0xFF7
 10827                           tblptrl	equ	0xFF6
 10828                           tablat	equ	0xFF5
 10829                           prodh	equ	0xFF4
 10830                           prodl	equ	0xFF3
 10831                           intcon	equ	0xFF2
 10832                           postinc0	equ	0xFEE
 10833                           wreg	equ	0xFE8
 10834                           indf1	equ	0xFE7
 10835                           postinc1	equ	0xFE6
 10836                           postdec1	equ	0xFE5
 10837                           fsr1h	equ	0xFE2
 10838                           fsr1l	equ	0xFE1
 10839                           indf2	equ	0xFDF
 10840                           postinc2	equ	0xFDE
 10841                           postdec2	equ	0xFDD
 10842                           fsr2h	equ	0xFDA
 10843                           fsr2l	equ	0xFD9
 10844                           status	equ	0xFD8
 10845                           
 10846 ;; *************** function __tdiv_to_l_ *****************
 10847 ;; Defined at:
 10848 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\ftdivl.c"
 10849 ;; Parameters:    Size  Location     Type
 10850 ;;  f1              4   39[BANK0 ] float 
 10851 ;;  f2              4   43[BANK0 ] float 
 10852 ;; Auto vars:     Size  Location     Type
 10853 ;;  quot            4   50[BANK0 ] unsigned long 
 10854 ;;  exp1            1   55[BANK0 ] unsigned char 
 10855 ;;  cntr            1   54[BANK0 ] unsigned char 
 10856 ;; Return value:  Size  Location     Type
 10857 ;;                  4   39[BANK0 ] unsigned long 
 10858 ;; Registers used:
 10859 ;;		wreg, status,2, status,0
 10860 ;; Tracked objects:
 10861 ;;		On entry : 0/0
 10862 ;;		On exit  : F/0
 10863 ;;		Unchanged: 0/0
 10864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10865 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10866 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10867 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10868 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10869 ;;Total ram usage:       17 bytes
 10870 ;; Hardware stack levels used:    1
 10871 ;; Hardware stack levels required when called:    8
 10872 ;; This function calls:
 10873 ;;		Nothing
 10874 ;; This function is called by:
 10875 ;;		_sprintf
 10876 ;; This function uses a non-reentrant model
 10877 ;;
 10878                           
 10879                           	psect	text23
 10880  00241E                     __ptext23:
 10881                           	opt stack 0
 10882  00241E                     __tdiv_to_l_:
 10883                           	opt stack 20
 10884                           
 10885                           ; BSR set to: 0
 10886                           ;incstack = 0
 10887  00241E  0100               	movlb	0	; () banked
 10888  002420  C089  F08F         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 10889  002424  6B90               	clrf	(??__tdiv_to_l_+1)& (0+255),b
 10890  002426  6B91               	clrf	(??__tdiv_to_l_+2)& (0+255),b
 10891  002428  3588               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
 10892  00242A  378F               	rlcf	??__tdiv_to_l_& (0+255),f,b
 10893  00242C  E301               	bnc	u8051
 10894  00242E  8190               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
 10895  002430                     u8051:
 10896  002430  518F               	movf	??__tdiv_to_l_& (0+255),w,b
 10897  002432  6F97               	movwf	__tdiv_to_l_@exp1& (0+255),b
 10898  002434  0100               	movlb	0	; () banked
 10899  002436  6797               	tstfsz	__tdiv_to_l_@exp1& (0+255),b
 10900  002438  D005               	goto	l7465
 10901  00243A                     l7463:
 10902                           
 10903                           ; BSR set to: 0
 10904  00243A  6B87               	clrf	?__tdiv_to_l_& (0+255),b
 10905  00243C  6B88               	clrf	(?__tdiv_to_l_+1)& (0+255),b
 10906  00243E  6B89               	clrf	(?__tdiv_to_l_+2)& (0+255),b
 10907  002440  6B8A               	clrf	(?__tdiv_to_l_+3)& (0+255),b
 10908  002442  0012               	return	
 10909  002444                     l7465:
 10910                           
 10911                           ; BSR set to: 0
 10912  002444  C08D  F08F         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 10913  002448  6B90               	clrf	(??__tdiv_to_l_+1)& (0+255),b
 10914  00244A  6B91               	clrf	(??__tdiv_to_l_+2)& (0+255),b
 10915  00244C  358C               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
 10916  00244E  378F               	rlcf	??__tdiv_to_l_& (0+255),f,b
 10917  002450  E301               	bnc	u8071
 10918  002452  8190               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
 10919  002454                     u8071:
 10920  002454  518F               	movf	??__tdiv_to_l_& (0+255),w,b
 10921  002456  6F96               	movwf	__tdiv_to_l_@cntr& (0+255),b
 10922  002458  0100               	movlb	0	; () banked
 10923  00245A  6796               	tstfsz	__tdiv_to_l_@cntr& (0+255),b
 10924  00245C  D001               	goto	l7469
 10925  00245E  D7ED               	goto	l7463
 10926  002460                     l7469:
 10927                           
 10928                           ; BSR set to: 0
 10929  002460  8F88               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
 10930                           
 10931                           ; BSR set to: 0
 10932  002462  6B89               	clrf	(__tdiv_to_l_@f1+2)& (0+255),b
 10933  002464  8F8C               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
 10934                           
 10935                           ; BSR set to: 0
 10936  002466  6B8D               	clrf	(__tdiv_to_l_@f2+2)& (0+255),b
 10937                           
 10938                           ; BSR set to: 0
 10939  002468  6B92               	clrf	__tdiv_to_l_@quot& (0+255),b
 10940  00246A  6B93               	clrf	(__tdiv_to_l_@quot+1)& (0+255),b
 10941  00246C  6B94               	clrf	(__tdiv_to_l_@quot+2)& (0+255),b
 10942  00246E  6B95               	clrf	(__tdiv_to_l_@quot+3)& (0+255),b
 10943                           
 10944                           ; BSR set to: 0
 10945  002470  0E7F               	movlw	127
 10946  002472  5F97               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
 10947                           
 10948                           ; BSR set to: 0
 10949  002474  5196               	movf	__tdiv_to_l_@cntr& (0+255),w,b
 10950  002476  0F98               	addlw	152
 10951  002478  5F97               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
 10952                           
 10953                           ; BSR set to: 0
 10954  00247A  0E18               	movlw	24
 10955  00247C  6F96               	movwf	__tdiv_to_l_@cntr& (0+255),b
 10956  00247E                     l7483:
 10957                           
 10958                           ; BSR set to: 0
 10959  00247E  90D8               	bcf	status,0,c
 10960  002480  3792               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
 10961  002482  3793               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 10962  002484  3794               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 10963  002486  3795               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 10964                           
 10965                           ; BSR set to: 0
 10966  002488  518B               	movf	__tdiv_to_l_@f2& (0+255),w,b
 10967  00248A  5D87               	subwf	__tdiv_to_l_@f1& (0+255),w,b
 10968  00248C  518C               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
 10969  00248E  5988               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
 10970  002490  518D               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
 10971  002492  5989               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
 10972  002494  E307               	bnc	l1726
 10973                           
 10974                           ; BSR set to: 0
 10975  002496  518B               	movf	__tdiv_to_l_@f2& (0+255),w,b
 10976  002498  5F87               	subwf	__tdiv_to_l_@f1& (0+255),f,b
 10977  00249A  518C               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
 10978  00249C  5B88               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
 10979  00249E  518D               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
 10980  0024A0  5B89               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
 10981                           
 10982                           ; BSR set to: 0
 10983  0024A2  8192               	bsf	__tdiv_to_l_@quot& (0+255),0,b
 10984  0024A4                     l1726:
 10985                           
 10986                           ; BSR set to: 0
 10987  0024A4  90D8               	bcf	status,0,c
 10988  0024A6  3787               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
 10989  0024A8  3788               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
 10990  0024AA  3789               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
 10991                           
 10992                           ; BSR set to: 0
 10993  0024AC  2F96               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
 10994  0024AE  D7E7               	goto	l7483
 10995                           
 10996                           ; BSR set to: 0
 10997  0024B0  AF97               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
 10998  0024B2  D00F               	goto	l7501
 10999                           
 11000                           ; BSR set to: 0
 11001  0024B4  5197               	movf	__tdiv_to_l_@exp1& (0+255),w,b
 11002  0024B6  0A80               	xorlw	128
 11003  0024B8  6F8F               	movwf	??__tdiv_to_l_& (0+255),b
 11004  0024BA  0EE9               	movlw	233
 11005  0024BC  0A80               	xorlw	128
 11006  0024BE  5D8F               	subwf	??__tdiv_to_l_& (0+255),w,b
 11007  0024C0  E3BC               	bnc	l7463
 11008  0024C2                     l7497:
 11009                           
 11010                           ; BSR set to: 0
 11011  0024C2  90D8               	bcf	status,0,c
 11012  0024C4  3395               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 11013  0024C6  3394               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 11014  0024C8  3393               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 11015  0024CA  3392               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
 11016                           
 11017                           ; BSR set to: 0
 11018  0024CC  3F97               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
 11019  0024CE  D7F9               	goto	l7497
 11020  0024D0  D00C               	goto	l1732
 11021  0024D2                     l7501:
 11022                           
 11023                           ; BSR set to: 0
 11024  0024D2  0E17               	movlw	23
 11025  0024D4  6597               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
 11026  0024D6  D007               	goto	l7507
 11027  0024D8  D7B0               	goto	l7463
 11028  0024DA                     l7505:
 11029                           
 11030                           ; BSR set to: 0
 11031  0024DA  90D8               	bcf	status,0,c
 11032  0024DC  3792               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
 11033  0024DE  3793               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 11034  0024E0  3794               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 11035  0024E2  3795               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 11036  0024E4  0797               	decf	__tdiv_to_l_@exp1& (0+255),f,b
 11037  0024E6                     l7507:
 11038                           
 11039                           ; BSR set to: 0
 11040  0024E6  6797               	tstfsz	__tdiv_to_l_@exp1& (0+255),b
 11041  0024E8  D7F8               	goto	l7505
 11042  0024EA                     l1732:
 11043                           
 11044                           ; BSR set to: 0
 11045  0024EA  C092  F087         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 11046  0024EE  C093  F088         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 11047  0024F2  C094  F089         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 11048  0024F6  C095  F08A         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 11049                           
 11050                           ; BSR set to: 0
 11051  0024FA  0012               	return	
 11052  0024FC                     __end_of__tdiv_to_l_:
 11053                           	opt stack 0
 11054                           tblptru	equ	0xFF8
 11055                           tblptrh	equ	0xFF7
 11056                           tblptrl	equ	0xFF6
 11057                           tablat	equ	0xFF5
 11058                           prodh	equ	0xFF4
 11059                           prodl	equ	0xFF3
 11060                           intcon	equ	0xFF2
 11061                           postinc0	equ	0xFEE
 11062                           wreg	equ	0xFE8
 11063                           indf1	equ	0xFE7
 11064                           postinc1	equ	0xFE6
 11065                           postdec1	equ	0xFE5
 11066                           fsr1h	equ	0xFE2
 11067                           fsr1l	equ	0xFE1
 11068                           indf2	equ	0xFDF
 11069                           postinc2	equ	0xFDE
 11070                           postdec2	equ	0xFDD
 11071                           fsr2h	equ	0xFDA
 11072                           fsr2l	equ	0xFD9
 11073                           status	equ	0xFD8
 11074                           
 11075 ;; *************** function __div_to_l_ *****************
 11076 ;; Defined at:
 11077 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fldivl.c"
 11078 ;; Parameters:    Size  Location     Type
 11079 ;;  f1              4   39[BANK0 ] unsigned long 
 11080 ;;  f2              4   43[BANK0 ] unsigned long 
 11081 ;; Auto vars:     Size  Location     Type
 11082 ;;  quot            4   51[BANK0 ] unsigned long 
 11083 ;;  exp1            1   56[BANK0 ] unsigned char 
 11084 ;;  cntr            1   55[BANK0 ] unsigned char 
 11085 ;; Return value:  Size  Location     Type
 11086 ;;                  4   39[BANK0 ] unsigned long 
 11087 ;; Registers used:
 11088 ;;		wreg, status,2, status,0
 11089 ;; Tracked objects:
 11090 ;;		On entry : F/0
 11091 ;;		On exit  : F/0
 11092 ;;		Unchanged: 0/0
 11093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11094 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11095 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11096 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11097 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11098 ;;Total ram usage:       18 bytes
 11099 ;; Hardware stack levels used:    1
 11100 ;; Hardware stack levels required when called:    8
 11101 ;; This function calls:
 11102 ;;		Nothing
 11103 ;; This function is called by:
 11104 ;;		_sprintf
 11105 ;; This function uses a non-reentrant model
 11106 ;;
 11107                           
 11108                           	psect	text24
 11109  002228                     __ptext24:
 11110                           	opt stack 0
 11111  002228                     __div_to_l_:
 11112                           	opt stack 20
 11113                           
 11114                           ; BSR set to: 0
 11115                           
 11116                           ; BSR set to: 0
 11117                           ;incstack = 0
 11118  002228  C087  F08F         	movff	__div_to_l_@f1,??__div_to_l_
 11119  00222C  C088  F090         	movff	__div_to_l_@f1+1,??__div_to_l_+1
 11120  002230  C089  F091         	movff	__div_to_l_@f1+2,??__div_to_l_+2
 11121  002234  C08A  F092         	movff	__div_to_l_@f1+3,??__div_to_l_+3
 11122  002238  0E18               	movlw	24
 11123  00223A  D001               	goto	u8140
 11124  00223C                     u8145:
 11125  00223C  D872               	call	PL128	;call to abstracted procedure
 11126  00223E                     u8140:
 11127  00223E  2EE8               	decfsz	wreg,f,c
 11128  002240  D7FD               	goto	u8145
 11129  002242  518F               	movf	??__div_to_l_& (0+255),w,b
 11130  002244  6F98               	movwf	__div_to_l_@exp1& (0+255),b
 11131  002246  0100               	movlb	0	; () banked
 11132  002248  6798               	tstfsz	__div_to_l_@exp1& (0+255),b
 11133  00224A  D005               	goto	l7513
 11134  00224C                     l7511:
 11135                           
 11136                           ; BSR set to: 0
 11137  00224C  6B87               	clrf	?__div_to_l_& (0+255),b
 11138  00224E  6B88               	clrf	(?__div_to_l_+1)& (0+255),b
 11139  002250  6B89               	clrf	(?__div_to_l_+2)& (0+255),b
 11140  002252  6B8A               	clrf	(?__div_to_l_+3)& (0+255),b
 11141  002254  0012               	return	
 11142  002256                     l7513:
 11143                           
 11144                           ; BSR set to: 0
 11145  002256  C08B  F08F         	movff	__div_to_l_@f2,??__div_to_l_
 11146  00225A  C08C  F090         	movff	__div_to_l_@f2+1,??__div_to_l_+1
 11147  00225E  C08D  F091         	movff	__div_to_l_@f2+2,??__div_to_l_+2
 11148  002262  C08E  F092         	movff	__div_to_l_@f2+3,??__div_to_l_+3
 11149  002266  0E18               	movlw	24
 11150  002268  D001               	goto	u8160
 11151  00226A                     u8165:
 11152  00226A  D85B               	call	PL128	;call to abstracted procedure
 11153  00226C                     u8160:
 11154  00226C  2EE8               	decfsz	wreg,f,c
 11155  00226E  D7FD               	goto	u8165
 11156  002270  518F               	movf	??__div_to_l_& (0+255),w,b
 11157  002272  6F97               	movwf	__div_to_l_@cntr& (0+255),b
 11158  002274  0100               	movlb	0	; () banked
 11159  002276  6797               	tstfsz	__div_to_l_@cntr& (0+255),b
 11160  002278  D001               	goto	l7517
 11161  00227A  D7E8               	goto	l7511
 11162  00227C                     l7517:
 11163                           
 11164                           ; BSR set to: 0
 11165  00227C  8F89               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
 11166                           
 11167                           ; BSR set to: 0
 11168  00227E  6B8A               	clrf	(__div_to_l_@f1+3)& (0+255),b
 11169                           
 11170                           ; BSR set to: 0
 11171  002280  8F8D               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
 11172  002282  6B8E               	clrf	(__div_to_l_@f2+3)& (0+255),b
 11173                           
 11174                           ; BSR set to: 0
 11175  002284  6B93               	clrf	__div_to_l_@quot& (0+255),b
 11176  002286  6B94               	clrf	(__div_to_l_@quot+1)& (0+255),b
 11177  002288  6B95               	clrf	(__div_to_l_@quot+2)& (0+255),b
 11178  00228A  6B96               	clrf	(__div_to_l_@quot+3)& (0+255),b
 11179  00228C  0E7F               	movlw	127
 11180  00228E  5F98               	subwf	__div_to_l_@exp1& (0+255),f,b
 11181  002290  5197               	movf	__div_to_l_@cntr& (0+255),w,b
 11182  002292  0FA0               	addlw	160
 11183  002294  5F98               	subwf	__div_to_l_@exp1& (0+255),f,b
 11184                           
 11185                           ; BSR set to: 0
 11186  002296  0E20               	movlw	32
 11187  002298  6F97               	movwf	__div_to_l_@cntr& (0+255),b
 11188  00229A                     l7527:
 11189                           
 11190                           ; BSR set to: 0
 11191  00229A  90D8               	bcf	status,0,c
 11192  00229C  3793               	rlcf	__div_to_l_@quot& (0+255),f,b
 11193  00229E  3794               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
 11194  0022A0  3795               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
 11195  0022A2  3796               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
 11196                           
 11197                           ; BSR set to: 0
 11198  0022A4  518B               	movf	__div_to_l_@f2& (0+255),w,b
 11199  0022A6  5D87               	subwf	__div_to_l_@f1& (0+255),w,b
 11200  0022A8  518C               	movf	(__div_to_l_@f2+1)& (0+255),w,b
 11201  0022AA  5988               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
 11202  0022AC  518D               	movf	(__div_to_l_@f2+2)& (0+255),w,b
 11203  0022AE  5989               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
 11204  0022B0  518E               	movf	(__div_to_l_@f2+3)& (0+255),w,b
 11205  0022B2  598A               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
 11206  0022B4  E309               	bnc	l7535
 11207                           
 11208                           ; BSR set to: 0
 11209  0022B6  518B               	movf	__div_to_l_@f2& (0+255),w,b
 11210  0022B8  5F87               	subwf	__div_to_l_@f1& (0+255),f,b
 11211  0022BA  518C               	movf	(__div_to_l_@f2+1)& (0+255),w,b
 11212  0022BC  5B88               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
 11213  0022BE  518D               	movf	(__div_to_l_@f2+2)& (0+255),w,b
 11214  0022C0  5B89               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
 11215  0022C2  518E               	movf	(__div_to_l_@f2+3)& (0+255),w,b
 11216  0022C4  5B8A               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
 11217                           
 11218                           ; BSR set to: 0
 11219  0022C6  8193               	bsf	__div_to_l_@quot& (0+255),0,b
 11220  0022C8                     l7535:
 11221                           
 11222                           ; BSR set to: 0
 11223  0022C8  90D8               	bcf	status,0,c
 11224  0022CA  3787               	rlcf	__div_to_l_@f1& (0+255),f,b
 11225  0022CC  3788               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
 11226  0022CE  3789               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
 11227  0022D0  378A               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
 11228                           
 11229                           ; BSR set to: 0
 11230  0022D2  2F97               	decfsz	__div_to_l_@cntr& (0+255),f,b
 11231  0022D4  D7E2               	goto	l7527
 11232                           
 11233                           ; BSR set to: 0
 11234  0022D6  AF98               	btfss	__div_to_l_@exp1& (0+255),7,b
 11235  0022D8  D00F               	goto	l7547
 11236                           
 11237                           ; BSR set to: 0
 11238  0022DA  5198               	movf	__div_to_l_@exp1& (0+255),w,b
 11239  0022DC  0A80               	xorlw	128
 11240  0022DE  6F8F               	movwf	??__div_to_l_& (0+255),b
 11241  0022E0  0EE1               	movlw	225
 11242  0022E2  0A80               	xorlw	128
 11243  0022E4  5D8F               	subwf	??__div_to_l_& (0+255),w,b
 11244  0022E6  E3B2               	bnc	l7511
 11245  0022E8                     l7543:
 11246                           
 11247                           ; BSR set to: 0
 11248  0022E8  90D8               	bcf	status,0,c
 11249  0022EA  3396               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
 11250  0022EC  3395               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
 11251  0022EE  3394               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
 11252  0022F0  3393               	rrcf	__div_to_l_@quot& (0+255),f,b
 11253                           
 11254                           ; BSR set to: 0
 11255  0022F2  3F98               	incfsz	__div_to_l_@exp1& (0+255),f,b
 11256  0022F4  D7F9               	goto	l7543
 11257  0022F6  D00C               	goto	l1614
 11258  0022F8                     l7547:
 11259                           
 11260                           ; BSR set to: 0
 11261  0022F8  0E1F               	movlw	31
 11262  0022FA  6598               	cpfsgt	__div_to_l_@exp1& (0+255),b
 11263  0022FC  D007               	goto	l7553
 11264  0022FE  D7A6               	goto	l7511
 11265  002300                     l7551:
 11266                           
 11267                           ; BSR set to: 0
 11268  002300  90D8               	bcf	status,0,c
 11269  002302  3793               	rlcf	__div_to_l_@quot& (0+255),f,b
 11270  002304  3794               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
 11271  002306  3795               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
 11272  002308  3796               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
 11273  00230A  0798               	decf	__div_to_l_@exp1& (0+255),f,b
 11274  00230C                     l7553:
 11275                           
 11276                           ; BSR set to: 0
 11277  00230C  6798               	tstfsz	__div_to_l_@exp1& (0+255),b
 11278  00230E  D7F8               	goto	l7551
 11279  002310                     l1614:
 11280                           
 11281                           ; BSR set to: 0
 11282  002310  C093  F087         	movff	__div_to_l_@quot,?__div_to_l_
 11283  002314  C094  F088         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 11284  002318  C095  F089         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 11285  00231C  C096  F08A         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 11286                           
 11287                           ; BSR set to: 0
 11288  002320  0012               	return	
 11289  002322                     __end_of__div_to_l_:
 11290                           	opt stack 0
 11291  002322                     PL128:
 11292                           	opt stack 20
 11293  002322  90D8               	bcf	status,0,c
 11294  002324  3392               	rrcf	(??__div_to_l_+3)& (0+255),f,b
 11295  002326  3391               	rrcf	(??__div_to_l_+2)& (0+255),f,b
 11296  002328  3390               	rrcf	(??__div_to_l_+1)& (0+255),f,b
 11297  00232A  338F               	rrcf	??__div_to_l_& (0+255),f,b
 11298  00232C  0012               	return	
 11299  00232E                     __end_ofPL128:
 11300                           	opt stack 0
 11301                           tblptru	equ	0xFF8
 11302                           tblptrh	equ	0xFF7
 11303                           tblptrl	equ	0xFF6
 11304                           tablat	equ	0xFF5
 11305                           prodh	equ	0xFF4
 11306                           prodl	equ	0xFF3
 11307                           intcon	equ	0xFF2
 11308                           postinc0	equ	0xFEE
 11309                           wreg	equ	0xFE8
 11310                           indf1	equ	0xFE7
 11311                           postinc1	equ	0xFE6
 11312                           postdec1	equ	0xFE5
 11313                           fsr1h	equ	0xFE2
 11314                           fsr1l	equ	0xFE1
 11315                           indf2	equ	0xFDF
 11316                           postinc2	equ	0xFDE
 11317                           postdec2	equ	0xFDD
 11318                           fsr2h	equ	0xFDA
 11319                           fsr2l	equ	0xFD9
 11320                           status	equ	0xFD8
 11321                           
 11322 ;; *************** function ___lltofl *****************
 11323 ;; Defined at:
 11324 ;;		line 30 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lltofl.c"
 11325 ;; Parameters:    Size  Location     Type
 11326 ;;  c               4   49[BANK0 ] unsigned long 
 11327 ;; Auto vars:     Size  Location     Type
 11328 ;;		None
 11329 ;; Return value:  Size  Location     Type
 11330 ;;                  4   49[BANK0 ] unsigned long 
 11331 ;; Registers used:
 11332 ;;		wreg, status,2, status,0, cstack
 11333 ;; Tracked objects:
 11334 ;;		On entry : F/0
 11335 ;;		On exit  : F/0
 11336 ;;		Unchanged: 0/0
 11337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11338 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11341 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11342 ;;Total ram usage:        4 bytes
 11343 ;; Hardware stack levels used:    1
 11344 ;; Hardware stack levels required when called:    9
 11345 ;; This function calls:
 11346 ;;		___flpack
 11347 ;; This function is called by:
 11348 ;;		_sprintf
 11349 ;; This function uses a non-reentrant model
 11350 ;;
 11351                           
 11352                           	psect	text25
 11353  003446                     __ptext25:
 11354                           	opt stack 0
 11355  003446                     ___lltofl:
 11356                           	opt stack 19
 11357                           
 11358                           ; BSR set to: 0
 11359                           
 11360                           ; BSR set to: 0
 11361                           ;incstack = 0
 11362  003446  C091  F087         	movff	___lltofl@c,___flpack@arg
 11363  00344A  C092  F088         	movff	___lltofl@c+1,___flpack@arg+1
 11364  00344E  C093  F089         	movff	___lltofl@c+2,___flpack@arg+2
 11365  003452  C094  F08A         	movff	___lltofl@c+3,___flpack@arg+3
 11366  003456  0E96               	movlw	150
 11367  003458  6F8B               	movwf	___flpack@exp& (0+255),b
 11368  00345A  0E00               	movlw	0
 11369  00345C  6B8C               	clrf	___flpack@sign& (0+255),b
 11370  00345E  EC46  F013         	call	___flpack	;wreg free
 11371  003462  C087  F091         	movff	?___flpack,?___lltofl
 11372  003466  C088  F092         	movff	?___flpack+1,?___lltofl+1
 11373  00346A  C089  F093         	movff	?___flpack+2,?___lltofl+2
 11374  00346E  C08A  F094         	movff	?___flpack+3,?___lltofl+3
 11375                           
 11376                           ; BSR set to: 0
 11377  003472  0012               	return	
 11378  003474                     __end_of___lltofl:
 11379                           	opt stack 0
 11380                           tblptru	equ	0xFF8
 11381                           tblptrh	equ	0xFF7
 11382                           tblptrl	equ	0xFF6
 11383                           tablat	equ	0xFF5
 11384                           prodh	equ	0xFF4
 11385                           prodl	equ	0xFF3
 11386                           intcon	equ	0xFF2
 11387                           postinc0	equ	0xFEE
 11388                           wreg	equ	0xFE8
 11389                           indf1	equ	0xFE7
 11390                           postinc1	equ	0xFE6
 11391                           postdec1	equ	0xFE5
 11392                           fsr1h	equ	0xFE2
 11393                           fsr1l	equ	0xFE1
 11394                           indf2	equ	0xFDF
 11395                           postinc2	equ	0xFDE
 11396                           postdec2	equ	0xFDD
 11397                           fsr2h	equ	0xFDA
 11398                           fsr2l	equ	0xFD9
 11399                           status	equ	0xFD8
 11400                           
 11401 ;; *************** function ___llmod *****************
 11402 ;; Defined at:
 11403 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\llmod.c"
 11404 ;; Parameters:    Size  Location     Type
 11405 ;;  dividend        4   39[BANK0 ] unsigned long 
 11406 ;;  divisor         4   43[BANK0 ] unsigned long 
 11407 ;; Auto vars:     Size  Location     Type
 11408 ;;  counter         1   47[BANK0 ] unsigned char 
 11409 ;; Return value:  Size  Location     Type
 11410 ;;                  4   39[BANK0 ] unsigned long 
 11411 ;; Registers used:
 11412 ;;		wreg, status,2, status,0
 11413 ;; Tracked objects:
 11414 ;;		On entry : F/0
 11415 ;;		On exit  : F/0
 11416 ;;		Unchanged: 0/0
 11417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11418 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11419 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11421 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11422 ;;Total ram usage:        9 bytes
 11423 ;; Hardware stack levels used:    1
 11424 ;; Hardware stack levels required when called:    8
 11425 ;; This function calls:
 11426 ;;		Nothing
 11427 ;; This function is called by:
 11428 ;;		_sprintf
 11429 ;; This function uses a non-reentrant model
 11430 ;;
 11431                           
 11432                           	psect	text26
 11433  002EAA                     __ptext26:
 11434                           	opt stack 0
 11435  002EAA                     ___llmod:
 11436                           	opt stack 20
 11437                           
 11438                           ; BSR set to: 0
 11439                           
 11440                           ; BSR set to: 0
 11441                           ;incstack = 0
 11442  002EAA  518E               	movf	(___llmod@divisor+3)& (0+255),w,b
 11443  002EAC  118B               	iorwf	___llmod@divisor& (0+255),w,b
 11444  002EAE  118C               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 11445  002EB0  118D               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 11446  002EB2  E023               	bz	l1821
 11447                           
 11448                           ; BSR set to: 0
 11449  002EB4  0E01               	movlw	1
 11450  002EB6  6F8F               	movwf	___llmod@counter& (0+255),b
 11451  002EB8  D006               	goto	l7659
 11452  002EBA                     l7657:
 11453                           
 11454                           ; BSR set to: 0
 11455  002EBA  90D8               	bcf	status,0,c
 11456  002EBC  378B               	rlcf	___llmod@divisor& (0+255),f,b
 11457  002EBE  378C               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 11458  002EC0  378D               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 11459  002EC2  378E               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 11460  002EC4  2B8F               	incf	___llmod@counter& (0+255),f,b
 11461  002EC6                     l7659:
 11462                           
 11463                           ; BSR set to: 0
 11464  002EC6  AF8E               	btfss	(___llmod@divisor+3)& (0+255),7,b
 11465  002EC8  D7F8               	goto	l7657
 11466  002ECA                     l7661:
 11467                           
 11468                           ; BSR set to: 0
 11469  002ECA  518B               	movf	___llmod@divisor& (0+255),w,b
 11470  002ECC  5D87               	subwf	___llmod@dividend& (0+255),w,b
 11471  002ECE  518C               	movf	(___llmod@divisor+1)& (0+255),w,b
 11472  002ED0  5988               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 11473  002ED2  518D               	movf	(___llmod@divisor+2)& (0+255),w,b
 11474  002ED4  5989               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 11475  002ED6  518E               	movf	(___llmod@divisor+3)& (0+255),w,b
 11476  002ED8  598A               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 11477  002EDA  E308               	bnc	l7665
 11478                           
 11479                           ; BSR set to: 0
 11480  002EDC  518B               	movf	___llmod@divisor& (0+255),w,b
 11481  002EDE  5F87               	subwf	___llmod@dividend& (0+255),f,b
 11482  002EE0  518C               	movf	(___llmod@divisor+1)& (0+255),w,b
 11483  002EE2  5B88               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 11484  002EE4  518D               	movf	(___llmod@divisor+2)& (0+255),w,b
 11485  002EE6  5B89               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 11486  002EE8  518E               	movf	(___llmod@divisor+3)& (0+255),w,b
 11487  002EEA  5B8A               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 11488  002EEC                     l7665:
 11489                           
 11490                           ; BSR set to: 0
 11491  002EEC  90D8               	bcf	status,0,c
 11492  002EEE  338E               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 11493  002EF0  338D               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 11494  002EF2  338C               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 11495  002EF4  338B               	rrcf	___llmod@divisor& (0+255),f,b
 11496                           
 11497                           ; BSR set to: 0
 11498  002EF6  2F8F               	decfsz	___llmod@counter& (0+255),f,b
 11499  002EF8  D7E8               	goto	l7661
 11500  002EFA                     l1821:
 11501                           
 11502                           ; BSR set to: 0
 11503  002EFA  C087  F087         	movff	___llmod@dividend,?___llmod
 11504  002EFE  C088  F088         	movff	___llmod@dividend+1,?___llmod+1
 11505  002F02  C089  F089         	movff	___llmod@dividend+2,?___llmod+2
 11506  002F06  C08A  F08A         	movff	___llmod@dividend+3,?___llmod+3
 11507                           
 11508                           ; BSR set to: 0
 11509  002F0A  0012               	return	
 11510  002F0C                     __end_of___llmod:
 11511                           	opt stack 0
 11512                           tblptru	equ	0xFF8
 11513                           tblptrh	equ	0xFF7
 11514                           tblptrl	equ	0xFF6
 11515                           tablat	equ	0xFF5
 11516                           prodh	equ	0xFF4
 11517                           prodl	equ	0xFF3
 11518                           intcon	equ	0xFF2
 11519                           postinc0	equ	0xFEE
 11520                           wreg	equ	0xFE8
 11521                           indf1	equ	0xFE7
 11522                           postinc1	equ	0xFE6
 11523                           postdec1	equ	0xFE5
 11524                           fsr1h	equ	0xFE2
 11525                           fsr1l	equ	0xFE1
 11526                           indf2	equ	0xFDF
 11527                           postinc2	equ	0xFDE
 11528                           postdec2	equ	0xFDD
 11529                           fsr2h	equ	0xFDA
 11530                           fsr2l	equ	0xFD9
 11531                           status	equ	0xFD8
 11532                           
 11533 ;; *************** function ___lldiv *****************
 11534 ;; Defined at:
 11535 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
 11536 ;; Parameters:    Size  Location     Type
 11537 ;;  dividend        4   39[BANK0 ] unsigned long 
 11538 ;;  divisor         4   43[BANK0 ] unsigned long 
 11539 ;; Auto vars:     Size  Location     Type
 11540 ;;  quotient        4   47[BANK0 ] unsigned long 
 11541 ;;  counter         1   51[BANK0 ] unsigned char 
 11542 ;; Return value:  Size  Location     Type
 11543 ;;                  4   39[BANK0 ] unsigned long 
 11544 ;; Registers used:
 11545 ;;		wreg, status,2, status,0
 11546 ;; Tracked objects:
 11547 ;;		On entry : F/0
 11548 ;;		On exit  : F/0
 11549 ;;		Unchanged: 0/0
 11550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11551 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11552 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11554 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11555 ;;Total ram usage:       13 bytes
 11556 ;; Hardware stack levels used:    1
 11557 ;; Hardware stack levels required when called:    8
 11558 ;; This function calls:
 11559 ;;		Nothing
 11560 ;; This function is called by:
 11561 ;;		_sprintf
 11562 ;; This function uses a non-reentrant model
 11563 ;;
 11564                           
 11565                           	psect	text27
 11566  002CF2                     __ptext27:
 11567                           	opt stack 0
 11568  002CF2                     ___lldiv:
 11569                           	opt stack 20
 11570                           
 11571                           ; BSR set to: 0
 11572                           
 11573                           ; BSR set to: 0
 11574                           ;incstack = 0
 11575  002CF2  6B8F               	clrf	___lldiv@quotient& (0+255),b
 11576  002CF4  6B90               	clrf	(___lldiv@quotient+1)& (0+255),b
 11577  002CF6  6B91               	clrf	(___lldiv@quotient+2)& (0+255),b
 11578  002CF8  6B92               	clrf	(___lldiv@quotient+3)& (0+255),b
 11579                           
 11580                           ; BSR set to: 0
 11581  002CFA  518E               	movf	(___lldiv@divisor+3)& (0+255),w,b
 11582  002CFC  118B               	iorwf	___lldiv@divisor& (0+255),w,b
 11583  002CFE  118C               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 11584  002D00  118D               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 11585  002D02  E029               	bz	l1811
 11586                           
 11587                           ; BSR set to: 0
 11588  002D04  0E01               	movlw	1
 11589  002D06  6F93               	movwf	___lldiv@counter& (0+255),b
 11590  002D08  D006               	goto	l7639
 11591  002D0A                     l7637:
 11592                           
 11593                           ; BSR set to: 0
 11594  002D0A  90D8               	bcf	status,0,c
 11595  002D0C  378B               	rlcf	___lldiv@divisor& (0+255),f,b
 11596  002D0E  378C               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 11597  002D10  378D               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 11598  002D12  378E               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 11599  002D14  2B93               	incf	___lldiv@counter& (0+255),f,b
 11600  002D16                     l7639:
 11601                           
 11602                           ; BSR set to: 0
 11603  002D16  AF8E               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 11604  002D18  D7F8               	goto	l7637
 11605  002D1A                     l7641:
 11606                           
 11607                           ; BSR set to: 0
 11608  002D1A  90D8               	bcf	status,0,c
 11609  002D1C  378F               	rlcf	___lldiv@quotient& (0+255),f,b
 11610  002D1E  3790               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 11611  002D20  3791               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 11612  002D22  3792               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 11613                           
 11614                           ; BSR set to: 0
 11615  002D24  518B               	movf	___lldiv@divisor& (0+255),w,b
 11616  002D26  5D87               	subwf	___lldiv@dividend& (0+255),w,b
 11617  002D28  518C               	movf	(___lldiv@divisor+1)& (0+255),w,b
 11618  002D2A  5988               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 11619  002D2C  518D               	movf	(___lldiv@divisor+2)& (0+255),w,b
 11620  002D2E  5989               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 11621  002D30  518E               	movf	(___lldiv@divisor+3)& (0+255),w,b
 11622  002D32  598A               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 11623  002D34  E309               	bnc	l7649
 11624                           
 11625                           ; BSR set to: 0
 11626  002D36  518B               	movf	___lldiv@divisor& (0+255),w,b
 11627  002D38  5F87               	subwf	___lldiv@dividend& (0+255),f,b
 11628  002D3A  518C               	movf	(___lldiv@divisor+1)& (0+255),w,b
 11629  002D3C  5B88               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 11630  002D3E  518D               	movf	(___lldiv@divisor+2)& (0+255),w,b
 11631  002D40  5B89               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 11632  002D42  518E               	movf	(___lldiv@divisor+3)& (0+255),w,b
 11633  002D44  5B8A               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 11634                           
 11635                           ; BSR set to: 0
 11636  002D46  818F               	bsf	___lldiv@quotient& (0+255),0,b
 11637  002D48                     l7649:
 11638                           
 11639                           ; BSR set to: 0
 11640  002D48  90D8               	bcf	status,0,c
 11641  002D4A  338E               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 11642  002D4C  338D               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 11643  002D4E  338C               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 11644  002D50  338B               	rrcf	___lldiv@divisor& (0+255),f,b
 11645                           
 11646                           ; BSR set to: 0
 11647  002D52  2F93               	decfsz	___lldiv@counter& (0+255),f,b
 11648  002D54  D7E2               	goto	l7641
 11649  002D56                     l1811:
 11650                           
 11651                           ; BSR set to: 0
 11652  002D56  C08F  F087         	movff	___lldiv@quotient,?___lldiv
 11653  002D5A  C090  F088         	movff	___lldiv@quotient+1,?___lldiv+1
 11654  002D5E  C091  F089         	movff	___lldiv@quotient+2,?___lldiv+2
 11655  002D62  C092  F08A         	movff	___lldiv@quotient+3,?___lldiv+3
 11656                           
 11657                           ; BSR set to: 0
 11658  002D66  0012               	return	
 11659  002D68                     __end_of___lldiv:
 11660                           	opt stack 0
 11661                           tblptru	equ	0xFF8
 11662                           tblptrh	equ	0xFF7
 11663                           tblptrl	equ	0xFF6
 11664                           tablat	equ	0xFF5
 11665                           prodh	equ	0xFF4
 11666                           prodl	equ	0xFF3
 11667                           intcon	equ	0xFF2
 11668                           postinc0	equ	0xFEE
 11669                           wreg	equ	0xFE8
 11670                           indf1	equ	0xFE7
 11671                           postinc1	equ	0xFE6
 11672                           postdec1	equ	0xFE5
 11673                           fsr1h	equ	0xFE2
 11674                           fsr1l	equ	0xFE1
 11675                           indf2	equ	0xFDF
 11676                           postinc2	equ	0xFDE
 11677                           postdec2	equ	0xFDD
 11678                           fsr2h	equ	0xFDA
 11679                           fsr2l	equ	0xFD9
 11680                           status	equ	0xFD8
 11681                           
 11682 ;; *************** function ___fltol *****************
 11683 ;; Defined at:
 11684 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fltol.c"
 11685 ;; Parameters:    Size  Location     Type
 11686 ;;  f1              4   82[BANK0 ] unsigned long 
 11687 ;; Auto vars:     Size  Location     Type
 11688 ;;  exp1            1   91[BANK0 ] unsigned char 
 11689 ;;  sign1           1   90[BANK0 ] unsigned char 
 11690 ;; Return value:  Size  Location     Type
 11691 ;;                  4   82[BANK0 ] long 
 11692 ;; Registers used:
 11693 ;;		wreg, status,2, status,0
 11694 ;; Tracked objects:
 11695 ;;		On entry : C/2
 11696 ;;		On exit  : F/0
 11697 ;;		Unchanged: 0/0
 11698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11699 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11700 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11701 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11702 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11703 ;;Total ram usage:       10 bytes
 11704 ;; Hardware stack levels used:    1
 11705 ;; Hardware stack levels required when called:    8
 11706 ;; This function calls:
 11707 ;;		Nothing
 11708 ;; This function is called by:
 11709 ;;		_sprintf
 11710 ;; This function uses a non-reentrant model
 11711 ;;
 11712                           
 11713                           	psect	text28
 11714  0025CA                     __ptext28:
 11715                           	opt stack 0
 11716  0025CA                     ___fltol:
 11717                           	opt stack 20
 11718                           
 11719                           ; BSR set to: 0
 11720                           ;incstack = 0
 11721  0025CA  0100               	movlb	0	; () banked
 11722  0025CC  C0B2  F0B6         	movff	___fltol@f1,??___fltol
 11723  0025D0  C0B3  F0B7         	movff	___fltol@f1+1,??___fltol+1
 11724  0025D4  C0B4  F0B8         	movff	___fltol@f1+2,??___fltol+2
 11725  0025D8  C0B5  F0B9         	movff	___fltol@f1+3,??___fltol+3
 11726  0025DC  0E18               	movlw	24
 11727  0025DE  D001               	goto	u8280
 11728  0025E0                     u8285:
 11729  0025E0  D84F               	call	PL126	;call to abstracted procedure
 11730  0025E2                     u8280:
 11731  0025E2  2EE8               	decfsz	wreg,f,c
 11732  0025E4  D7FD               	goto	u8285
 11733  0025E6  51B6               	movf	??___fltol& (0+255),w,b
 11734  0025E8  6FBB               	movwf	___fltol@exp1& (0+255),b
 11735  0025EA  0100               	movlb	0	; () banked
 11736  0025EC  67BB               	tstfsz	___fltol@exp1& (0+255),b
 11737  0025EE  D005               	goto	l7597
 11738  0025F0                     l7595:
 11739                           
 11740                           ; BSR set to: 0
 11741  0025F0  6BB2               	clrf	?___fltol& (0+255),b
 11742  0025F2  6BB3               	clrf	(?___fltol+1)& (0+255),b
 11743  0025F4  6BB4               	clrf	(?___fltol+2)& (0+255),b
 11744  0025F6  6BB5               	clrf	(?___fltol+3)& (0+255),b
 11745  0025F8  0012               	return	
 11746  0025FA                     l7597:
 11747                           
 11748                           ; BSR set to: 0
 11749  0025FA  C0B2  F0B6         	movff	___fltol@f1,??___fltol
 11750  0025FE  C0B3  F0B7         	movff	___fltol@f1+1,??___fltol+1
 11751  002602  C0B4  F0B8         	movff	___fltol@f1+2,??___fltol+2
 11752  002606  C0B5  F0B9         	movff	___fltol@f1+3,??___fltol+3
 11753  00260A  0E20               	movlw	32
 11754  00260C  D001               	goto	u8300
 11755  00260E                     u8305:
 11756  00260E  D838               	call	PL126	;call to abstracted procedure
 11757  002610                     u8300:
 11758  002610  2EE8               	decfsz	wreg,f,c
 11759  002612  D7FD               	goto	u8305
 11760  002614  51B6               	movf	??___fltol& (0+255),w,b
 11761  002616  6FBA               	movwf	___fltol@sign1& (0+255),b
 11762                           
 11763                           ; BSR set to: 0
 11764  002618  8FB4               	bsf	(___fltol@f1+2)& (0+255),7,b
 11765                           
 11766                           ; BSR set to: 0
 11767  00261A  6BB5               	clrf	(___fltol@f1+3)& (0+255),b
 11768                           
 11769                           ; BSR set to: 0
 11770  00261C  0E96               	movlw	150
 11771  00261E  5FBB               	subwf	___fltol@exp1& (0+255),f,b
 11772                           
 11773                           ; BSR set to: 0
 11774  002620  AFBB               	btfss	___fltol@exp1& (0+255),7,b
 11775  002622  D00F               	goto	l7615
 11776                           
 11777                           ; BSR set to: 0
 11778  002624  51BB               	movf	___fltol@exp1& (0+255),w,b
 11779  002626  0A80               	xorlw	128
 11780  002628  6FB6               	movwf	??___fltol& (0+255),b
 11781  00262A  0EE9               	movlw	233
 11782  00262C  0A80               	xorlw	128
 11783  00262E  5DB6               	subwf	??___fltol& (0+255),w,b
 11784  002630  E3DF               	bnc	l7595
 11785  002632                     l7611:
 11786                           
 11787                           ; BSR set to: 0
 11788  002632  90D8               	bcf	status,0,c
 11789  002634  33B5               	rrcf	(___fltol@f1+3)& (0+255),f,b
 11790  002636  33B4               	rrcf	(___fltol@f1+2)& (0+255),f,b
 11791  002638  33B3               	rrcf	(___fltol@f1+1)& (0+255),f,b
 11792  00263A  33B2               	rrcf	___fltol@f1& (0+255),f,b
 11793                           
 11794                           ; BSR set to: 0
 11795  00263C  3FBB               	incfsz	___fltol@exp1& (0+255),f,b
 11796  00263E  D7F9               	goto	l7611
 11797  002640  D00C               	goto	l7623
 11798  002642                     l7615:
 11799                           
 11800                           ; BSR set to: 0
 11801  002642  0E1F               	movlw	31
 11802  002644  65BB               	cpfsgt	___fltol@exp1& (0+255),b
 11803  002646  D007               	goto	l7621
 11804  002648  D7D3               	goto	l7595
 11805  00264A                     l7619:
 11806                           
 11807                           ; BSR set to: 0
 11808  00264A  90D8               	bcf	status,0,c
 11809  00264C  37B2               	rlcf	___fltol@f1& (0+255),f,b
 11810  00264E  37B3               	rlcf	(___fltol@f1+1)& (0+255),f,b
 11811  002650  37B4               	rlcf	(___fltol@f1+2)& (0+255),f,b
 11812  002652  37B5               	rlcf	(___fltol@f1+3)& (0+255),f,b
 11813  002654  07BB               	decf	___fltol@exp1& (0+255),f,b
 11814  002656                     l7621:
 11815                           
 11816                           ; BSR set to: 0
 11817  002656  67BB               	tstfsz	___fltol@exp1& (0+255),b
 11818  002658  D7F8               	goto	l7619
 11819  00265A                     l7623:
 11820                           
 11821                           ; BSR set to: 0
 11822  00265A  51BA               	movf	___fltol@sign1& (0+255),w,b
 11823  00265C  E008               	bz	l7627
 11824                           
 11825                           ; BSR set to: 0
 11826  00265E  1FB5               	comf	(___fltol@f1+3)& (0+255),f,b
 11827  002660  1FB4               	comf	(___fltol@f1+2)& (0+255),f,b
 11828  002662  1FB3               	comf	(___fltol@f1+1)& (0+255),f,b
 11829  002664  6DB2               	negf	___fltol@f1& (0+255),b
 11830  002666  0E00               	movlw	0
 11831  002668  23B3               	addwfc	(___fltol@f1+1)& (0+255),f,b
 11832  00266A  23B4               	addwfc	(___fltol@f1+2)& (0+255),f,b
 11833  00266C  23B5               	addwfc	(___fltol@f1+3)& (0+255),f,b
 11834  00266E                     l7627:
 11835                           
 11836                           ; BSR set to: 0
 11837  00266E  C0B2  F0B2         	movff	___fltol@f1,?___fltol
 11838  002672  C0B3  F0B3         	movff	___fltol@f1+1,?___fltol+1
 11839  002676  C0B4  F0B4         	movff	___fltol@f1+2,?___fltol+2
 11840  00267A  C0B5  F0B5         	movff	___fltol@f1+3,?___fltol+3
 11841                           
 11842                           ; BSR set to: 0
 11843  00267E  0012               	return	
 11844  002680                     __end_of___fltol:
 11845                           	opt stack 0
 11846  002680                     PL126:
 11847                           	opt stack 20
 11848  002680  90D8               	bcf	status,0,c
 11849  002682  33B9               	rrcf	(??___fltol+3)& (0+255),f,b
 11850  002684  33B8               	rrcf	(??___fltol+2)& (0+255),f,b
 11851  002686  33B7               	rrcf	(??___fltol+1)& (0+255),f,b
 11852  002688  33B6               	rrcf	??___fltol& (0+255),f,b
 11853  00268A  0012               	return	
 11854  00268C                     __end_ofPL126:
 11855                           	opt stack 0
 11856                           tblptru	equ	0xFF8
 11857                           tblptrh	equ	0xFF7
 11858                           tblptrl	equ	0xFF6
 11859                           tablat	equ	0xFF5
 11860                           prodh	equ	0xFF4
 11861                           prodl	equ	0xFF3
 11862                           intcon	equ	0xFF2
 11863                           postinc0	equ	0xFEE
 11864                           wreg	equ	0xFE8
 11865                           indf1	equ	0xFE7
 11866                           postinc1	equ	0xFE6
 11867                           postdec1	equ	0xFE5
 11868                           fsr1h	equ	0xFE2
 11869                           fsr1l	equ	0xFE1
 11870                           indf2	equ	0xFDF
 11871                           postinc2	equ	0xFDE
 11872                           postdec2	equ	0xFDD
 11873                           fsr2h	equ	0xFDA
 11874                           fsr2l	equ	0xFD9
 11875                           status	equ	0xFD8
 11876                           
 11877 ;; *************** function ___flsub *****************
 11878 ;; Defined at:
 11879 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\flsub.c"
 11880 ;; Parameters:    Size  Location     Type
 11881 ;;  f1              4    7[BANK1 ] long 
 11882 ;;  f2              4   11[BANK1 ] long 
 11883 ;; Auto vars:     Size  Location     Type
 11884 ;;		None
 11885 ;; Return value:  Size  Location     Type
 11886 ;;                  4    7[BANK1 ] long 
 11887 ;; Registers used:
 11888 ;;		wreg, status,2, status,0, cstack
 11889 ;; Tracked objects:
 11890 ;;		On entry : F/0
 11891 ;;		On exit  : E/0
 11892 ;;		Unchanged: 0/0
 11893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11894 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11897 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11898 ;;Total ram usage:        8 bytes
 11899 ;; Hardware stack levels used:    1
 11900 ;; Hardware stack levels required when called:   10
 11901 ;; This function calls:
 11902 ;;		___fladd
 11903 ;; This function is called by:
 11904 ;;		_sprintf
 11905 ;; This function uses a non-reentrant model
 11906 ;;
 11907                           
 11908                           	psect	text29
 11909  0033A6                     __ptext29:
 11910                           	opt stack 0
 11911  0033A6                     ___flsub:
 11912                           	opt stack 18
 11913                           
 11914                           ; BSR set to: 0
 11915                           
 11916                           ; BSR set to: 0
 11917                           ;incstack = 0
 11918  0033A6  0101               	movlb	1	; () banked
 11919  0033A8  0E80               	movlw	128
 11920  0033AA  1BD6               	xorwf	(___flsub@f2+3)& (0+255),f,b
 11921                           
 11922                           ; BSR set to: 1
 11923  0033AC  C1CF  F0BA         	movff	___flsub@f1,___fladd@f1
 11924  0033B0  C1D0  F0BB         	movff	___flsub@f1+1,___fladd@f1+1
 11925  0033B4  C1D1  F0BC         	movff	___flsub@f1+2,___fladd@f1+2
 11926  0033B8  C1D2  F0BD         	movff	___flsub@f1+3,___fladd@f1+3
 11927  0033BC  C1D3  F0BE         	movff	___flsub@f2,___fladd@f2
 11928  0033C0  C1D4  F0BF         	movff	___flsub@f2+1,___fladd@f2+1
 11929  0033C4  C1D5  F0C0         	movff	___flsub@f2+2,___fladd@f2+2
 11930  0033C8  C1D6  F0C1         	movff	___flsub@f2+3,___fladd@f2+3
 11931  0033CC  ECBE  F00A         	call	___fladd	;wreg free
 11932  0033D0  C0BA  F1CF         	movff	?___fladd,?___flsub
 11933  0033D4  C0BB  F1D0         	movff	?___fladd+1,?___flsub+1
 11934  0033D8  C0BC  F1D1         	movff	?___fladd+2,?___flsub+2
 11935  0033DC  C0BD  F1D2         	movff	?___fladd+3,?___flsub+3
 11936  0033E0  0012               	return	
 11937  0033E2                     __end_of___flsub:
 11938                           	opt stack 0
 11939                           tblptru	equ	0xFF8
 11940                           tblptrh	equ	0xFF7
 11941                           tblptrl	equ	0xFF6
 11942                           tablat	equ	0xFF5
 11943                           prodh	equ	0xFF4
 11944                           prodl	equ	0xFF3
 11945                           intcon	equ	0xFF2
 11946                           postinc0	equ	0xFEE
 11947                           wreg	equ	0xFE8
 11948                           indf1	equ	0xFE7
 11949                           postinc1	equ	0xFE6
 11950                           postdec1	equ	0xFE5
 11951                           fsr1h	equ	0xFE2
 11952                           fsr1l	equ	0xFE1
 11953                           indf2	equ	0xFDF
 11954                           postinc2	equ	0xFDE
 11955                           postdec2	equ	0xFDD
 11956                           fsr2h	equ	0xFDA
 11957                           fsr2l	equ	0xFD9
 11958                           status	equ	0xFD8
 11959                           
 11960 ;; *************** function ___fladd *****************
 11961 ;; Defined at:
 11962 ;;		line 88 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\fladd.c"
 11963 ;; Parameters:    Size  Location     Type
 11964 ;;  f1              4   90[BANK0 ] long 
 11965 ;;  f2              4   94[BANK0 ] long 
 11966 ;; Auto vars:     Size  Location     Type
 11967 ;;  exp1            1    6[BANK1 ] unsigned char 
 11968 ;;  exp2            1    5[BANK1 ] unsigned char 
 11969 ;;  sign            1    4[BANK1 ] unsigned char 
 11970 ;; Return value:  Size  Location     Type
 11971 ;;                  4   90[BANK0 ] unsigned char 
 11972 ;; Registers used:
 11973 ;;		wreg, status,2, status,0, cstack
 11974 ;; Tracked objects:
 11975 ;;		On entry : E/0
 11976 ;;		On exit  : E/0
 11977 ;;		Unchanged: 0/0
 11978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11979 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11980 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11981 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11982 ;;      Totals:         0       8       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11983 ;;Total ram usage:       15 bytes
 11984 ;; Hardware stack levels used:    1
 11985 ;; Hardware stack levels required when called:    9
 11986 ;; This function calls:
 11987 ;;		___flpack
 11988 ;; This function is called by:
 11989 ;;		_ds18b20_read
 11990 ;;		_sprintf
 11991 ;;		___flsub
 11992 ;; This function uses a non-reentrant model
 11993 ;;
 11994                           
 11995                           	psect	text30
 11996  00157C                     __ptext30:
 11997                           	opt stack 0
 11998  00157C                     ___fladd:
 11999                           	opt stack 19
 12000                           
 12001                           ;incstack = 0
 12002  00157C  0100               	movlb	0	; () banked
 12003  00157E  C0BA  F1C8         	movff	___fladd@f1,??___fladd
 12004  001582  C0BB  F1C9         	movff	___fladd@f1+1,??___fladd+1
 12005  001586  C0BC  F1CA         	movff	___fladd@f1+2,??___fladd+2
 12006  00158A  C0BD  F1CB         	movff	___fladd@f1+3,??___fladd+3
 12007  00158E  0E18               	movlw	24
 12008  001590  D001               	goto	u7190
 12009  001592                     u7195:
 12010  001592  D8D3               	call	PL118	;call to abstracted procedure
 12011  001594                     u7190:
 12012  001594  2EE8               	decfsz	wreg,f,c
 12013  001596  D7FD               	goto	u7195
 12014  001598  51C8               	movf	??___fladd& (0+255),w,b
 12015  00159A  6FCE               	movwf	___fladd@exp1& (0+255),b
 12016  00159C  0100               	movlb	0	; () banked
 12017  00159E  C0BE  F1C8         	movff	___fladd@f2,??___fladd
 12018  0015A2  C0BF  F1C9         	movff	___fladd@f2+1,??___fladd+1
 12019  0015A6  C0C0  F1CA         	movff	___fladd@f2+2,??___fladd+2
 12020  0015AA  C0C1  F1CB         	movff	___fladd@f2+3,??___fladd+3
 12021  0015AE  0E18               	movlw	24
 12022  0015B0  D001               	goto	u7200
 12023  0015B2                     u7205:
 12024  0015B2  D8C3               	call	PL118	;call to abstracted procedure
 12025  0015B4                     u7200:
 12026  0015B4  2EE8               	decfsz	wreg,f,c
 12027  0015B6  D7FD               	goto	u7205
 12028  0015B8  51C8               	movf	??___fladd& (0+255),w,b
 12029  0015BA  6FCD               	movwf	___fladd@exp2& (0+255),b
 12030                           
 12031                           ; BSR set to: 1
 12032  0015BC  51CE               	movf	___fladd@exp1& (0+255),w,b
 12033  0015BE  E009               	bz	l1565
 12034                           
 12035                           ; BSR set to: 1
 12036  0015C0  51CD               	movf	___fladd@exp2& (0+255),w,b
 12037  0015C2  5DCE               	subwf	___fladd@exp1& (0+255),w,b
 12038  0015C4  E20F               	bc	l6997
 12039                           
 12040                           ; BSR set to: 1
 12041  0015C6  51CE               	movf	___fladd@exp1& (0+255),w,b
 12042  0015C8  5DCD               	subwf	___fladd@exp2& (0+255),w,b
 12043  0015CA  6FC8               	movwf	??___fladd& (0+255),b
 12044  0015CC  0E21               	movlw	33
 12045  0015CE  5DC8               	subwf	??___fladd& (0+255),w,b
 12046  0015D0  E309               	bnc	l6997
 12047  0015D2                     l1565:
 12048                           
 12049                           ; BSR set to: 1
 12050  0015D2  C0BE  F0BA         	movff	___fladd@f2,?___fladd
 12051  0015D6  C0BF  F0BB         	movff	___fladd@f2+1,?___fladd+1
 12052  0015DA  C0C0  F0BC         	movff	___fladd@f2+2,?___fladd+2
 12053  0015DE  C0C1  F0BD         	movff	___fladd@f2+3,?___fladd+3
 12054  0015E2  0012               	return	
 12055  0015E4                     l6997:
 12056                           
 12057                           ; BSR set to: 1
 12058  0015E4  51CD               	movf	___fladd@exp2& (0+255),w,b
 12059  0015E6  E009               	bz	l1569
 12060                           
 12061                           ; BSR set to: 1
 12062  0015E8  51CE               	movf	___fladd@exp1& (0+255),w,b
 12063  0015EA  5DCD               	subwf	___fladd@exp2& (0+255),w,b
 12064  0015EC  E20F               	bc	l7003
 12065                           
 12066                           ; BSR set to: 1
 12067  0015EE  51CD               	movf	___fladd@exp2& (0+255),w,b
 12068  0015F0  5DCE               	subwf	___fladd@exp1& (0+255),w,b
 12069  0015F2  6FC8               	movwf	??___fladd& (0+255),b
 12070  0015F4  0E21               	movlw	33
 12071  0015F6  5DC8               	subwf	??___fladd& (0+255),w,b
 12072  0015F8  E309               	bnc	l7003
 12073  0015FA                     l1569:
 12074                           
 12075                           ; BSR set to: 1
 12076  0015FA  C0BA  F0BA         	movff	___fladd@f1,?___fladd
 12077  0015FE  C0BB  F0BB         	movff	___fladd@f1+1,?___fladd+1
 12078  001602  C0BC  F0BC         	movff	___fladd@f1+2,?___fladd+2
 12079  001606  C0BD  F0BD         	movff	___fladd@f1+3,?___fladd+3
 12080  00160A  0012               	return	
 12081  00160C                     l7003:
 12082                           
 12083                           ; BSR set to: 1
 12084  00160C  0E06               	movlw	6
 12085  00160E  6FCC               	movwf	___fladd@sign& (0+255),b
 12086                           
 12087                           ; BSR set to: 1
 12088  001610  0100               	movlb	0	; () banked
 12089  001612  AFBD               	btfss	(___fladd@f1+3)& (0+255),7,b
 12090  001614  D002               	goto	l7009
 12091                           
 12092                           ; BSR set to: 0
 12093  001616  0101               	movlb	1	; () banked
 12094  001618  8FCC               	bsf	___fladd@sign& (0+255),7,b
 12095  00161A                     l7009:
 12096  00161A  0100               	movlb	0	; () banked
 12097  00161C  AFC1               	btfss	(___fladd@f2+3)& (0+255),7,b
 12098  00161E  D002               	goto	l1571
 12099                           
 12100                           ; BSR set to: 0
 12101  001620  0101               	movlb	1	; () banked
 12102  001622  8DCC               	bsf	___fladd@sign& (0+255),6,b
 12103  001624                     l1571:
 12104  001624  0100               	movlb	0	; () banked
 12105  001626  8FBC               	bsf	(___fladd@f1+2)& (0+255),7,b
 12106                           
 12107                           ; BSR set to: 0
 12108  001628  6BBD               	clrf	(___fladd@f1+3)& (0+255),b
 12109                           
 12110                           ; BSR set to: 0
 12111  00162A  8FC0               	bsf	(___fladd@f2+2)& (0+255),7,b
 12112  00162C  6BC1               	clrf	(___fladd@f2+3)& (0+255),b
 12113  00162E  0101               	movlb	1	; () banked
 12114  001630  51CD               	movf	___fladd@exp2& (0+255),w,b
 12115  001632  5DCE               	subwf	___fladd@exp1& (0+255),w,b
 12116  001634  E21E               	bc	l7027
 12117  001636                     l7017:
 12118                           
 12119                           ; BSR set to: 1
 12120  001636  0100               	movlb	0	; () banked
 12121  001638  90D8               	bcf	status,0,c
 12122  00163A  37BE               	rlcf	___fladd@f2& (0+255),f,b
 12123  00163C  37BF               	rlcf	(___fladd@f2+1)& (0+255),f,b
 12124  00163E  37C0               	rlcf	(___fladd@f2+2)& (0+255),f,b
 12125  001640  37C1               	rlcf	(___fladd@f2+3)& (0+255),f,b
 12126  001642  0101               	movlb	1	; () banked
 12127  001644  07CD               	decf	___fladd@exp2& (0+255),f,b
 12128                           
 12129                           ; BSR set to: 1
 12130  001646  51CD               	movf	___fladd@exp2& (0+255),w,b
 12131  001648  19CE               	xorwf	___fladd@exp1& (0+255),w,b
 12132  00164A  E00F               	bz	l7025
 12133                           
 12134                           ; BSR set to: 1
 12135  00164C  07CC               	decf	___fladd@sign& (0+255),f,b
 12136  00164E  C1CC  F1C8         	movff	___fladd@sign,??___fladd
 12137  001652  0E07               	movlw	7
 12138  001654  17C8               	andwf	??___fladd& (0+255),f,b
 12139  001656  E009               	bz	l7025
 12140  001658  D7EE               	goto	l7017
 12141  00165A                     l7023:
 12142                           
 12143                           ; BSR set to: 1
 12144  00165A  0100               	movlb	0	; () banked
 12145  00165C  90D8               	bcf	status,0,c
 12146  00165E  33BD               	rrcf	(___fladd@f1+3)& (0+255),f,b
 12147  001660  33BC               	rrcf	(___fladd@f1+2)& (0+255),f,b
 12148  001662  33BB               	rrcf	(___fladd@f1+1)& (0+255),f,b
 12149  001664  33BA               	rrcf	___fladd@f1& (0+255),f,b
 12150  001666  0101               	movlb	1	; () banked
 12151  001668  2BCE               	incf	___fladd@exp1& (0+255),f,b
 12152  00166A                     l7025:
 12153                           
 12154                           ; BSR set to: 1
 12155  00166A  51CD               	movf	___fladd@exp2& (0+255),w,b
 12156  00166C  63CE               	cpfseq	___fladd@exp1& (0+255),b
 12157  00166E  D7F5               	goto	l7023
 12158  001670  D020               	goto	l1580
 12159  001672                     l7027:
 12160                           
 12161                           ; BSR set to: 1
 12162  001672  51CE               	movf	___fladd@exp1& (0+255),w,b
 12163  001674  5DCD               	subwf	___fladd@exp2& (0+255),w,b
 12164  001676  E21D               	bc	l1580
 12165  001678                     l7029:
 12166                           
 12167                           ; BSR set to: 1
 12168  001678  0100               	movlb	0	; () banked
 12169  00167A  90D8               	bcf	status,0,c
 12170  00167C  37BA               	rlcf	___fladd@f1& (0+255),f,b
 12171  00167E  37BB               	rlcf	(___fladd@f1+1)& (0+255),f,b
 12172  001680  37BC               	rlcf	(___fladd@f1+2)& (0+255),f,b
 12173  001682  37BD               	rlcf	(___fladd@f1+3)& (0+255),f,b
 12174  001684  0101               	movlb	1	; () banked
 12175  001686  07CE               	decf	___fladd@exp1& (0+255),f,b
 12176                           
 12177                           ; BSR set to: 1
 12178  001688  51CD               	movf	___fladd@exp2& (0+255),w,b
 12179  00168A  19CE               	xorwf	___fladd@exp1& (0+255),w,b
 12180  00168C  E00F               	bz	l7037
 12181                           
 12182                           ; BSR set to: 1
 12183  00168E  07CC               	decf	___fladd@sign& (0+255),f,b
 12184  001690  C1CC  F1C8         	movff	___fladd@sign,??___fladd
 12185  001694  0E07               	movlw	7
 12186  001696  17C8               	andwf	??___fladd& (0+255),f,b
 12187  001698  E009               	bz	l7037
 12188  00169A  D7EE               	goto	l7029
 12189  00169C                     l7035:
 12190                           
 12191                           ; BSR set to: 1
 12192  00169C  0100               	movlb	0	; () banked
 12193  00169E  90D8               	bcf	status,0,c
 12194  0016A0  33C1               	rrcf	(___fladd@f2+3)& (0+255),f,b
 12195  0016A2  33C0               	rrcf	(___fladd@f2+2)& (0+255),f,b
 12196  0016A4  33BF               	rrcf	(___fladd@f2+1)& (0+255),f,b
 12197  0016A6  33BE               	rrcf	___fladd@f2& (0+255),f,b
 12198  0016A8  0101               	movlb	1	; () banked
 12199  0016AA  2BCD               	incf	___fladd@exp2& (0+255),f,b
 12200  0016AC                     l7037:
 12201                           
 12202                           ; BSR set to: 1
 12203  0016AC  51CD               	movf	___fladd@exp2& (0+255),w,b
 12204  0016AE  63CE               	cpfseq	___fladd@exp1& (0+255),b
 12205  0016B0  D7F5               	goto	l7035
 12206  0016B2                     l1580:
 12207                           
 12208                           ; BSR set to: 1
 12209  0016B2  AFCC               	btfss	___fladd@sign& (0+255),7,b
 12210  0016B4  D00A               	goto	l7041
 12211                           
 12212                           ; BSR set to: 1
 12213  0016B6  0100               	movlb	0	; () banked
 12214  0016B8  1FBA               	comf	___fladd@f1& (0+255),f,b
 12215  0016BA  1FBB               	comf	(___fladd@f1+1)& (0+255),f,b
 12216  0016BC  1FBC               	comf	(___fladd@f1+2)& (0+255),f,b
 12217  0016BE  1FBD               	comf	(___fladd@f1+3)& (0+255),f,b
 12218  0016C0  2BBA               	incf	___fladd@f1& (0+255),f,b
 12219  0016C2  0E00               	movlw	0
 12220  0016C4  23BB               	addwfc	(___fladd@f1+1)& (0+255),f,b
 12221  0016C6  23BC               	addwfc	(___fladd@f1+2)& (0+255),f,b
 12222  0016C8  23BD               	addwfc	(___fladd@f1+3)& (0+255),f,b
 12223  0016CA                     l7041:
 12224  0016CA  0101               	movlb	1	; () banked
 12225  0016CC  ADCC               	btfss	___fladd@sign& (0+255),6,b
 12226  0016CE  D003               	goto	l7045
 12227                           
 12228                           ; BSR set to: 1
 12229  0016D0  0100               	movlb	0	; () banked
 12230  0016D2  1FBE               	comf	___fladd@f2& (0+255),f,b
 12231  0016D4  D829               	call	PL82	;call to abstracted procedure
 12232  0016D6                     l7045:
 12233  0016D6  0101               	movlb	1	; () banked
 12234  0016D8  6BCC               	clrf	___fladd@sign& (0+255),b
 12235  0016DA  0100               	movlb	0	; () banked
 12236  0016DC  51BA               	movf	___fladd@f1& (0+255),w,b
 12237  0016DE  27BE               	addwf	___fladd@f2& (0+255),f,b
 12238  0016E0  51BB               	movf	(___fladd@f1+1)& (0+255),w,b
 12239  0016E2  23BF               	addwfc	(___fladd@f2+1)& (0+255),f,b
 12240  0016E4  51BC               	movf	(___fladd@f1+2)& (0+255),w,b
 12241  0016E6  23C0               	addwfc	(___fladd@f2+2)& (0+255),f,b
 12242  0016E8  51BD               	movf	(___fladd@f1+3)& (0+255),w,b
 12243  0016EA  23C1               	addwfc	(___fladd@f2+3)& (0+255),f,b
 12244                           
 12245                           ; BSR set to: 0
 12246  0016EC  AFC1               	btfss	(___fladd@f2+3)& (0+255),7,b
 12247  0016EE  D005               	goto	l7053
 12248                           
 12249                           ; BSR set to: 0
 12250  0016F0  1FBE               	comf	___fladd@f2& (0+255),f,b
 12251  0016F2  D81A               	call	PL82	;call to abstracted procedure
 12252                           
 12253                           ; BSR set to: 0
 12254  0016F4  0E01               	movlw	1
 12255  0016F6  0101               	movlb	1	; () banked
 12256  0016F8  6FCC               	movwf	___fladd@sign& (0+255),b
 12257  0016FA                     l7053:
 12258  0016FA  C0BE  F087         	movff	___fladd@f2,___flpack@arg
 12259  0016FE  C0BF  F088         	movff	___fladd@f2+1,___flpack@arg+1
 12260  001702  C0C0  F089         	movff	___fladd@f2+2,___flpack@arg+2
 12261  001706  C0C1  F08A         	movff	___fladd@f2+3,___flpack@arg+3
 12262  00170A  C1CE  F08B         	movff	___fladd@exp1,___flpack@exp
 12263  00170E  C1CC  F08C         	movff	___fladd@sign,___flpack@sign
 12264  001712  EC46  F013         	call	___flpack	;wreg free
 12265  001716  C087  F0BA         	movff	?___flpack,?___fladd
 12266  00171A  C088  F0BB         	movff	?___flpack+1,?___fladd+1
 12267  00171E  C089  F0BC         	movff	?___flpack+2,?___fladd+2
 12268  001722  C08A  F0BD         	movff	?___flpack+3,?___fladd+3
 12269  001726  0012               	return	
 12270  001728                     __end_of___fladd:
 12271                           	opt stack 0
 12272  001728                     PL82:
 12273                           	opt stack 19
 12274  001728  1FBF               	comf	(___fladd@f2+1)& (0+255),f,b
 12275  00172A  1FC0               	comf	(___fladd@f2+2)& (0+255),f,b
 12276  00172C  1FC1               	comf	(___fladd@f2+3)& (0+255),f,b
 12277  00172E  2BBE               	incf	___fladd@f2& (0+255),f,b
 12278  001730  0E00               	movlw	0
 12279  001732  23BF               	addwfc	(___fladd@f2+1)& (0+255),f,b
 12280  001734  23C0               	addwfc	(___fladd@f2+2)& (0+255),f,b
 12281  001736  23C1               	addwfc	(___fladd@f2+3)& (0+255),f,b
 12282  001738  0C00               	retlw	0
 12283  00173A                     __end_ofPL82:
 12284                           	opt stack 0
 12285  00173A                     PL118:
 12286                           	opt stack 19
 12287  00173A  0101               	movlb	1	; () banked
 12288  00173C  90D8               	bcf	status,0,c
 12289  00173E  33CB               	rrcf	(??___fladd+3)& (0+255),f,b
 12290  001740  33CA               	rrcf	(??___fladd+2)& (0+255),f,b
 12291  001742  33C9               	rrcf	(??___fladd+1)& (0+255),f,b
 12292  001744  33C8               	rrcf	??___fladd& (0+255),f,b
 12293  001746  0012               	return	
 12294  001748                     __end_ofPL118:
 12295                           	opt stack 0
 12296                           tblptru	equ	0xFF8
 12297                           tblptrh	equ	0xFF7
 12298                           tblptrl	equ	0xFF6
 12299                           tablat	equ	0xFF5
 12300                           prodh	equ	0xFF4
 12301                           prodl	equ	0xFF3
 12302                           intcon	equ	0xFF2
 12303                           postinc0	equ	0xFEE
 12304                           wreg	equ	0xFE8
 12305                           indf1	equ	0xFE7
 12306                           postinc1	equ	0xFE6
 12307                           postdec1	equ	0xFE5
 12308                           fsr1h	equ	0xFE2
 12309                           fsr1l	equ	0xFE1
 12310                           indf2	equ	0xFDF
 12311                           postinc2	equ	0xFDE
 12312                           postdec2	equ	0xFDD
 12313                           fsr2h	equ	0xFDA
 12314                           fsr2l	equ	0xFD9
 12315                           status	equ	0xFD8
 12316                           
 12317 ;; *************** function ___flpack *****************
 12318 ;; Defined at:
 12319 ;;		line 63 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\double.c"
 12320 ;; Parameters:    Size  Location     Type
 12321 ;;  arg             4   39[BANK0 ] unsigned long 
 12322 ;;  exp             1   43[BANK0 ] unsigned char 
 12323 ;;  sign            1   44[BANK0 ] unsigned char 
 12324 ;; Auto vars:     Size  Location     Type
 12325 ;;		None
 12326 ;; Return value:  Size  Location     Type
 12327 ;;                  4   39[BANK0 ] unsigned char 
 12328 ;; Registers used:
 12329 ;;		wreg, status,2, status,0
 12330 ;; Tracked objects:
 12331 ;;		On entry : E/0
 12332 ;;		On exit  : F/0
 12333 ;;		Unchanged: 0/0
 12334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12335 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12337 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12338 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12339 ;;Total ram usage:       10 bytes
 12340 ;; Hardware stack levels used:    1
 12341 ;; Hardware stack levels required when called:    8
 12342 ;; This function calls:
 12343 ;;		Nothing
 12344 ;; This function is called by:
 12345 ;;		___awtofl
 12346 ;;		___fladd
 12347 ;;		___flmul
 12348 ;;		___lltofl
 12349 ;; This function uses a non-reentrant model
 12350 ;;
 12351                           
 12352                           	psect	text31
 12353  00268C                     __ptext31:
 12354                           	opt stack 0
 12355  00268C                     ___flpack:
 12356                           	opt stack 19
 12357                           
 12358                           ;incstack = 0
 12359  00268C  0100               	movlb	0	; () banked
 12360  00268E  518B               	movf	___flpack@exp& (0+255),w,b
 12361  002690  E005               	bz	l1546
 12362                           
 12363                           ; BSR set to: 0
 12364  002692  518A               	movf	(___flpack@arg+3)& (0+255),w,b
 12365  002694  1187               	iorwf	___flpack@arg& (0+255),w,b
 12366  002696  1188               	iorwf	(___flpack@arg+1)& (0+255),w,b
 12367  002698  1189               	iorwf	(___flpack@arg+2)& (0+255),w,b
 12368  00269A  E107               	bnz	l6957
 12369  00269C                     l1546:
 12370                           
 12371                           ; BSR set to: 0
 12372  00269C  6B87               	clrf	?___flpack& (0+255),b
 12373  00269E  6B88               	clrf	(?___flpack+1)& (0+255),b
 12374  0026A0  6B89               	clrf	(?___flpack+2)& (0+255),b
 12375  0026A2  6B8A               	clrf	(?___flpack+3)& (0+255),b
 12376  0026A4  0012               	return	
 12377  0026A6                     l6955:
 12378                           
 12379                           ; BSR set to: 0
 12380  0026A6  2B8B               	incf	___flpack@exp& (0+255),f,b
 12381  0026A8  D84A               	call	PL130	;call to abstracted procedure
 12382  0026AA                     l6957:
 12383                           
 12384                           ; BSR set to: 0
 12385  0026AA  6B8D               	clrf	??___flpack& (0+255),b
 12386  0026AC  6B8E               	clrf	(??___flpack+1)& (0+255),b
 12387  0026AE  6B8F               	clrf	(??___flpack+2)& (0+255),b
 12388  0026B0  0EFE               	movlw	254
 12389  0026B2  158A               	andwf	(___flpack@arg+3)& (0+255),w,b
 12390  0026B4  6F90               	movwf	(??___flpack+3)& (0+255),b
 12391  0026B6  5190               	movf	(??___flpack+3)& (0+255),w,b
 12392  0026B8  118D               	iorwf	??___flpack& (0+255),w,b
 12393  0026BA  118E               	iorwf	(??___flpack+1)& (0+255),w,b
 12394  0026BC  118F               	iorwf	(??___flpack+2)& (0+255),w,b
 12395  0026BE  E008               	bz	l1551
 12396  0026C0  D7F2               	goto	l6955
 12397  0026C2                     l6959:
 12398                           
 12399                           ; BSR set to: 0
 12400  0026C2  2B8B               	incf	___flpack@exp& (0+255),f,b
 12401                           
 12402                           ; BSR set to: 0
 12403  0026C4  2B87               	incf	___flpack@arg& (0+255),f,b
 12404  0026C6  0E00               	movlw	0
 12405  0026C8  2388               	addwfc	(___flpack@arg+1)& (0+255),f,b
 12406  0026CA  2389               	addwfc	(___flpack@arg+2)& (0+255),f,b
 12407  0026CC  238A               	addwfc	(___flpack@arg+3)& (0+255),f,b
 12408                           
 12409                           ; BSR set to: 0
 12410  0026CE  D837               	call	PL130	;call to abstracted procedure
 12411  0026D0                     l1551:
 12412                           
 12413                           ; BSR set to: 0
 12414  0026D0  6B8D               	clrf	??___flpack& (0+255),b
 12415  0026D2  6B8E               	clrf	(??___flpack+1)& (0+255),b
 12416  0026D4  6B8F               	clrf	(??___flpack+2)& (0+255),b
 12417  0026D6  518A               	movf	(___flpack@arg+3)& (0+255),w,b
 12418  0026D8  6F90               	movwf	(??___flpack+3)& (0+255),b
 12419  0026DA  5190               	movf	(??___flpack+3)& (0+255),w,b
 12420  0026DC  118D               	iorwf	??___flpack& (0+255),w,b
 12421  0026DE  118E               	iorwf	(??___flpack+1)& (0+255),w,b
 12422  0026E0  118F               	iorwf	(??___flpack+2)& (0+255),w,b
 12423  0026E2  E007               	bz	l6967
 12424  0026E4  D7EE               	goto	l6959
 12425  0026E6                     l6965:
 12426                           
 12427                           ; BSR set to: 0
 12428  0026E6  078B               	decf	___flpack@exp& (0+255),f,b
 12429  0026E8  90D8               	bcf	status,0,c
 12430  0026EA  3787               	rlcf	___flpack@arg& (0+255),f,b
 12431  0026EC  3788               	rlcf	(___flpack@arg+1)& (0+255),f,b
 12432  0026EE  3789               	rlcf	(___flpack@arg+2)& (0+255),f,b
 12433  0026F0  378A               	rlcf	(___flpack@arg+3)& (0+255),f,b
 12434  0026F2                     l6967:
 12435                           
 12436                           ; BSR set to: 0
 12437  0026F2  AF89               	btfss	(___flpack@arg+2)& (0+255),7,b
 12438  0026F4  D7F8               	goto	l6965
 12439                           
 12440                           ; BSR set to: 0
 12441  0026F6  B18B               	btfsc	___flpack@exp& (0+255),0,b
 12442  0026F8  D002               	goto	l1557
 12443                           
 12444                           ; BSR set to: 0
 12445  0026FA  0E7F               	movlw	127
 12446  0026FC  1789               	andwf	(___flpack@arg+2)& (0+255),f,b
 12447  0026FE                     l1557:
 12448                           
 12449                           ; BSR set to: 0
 12450  0026FE  90D8               	bcf	status,0,c
 12451  002700  338B               	rrcf	___flpack@exp& (0+255),f,b
 12452  002702  C08B  F08D         	movff	___flpack@exp,??___flpack
 12453  002706  6B8E               	clrf	(??___flpack+1)& (0+255),b
 12454  002708  6B8F               	clrf	(??___flpack+2)& (0+255),b
 12455  00270A  6B90               	clrf	(??___flpack+3)& (0+255),b
 12456  00270C  C08D  F090         	movff	??___flpack,??___flpack+3
 12457  002710  6B8F               	clrf	(??___flpack+2)& (0+255),b
 12458  002712  6B8E               	clrf	(??___flpack+1)& (0+255),b
 12459  002714  6B8D               	clrf	??___flpack& (0+255),b
 12460  002716  518D               	movf	??___flpack& (0+255),w,b
 12461  002718  1387               	iorwf	___flpack@arg& (0+255),f,b
 12462  00271A  518E               	movf	(??___flpack+1)& (0+255),w,b
 12463  00271C  1388               	iorwf	(___flpack@arg+1)& (0+255),f,b
 12464  00271E  518F               	movf	(??___flpack+2)& (0+255),w,b
 12465  002720  1389               	iorwf	(___flpack@arg+2)& (0+255),f,b
 12466  002722  5190               	movf	(??___flpack+3)& (0+255),w,b
 12467  002724  138A               	iorwf	(___flpack@arg+3)& (0+255),f,b
 12468                           
 12469                           ; BSR set to: 0
 12470  002726  518C               	movf	___flpack@sign& (0+255),w,b
 12471  002728  A4D8               	btfss	status,2,c
 12472                           
 12473                           ; BSR set to: 0
 12474  00272A  8F8A               	bsf	(___flpack@arg+3)& (0+255),7,b
 12475                           
 12476                           ; BSR set to: 0
 12477  00272C  C087  F087         	movff	___flpack@arg,?___flpack
 12478  002730  C088  F088         	movff	___flpack@arg+1,?___flpack+1
 12479  002734  C089  F089         	movff	___flpack@arg+2,?___flpack+2
 12480  002738  C08A  F08A         	movff	___flpack@arg+3,?___flpack+3
 12481                           
 12482                           ; BSR set to: 0
 12483  00273C  0012               	return	
 12484  00273E                     __end_of___flpack:
 12485                           	opt stack 0
 12486  00273E                     PL130:
 12487                           	opt stack 19
 12488  00273E  90D8               	bcf	status,0,c
 12489  002740  338A               	rrcf	(___flpack@arg+3)& (0+255),f,b
 12490  002742  3389               	rrcf	(___flpack@arg+2)& (0+255),f,b
 12491  002744  3388               	rrcf	(___flpack@arg+1)& (0+255),f,b
 12492  002746  3387               	rrcf	___flpack@arg& (0+255),f,b
 12493  002748  0012               	return	
 12494  00274A                     __end_ofPL130:
 12495                           	opt stack 0
 12496                           tblptru	equ	0xFF8
 12497                           tblptrh	equ	0xFF7
 12498                           tblptrl	equ	0xFF6
 12499                           tablat	equ	0xFF5
 12500                           prodh	equ	0xFF4
 12501                           prodl	equ	0xFF3
 12502                           intcon	equ	0xFF2
 12503                           postinc0	equ	0xFEE
 12504                           wreg	equ	0xFE8
 12505                           indf1	equ	0xFE7
 12506                           postinc1	equ	0xFE6
 12507                           postdec1	equ	0xFE5
 12508                           fsr1h	equ	0xFE2
 12509                           fsr1l	equ	0xFE1
 12510                           indf2	equ	0xFDF
 12511                           postinc2	equ	0xFDE
 12512                           postdec2	equ	0xFDD
 12513                           fsr2h	equ	0xFDA
 12514                           fsr2l	equ	0xFD9
 12515                           status	equ	0xFD8
 12516                           
 12517 ;; *************** function ___flneg *****************
 12518 ;; Defined at:
 12519 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\flneg.c"
 12520 ;; Parameters:    Size  Location     Type
 12521 ;;  f1              4   39[BANK0 ] unsigned char 
 12522 ;; Auto vars:     Size  Location     Type
 12523 ;;		None
 12524 ;; Return value:  Size  Location     Type
 12525 ;;                  4   39[BANK0 ] unsigned char 
 12526 ;; Registers used:
 12527 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12528 ;; Tracked objects:
 12529 ;;		On entry : F/2
 12530 ;;		On exit  : F/0
 12531 ;;		Unchanged: 0/0
 12532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12533 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12536 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12537 ;;Total ram usage:        4 bytes
 12538 ;; Hardware stack levels used:    1
 12539 ;; Hardware stack levels required when called:    8
 12540 ;; This function calls:
 12541 ;;		Nothing
 12542 ;; This function is called by:
 12543 ;;		_sprintf
 12544 ;; This function uses a non-reentrant model
 12545 ;;
 12546                           
 12547                           	psect	text32
 12548  00351E                     __ptext32:
 12549                           	opt stack 0
 12550  00351E                     ___flneg:
 12551                           	opt stack 20
 12552                           
 12553                           ; BSR set to: 2
 12554                           
 12555                           ; BSR set to: 0
 12556                           ;incstack = 0
 12557  00351E  0100               	movlb	0	; () banked
 12558  003520  EE20  F087         	lfsr	2,___flneg@f1
 12559  003524  50DE               	movf	postinc2,w,c
 12560  003526  10DE               	iorwf	postinc2,w,c
 12561  003528  10DE               	iorwf	postinc2,w,c
 12562  00352A  10DE               	iorwf	postinc2,w,c
 12563  00352C  E002               	bz	l7589
 12564                           
 12565                           ; BSR set to: 0
 12566  00352E  0E80               	movlw	128
 12567  003530  1B8A               	xorwf	(___flneg@f1+3)& (0+255),f,b
 12568  003532                     l7589:
 12569                           
 12570                           ; BSR set to: 0
 12571  003532  C087  F087         	movff	___flneg@f1,?___flneg
 12572  003536  C088  F088         	movff	___flneg@f1+1,?___flneg+1
 12573  00353A  C089  F089         	movff	___flneg@f1+2,?___flneg+2
 12574  00353E  C08A  F08A         	movff	___flneg@f1+3,?___flneg+3
 12575                           
 12576                           ; BSR set to: 0
 12577  003542  0012               	return	
 12578  003544                     __end_of___flneg:
 12579                           	opt stack 0
 12580                           tblptru	equ	0xFF8
 12581                           tblptrh	equ	0xFF7
 12582                           tblptrl	equ	0xFF6
 12583                           tablat	equ	0xFF5
 12584                           prodh	equ	0xFF4
 12585                           prodl	equ	0xFF3
 12586                           intcon	equ	0xFF2
 12587                           postinc0	equ	0xFEE
 12588                           wreg	equ	0xFE8
 12589                           indf1	equ	0xFE7
 12590                           postinc1	equ	0xFE6
 12591                           postdec1	equ	0xFE5
 12592                           fsr1h	equ	0xFE2
 12593                           fsr1l	equ	0xFE1
 12594                           indf2	equ	0xFDF
 12595                           postinc2	equ	0xFDE
 12596                           postdec2	equ	0xFDD
 12597                           fsr2h	equ	0xFDA
 12598                           fsr2l	equ	0xFD9
 12599                           status	equ	0xFD8
 12600                           
 12601 ;; *************** function ___flge *****************
 12602 ;; Defined at:
 12603 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\flge.c"
 12604 ;; Parameters:    Size  Location     Type
 12605 ;;  ff1             4   39[BANK0 ] unsigned char 
 12606 ;;  ff2             4   43[BANK0 ] unsigned char 
 12607 ;; Auto vars:     Size  Location     Type
 12608 ;;		None
 12609 ;; Return value:  Size  Location     Type
 12610 ;;		None               void
 12611 ;; Registers used:
 12612 ;;		wreg, status,2, status,0
 12613 ;; Tracked objects:
 12614 ;;		On entry : F/0
 12615 ;;		On exit  : F/0
 12616 ;;		Unchanged: 0/0
 12617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12618 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12621 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12622 ;;Total ram usage:        8 bytes
 12623 ;; Hardware stack levels used:    1
 12624 ;; Hardware stack levels required when called:    8
 12625 ;; This function calls:
 12626 ;;		Nothing
 12627 ;; This function is called by:
 12628 ;;		_sprintf
 12629 ;; This function uses a non-reentrant model
 12630 ;;
 12631                           
 12632                           	psect	text33
 12633  0031BE                     __ptext33:
 12634                           	opt stack 0
 12635  0031BE                     ___flge:
 12636                           	opt stack 20
 12637                           
 12638                           ; BSR set to: 0
 12639                           
 12640                           ; BSR set to: 0
 12641                           ;incstack = 0
 12642  0031BE  AF8A               	btfss	(___flge@ff1+3)& (0+255),7,b
 12643  0031C0  D009               	goto	l7575
 12644                           
 12645                           ; BSR set to: 0
 12646  0031C2  6D87               	negf	___flge@ff1& (0+255),b
 12647  0031C4  1F88               	comf	(___flge@ff1+1)& (0+255),f,b
 12648  0031C6  B0D8               	btfsc	status,0,c
 12649  0031C8  2B88               	incf	(___flge@ff1+1)& (0+255),f,b
 12650  0031CA  1F89               	comf	(___flge@ff1+2)& (0+255),f,b
 12651  0031CC  B0D8               	btfsc	status,0,c
 12652  0031CE  2B89               	incf	(___flge@ff1+2)& (0+255),f,b
 12653  0031D0  0E80               	movlw	128
 12654  0031D2  578A               	subfwb	(___flge@ff1+3)& (0+255),f,b
 12655  0031D4                     l7575:
 12656                           
 12657                           ; BSR set to: 0
 12658  0031D4  AF8E               	btfss	(___flge@ff2+3)& (0+255),7,b
 12659  0031D6  D009               	goto	l1622
 12660                           
 12661                           ; BSR set to: 0
 12662  0031D8  6D8B               	negf	___flge@ff2& (0+255),b
 12663  0031DA  1F8C               	comf	(___flge@ff2+1)& (0+255),f,b
 12664  0031DC  B0D8               	btfsc	status,0,c
 12665  0031DE  2B8C               	incf	(___flge@ff2+1)& (0+255),f,b
 12666  0031E0  1F8D               	comf	(___flge@ff2+2)& (0+255),f,b
 12667  0031E2  B0D8               	btfsc	status,0,c
 12668  0031E4  2B8D               	incf	(___flge@ff2+2)& (0+255),f,b
 12669  0031E6  0E80               	movlw	128
 12670  0031E8  578E               	subfwb	(___flge@ff2+3)& (0+255),f,b
 12671  0031EA                     l1622:
 12672                           
 12673                           ; BSR set to: 0
 12674  0031EA  0E80               	movlw	128
 12675  0031EC  1B8A               	xorwf	(___flge@ff1+3)& (0+255),f,b
 12676  0031EE  1B8E               	xorwf	(___flge@ff2+3)& (0+255),f,b
 12677  0031F0  518B               	movf	___flge@ff2& (0+255),w,b
 12678  0031F2  5D87               	subwf	___flge@ff1& (0+255),w,b
 12679  0031F4  518C               	movf	(___flge@ff2+1)& (0+255),w,b
 12680  0031F6  5988               	subwfb	(___flge@ff1+1)& (0+255),w,b
 12681  0031F8  518D               	movf	(___flge@ff2+2)& (0+255),w,b
 12682  0031FA  5989               	subwfb	(___flge@ff1+2)& (0+255),w,b
 12683  0031FC  518E               	movf	(___flge@ff2+3)& (0+255),w,b
 12684  0031FE  598A               	subwfb	(___flge@ff1+3)& (0+255),w,b
 12685  003200  E202               	bc	l7581
 12686                           
 12687                           ; BSR set to: 0
 12688  003202  90D8               	bcf	status,0,c
 12689  003204  0012               	return	
 12690  003206                     l7581:
 12691                           
 12692                           ; BSR set to: 0
 12693  003206  80D8               	bsf	status,0,c
 12694                           
 12695                           ; BSR set to: 0
 12696  003208  0012               	return	
 12697  00320A                     __end_of___flge:
 12698                           	opt stack 0
 12699                           tblptru	equ	0xFF8
 12700                           tblptrh	equ	0xFF7
 12701                           tblptrl	equ	0xFF6
 12702                           tablat	equ	0xFF5
 12703                           prodh	equ	0xFF4
 12704                           prodl	equ	0xFF3
 12705                           intcon	equ	0xFF2
 12706                           postinc0	equ	0xFEE
 12707                           wreg	equ	0xFE8
 12708                           indf1	equ	0xFE7
 12709                           postinc1	equ	0xFE6
 12710                           postdec1	equ	0xFE5
 12711                           fsr1h	equ	0xFE2
 12712                           fsr1l	equ	0xFE1
 12713                           indf2	equ	0xFDF
 12714                           postinc2	equ	0xFDE
 12715                           postdec2	equ	0xFDD
 12716                           fsr2h	equ	0xFDA
 12717                           fsr2l	equ	0xFD9
 12718                           status	equ	0xFD8
 12719                           
 12720 ;; *************** function _ks0108Init *****************
 12721 ;; Defined at:
 12722 ;;		line 118 in file "../lib/ks0108.c"
 12723 ;; Parameters:    Size  Location     Type
 12724 ;;		None
 12725 ;; Auto vars:     Size  Location     Type
 12726 ;;		None
 12727 ;; Return value:  Size  Location     Type
 12728 ;;		None               void
 12729 ;; Registers used:
 12730 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 12731 ;; Tracked objects:
 12732 ;;		On entry : F/0
 12733 ;;		On exit  : F/0
 12734 ;;		Unchanged: 0/0
 12735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12740 ;;Total ram usage:        0 bytes
 12741 ;; Hardware stack levels used:    1
 12742 ;; Hardware stack levels required when called:   12
 12743 ;; This function calls:
 12744 ;;		_DelayMs
 12745 ;;		_ks0108Fill
 12746 ;;		_ks0108WriteCommand
 12747 ;; This function is called by:
 12748 ;;		_main
 12749 ;; This function uses a non-reentrant model
 12750 ;;
 12751                           
 12752                           	psect	text34
 12753  003254                     __ptext34:
 12754                           	opt stack 0
 12755  003254                     _ks0108Init:
 12756                           	opt stack 18
 12757                           
 12758                           ; BSR set to: 0
 12759                           ;ks0108.c: 123: TRISCbits.TRISC3 = 0;
 12760                           
 12761                           ; BSR set to: 0
 12762                           ;incstack = 0
 12763  003254  9694               	bcf	3988,3,c	;volatile
 12764                           
 12765                           ;ks0108.c: 124: TRISCbits.TRISC2 = 0;
 12766  003256  9494               	bcf	3988,2,c	;volatile
 12767                           
 12768                           ;ks0108.c: 125: TRISCbits.TRISC0 = 0;
 12769  003258  9094               	bcf	3988,0,c	;volatile
 12770                           
 12771                           ;ks0108.c: 127: TRISEbits.TRISE0 = 0;
 12772  00325A  9096               	bcf	3990,0,c	;volatile
 12773                           
 12774                           ;ks0108.c: 128: TRISEbits.TRISE1 = 0;
 12775  00325C  9296               	bcf	3990,1,c	;volatile
 12776                           
 12777                           ;ks0108.c: 129: TRISEbits.TRISE2 = 0;
 12778  00325E  9496               	bcf	3990,2,c	;volatile
 12779                           
 12780                           ;ks0108.c: 131: LATC0 = 1;
 12781  003260  808B               	bsf	3979,0,c	;volatile
 12782                           
 12783                           ; BSR set to: 0
 12784                           ;ks0108.c: 133: DelayMs(1);
 12785  003262  0E01               	movlw	1
 12786  003264  EC67  F01A         	call	_DelayMs
 12787                           
 12788                           ; BSR set to: 0
 12789                           ;ks0108.c: 135: pos.x = 0;
 12790  003268  6BD6               	clrf	_pos& (0+255),b
 12791                           
 12792                           ; BSR set to: 0
 12793                           ;ks0108.c: 136: pos.y = 0;
 12794  00326A  6BD7               	clrf	(_pos+1)& (0+255),b
 12795                           
 12796                           ; BSR set to: 0
 12797                           ;ks0108.c: 137: pos.page = 0;
 12798  00326C  6BD8               	clrf	(_pos+2)& (0+255),b
 12799                           
 12800                           ; BSR set to: 0
 12801                           ;ks0108.c: 140: ks0108WriteCommand(0x3F, 0x00);
 12802  00326E  6B87               	clrf	ks0108WriteCommand@chip& (0+255),b
 12803  003270  0E3F               	movlw	63
 12804  003272  ECA2  F01A         	call	_ks0108WriteCommand
 12805                           
 12806                           ;ks0108.c: 141: ks0108WriteCommand(0x3F, 0x01);
 12807  003276  0E01               	movlw	1
 12808  003278  0100               	movlb	0	; () banked
 12809  00327A  6F87               	movwf	ks0108WriteCommand@chip& (0+255),b
 12810  00327C  0E3F               	movlw	63
 12811  00327E  ECA2  F01A         	call	_ks0108WriteCommand
 12812                           
 12813                           ;ks0108.c: 143: ks0108WriteCommand(0xC0, 0x00);
 12814  003282  0100               	movlb	0	; () banked
 12815  003284  6B87               	clrf	ks0108WriteCommand@chip& (0+255),b
 12816  003286  0EC0               	movlw	192
 12817  003288  ECA2  F01A         	call	_ks0108WriteCommand
 12818                           
 12819                           ;ks0108.c: 144: ks0108WriteCommand(0xC0, 0x01);
 12820  00328C  0E01               	movlw	1
 12821  00328E  0100               	movlb	0	; () banked
 12822  003290  6F87               	movwf	ks0108WriteCommand@chip& (0+255),b
 12823  003292  0EC0               	movlw	192
 12824  003294  ECA2  F01A         	call	_ks0108WriteCommand
 12825                           
 12826                           ;ks0108.c: 145: ks0108Fill(0x00);
 12827  003298  0E00               	movlw	0
 12828  00329A  EF0B  F01A         	goto	_ks0108Fill
 12829  00329E                     __end_of_ks0108Init:
 12830                           	opt stack 0
 12831                           tblptru	equ	0xFF8
 12832                           tblptrh	equ	0xFF7
 12833                           tblptrl	equ	0xFF6
 12834                           tablat	equ	0xFF5
 12835                           prodh	equ	0xFF4
 12836                           prodl	equ	0xFF3
 12837                           intcon	equ	0xFF2
 12838                           postinc0	equ	0xFEE
 12839                           wreg	equ	0xFE8
 12840                           indf1	equ	0xFE7
 12841                           postinc1	equ	0xFE6
 12842                           postdec1	equ	0xFE5
 12843                           fsr1h	equ	0xFE2
 12844                           fsr1l	equ	0xFE1
 12845                           indf2	equ	0xFDF
 12846                           postinc2	equ	0xFDE
 12847                           postdec2	equ	0xFDD
 12848                           fsr2h	equ	0xFDA
 12849                           fsr2l	equ	0xFD9
 12850                           status	equ	0xFD8
 12851                           
 12852 ;; *************** function _ks0108Fill *****************
 12853 ;; Defined at:
 12854 ;;		line 28 in file "../lib/ks0108.c"
 12855 ;; Parameters:    Size  Location     Type
 12856 ;;  mode            1    wreg     unsigned char 
 12857 ;; Auto vars:     Size  Location     Type
 12858 ;;  mode            1   45[BANK0 ] unsigned char 
 12859 ;;  i               1   47[BANK0 ] unsigned char 
 12860 ;;  j               1   46[BANK0 ] unsigned char 
 12861 ;; Return value:  Size  Location     Type
 12862 ;;		None               void
 12863 ;; Registers used:
 12864 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 12865 ;; Tracked objects:
 12866 ;;		On entry : 0/0
 12867 ;;		On exit  : F/0
 12868 ;;		Unchanged: 0/0
 12869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12871 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12873 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12874 ;;Total ram usage:        3 bytes
 12875 ;; Hardware stack levels used:    1
 12876 ;; Hardware stack levels required when called:   11
 12877 ;; This function calls:
 12878 ;;		_ks0108GotoXY
 12879 ;;		_ks0108WriteData
 12880 ;; This function is called by:
 12881 ;;		_ks0108Init
 12882 ;; This function uses a non-reentrant model
 12883 ;;
 12884                           
 12885                           	psect	text35
 12886  003416                     __ptext35:
 12887                           	opt stack 0
 12888  003416                     _ks0108Fill:
 12889                           	opt stack 18
 12890                           
 12891                           ; BSR set to: 0
 12892                           ;incstack = 0
 12893                           ;ks0108Fill@mode stored from wreg
 12894  003416  0100               	movlb	0	; () banked
 12895  003418  6F8D               	movwf	ks0108Fill@mode& (0+255),b
 12896                           
 12897                           ; BSR set to: 0
 12898                           ;ks0108.c: 29: uint8_t i, j;
 12899                           ;ks0108.c: 31: for(i = 0; i < 8; i++) {
 12900  00341A  6B8F               	clrf	ks0108Fill@i& (0+255),b
 12901  00341C                     l6141:
 12902                           
 12903                           ; BSR set to: 0
 12904                           ;ks0108.c: 32: ks0108GotoXY(0, i * 8);
 12905  00341C  518F               	movf	ks0108Fill@i& (0+255),w,b
 12906  00341E  0D08               	mullw	8
 12907  003420  CFF3 F089          	movff	prodl,ks0108GotoXY@y
 12908  003424  0E00               	movlw	0
 12909  003426  ECB6  F017         	call	_ks0108GotoXY
 12910                           
 12911                           ;ks0108.c: 33: for(j = 0; j < 128; j++)
 12912  00342A  0100               	movlb	0	; () banked
 12913  00342C  6B8E               	clrf	ks0108Fill@j& (0+255),b
 12914  00342E                     l6149:
 12915                           
 12916                           ; BSR set to: 0
 12917                           ;ks0108.c: 34: ks0108WriteData(mode);
 12918  00342E  518D               	movf	ks0108Fill@mode& (0+255),w,b
 12919  003430  EC4F  F019         	call	_ks0108WriteData
 12920                           
 12921                           ; BSR set to: 0
 12922  003434  2B8E               	incf	ks0108Fill@j& (0+255),f,b
 12923                           
 12924                           ; BSR set to: 0
 12925  003436  0E7F               	movlw	127
 12926  003438  658E               	cpfsgt	ks0108Fill@j& (0+255),b
 12927  00343A  D7F9               	goto	l6149
 12928                           
 12929                           ; BSR set to: 0
 12930  00343C  2B8F               	incf	ks0108Fill@i& (0+255),f,b
 12931                           
 12932                           ; BSR set to: 0
 12933  00343E  0E07               	movlw	7
 12934  003440  658F               	cpfsgt	ks0108Fill@i& (0+255),b
 12935  003442  D7EC               	goto	l6141
 12936  003444  0C07               	retlw	7
 12937  003446                     __end_of_ks0108Fill:
 12938                           	opt stack 0
 12939                           tblptru	equ	0xFF8
 12940                           tblptrh	equ	0xFF7
 12941                           tblptrl	equ	0xFF6
 12942                           tablat	equ	0xFF5
 12943                           prodh	equ	0xFF4
 12944                           prodl	equ	0xFF3
 12945                           intcon	equ	0xFF2
 12946                           postinc0	equ	0xFEE
 12947                           wreg	equ	0xFE8
 12948                           indf1	equ	0xFE7
 12949                           postinc1	equ	0xFE6
 12950                           postdec1	equ	0xFE5
 12951                           fsr1h	equ	0xFE2
 12952                           fsr1l	equ	0xFE1
 12953                           indf2	equ	0xFDF
 12954                           postinc2	equ	0xFDE
 12955                           postdec2	equ	0xFDD
 12956                           fsr2h	equ	0xFDA
 12957                           fsr2l	equ	0xFD9
 12958                           status	equ	0xFD8
 12959                           
 12960 ;; *************** function _DelayMs *****************
 12961 ;; Defined at:
 12962 ;;		line 41 in file "../lib/delay.c"
 12963 ;; Parameters:    Size  Location     Type
 12964 ;;  cnt             1    wreg     unsigned char 
 12965 ;; Auto vars:     Size  Location     Type
 12966 ;;  cnt             1   39[BANK0 ] unsigned char 
 12967 ;;  i               1   40[BANK0 ] unsigned char 
 12968 ;; Return value:  Size  Location     Type
 12969 ;;		None               void
 12970 ;; Registers used:
 12971 ;;		wreg, status,2
 12972 ;; Tracked objects:
 12973 ;;		On entry : F/0
 12974 ;;		On exit  : F/0
 12975 ;;		Unchanged: 0/0
 12976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12978 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12980 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12981 ;;Total ram usage:        2 bytes
 12982 ;; Hardware stack levels used:    1
 12983 ;; Hardware stack levels required when called:    8
 12984 ;; This function calls:
 12985 ;;		Nothing
 12986 ;; This function is called by:
 12987 ;;		_ks0108Init
 12988 ;; This function uses a non-reentrant model
 12989 ;;
 12990                           
 12991                           	psect	text36
 12992  0034CE                     __ptext36:
 12993                           	opt stack 0
 12994  0034CE                     _DelayMs:
 12995                           	opt stack 21
 12996                           
 12997                           ; BSR set to: 0
 12998                           ;incstack = 0
 12999                           ;DelayMs@cnt stored from wreg
 13000  0034CE  6F87               	movwf	DelayMs@cnt& (0+255),b
 13001  0034D0                     l1139:
 13002                           
 13003                           ; BSR set to: 0
 13004                           ;delay.c: 45: i = 4;
 13005                           
 13006                           ; BSR set to: 0
 13007  0034D0  0E04               	movlw	4
 13008  0034D2  6F88               	movwf	DelayMs@i& (0+255),b
 13009  0034D4                     l1140:
 13010                           
 13011                           ; BSR set to: 0
 13012                           ;delay.c: 47: { delayus_variable=(unsigned char)(250/1); asm("movlb (_delayus_variable) 
      +                          >> 8"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); } asm("decfsz (_dela
      +                          yus_variable)&0ffh,f"); asm("goto $ - 12");;
 13013  0034D4  0EFA               	movlw	250
 13014  0034D6  6FD2               	movwf	_delayus_variable& (0+255),b
 13015  0034D8  0100               	movlb	_delayus_variable shr (0+8)	;# 
 13016  0034DA  F000               	nop		;# 
 13017  0034DC  F000               	nop		;# 
 13018  0034DE  F000               	nop		;# 
 13019  0034E0  F000               	nop		;# 
 13020  0034E2  F000               	nop		;# 
 13021  0034E4  2FD2               	decfsz	_delayus_variable& (0+255),f,b	;# 
 13022  0034E6  EF6D  F01A         	goto	($+-12)	;# 
 13023                           
 13024                           ;delay.c: 48: __nop();
 13025  0034EA  F000               	nop	
 13026                           
 13027                           ;delay.c: 49: } while(--i);
 13028  0034EC  0100               	movlb	0	; () banked
 13029  0034EE  2F88               	decfsz	DelayMs@i& (0+255),f,b
 13030  0034F0  D7F1               	goto	l1140
 13031                           
 13032                           ; BSR set to: 0
 13033                           ;delay.c: 50: } while(--cnt);
 13034  0034F2  2F87               	decfsz	DelayMs@cnt& (0+255),f,b
 13035  0034F4  D7ED               	goto	l1139
 13036                           
 13037                           ; BSR set to: 0
 13038  0034F6  0CFA               	retlw	250
 13039  0034F8                     __end_of_DelayMs:
 13040                           	opt stack 0
 13041                           tblptru	equ	0xFF8
 13042                           tblptrh	equ	0xFF7
 13043                           tblptrl	equ	0xFF6
 13044                           tablat	equ	0xFF5
 13045                           prodh	equ	0xFF4
 13046                           prodl	equ	0xFF3
 13047                           intcon	equ	0xFF2
 13048                           postinc0	equ	0xFEE
 13049                           wreg	equ	0xFE8
 13050                           indf1	equ	0xFE7
 13051                           postinc1	equ	0xFE6
 13052                           postdec1	equ	0xFE5
 13053                           fsr1h	equ	0xFE2
 13054                           fsr1l	equ	0xFE1
 13055                           indf2	equ	0xFDF
 13056                           postinc2	equ	0xFDE
 13057                           postdec2	equ	0xFDD
 13058                           fsr2h	equ	0xFDA
 13059                           fsr2l	equ	0xFD9
 13060                           status	equ	0xFD8
 13061                           
 13062 ;; *************** function _ProcessMessages *****************
 13063 ;; Defined at:
 13064 ;;		line 110 in file "../lib/messages.c"
 13065 ;; Parameters:    Size  Location     Type
 13066 ;;		None
 13067 ;; Auto vars:     Size  Location     Type
 13068 ;;  i               1   39[BANK0 ] unsigned char 
 13069 ;; Return value:  Size  Location     Type
 13070 ;;		None               void
 13071 ;; Registers used:
 13072 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13073 ;; Tracked objects:
 13074 ;;		On entry : 0/0
 13075 ;;		On exit  : F/0
 13076 ;;		Unchanged: 0/0
 13077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13079 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13081 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13082 ;;Total ram usage:        1 bytes
 13083 ;; Hardware stack levels used:    1
 13084 ;; Hardware stack levels required when called:    8
 13085 ;; This function calls:
 13086 ;;		Nothing
 13087 ;; This function is called by:
 13088 ;;		_main
 13089 ;; This function uses a non-reentrant model
 13090 ;;
 13091                           
 13092                           	psect	text37
 13093  002C78                     __ptext37:
 13094                           	opt stack 0
 13095  002C78                     _ProcessMessages:
 13096                           	opt stack 22
 13097                           
 13098                           ;messages.c: 111: char i;
 13099                           ;messages.c: 112: for(i = 0; i < (10); i++){
 13100                           
 13101                           ; BSR set to: 0
 13102                           ;incstack = 0
 13103  002C78  0100               	movlb	0	; () banked
 13104  002C7A  6B87               	clrf	ProcessMessages@i& (0+255),b
 13105  002C7C                     l6601:
 13106                           
 13107                           ; BSR set to: 0
 13108                           ;messages.c: 113: if(Messages[i] == MSG_PHASE_READY) Messages[i] = MSG_PHASE_NONE;
 13109  002C7C  5187               	movf	ProcessMessages@i& (0+255),w,b
 13110  002C7E  0F24               	addlw	low _Messages	;volatile
 13111  002C80  6ED9               	movwf	fsr2l,c
 13112  002C82  6ADA               	clrf	fsr2h,c
 13113  002C84  0E02               	movlw	2
 13114  002C86  62DF               	cpfseq	indf2,c
 13115  002C88  D005               	goto	l931
 13116                           
 13117                           ; BSR set to: 0
 13118  002C8A  5187               	movf	ProcessMessages@i& (0+255),w,b
 13119  002C8C  0F24               	addlw	low _Messages	;volatile
 13120  002C8E  6ED9               	movwf	fsr2l,c
 13121  002C90  6ADA               	clrf	fsr2h,c
 13122  002C92  6ADF               	clrf	indf2,c
 13123  002C94                     l931:
 13124                           
 13125                           ; BSR set to: 0
 13126                           ;messages.c: 114: if(Messages[i] == MSG_PHASE_PREPARE) Messages[i] = MSG_PHASE_READY;
 13127  002C94  5187               	movf	ProcessMessages@i& (0+255),w,b
 13128  002C96  0F24               	addlw	low _Messages	;volatile
 13129  002C98  6ED9               	movwf	fsr2l,c
 13130  002C9A  6ADA               	clrf	fsr2h,c
 13131  002C9C  0E01               	movlw	1
 13132  002C9E  62DF               	cpfseq	indf2,c
 13133  002CA0  D003               	goto	l6607
 13134                           
 13135                           ; BSR set to: 0
 13136  002CA2  5187               	movf	ProcessMessages@i& (0+255),w,b
 13137  002CA4  0F24               	addlw	low _Messages	;volatile
 13138  002CA6  D820               	call	PL138	;call to abstracted procedure
 13139  002CA8                     l6607:
 13140                           
 13141                           ; BSR set to: 0
 13142  002CA8  2B87               	incf	ProcessMessages@i& (0+255),f,b
 13143                           
 13144                           ; BSR set to: 0
 13145  002CAA  0E09               	movlw	9
 13146  002CAC  6587               	cpfsgt	ProcessMessages@i& (0+255),b
 13147  002CAE  D7E6               	goto	l6601
 13148                           
 13149                           ; BSR set to: 0
 13150                           ;messages.c: 115: }
 13151                           ;messages.c: 118: for(i = 0; i < 1; i++) {
 13152  002CB0  6B87               	clrf	ProcessMessages@i& (0+255),b
 13153  002CB2                     l6615:
 13154                           
 13155                           ; BSR set to: 0
 13156                           ;messages.c: 119: if(BroadcastMessages[i] == MSG_PHASE_READY) BroadcastMessages[i] = MSG
      +                          _PHASE_NONE;
 13157  002CB2  5187               	movf	ProcessMessages@i& (0+255),w,b
 13158  002CB4  0FD0               	addlw	low _BroadcastMessages	;volatile
 13159  002CB6  6ED9               	movwf	fsr2l,c
 13160  002CB8  6ADA               	clrf	fsr2h,c
 13161  002CBA  0E02               	movlw	2
 13162  002CBC  62DF               	cpfseq	indf2,c
 13163  002CBE  D005               	goto	l935
 13164                           
 13165                           ; BSR set to: 0
 13166  002CC0  5187               	movf	ProcessMessages@i& (0+255),w,b
 13167  002CC2  0FD0               	addlw	low _BroadcastMessages	;volatile
 13168  002CC4  6ED9               	movwf	fsr2l,c
 13169  002CC6  6ADA               	clrf	fsr2h,c
 13170  002CC8  6ADF               	clrf	indf2,c
 13171  002CCA                     l935:
 13172                           
 13173                           ; BSR set to: 0
 13174                           ;messages.c: 120: if(BroadcastMessages[i] == MSG_PHASE_PREPARE) BroadcastMessages[i] = M
      +                          SG_PHASE_READY;
 13175  002CCA  5187               	movf	ProcessMessages@i& (0+255),w,b
 13176  002CCC  0FD0               	addlw	low _BroadcastMessages	;volatile
 13177  002CCE  6ED9               	movwf	fsr2l,c
 13178  002CD0  6ADA               	clrf	fsr2h,c
 13179  002CD2  0E01               	movlw	1
 13180  002CD4  62DF               	cpfseq	indf2,c
 13181  002CD6  D003               	goto	l6621
 13182                           
 13183                           ; BSR set to: 0
 13184  002CD8  5187               	movf	ProcessMessages@i& (0+255),w,b
 13185  002CDA  0FD0               	addlw	low _BroadcastMessages	;volatile
 13186  002CDC  D805               	call	PL138	;call to abstracted procedure
 13187  002CDE                     l6621:
 13188                           
 13189                           ; BSR set to: 0
 13190  002CDE  2B87               	incf	ProcessMessages@i& (0+255),f,b
 13191                           
 13192                           ; BSR set to: 0
 13193  002CE0  5187               	movf	ProcessMessages@i& (0+255),w,b
 13194  002CE2  A4D8               	btfss	status,2,c
 13195  002CE4  0012               	return	
 13196  002CE6  D7E5               	goto	l6615
 13197  002CE8                     __end_of_ProcessMessages:
 13198                           	opt stack 0
 13199  002CE8                     PL138:
 13200                           	opt stack 22
 13201  002CE8  6ED9               	movwf	fsr2l,c
 13202  002CEA  6ADA               	clrf	fsr2h,c
 13203  002CEC  0E02               	movlw	2
 13204  002CEE  6EDF               	movwf	indf2,c
 13205  002CF0  0C02               	retlw	2
 13206  002CF2                     __end_ofPL138:
 13207                           	opt stack 0
 13208                           tblptru	equ	0xFF8
 13209                           tblptrh	equ	0xFF7
 13210                           tblptrl	equ	0xFF6
 13211                           tablat	equ	0xFF5
 13212                           prodh	equ	0xFF4
 13213                           prodl	equ	0xFF3
 13214                           intcon	equ	0xFF2
 13215                           postinc0	equ	0xFEE
 13216                           wreg	equ	0xFE8
 13217                           indf1	equ	0xFE7
 13218                           postinc1	equ	0xFE6
 13219                           postdec1	equ	0xFE5
 13220                           fsr1h	equ	0xFE2
 13221                           fsr1l	equ	0xFE1
 13222                           indf2	equ	0xFDF
 13223                           postinc2	equ	0xFDE
 13224                           postdec2	equ	0xFDD
 13225                           fsr2h	equ	0xFDA
 13226                           fsr2l	equ	0xFD9
 13227                           status	equ	0xFD8
 13228                           
 13229 ;; *************** function _LabelCreate *****************
 13230 ;; Defined at:
 13231 ;;		line 408 in file "../lib/ks0108.c"
 13232 ;; Parameters:    Size  Location     Type
 13233 ;;  lb              2   82[BANK0 ] PTR struct .
 13234 ;;		 -> lb_temp(27), 
 13235 ;;  x               1   84[BANK0 ] unsigned char 
 13236 ;;  y               1   85[BANK0 ] unsigned char 
 13237 ;;  font            2   86[BANK0 ] PTR const unsigned char 
 13238 ;;		 -> font13(2892), 
 13239 ;;  ln              1   88[BANK0 ] unsigned char 
 13240 ;; Auto vars:     Size  Location     Type
 13241 ;;  i               1   91[BANK0 ] unsigned char 
 13242 ;; Return value:  Size  Location     Type
 13243 ;;		None               void
 13244 ;; Registers used:
 13245 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13246 ;; Tracked objects:
 13247 ;;		On entry : F/0
 13248 ;;		On exit  : F/0
 13249 ;;		Unchanged: 0/0
 13250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13251 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13252 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13253 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13254 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13255 ;;Total ram usage:       10 bytes
 13256 ;; Hardware stack levels used:    1
 13257 ;; Hardware stack levels required when called:   15
 13258 ;; This function calls:
 13259 ;;		_LabelSetTxt
 13260 ;; This function is called by:
 13261 ;;		_main
 13262 ;; This function uses a non-reentrant model
 13263 ;;
 13264                           
 13265                           	psect	text38
 13266  002A5A                     __ptext38:
 13267                           	opt stack 0
 13268  002A5A                     _LabelCreate:
 13269                           	opt stack 15
 13270                           
 13271                           ; BSR set to: 0
 13272                           ;ks0108.c: 410: BYTE i;
 13273                           ;ks0108.c: 411: lb -> size = ln;
 13274                           
 13275                           ; BSR set to: 0
 13276                           ;incstack = 0
 13277  002A5A  EE20 F002          	lfsr	2,2
 13278  002A5E  51B2               	movf	LabelCreate@lb& (0+255),w,b
 13279  002A60  26D9               	addwf	fsr2l,f,c
 13280  002A62  51B3               	movf	(LabelCreate@lb+1)& (0+255),w,b
 13281  002A64  22DA               	addwfc	fsr2h,f,c
 13282  002A66  C0B8  FFDF         	movff	LabelCreate@ln,indf2
 13283                           
 13284                           ;ks0108.c: 412: lb -> p_font = font;
 13285  002A6A  EE20 F003          	lfsr	2,3
 13286  002A6E  51B2               	movf	LabelCreate@lb& (0+255),w,b
 13287  002A70  26D9               	addwf	fsr2l,f,c
 13288  002A72  51B3               	movf	(LabelCreate@lb+1)& (0+255),w,b
 13289  002A74  22DA               	addwfc	fsr2h,f,c
 13290  002A76  C0B6  FFDE         	movff	LabelCreate@font,postinc2
 13291  002A7A  C0B7  FFDD         	movff	LabelCreate@font+1,postdec2
 13292                           
 13293                           ; BSR set to: 0
 13294                           ;ks0108.c: 413: lb -> x = x;
 13295  002A7E  C0B2  FFD9         	movff	LabelCreate@lb,fsr2l
 13296  002A82  C0B3  FFDA         	movff	LabelCreate@lb+1,fsr2h
 13297  002A86  C0B4  FFDF         	movff	LabelCreate@x,indf2
 13298                           
 13299                           ; BSR set to: 0
 13300                           ;ks0108.c: 414: lb -> y = y;
 13301  002A8A  EE20 F001          	lfsr	2,1
 13302  002A8E  51B2               	movf	LabelCreate@lb& (0+255),w,b
 13303  002A90  26D9               	addwf	fsr2l,f,c
 13304  002A92  51B3               	movf	(LabelCreate@lb+1)& (0+255),w,b
 13305  002A94  22DA               	addwfc	fsr2h,f,c
 13306  002A96  C0B5  FFDF         	movff	LabelCreate@y,indf2
 13307                           
 13308                           ; BSR set to: 0
 13309                           ;ks0108.c: 418: for(i = 0; i < lb -> size; i++) lb -> str[i] = ' ';
 13310  002A9A  6BBB               	clrf	LabelCreate@i& (0+255),b
 13311  002A9C  D00F               	goto	l8311
 13312  002A9E                     l8307:
 13313                           
 13314                           ; BSR set to: 0
 13315  002A9E  51BB               	movf	LabelCreate@i& (0+255),w,b
 13316  002AA0  25B2               	addwf	LabelCreate@lb& (0+255),w,b
 13317  002AA2  6FB9               	movwf	??_LabelCreate& (0+255),b
 13318  002AA4  0E00               	movlw	0
 13319  002AA6  21B3               	addwfc	(LabelCreate@lb+1)& (0+255),w,b
 13320  002AA8  6FBA               	movwf	(??_LabelCreate+1)& (0+255),b
 13321  002AAA  0E05               	movlw	5
 13322  002AAC  25B9               	addwf	??_LabelCreate& (0+255),w,b
 13323  002AAE  6ED9               	movwf	fsr2l,c
 13324  002AB0  0E00               	movlw	0
 13325  002AB2  21BA               	addwfc	(??_LabelCreate+1)& (0+255),w,b
 13326  002AB4  6EDA               	movwf	fsr2h,c
 13327  002AB6  0E20               	movlw	32
 13328  002AB8  6EDF               	movwf	indf2,c
 13329                           
 13330                           ; BSR set to: 0
 13331  002ABA  2BBB               	incf	LabelCreate@i& (0+255),f,b
 13332  002ABC                     l8311:
 13333                           
 13334                           ; BSR set to: 0
 13335  002ABC  EE20 F002          	lfsr	2,2
 13336  002AC0  51B2               	movf	LabelCreate@lb& (0+255),w,b
 13337  002AC2  26D9               	addwf	fsr2l,f,c
 13338  002AC4  51B3               	movf	(LabelCreate@lb+1)& (0+255),w,b
 13339  002AC6  22DA               	addwfc	fsr2h,f,c
 13340  002AC8  50DF               	movf	indf2,w,c
 13341  002ACA  5DBB               	subwf	LabelCreate@i& (0+255),w,b
 13342  002ACC  E3E8               	bnc	l8307
 13343                           
 13344                           ; BSR set to: 0
 13345                           ;ks0108.c: 420: LabelSetTxt(lb, lb -> str);
 13346  002ACE  C0B3  F0AB         	movff	LabelCreate@lb+1,LabelSetTxt@lb+1
 13347  002AD2  C0B2  F0AA         	movff	LabelCreate@lb,LabelSetTxt@lb
 13348  002AD6  0E05               	movlw	5
 13349  002AD8  25B2               	addwf	LabelCreate@lb& (0+255),w,b
 13350  002ADA  6FAC               	movwf	LabelSetTxt@str& (0+255),b
 13351  002ADC  0E00               	movlw	0
 13352  002ADE  21B3               	addwfc	(LabelCreate@lb+1)& (0+255),w,b
 13353  002AE0  6FAD               	movwf	(LabelSetTxt@str+1)& (0+255),b
 13354  002AE2  EF97  F011         	goto	_LabelSetTxt	;wreg free
 13355  002AE6                     __end_of_LabelCreate:
 13356                           	opt stack 0
 13357                           tblptru	equ	0xFF8
 13358                           tblptrh	equ	0xFF7
 13359                           tblptrl	equ	0xFF6
 13360                           tablat	equ	0xFF5
 13361                           prodh	equ	0xFF4
 13362                           prodl	equ	0xFF3
 13363                           intcon	equ	0xFF2
 13364                           postinc0	equ	0xFEE
 13365                           wreg	equ	0xFE8
 13366                           indf1	equ	0xFE7
 13367                           postinc1	equ	0xFE6
 13368                           postdec1	equ	0xFE5
 13369                           fsr1h	equ	0xFE2
 13370                           fsr1l	equ	0xFE1
 13371                           indf2	equ	0xFDF
 13372                           postinc2	equ	0xFDE
 13373                           postdec2	equ	0xFDD
 13374                           fsr2h	equ	0xFDA
 13375                           fsr2l	equ	0xFD9
 13376                           status	equ	0xFD8
 13377                           
 13378 ;; *************** function _LabelSetTxt *****************
 13379 ;; Defined at:
 13380 ;;		line 425 in file "../lib/ks0108.c"
 13381 ;; Parameters:    Size  Location     Type
 13382 ;;  lb              2   74[BANK0 ] PTR struct .
 13383 ;;		 -> lb_temp(27), 
 13384 ;;  str             2   76[BANK0 ] PTR unsigned char 
 13385 ;;		 -> str(20), lb_temp(27), 
 13386 ;; Auto vars:     Size  Location     Type
 13387 ;;  i               1   81[BANK0 ] unsigned char 
 13388 ;;  temp            1   80[BANK0 ] unsigned char 
 13389 ;;  SymbWidth       1    0        unsigned char 
 13390 ;; Return value:  Size  Location     Type
 13391 ;;		None               void
 13392 ;; Registers used:
 13393 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13394 ;; Tracked objects:
 13395 ;;		On entry : F/0
 13396 ;;		On exit  : F/0
 13397 ;;		Unchanged: 0/0
 13398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13399 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13400 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13401 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13402 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13403 ;;Total ram usage:        8 bytes
 13404 ;; Hardware stack levels used:    1
 13405 ;; Hardware stack levels required when called:   14
 13406 ;; This function calls:
 13407 ;;		_ks0108GotoXY
 13408 ;;		_ks0108PutChar
 13409 ;; This function is called by:
 13410 ;;		_tsk_display
 13411 ;;		_LabelCreate
 13412 ;; This function uses a non-reentrant model
 13413 ;;
 13414                           
 13415                           	psect	text39
 13416  00232E                     __ptext39:
 13417                           	opt stack 0
 13418  00232E                     _LabelSetTxt:
 13419                           	opt stack 15
 13420                           
 13421                           ; BSR set to: 0
 13422                           ;ks0108.c: 427: BYTE i, SymbWidth, temp = 0;
 13423                           
 13424                           ; BSR set to: 0
 13425                           ;incstack = 0
 13426  00232E  6BB0               	clrf	LabelSetTxt@temp& (0+255),b
 13427                           
 13428                           ; BSR set to: 0
 13429                           ;ks0108.c: 430: ks0108GotoXY(lb -> x, lb -> y);
 13430  002330  D856               	call	PL54	;call to abstracted procedure
 13431  002332  ECB6  F017         	call	_ks0108GotoXY
 13432                           
 13433                           ;ks0108.c: 431: for(i = 0; i < lb -> size; i++) {
 13434  002336  0100               	movlb	0	; () banked
 13435  002338  6BB1               	clrf	LabelSetTxt@i& (0+255),b
 13436  00233A  D00B               	goto	l8231
 13437  00233C                     l8227:
 13438                           
 13439                           ; BSR set to: 0
 13440                           ;ks0108.c: 432: SymbWidth = ks0108PutChar(lb -> str[i], lb -> p_font, 0);
 13441  00233C  D85E               	call	PL74	;call to abstracted procedure
 13442  00233E  6B97               	clrf	ks0108PutChar@mode& (0+255),b
 13443  002340  D845               	call	PL34	;call to abstracted procedure
 13444  002342  6ED9               	movwf	fsr2l,c
 13445  002344  0E00               	movlw	0
 13446  002346  21AF               	addwfc	(??_LabelSetTxt+1)& (0+255),w,b
 13447  002348  6EDA               	movwf	fsr2h,c
 13448  00234A  50DF               	movf	indf2,w,c
 13449  00234C  EC0B  F010         	call	_ks0108PutChar
 13450                           
 13451                           ; BSR set to: 0
 13452  002350  2BB1               	incf	LabelSetTxt@i& (0+255),f,b
 13453  002352                     l8231:
 13454                           
 13455                           ; BSR set to: 0
 13456  002352  EE20 F002          	lfsr	2,2
 13457  002356  D85C               	call	PL90	;call to abstracted procedure
 13458  002358  E3F1               	bnc	l8227
 13459                           
 13460                           ; BSR set to: 0
 13461                           ;ks0108.c: 433: }
 13462                           ;ks0108.c: 435: ks0108GotoXY(lb -> x, lb -> y);
 13463  00235A  D841               	call	PL54	;call to abstracted procedure
 13464  00235C  ECB6  F017         	call	_ks0108GotoXY
 13465                           
 13466                           ;ks0108.c: 436: for(i = 0; i < lb -> size; i++) {
 13467  002360  0100               	movlb	0	; () banked
 13468  002362  6BB1               	clrf	LabelSetTxt@i& (0+255),b
 13469  002364  D02D               	goto	l8251
 13470  002366                     l8237:
 13471                           
 13472                           ; BSR set to: 0
 13473                           ;ks0108.c: 437: if(str[i] == 0) temp = 1;
 13474  002366  51B1               	movf	LabelSetTxt@i& (0+255),w,b
 13475  002368  25AC               	addwf	LabelSetTxt@str& (0+255),w,b
 13476  00236A  6ED9               	movwf	fsr2l,c
 13477  00236C  0E00               	movlw	0
 13478  00236E  21AD               	addwfc	(LabelSetTxt@str+1)& (0+255),w,b
 13479  002370  6EDA               	movwf	fsr2h,c
 13480  002372  50DF               	movf	indf2,w,c
 13481  002374  E102               	bnz	l8241
 13482                           
 13483                           ; BSR set to: 0
 13484  002376  0E01               	movlw	1
 13485  002378  6FB0               	movwf	LabelSetTxt@temp& (0+255),b
 13486  00237A                     l8241:
 13487                           
 13488                           ; BSR set to: 0
 13489                           ;ks0108.c: 438: if(temp == 0)
 13490  00237A  67B0               	tstfsz	LabelSetTxt@temp& (0+255),b
 13491  00237C  D00E               	goto	l8245
 13492                           
 13493                           ; BSR set to: 0
 13494                           ;ks0108.c: 439: lb -> str[i] = str[i];
 13495  00237E  51B1               	movf	LabelSetTxt@i& (0+255),w,b
 13496  002380  25AC               	addwf	LabelSetTxt@str& (0+255),w,b
 13497  002382  6ED9               	movwf	fsr2l,c
 13498  002384  0E00               	movlw	0
 13499  002386  21AD               	addwfc	(LabelSetTxt@str+1)& (0+255),w,b
 13500  002388  6EDA               	movwf	fsr2h,c
 13501  00238A  D820               	call	PL34	;call to abstracted procedure
 13502  00238C  6EE1               	movwf	fsr1l,c
 13503  00238E  0E00               	movlw	0
 13504  002390  21AF               	addwfc	(??_LabelSetTxt+1)& (0+255),w,b
 13505  002392  6EE2               	movwf	fsr1h,c
 13506  002394  CFDF FFE7          	movff	indf2,indf1
 13507  002398  D007               	goto	l8247
 13508  00239A                     l8245:
 13509                           
 13510                           ; BSR set to: 0
 13511                           ;ks0108.c: 440: else
 13512                           ;ks0108.c: 441: lb -> str[i] = ' ';
 13513  00239A  D818               	call	PL34	;call to abstracted procedure
 13514  00239C  6ED9               	movwf	fsr2l,c
 13515  00239E  0E00               	movlw	0
 13516  0023A0  21AF               	addwfc	(??_LabelSetTxt+1)& (0+255),w,b
 13517  0023A2  6EDA               	movwf	fsr2h,c
 13518  0023A4  0E20               	movlw	32
 13519  0023A6  6EDF               	movwf	indf2,c
 13520  0023A8                     l8247:
 13521                           
 13522                           ; BSR set to: 0
 13523                           ;ks0108.c: 443: ks0108PutChar(lb -> str[i], lb -> p_font, 1);
 13524  0023A8  D828               	call	PL74	;call to abstracted procedure
 13525  0023AA  0E01               	movlw	1
 13526  0023AC  6F97               	movwf	ks0108PutChar@mode& (0+255),b
 13527  0023AE  D80E               	call	PL34	;call to abstracted procedure
 13528  0023B0  6ED9               	movwf	fsr2l,c
 13529  0023B2  0E00               	movlw	0
 13530  0023B4  21AF               	addwfc	(??_LabelSetTxt+1)& (0+255),w,b
 13531  0023B6  6EDA               	movwf	fsr2h,c
 13532  0023B8  50DF               	movf	indf2,w,c
 13533  0023BA  EC0B  F010         	call	_ks0108PutChar
 13534                           
 13535                           ; BSR set to: 0
 13536  0023BE  2BB1               	incf	LabelSetTxt@i& (0+255),f,b
 13537  0023C0                     l8251:
 13538                           
 13539                           ; BSR set to: 0
 13540  0023C0  EE20 F002          	lfsr	2,2
 13541  0023C4  D825               	call	PL90	;call to abstracted procedure
 13542  0023C6  B0D8               	btfsc	status,0,c
 13543  0023C8  0012               	return	
 13544  0023CA  D7CD               	goto	l8237
 13545  0023CC                     __end_of_LabelSetTxt:
 13546                           	opt stack 0
 13547  0023CC                     PL34:
 13548                           	opt stack 15
 13549  0023CC  51B1               	movf	LabelSetTxt@i& (0+255),w,b
 13550  0023CE  25AA               	addwf	LabelSetTxt@lb& (0+255),w,b
 13551  0023D0  6FAE               	movwf	??_LabelSetTxt& (0+255),b
 13552  0023D2  0E00               	movlw	0
 13553  0023D4  21AB               	addwfc	(LabelSetTxt@lb+1)& (0+255),w,b
 13554  0023D6  6FAF               	movwf	(??_LabelSetTxt+1)& (0+255),b
 13555  0023D8  0E05               	movlw	5
 13556  0023DA  25AE               	addwf	??_LabelSetTxt& (0+255),w,b
 13557  0023DC  0012               	return	
 13558  0023DE                     __end_ofPL34:
 13559                           	opt stack 0
 13560  0023DE                     PL54:
 13561                           	opt stack 15
 13562  0023DE  EE20 F001          	lfsr	2,1
 13563  0023E2  51AA               	movf	LabelSetTxt@lb& (0+255),w,b
 13564  0023E4  26D9               	addwf	fsr2l,f,c
 13565  0023E6  51AB               	movf	(LabelSetTxt@lb+1)& (0+255),w,b
 13566  0023E8  22DA               	addwfc	fsr2h,f,c
 13567  0023EA  50DF               	movf	indf2,w,c
 13568  0023EC  6F89               	movwf	ks0108GotoXY@y& (0+255),b
 13569  0023EE  C0AA  FFD9         	movff	LabelSetTxt@lb,fsr2l
 13570  0023F2  C0AB  FFDA         	movff	LabelSetTxt@lb+1,fsr2h
 13571  0023F6  50DF               	movf	indf2,w,c
 13572  0023F8  0012               	return	
 13573  0023FA                     __end_ofPL54:
 13574                           	opt stack 0
 13575  0023FA                     PL74:
 13576                           	opt stack 15
 13577  0023FA  EE20 F003          	lfsr	2,3
 13578  0023FE  51AA               	movf	LabelSetTxt@lb& (0+255),w,b
 13579  002400  26D9               	addwf	fsr2l,f,c
 13580  002402  51AB               	movf	(LabelSetTxt@lb+1)& (0+255),w,b
 13581  002404  22DA               	addwfc	fsr2h,f,c
 13582  002406  CFDE F095          	movff	postinc2,ks0108PutChar@p_font
 13583  00240A  CFDD F096          	movff	postdec2,ks0108PutChar@p_font+1
 13584  00240E  0012               	return	
 13585  002410                     __end_ofPL74:
 13586                           	opt stack 0
 13587  002410                     PL90:
 13588                           	opt stack 15
 13589  002410  51AA               	movf	LabelSetTxt@lb& (0+255),w,b
 13590  002412  26D9               	addwf	fsr2l,f,c
 13591  002414  51AB               	movf	(LabelSetTxt@lb+1)& (0+255),w,b
 13592  002416  22DA               	addwfc	fsr2h,f,c
 13593  002418  50DF               	movf	indf2,w,c
 13594  00241A  5DB1               	subwf	LabelSetTxt@i& (0+255),w,b
 13595  00241C  0012               	return	
 13596  00241E                     __end_ofPL90:
 13597                           	opt stack 0
 13598                           tblptru	equ	0xFF8
 13599                           tblptrh	equ	0xFF7
 13600                           tblptrl	equ	0xFF6
 13601                           tablat	equ	0xFF5
 13602                           prodh	equ	0xFF4
 13603                           prodl	equ	0xFF3
 13604                           intcon	equ	0xFF2
 13605                           postinc0	equ	0xFEE
 13606                           wreg	equ	0xFE8
 13607                           indf1	equ	0xFE7
 13608                           postinc1	equ	0xFE6
 13609                           postdec1	equ	0xFE5
 13610                           fsr1h	equ	0xFE2
 13611                           fsr1l	equ	0xFE1
 13612                           indf2	equ	0xFDF
 13613                           postinc2	equ	0xFDE
 13614                           postdec2	equ	0xFDD
 13615                           fsr2h	equ	0xFDA
 13616                           fsr2l	equ	0xFD9
 13617                           status	equ	0xFD8
 13618                           
 13619 ;; *************** function _ks0108PutChar *****************
 13620 ;; Defined at:
 13621 ;;		line 282 in file "../lib/ks0108.c"
 13622 ;; Parameters:    Size  Location     Type
 13623 ;;  s               1    wreg     unsigned char 
 13624 ;;  p_font          2   53[BANK0 ] PTR const unsigned char 
 13625 ;;		 -> font13(2892), 
 13626 ;;  mode            1   55[BANK0 ] unsigned char 
 13627 ;; Auto vars:     Size  Location     Type
 13628 ;;  s               1   58[BANK0 ] unsigned char 
 13629 ;;  base            2   72[BANK0 ] unsigned short 
 13630 ;;  pChImage        2   61[BANK0 ] PTR const unsigned char 
 13631 ;;		 -> font13(2892), 
 13632 ;;  mask            1   71[BANK0 ] unsigned char 
 13633 ;;  x               1   70[BANK0 ] unsigned char 
 13634 ;;  y               1   69[BANK0 ] unsigned char 
 13635 ;;  chWidth         1   68[BANK0 ] unsigned char 
 13636 ;;  y_              1   67[BANK0 ] unsigned char 
 13637 ;;  x_              1   66[BANK0 ] unsigned char 
 13638 ;;  temp            1   65[BANK0 ] unsigned char 
 13639 ;;  yCnt            1   64[BANK0 ] unsigned char 
 13640 ;;  xCnt            1   63[BANK0 ] unsigned char 
 13641 ;;  _fontWidth      1   60[BANK0 ] unsigned char 
 13642 ;;  _fontHeight     1   59[BANK0 ] unsigned char 
 13643 ;; Return value:  Size  Location     Type
 13644 ;;                  1    wreg      unsigned char 
 13645 ;; Registers used:
 13646 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13647 ;; Tracked objects:
 13648 ;;		On entry : F/0
 13649 ;;		On exit  : F/0
 13650 ;;		Unchanged: 0/0
 13651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13652 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13653 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13654 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13655 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13656 ;;Total ram usage:       21 bytes
 13657 ;; Hardware stack levels used:    1
 13658 ;; Hardware stack levels required when called:   13
 13659 ;; This function calls:
 13660 ;;		___wmul
 13661 ;;		_ks0108ClearDot
 13662 ;;		_ks0108SetDot
 13663 ;; This function is called by:
 13664 ;;		_main
 13665 ;;		_LabelSetTxt
 13666 ;; This function uses a non-reentrant model
 13667 ;;
 13668                           
 13669                           	psect	text40
 13670  002016                     __ptext40:
 13671                           	opt stack 0
 13672  002016                     _ks0108PutChar:
 13673                           	opt stack 15
 13674                           
 13675                           ; BSR set to: 0
 13676                           ;incstack = 0
 13677                           ;ks0108PutChar@s stored from wreg
 13678  002016  6F9A               	movwf	ks0108PutChar@s& (0+255),b
 13679                           
 13680                           ; BSR set to: 0
 13681                           ;ks0108.c: 287: BYTE temp = 0, mask, _fontHeight, _fontWidth;
 13682  002018  6BA1               	clrf	ks0108PutChar@temp& (0+255),b
 13683                           
 13684                           ; BSR set to: 0
 13685                           ;ks0108.c: 288: const char *pChImage;
 13686                           ;ks0108.c: 290: _fontHeight = p_font[0];
 13687  00201A  C095  FFF6         	movff	ks0108PutChar@p_font,tblptrl
 13688  00201E  C096  FFF7         	movff	ks0108PutChar@p_font+1,tblptrh
 13689  002022                     	if	0	;tblptru may be non-zero
 13690  002022                     	endif
 13691  002022                     	if	0	;tblptru may be non-zero
 13692  002022                     	endif
 13693  002022  0008               	tblrd		*
 13694  002024  CFF5 F09B          	movff	tablat,ks0108PutChar@_fontHeight
 13695                           
 13696                           ; BSR set to: 0
 13697                           ;ks0108.c: 291: _fontWidth = p_font[1];
 13698  002028  2995               	incf	ks0108PutChar@p_font& (0+255),w,b
 13699  00202A  D867               	call	PL78	;call to abstracted procedure
 13700  00202C  CFF5 F09C          	movff	tablat,ks0108PutChar@_fontWidth
 13701                           
 13702                           ;ks0108.c: 293: base = s - 32;
 13703  002030  0EE0               	movlw	224
 13704  002032  259A               	addwf	ks0108PutChar@s& (0+255),w,b
 13705  002034  6FA8               	movwf	ks0108PutChar@base& (0+255),b
 13706  002036  6BA9               	clrf	(ks0108PutChar@base+1)& (0+255),b
 13707  002038  0EFF               	movlw	255
 13708  00203A  23A9               	addwfc	(ks0108PutChar@base+1)& (0+255),f,b
 13709                           
 13710                           ; BSR set to: 0
 13711                           ;ks0108.c: 294: base *= p_font[2];
 13712  00203C  C0A8  F087         	movff	ks0108PutChar@base,___wmul@multiplier
 13713  002040  C0A9  F088         	movff	ks0108PutChar@base+1,___wmul@multiplier+1
 13714  002044  0E02               	movlw	2
 13715  002046  2595               	addwf	ks0108PutChar@p_font& (0+255),w,b
 13716  002048  D858               	call	PL78	;call to abstracted procedure
 13717  00204A  50F5               	movf	tablat,w,c
 13718  00204C  6F89               	movwf	___wmul@multiplicand& (0+255),b
 13719  00204E  6B8A               	clrf	(___wmul@multiplicand+1)& (0+255),b
 13720  002050  ECB5  F01A         	call	___wmul	;wreg free
 13721  002054  C087  F0A8         	movff	?___wmul,ks0108PutChar@base
 13722  002058  C088  F0A9         	movff	?___wmul+1,ks0108PutChar@base+1
 13723                           
 13724                           ; BSR set to: 0
 13725                           ;ks0108.c: 295: base += 3;
 13726  00205C  0E03               	movlw	3
 13727  00205E  27A8               	addwf	ks0108PutChar@base& (0+255),f,b
 13728  002060  0E00               	movlw	0
 13729  002062  23A9               	addwfc	(ks0108PutChar@base+1)& (0+255),f,b
 13730                           
 13731                           ; BSR set to: 0
 13732                           ;ks0108.c: 300: chWidth = p_font[base];
 13733  002064  D854               	call	PL86	;call to abstracted procedure
 13734  002066  C098  FFF6         	movff	??_ks0108PutChar,tblptrl
 13735  00206A  C099  FFF7         	movff	??_ks0108PutChar+1,tblptrh
 13736  00206E                     	if	0	;tblptru may be non-zero
 13737  00206E                     	endif
 13738  00206E                     	if	0	;tblptru may be non-zero
 13739  00206E                     	endif
 13740  00206E  0008               	tblrd		*
 13741  002070  CFF5 F0A4          	movff	tablat,ks0108PutChar@chWidth
 13742                           
 13743                           ; BSR set to: 0
 13744                           ;ks0108.c: 301: pChImage = &p_font[base + 1];
 13745  002074  D84C               	call	PL86	;call to abstracted procedure
 13746  002076  2998               	incf	??_ks0108PutChar& (0+255),w,b
 13747  002078  6F9D               	movwf	ks0108PutChar@pChImage& (0+255),b
 13748  00207A  0E00               	movlw	0
 13749  00207C  2199               	addwfc	(??_ks0108PutChar+1)& (0+255),w,b
 13750  00207E  6F9E               	movwf	(ks0108PutChar@pChImage+1)& (0+255),b
 13751                           
 13752                           ; BSR set to: 0
 13753                           ;ks0108.c: 303: y_ = pos.y;
 13754  002080  C0D7  F0A3         	movff	_pos+1,ks0108PutChar@y_
 13755                           
 13756                           ; BSR set to: 0
 13757                           ;ks0108.c: 304: x_ = pos.x;
 13758  002084  C0D6  F0A2         	movff	_pos,ks0108PutChar@x_
 13759                           
 13760                           ; BSR set to: 0
 13761                           ;ks0108.c: 306: y = y_;
 13762  002088  C0A3  F0A5         	movff	ks0108PutChar@y_,ks0108PutChar@y
 13763                           
 13764                           ; BSR set to: 0
 13765                           ;ks0108.c: 308: for(yCnt = 0; yCnt < _fontHeight; yCnt++) {
 13766  00208C  6BA0               	clrf	ks0108PutChar@yCnt& (0+255),b
 13767  00208E  D02B               	goto	l7379
 13768  002090                     l1061:
 13769                           
 13770                           ; BSR set to: 0
 13771                           ;ks0108.c: 309: x = x_;
 13772  002090  C0A2  F0A6         	movff	ks0108PutChar@x_,ks0108PutChar@x
 13773                           
 13774                           ;ks0108.c: 310: mask = 0;
 13775  002094  6BA7               	clrf	ks0108PutChar@mask& (0+255),b
 13776                           
 13777                           ;ks0108.c: 311: for(xCnt = 0; xCnt < _fontWidth; xCnt++) {
 13778  002096  6B9F               	clrf	ks0108PutChar@xCnt& (0+255),b
 13779  002098  D021               	goto	l1062
 13780  00209A                     l1063:
 13781                           
 13782                           ; BSR set to: 0
 13783                           ;ks0108.c: 312: if(mask == 0) {
 13784  00209A  67A7               	tstfsz	ks0108PutChar@mask& (0+255),b
 13785  00209C  D00B               	goto	l7363
 13786                           
 13787                           ; BSR set to: 0
 13788                           ;ks0108.c: 313: temp = *pChImage++;
 13789  00209E  C09D  FFF6         	movff	ks0108PutChar@pChImage,tblptrl
 13790  0020A2  C09E  FFF7         	movff	ks0108PutChar@pChImage+1,tblptrh
 13791  0020A6                     	if	0	;tblptru may be non-zero
 13792  0020A6                     	endif
 13793  0020A6                     	if	0	;tblptru may be non-zero
 13794  0020A6                     	endif
 13795  0020A6  0008               	tblrd		*
 13796  0020A8  CFF5 F0A1          	movff	tablat,ks0108PutChar@temp
 13797                           
 13798                           ; BSR set to: 0
 13799  0020AC  4B9D               	infsnz	ks0108PutChar@pChImage& (0+255),f,b
 13800  0020AE  2B9E               	incf	(ks0108PutChar@pChImage+1)& (0+255),f,b
 13801                           
 13802                           ; BSR set to: 0
 13803                           ;ks0108.c: 314: mask = 0x80;
 13804  0020B0  0E80               	movlw	128
 13805  0020B2  6FA7               	movwf	ks0108PutChar@mask& (0+255),b
 13806  0020B4                     l7363:
 13807                           
 13808                           ; BSR set to: 0
 13809                           ;ks0108.c: 315: }
 13810                           ;ks0108.c: 317: if(temp & mask) {
 13811  0020B4  51A1               	movf	ks0108PutChar@temp& (0+255),w,b
 13812  0020B6  15A7               	andwf	ks0108PutChar@mask& (0+255),w,b
 13813  0020B8  E00D               	bz	l7371
 13814                           
 13815                           ; BSR set to: 0
 13816                           ;ks0108.c: 318: if(mode)
 13817  0020BA  5197               	movf	ks0108PutChar@mode& (0+255),w,b
 13818  0020BC  E006               	bz	l7369
 13819                           
 13820                           ; BSR set to: 0
 13821                           ;ks0108.c: 319: ks0108SetDot(x, y);
 13822  0020BE  C0A5  F090         	movff	ks0108PutChar@y,ks0108SetDot@y
 13823  0020C2  51A6               	movf	ks0108PutChar@x& (0+255),w,b
 13824  0020C4  EC92  F018         	call	_ks0108SetDot
 13825  0020C8  D005               	goto	l7371
 13826  0020CA                     l7369:
 13827                           
 13828                           ; BSR set to: 0
 13829                           ;ks0108.c: 320: else
 13830                           ;ks0108.c: 321: ks0108ClearDot(x, y);
 13831  0020CA  C0A5  F090         	movff	ks0108PutChar@y,ks0108ClearDot@y
 13832  0020CE  51A6               	movf	ks0108PutChar@x& (0+255),w,b
 13833  0020D0  ECE5  F017         	call	_ks0108ClearDot
 13834  0020D4                     l7371:
 13835                           
 13836                           ; BSR set to: 0
 13837                           ;ks0108.c: 324: }
 13838                           ;ks0108.c: 326: x++;
 13839  0020D4  2BA6               	incf	ks0108PutChar@x& (0+255),f,b
 13840                           
 13841                           ; BSR set to: 0
 13842                           ;ks0108.c: 327: mask >>= 1;
 13843  0020D6  90D8               	bcf	status,0,c
 13844  0020D8  33A7               	rrcf	ks0108PutChar@mask& (0+255),f,b
 13845                           
 13846                           ; BSR set to: 0
 13847  0020DA  2B9F               	incf	ks0108PutChar@xCnt& (0+255),f,b
 13848  0020DC                     l1062:
 13849                           
 13850                           ; BSR set to: 0
 13851  0020DC  519C               	movf	ks0108PutChar@_fontWidth& (0+255),w,b
 13852  0020DE  5D9F               	subwf	ks0108PutChar@xCnt& (0+255),w,b
 13853  0020E0  E3DC               	bnc	l1063
 13854                           
 13855                           ; BSR set to: 0
 13856                           ;ks0108.c: 328: }
 13857                           ;ks0108.c: 329: y++;
 13858  0020E2  2BA5               	incf	ks0108PutChar@y& (0+255),f,b
 13859  0020E4  2BA0               	incf	ks0108PutChar@yCnt& (0+255),f,b
 13860  0020E6                     l7379:
 13861                           
 13862                           ; BSR set to: 0
 13863  0020E6  519B               	movf	ks0108PutChar@_fontHeight& (0+255),w,b
 13864  0020E8  5DA0               	subwf	ks0108PutChar@yCnt& (0+255),w,b
 13865  0020EA  E3D2               	bnc	l1061
 13866                           
 13867                           ; BSR set to: 0
 13868                           ;ks0108.c: 330: }
 13869                           ;ks0108.c: 333: pos.x = x_ + chWidth;
 13870  0020EC  51A2               	movf	ks0108PutChar@x_& (0+255),w,b
 13871  0020EE  25A4               	addwf	ks0108PutChar@chWidth& (0+255),w,b
 13872  0020F0  6FD6               	movwf	_pos& (0+255),b
 13873                           
 13874                           ; BSR set to: 0
 13875                           ;ks0108.c: 334: pos.y = y_;
 13876  0020F2  C0A3  F0D7         	movff	ks0108PutChar@y_,_pos+1
 13877                           
 13878                           ; BSR set to: 0
 13879                           ;ks0108.c: 336: return chWidth;
 13880  0020F6  51A4               	movf	ks0108PutChar@chWidth& (0+255),w,b
 13881                           
 13882                           ; BSR set to: 0
 13883  0020F8  0012               	return	
 13884  0020FA                     __end_of_ks0108PutChar:
 13885                           	opt stack 0
 13886  0020FA                     PL78:
 13887                           	opt stack 15
 13888  0020FA  6F98               	movwf	??_ks0108PutChar& (0+255),b
 13889  0020FC  0E00               	movlw	0
 13890  0020FE  2196               	addwfc	(ks0108PutChar@p_font+1)& (0+255),w,b
 13891  002100  6F99               	movwf	(??_ks0108PutChar+1)& (0+255),b
 13892  002102  C098  FFF6         	movff	??_ks0108PutChar,tblptrl
 13893  002106  C099  FFF7         	movff	??_ks0108PutChar+1,tblptrh
 13894  00210A                     	if	0	;tblptru may be non-zero
 13895  00210A                     	endif
 13896  00210A                     	if	0	;tblptru may be non-zero
 13897  00210A                     	endif
 13898  00210A  0008               	tblrd		*
 13899  00210C  0012               	return	
 13900  00210E                     __end_ofPL78:
 13901                           	opt stack 0
 13902  00210E                     PL86:
 13903                           	opt stack 15
 13904  00210E  C095  F098         	movff	ks0108PutChar@p_font,??_ks0108PutChar
 13905  002112  C096  F099         	movff	ks0108PutChar@p_font+1,??_ks0108PutChar+1
 13906  002116  51A8               	movf	ks0108PutChar@base& (0+255),w,b
 13907  002118  2798               	addwf	??_ks0108PutChar& (0+255),f,b
 13908  00211A  51A9               	movf	(ks0108PutChar@base+1)& (0+255),w,b
 13909  00211C  2399               	addwfc	(??_ks0108PutChar+1)& (0+255),f,b
 13910  00211E  0012               	return	
 13911  002120                     __end_ofPL86:
 13912                           	opt stack 0
 13913                           tblptru	equ	0xFF8
 13914                           tblptrh	equ	0xFF7
 13915                           tblptrl	equ	0xFF6
 13916                           tablat	equ	0xFF5
 13917                           prodh	equ	0xFF4
 13918                           prodl	equ	0xFF3
 13919                           intcon	equ	0xFF2
 13920                           postinc0	equ	0xFEE
 13921                           wreg	equ	0xFE8
 13922                           indf1	equ	0xFE7
 13923                           postinc1	equ	0xFE6
 13924                           postdec1	equ	0xFE5
 13925                           fsr1h	equ	0xFE2
 13926                           fsr1l	equ	0xFE1
 13927                           indf2	equ	0xFDF
 13928                           postinc2	equ	0xFDE
 13929                           postdec2	equ	0xFDD
 13930                           fsr2h	equ	0xFDA
 13931                           fsr2l	equ	0xFD9
 13932                           status	equ	0xFD8
 13933                           
 13934 ;; *************** function _ks0108SetDot *****************
 13935 ;; Defined at:
 13936 ;;		line 83 in file "../lib/ks0108.c"
 13937 ;; Parameters:    Size  Location     Type
 13938 ;;  x               1    wreg     unsigned char 
 13939 ;;  y               1   48[BANK0 ] unsigned char 
 13940 ;; Auto vars:     Size  Location     Type
 13941 ;;  x               1   51[BANK0 ] unsigned char 
 13942 ;;  data            1   52[BANK0 ] unsigned char 
 13943 ;; Return value:  Size  Location     Type
 13944 ;;		None               void
 13945 ;; Registers used:
 13946 ;;		wreg, status,2, status,0, cstack
 13947 ;; Tracked objects:
 13948 ;;		On entry : F/0
 13949 ;;		On exit  : F/0
 13950 ;;		Unchanged: 0/0
 13951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13952 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13953 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13954 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13955 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13956 ;;Total ram usage:        5 bytes
 13957 ;; Hardware stack levels used:    1
 13958 ;; Hardware stack levels required when called:   12
 13959 ;; This function calls:
 13960 ;;		_ks0108GotoXY
 13961 ;;		_ks0108ReadData
 13962 ;;		_ks0108WriteData
 13963 ;; This function is called by:
 13964 ;;		_ks0108PutChar
 13965 ;; This function uses a non-reentrant model
 13966 ;;
 13967                           
 13968                           	psect	text41
 13969  003124                     __ptext41:
 13970                           	opt stack 0
 13971  003124                     _ks0108SetDot:
 13972                           	opt stack 15
 13973                           
 13974                           ; BSR set to: 0
 13975                           ;incstack = 0
 13976                           ;ks0108SetDot@x stored from wreg
 13977  003124  6F93               	movwf	ks0108SetDot@x& (0+255),b
 13978                           
 13979                           ; BSR set to: 0
 13980                           ;ks0108.c: 84: uint8_t data;
 13981                           ;ks0108.c: 86: ks0108GotoXY(x, y);
 13982  003126  C090  F089         	movff	ks0108SetDot@y,ks0108GotoXY@y
 13983  00312A  5193               	movf	ks0108SetDot@x& (0+255),w,b
 13984  00312C  ECB6  F017         	call	_ks0108GotoXY
 13985                           
 13986                           ;ks0108.c: 87: data = ks0108ReadData(1);
 13987  003130  0E01               	movlw	1
 13988  003132  EC21  F017         	call	_ks0108ReadData
 13989  003136  6F94               	movwf	ks0108SetDot@data& (0+255),b
 13990                           
 13991                           ;ks0108.c: 88: data = ks0108ReadData(1);
 13992  003138  0E01               	movlw	1
 13993  00313A  EC21  F017         	call	_ks0108ReadData
 13994  00313E  6F94               	movwf	ks0108SetDot@data& (0+255),b
 13995                           
 13996                           ; BSR set to: 0
 13997                           ;ks0108.c: 90: if(!(data & (0x01 << (y % 8)))) {
 13998  003140  C090  F091         	movff	ks0108SetDot@y,??_ks0108SetDot
 13999  003144  D80A               	call	PL66	;call to abstracted procedure
 14000  003146  1594               	andwf	ks0108SetDot@data& (0+255),w,b
 14001  003148  A4D8               	btfss	status,2,c
 14002  00314A  0012               	return	
 14003                           
 14004                           ; BSR set to: 0
 14005                           ;ks0108.c: 92: data |= 0x01 << (y % 8);
 14006  00314C  C090  F091         	movff	ks0108SetDot@y,??_ks0108SetDot
 14007  003150  D804               	call	PL66	;call to abstracted procedure
 14008  003152  1394               	iorwf	ks0108SetDot@data& (0+255),f,b
 14009                           
 14010                           ; BSR set to: 0
 14011                           ;ks0108.c: 94: ks0108WriteData(data);
 14012  003154  5194               	movf	ks0108SetDot@data& (0+255),w,b
 14013  003156  EF4F  F019         	goto	_ks0108WriteData
 14014  00315A                     __end_of_ks0108SetDot:
 14015                           	opt stack 0
 14016  00315A                     PL66:
 14017                           	opt stack 15
 14018  00315A  0E07               	movlw	7
 14019  00315C  1791               	andwf	??_ks0108SetDot& (0+255),f,b
 14020  00315E  0E01               	movlw	1
 14021  003160  6F92               	movwf	(??_ks0108SetDot+1)& (0+255),b
 14022  003162  2B91               	incf	??_ks0108SetDot& (0+255),f,b
 14023  003164  D002               	goto	u3824
 14024  003166                     u3825:
 14025  003166  90D8               	bcf	status,0,c
 14026  003168  3792               	rlcf	(??_ks0108SetDot+1)& (0+255),f,b
 14027  00316A                     u3824:
 14028  00316A  2F91               	decfsz	??_ks0108SetDot& (0+255),f,b
 14029  00316C  D7FC               	goto	u3825
 14030  00316E  5192               	movf	(??_ks0108SetDot+1)& (0+255),w,b
 14031  003170  0012               	return	
 14032  003172                     __end_ofPL66:
 14033                           	opt stack 0
 14034                           tblptru	equ	0xFF8
 14035                           tblptrh	equ	0xFF7
 14036                           tblptrl	equ	0xFF6
 14037                           tablat	equ	0xFF5
 14038                           prodh	equ	0xFF4
 14039                           prodl	equ	0xFF3
 14040                           intcon	equ	0xFF2
 14041                           postinc0	equ	0xFEE
 14042                           wreg	equ	0xFE8
 14043                           indf1	equ	0xFE7
 14044                           postinc1	equ	0xFE6
 14045                           postdec1	equ	0xFE5
 14046                           fsr1h	equ	0xFE2
 14047                           fsr1l	equ	0xFE1
 14048                           indf2	equ	0xFDF
 14049                           postinc2	equ	0xFDE
 14050                           postdec2	equ	0xFDD
 14051                           fsr2h	equ	0xFDA
 14052                           fsr2l	equ	0xFD9
 14053                           status	equ	0xFD8
 14054                           
 14055 ;; *************** function _ks0108ClearDot *****************
 14056 ;; Defined at:
 14057 ;;		line 100 in file "../lib/ks0108.c"
 14058 ;; Parameters:    Size  Location     Type
 14059 ;;  x               1    wreg     unsigned char 
 14060 ;;  y               1   48[BANK0 ] unsigned char 
 14061 ;; Auto vars:     Size  Location     Type
 14062 ;;  x               1   51[BANK0 ] unsigned char 
 14063 ;;  data            1   52[BANK0 ] unsigned char 
 14064 ;; Return value:  Size  Location     Type
 14065 ;;		None               void
 14066 ;; Registers used:
 14067 ;;		wreg, status,2, status,0, cstack
 14068 ;; Tracked objects:
 14069 ;;		On entry : F/0
 14070 ;;		On exit  : F/0
 14071 ;;		Unchanged: 0/0
 14072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14073 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14074 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14075 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14076 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14077 ;;Total ram usage:        5 bytes
 14078 ;; Hardware stack levels used:    1
 14079 ;; Hardware stack levels required when called:   12
 14080 ;; This function calls:
 14081 ;;		_ks0108GotoXY
 14082 ;;		_ks0108ReadData
 14083 ;;		_ks0108WriteData
 14084 ;; This function is called by:
 14085 ;;		_ks0108PutChar
 14086 ;; This function uses a non-reentrant model
 14087 ;;
 14088                           
 14089                           	psect	text42
 14090  002FCA                     __ptext42:
 14091                           	opt stack 0
 14092  002FCA                     _ks0108ClearDot:
 14093                           	opt stack 15
 14094                           
 14095                           ; BSR set to: 0
 14096                           ;incstack = 0
 14097                           ;ks0108ClearDot@x stored from wreg
 14098  002FCA  6F93               	movwf	ks0108ClearDot@x& (0+255),b
 14099                           
 14100                           ; BSR set to: 0
 14101                           ;ks0108.c: 101: uint8_t data;
 14102                           ;ks0108.c: 103: ks0108GotoXY(x, y);
 14103  002FCC  C090  F089         	movff	ks0108ClearDot@y,ks0108GotoXY@y
 14104  002FD0  5193               	movf	ks0108ClearDot@x& (0+255),w,b
 14105  002FD2  ECB6  F017         	call	_ks0108GotoXY
 14106                           
 14107                           ;ks0108.c: 104: data = ks0108ReadData(1);
 14108  002FD6  0E01               	movlw	1
 14109  002FD8  EC21  F017         	call	_ks0108ReadData
 14110  002FDC  6F94               	movwf	ks0108ClearDot@data& (0+255),b
 14111                           
 14112                           ;ks0108.c: 105: data = ks0108ReadData(1);
 14113  002FDE  0E01               	movlw	1
 14114  002FE0  EC21  F017         	call	_ks0108ReadData
 14115  002FE4  6F94               	movwf	ks0108ClearDot@data& (0+255),b
 14116                           
 14117                           ; BSR set to: 0
 14118                           ;ks0108.c: 107: if((data & (0x01 << (y % 8)))) {
 14119  002FE6  C090  F091         	movff	ks0108ClearDot@y,??_ks0108ClearDot
 14120  002FEA  D816               	call	PL134	;call to abstracted procedure
 14121  002FEC  D002               	goto	u3854
 14122  002FEE                     u3855:
 14123  002FEE  90D8               	bcf	status,0,c
 14124  002FF0  3792               	rlcf	(??_ks0108ClearDot+1)& (0+255),f,b
 14125  002FF2                     u3854:
 14126  002FF2  2F91               	decfsz	??_ks0108ClearDot& (0+255),f,b
 14127  002FF4  D7FC               	goto	u3855
 14128  002FF6  5192               	movf	(??_ks0108ClearDot+1)& (0+255),w,b
 14129  002FF8  1594               	andwf	ks0108ClearDot@data& (0+255),w,b
 14130  002FFA  B4D8               	btfsc	status,2,c
 14131  002FFC  0012               	return	
 14132                           
 14133                           ; BSR set to: 0
 14134                           ;ks0108.c: 109: data &= ~(0x01 << (y % 8));
 14135  002FFE  C090  F091         	movff	ks0108ClearDot@y,??_ks0108ClearDot
 14136  003002  D80A               	call	PL134	;call to abstracted procedure
 14137  003004  D002               	goto	u3874
 14138  003006                     u3875:
 14139  003006  90D8               	bcf	status,0,c
 14140  003008  3792               	rlcf	(??_ks0108ClearDot+1)& (0+255),f,b
 14141  00300A                     u3874:
 14142  00300A  2F91               	decfsz	??_ks0108ClearDot& (0+255),f,b
 14143  00300C  D7FC               	goto	u3875
 14144  00300E  1D92               	comf	(??_ks0108ClearDot+1)& (0+255),w,b
 14145  003010  1794               	andwf	ks0108ClearDot@data& (0+255),f,b
 14146                           
 14147                           ; BSR set to: 0
 14148                           ;ks0108.c: 111: ks0108WriteData(data);
 14149  003012  5194               	movf	ks0108ClearDot@data& (0+255),w,b
 14150  003014  EF4F  F019         	goto	_ks0108WriteData
 14151  003018                     __end_of_ks0108ClearDot:
 14152                           	opt stack 0
 14153  003018                     PL134:
 14154                           	opt stack 15
 14155  003018  0E07               	movlw	7
 14156  00301A  1791               	andwf	??_ks0108ClearDot& (0+255),f,b
 14157  00301C  0E01               	movlw	1
 14158  00301E  6F92               	movwf	(??_ks0108ClearDot+1)& (0+255),b
 14159  003020  2B91               	incf	??_ks0108ClearDot& (0+255),f,b
 14160  003022  0C01               	retlw	1
 14161  003024                     __end_ofPL134:
 14162                           	opt stack 0
 14163                           tblptru	equ	0xFF8
 14164                           tblptrh	equ	0xFF7
 14165                           tblptrl	equ	0xFF6
 14166                           tablat	equ	0xFF5
 14167                           prodh	equ	0xFF4
 14168                           prodl	equ	0xFF3
 14169                           intcon	equ	0xFF2
 14170                           postinc0	equ	0xFEE
 14171                           wreg	equ	0xFE8
 14172                           indf1	equ	0xFE7
 14173                           postinc1	equ	0xFE6
 14174                           postdec1	equ	0xFE5
 14175                           fsr1h	equ	0xFE2
 14176                           fsr1l	equ	0xFE1
 14177                           indf2	equ	0xFDF
 14178                           postinc2	equ	0xFDE
 14179                           postdec2	equ	0xFDD
 14180                           fsr2h	equ	0xFDA
 14181                           fsr2l	equ	0xFD9
 14182                           status	equ	0xFD8
 14183                           
 14184 ;; *************** function _ks0108WriteData *****************
 14185 ;; Defined at:
 14186 ;;		line 236 in file "../lib/ks0108.c"
 14187 ;; Parameters:    Size  Location     Type
 14188 ;;  data            1    wreg     unsigned char 
 14189 ;; Auto vars:     Size  Location     Type
 14190 ;;  data            1   41[BANK0 ] unsigned char 
 14191 ;; Return value:  Size  Location     Type
 14192 ;;		None               void
 14193 ;; Registers used:
 14194 ;;		wreg, status,2, status,0, cstack
 14195 ;; Tracked objects:
 14196 ;;		On entry : F/0
 14197 ;;		On exit  : F/0
 14198 ;;		Unchanged: 0/0
 14199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14201 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14203 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14204 ;;Total ram usage:        1 bytes
 14205 ;; Hardware stack levels used:    1
 14206 ;; Hardware stack levels required when called:   10
 14207 ;; This function calls:
 14208 ;;		_ks0108Enable
 14209 ;;		_ks0108WriteCommand
 14210 ;; This function is called by:
 14211 ;;		_ks0108Fill
 14212 ;;		_ks0108SetDot
 14213 ;;		_ks0108ClearDot
 14214 ;; This function uses a non-reentrant model
 14215 ;;
 14216                           
 14217                           	psect	text43
 14218  00329E                     __ptext43:
 14219                           	opt stack 0
 14220  00329E                     _ks0108WriteData:
 14221                           	opt stack 16
 14222                           
 14223                           ; BSR set to: 0
 14224                           ;incstack = 0
 14225                           ;ks0108WriteData@data stored from wreg
 14226  00329E  6F89               	movwf	ks0108WriteData@data& (0+255),b
 14227                           
 14228                           ; BSR set to: 0
 14229                           ;ks0108.c: 238: if(pos.x >= 128)
 14230  0032A0  0E7F               	movlw	127
 14231  0032A2  65D6               	cpfsgt	_pos& (0+255),b
 14232  0032A4  D001               	goto	l4509
 14233  0032A6  0C7F               	retlw	127
 14234  0032A8                     l4509:
 14235                           
 14236                           ; BSR set to: 0
 14237                           ;ks0108.c: 241: if(pos.x < 64) {
 14238  0032A8  0E40               	movlw	64
 14239  0032AA  5DD6               	subwf	_pos& (0+255),w,b
 14240  0032AC  E203               	bc	l4513
 14241                           
 14242                           ; BSR set to: 0
 14243                           ;ks0108.c: 242: LATC3 = 1;
 14244  0032AE  868B               	bsf	3979,3,c	;volatile
 14245                           
 14246                           ;ks0108.c: 243: LATC2 = 0;
 14247  0032B0  948B               	bcf	3979,2,c	;volatile
 14248                           
 14249                           ;ks0108.c: 244: } else if(pos.x >= 64) {
 14250  0032B2  D005               	goto	l4517
 14251  0032B4                     l4513:
 14252                           
 14253                           ; BSR set to: 0
 14254  0032B4  0E3F               	movlw	63
 14255  0032B6  65D6               	cpfsgt	_pos& (0+255),b
 14256  0032B8  D002               	goto	l4517
 14257                           
 14258                           ; BSR set to: 0
 14259                           ;ks0108.c: 245: LATC3 = 0;
 14260  0032BA  968B               	bcf	3979,3,c	;volatile
 14261                           
 14262                           ;ks0108.c: 246: LATC2 = 1;
 14263  0032BC  848B               	bsf	3979,2,c	;volatile
 14264  0032BE                     l4517:
 14265                           
 14266                           ; BSR set to: 0
 14267                           ;ks0108.c: 247: }
 14268                           ;ks0108.c: 249: if(pos.x == 64) {
 14269  0032BE  51D6               	movf	_pos& (0+255),w,b
 14270  0032C0  0A40               	xorlw	64
 14271  0032C2  E105               	bnz	l4521
 14272                           
 14273                           ; BSR set to: 0
 14274                           ;ks0108.c: 250: ks0108WriteCommand(0x40, 0x01);
 14275  0032C4  0E01               	movlw	1
 14276  0032C6  6F87               	movwf	ks0108WriteCommand@chip& (0+255),b
 14277  0032C8  0E40               	movlw	64
 14278  0032CA  ECA2  F01A         	call	_ks0108WriteCommand
 14279  0032CE                     l4521:
 14280                           
 14281                           ;ks0108.c: 254: }
 14282                           ;ks0108.c: 257: LATE1 = 0;
 14283  0032CE  928D               	bcf	3981,1,c	;volatile
 14284                           
 14285                           ;ks0108.c: 258: LATE2 = 1;
 14286  0032D0  848D               	bsf	3981,2,c	;volatile
 14287                           
 14288                           ;ks0108.c: 260: TRISD = 0x00;
 14289  0032D2  6A95               	clrf	3989,c	;volatile
 14290                           
 14291                           ;ks0108.c: 267: LATD = data;
 14292  0032D4  C089  FF8C         	movff	ks0108WriteData@data,3980	;volatile
 14293                           
 14294                           ;ks0108.c: 269: ks0108Enable();
 14295  0032D8  EC3A  F01A         	call	_ks0108Enable	;wreg free
 14296                           
 14297                           ;ks0108.c: 276: pos.x++;
 14298  0032DC  0100               	movlb	0	; () banked
 14299  0032DE  2BD6               	incf	_pos& (0+255),f,b
 14300                           
 14301                           ; BSR set to: 0
 14302                           ;ks0108.c: 278: LATD = 0;
 14303  0032E0  6A8C               	clrf	3980,c	;volatile
 14304                           
 14305                           ; BSR set to: 0
 14306  0032E2  0012               	return	
 14307  0032E4                     __end_of_ks0108WriteData:
 14308                           	opt stack 0
 14309                           tblptru	equ	0xFF8
 14310                           tblptrh	equ	0xFF7
 14311                           tblptrl	equ	0xFF6
 14312                           tablat	equ	0xFF5
 14313                           prodh	equ	0xFF4
 14314                           prodl	equ	0xFF3
 14315                           intcon	equ	0xFF2
 14316                           postinc0	equ	0xFEE
 14317                           wreg	equ	0xFE8
 14318                           indf1	equ	0xFE7
 14319                           postinc1	equ	0xFE6
 14320                           postdec1	equ	0xFE5
 14321                           fsr1h	equ	0xFE2
 14322                           fsr1l	equ	0xFE1
 14323                           indf2	equ	0xFDF
 14324                           postinc2	equ	0xFDE
 14325                           postdec2	equ	0xFDD
 14326                           fsr2h	equ	0xFDA
 14327                           fsr2l	equ	0xFD9
 14328                           status	equ	0xFD8
 14329                           
 14330 ;; *************** function _ks0108ReadData *****************
 14331 ;; Defined at:
 14332 ;;		line 159 in file "../lib/ks0108.c"
 14333 ;; Parameters:    Size  Location     Type
 14334 ;;  incXAdd         1    wreg     unsigned char 
 14335 ;; Auto vars:     Size  Location     Type
 14336 ;;  incXAdd         1   45[BANK0 ] unsigned char 
 14337 ;;  i               1   47[BANK0 ] volatile unsigned char 
 14338 ;;  data            1   46[BANK0 ] unsigned char 
 14339 ;; Return value:  Size  Location     Type
 14340 ;;                  1    wreg      unsigned char 
 14341 ;; Registers used:
 14342 ;;		wreg, status,2, status,0, cstack
 14343 ;; Tracked objects:
 14344 ;;		On entry : 0/0
 14345 ;;		On exit  : F/0
 14346 ;;		Unchanged: 0/0
 14347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14349 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14351 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14352 ;;Total ram usage:        3 bytes
 14353 ;; Hardware stack levels used:    1
 14354 ;; Hardware stack levels required when called:   11
 14355 ;; This function calls:
 14356 ;;		_ks0108GotoXY
 14357 ;; This function is called by:
 14358 ;;		_ks0108SetDot
 14359 ;;		_ks0108ClearDot
 14360 ;; This function uses a non-reentrant model
 14361 ;;
 14362                           
 14363                           	psect	text44
 14364  002E42                     __ptext44:
 14365                           	opt stack 0
 14366  002E42                     _ks0108ReadData:
 14367                           	opt stack 15
 14368                           
 14369                           ; BSR set to: 0
 14370                           ;incstack = 0
 14371                           ;ks0108ReadData@incXAdd stored from wreg
 14372  002E42  0100               	movlb	0	; () banked
 14373  002E44  6F8D               	movwf	ks0108ReadData@incXAdd& (0+255),b
 14374                           
 14375                           ; BSR set to: 0
 14376                           ;ks0108.c: 160: uint8_t data;
 14377                           ;ks0108.c: 161: volatile uint8_t i;
 14378                           ;ks0108.c: 167: LATD = 0x00;
 14379  002E46  6A8C               	clrf	3980,c	;volatile
 14380                           
 14381                           ;ks0108.c: 168: TRISD = 0xff;
 14382  002E48  6895               	setf	3989,c	;volatile
 14383                           
 14384                           ; BSR set to: 0
 14385                           ;ks0108.c: 170: if(pos.x < 64) {
 14386  002E4A  0E40               	movlw	64
 14387  002E4C  5DD6               	subwf	_pos& (0+255),w,b
 14388  002E4E  E203               	bc	l4541
 14389                           
 14390                           ; BSR set to: 0
 14391                           ;ks0108.c: 171: LATC3 = 1;
 14392  002E50  868B               	bsf	3979,3,c	;volatile
 14393                           
 14394                           ;ks0108.c: 172: LATC2 = 0;
 14395  002E52  948B               	bcf	3979,2,c	;volatile
 14396                           
 14397                           ;ks0108.c: 173: } else if(pos.x >= 64) {
 14398  002E54  D005               	goto	l1033
 14399  002E56                     l4541:
 14400                           
 14401                           ; BSR set to: 0
 14402  002E56  0E3F               	movlw	63
 14403  002E58  65D6               	cpfsgt	_pos& (0+255),b
 14404  002E5A  D002               	goto	l1033
 14405                           
 14406                           ; BSR set to: 0
 14407                           ;ks0108.c: 174: LATC3 = 0;
 14408  002E5C  968B               	bcf	3979,3,c	;volatile
 14409                           
 14410                           ;ks0108.c: 175: LATC2 = 1;
 14411  002E5E  848B               	bsf	3979,2,c	;volatile
 14412  002E60                     l1033:
 14413                           
 14414                           ; BSR set to: 0
 14415                           ;ks0108.c: 176: }
 14416                           ;ks0108.c: 178: LATE1 = 1;
 14417  002E60  828D               	bsf	3981,1,c	;volatile
 14418                           
 14419                           ;ks0108.c: 179: LATE2 = 1;
 14420  002E62  848D               	bsf	3981,2,c	;volatile
 14421                           
 14422                           ;ks0108.c: 181: for(i = 0; i < 8; i++);
 14423  002E64  6B8F               	clrf	ks0108ReadData@i& (0+255),b	;volatile
 14424  002E66  D001               	goto	L9
 14425  002E68                     l4549:
 14426                           
 14427                           ; BSR set to: 0
 14428  002E68  2B8F               	incf	ks0108ReadData@i& (0+255),f,b	;volatile
 14429  002E6A                     L9:
 14430                           
 14431                           ; BSR set to: 0
 14432  002E6A  0E07               	movlw	7
 14433  002E6C  658F               	cpfsgt	ks0108ReadData@i& (0+255),b	;volatile
 14434  002E6E  D7FC               	goto	l4549
 14435                           
 14436                           ; BSR set to: 0
 14437                           ;ks0108.c: 183: LATE0 = 1;
 14438  002E70  808D               	bsf	3981,0,c	;volatile
 14439                           
 14440                           ;ks0108.c: 185: for(i = 0; i < 8; i++);
 14441  002E72  6B8F               	clrf	ks0108ReadData@i& (0+255),b	;volatile
 14442  002E74  D001               	goto	L10
 14443  002E76                     l4557:
 14444                           
 14445                           ; BSR set to: 0
 14446  002E76  2B8F               	incf	ks0108ReadData@i& (0+255),f,b	;volatile
 14447  002E78                     L10:
 14448                           
 14449                           ; BSR set to: 0
 14450  002E78  0E07               	movlw	7
 14451  002E7A  658F               	cpfsgt	ks0108ReadData@i& (0+255),b	;volatile
 14452  002E7C  D7FC               	goto	l4557
 14453                           
 14454                           ; BSR set to: 0
 14455                           ;ks0108.c: 187: data = PORTD;
 14456  002E7E  CF83 F08E          	movff	3971,ks0108ReadData@data	;volatile
 14457                           
 14458                           ;ks0108.c: 192: LATE0 = 0;
 14459  002E82  908D               	bcf	3981,0,c	;volatile
 14460                           
 14461                           ;ks0108.c: 194: for(i = 0; i < 8; i++);
 14462  002E84  6B8F               	clrf	ks0108ReadData@i& (0+255),b	;volatile
 14463  002E86  D001               	goto	L11
 14464  002E88                     l4565:
 14465                           
 14466                           ; BSR set to: 0
 14467  002E88  2B8F               	incf	ks0108ReadData@i& (0+255),f,b	;volatile
 14468  002E8A                     L11:
 14469                           
 14470                           ; BSR set to: 0
 14471  002E8A  0E07               	movlw	7
 14472  002E8C  658F               	cpfsgt	ks0108ReadData@i& (0+255),b	;volatile
 14473  002E8E  D7FC               	goto	l4565
 14474                           
 14475                           ; BSR set to: 0
 14476                           ;ks0108.c: 203: TRISD = 0x00;
 14477  002E90  6A95               	clrf	3989,c	;volatile
 14478                           
 14479                           ;ks0108.c: 206: if(incXAdd == 0)
 14480  002E92  678D               	tstfsz	ks0108ReadData@incXAdd& (0+255),b
 14481  002E94  D002               	goto	l4571
 14482                           
 14483                           ; BSR set to: 0
 14484                           ;ks0108.c: 207: pos.x++;
 14485  002E96  2BD6               	incf	_pos& (0+255),f,b
 14486  002E98  D005               	goto	l4573
 14487  002E9A                     l4571:
 14488                           
 14489                           ; BSR set to: 0
 14490                           ;ks0108.c: 208: else
 14491                           ;ks0108.c: 209: ks0108GotoXY(pos.x, pos.y);
 14492  002E9A  C0D7  F089         	movff	_pos+1,ks0108GotoXY@y
 14493  002E9E  51D6               	movf	_pos& (0+255),w,b
 14494  002EA0  ECB6  F017         	call	_ks0108GotoXY
 14495  002EA4                     l4573:
 14496                           
 14497                           ;ks0108.c: 212: return data;
 14498  002EA4  0100               	movlb	0	; () banked
 14499  002EA6  518E               	movf	ks0108ReadData@data& (0+255),w,b
 14500                           
 14501                           ; BSR set to: 0
 14502  002EA8  0012               	return	
 14503  002EAA                     __end_of_ks0108ReadData:
 14504                           	opt stack 0
 14505                           tblptru	equ	0xFF8
 14506                           tblptrh	equ	0xFF7
 14507                           tblptrl	equ	0xFF6
 14508                           tablat	equ	0xFF5
 14509                           prodh	equ	0xFF4
 14510                           prodl	equ	0xFF3
 14511                           intcon	equ	0xFF2
 14512                           postinc0	equ	0xFEE
 14513                           wreg	equ	0xFE8
 14514                           indf1	equ	0xFE7
 14515                           postinc1	equ	0xFE6
 14516                           postdec1	equ	0xFE5
 14517                           fsr1h	equ	0xFE2
 14518                           fsr1l	equ	0xFE1
 14519                           indf2	equ	0xFDF
 14520                           postinc2	equ	0xFDE
 14521                           postdec2	equ	0xFDD
 14522                           fsr2h	equ	0xFDA
 14523                           fsr2l	equ	0xFD9
 14524                           status	equ	0xFD8
 14525                           
 14526 ;; *************** function _ks0108GotoXY *****************
 14527 ;; Defined at:
 14528 ;;		line 50 in file "../lib/ks0108.c"
 14529 ;; Parameters:    Size  Location     Type
 14530 ;;  x               1    wreg     unsigned char 
 14531 ;;  y               1   41[BANK0 ] unsigned char 
 14532 ;; Auto vars:     Size  Location     Type
 14533 ;;  x               1   44[BANK0 ] unsigned char 
 14534 ;;  cmd             1   43[BANK0 ] unsigned char 
 14535 ;;  chip            1   42[BANK0 ] unsigned char 
 14536 ;; Return value:  Size  Location     Type
 14537 ;;		None               void
 14538 ;; Registers used:
 14539 ;;		wreg, status,2, status,0, cstack
 14540 ;; Tracked objects:
 14541 ;;		On entry : F/0
 14542 ;;		On exit  : 0/0
 14543 ;;		Unchanged: 0/0
 14544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14545 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14546 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14548 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14549 ;;Total ram usage:        4 bytes
 14550 ;; Hardware stack levels used:    1
 14551 ;; Hardware stack levels required when called:   10
 14552 ;; This function calls:
 14553 ;;		_ks0108WriteCommand
 14554 ;; This function is called by:
 14555 ;;		_main
 14556 ;;		_ks0108Fill
 14557 ;;		_ks0108SetDot
 14558 ;;		_ks0108ClearDot
 14559 ;;		_ks0108ReadData
 14560 ;;		_LabelSetTxt
 14561 ;; This function uses a non-reentrant model
 14562 ;;
 14563                           
 14564                           	psect	text45
 14565  002F6C                     __ptext45:
 14566                           	opt stack 0
 14567  002F6C                     _ks0108GotoXY:
 14568                           	opt stack 15
 14569                           
 14570                           ; BSR set to: 0
 14571                           ;incstack = 0
 14572                           ;ks0108GotoXY@x stored from wreg
 14573  002F6C  6F8C               	movwf	ks0108GotoXY@x& (0+255),b
 14574                           
 14575                           ; BSR set to: 0
 14576                           ;ks0108.c: 51: uint8_t chip = 0x00, cmd;
 14577  002F6E  6B8A               	clrf	ks0108GotoXY@chip& (0+255),b
 14578                           
 14579                           ; BSR set to: 0
 14580                           ;ks0108.c: 53: if(x > 127) x = 0;
 14581  002F70  0E7F               	movlw	127
 14582  002F72  658C               	cpfsgt	ks0108GotoXY@x& (0+255),b
 14583  002F74  D001               	goto	l4483
 14584                           
 14585                           ; BSR set to: 0
 14586  002F76  6B8C               	clrf	ks0108GotoXY@x& (0+255),b
 14587  002F78                     l4483:
 14588                           
 14589                           ; BSR set to: 0
 14590                           ;ks0108.c: 54: if(y > 63) y = 0;
 14591  002F78  0E3F               	movlw	63
 14592  002F7A  6589               	cpfsgt	ks0108GotoXY@y& (0+255),b
 14593  002F7C  D001               	goto	l1016
 14594                           
 14595                           ; BSR set to: 0
 14596  002F7E  6B89               	clrf	ks0108GotoXY@y& (0+255),b
 14597  002F80                     l1016:
 14598                           
 14599                           ; BSR set to: 0
 14600                           ;ks0108.c: 56: pos.x = x;
 14601  002F80  C08C  F0D6         	movff	ks0108GotoXY@x,_pos
 14602                           
 14603                           ;ks0108.c: 57: pos.y = y;
 14604  002F84  C089  F0D7         	movff	ks0108GotoXY@y,_pos+1
 14605                           
 14606                           ; BSR set to: 0
 14607                           ;ks0108.c: 58: pos.page = y >> 3;
 14608  002F88  3989               	swapf	ks0108GotoXY@y& (0+255),w,b
 14609  002F8A  46E8               	rlncf	wreg,f,c
 14610  002F8C  0B1F               	andlw	31
 14611  002F8E  6FD8               	movwf	(_pos+2)& (0+255),b
 14612                           
 14613                           ; BSR set to: 0
 14614                           ;ks0108.c: 60: if(x >= 64) {
 14615  002F90  0E3F               	movlw	63
 14616  002F92  658C               	cpfsgt	ks0108GotoXY@x& (0+255),b
 14617  002F94  D004               	goto	l4495
 14618                           
 14619                           ; BSR set to: 0
 14620                           ;ks0108.c: 61: x -= 64;
 14621  002F96  0E40               	movlw	64
 14622  002F98  5F8C               	subwf	ks0108GotoXY@x& (0+255),f,b
 14623                           
 14624                           ; BSR set to: 0
 14625                           ;ks0108.c: 62: chip = 0x01;
 14626  002F9A  0E01               	movlw	1
 14627  002F9C  6F8A               	movwf	ks0108GotoXY@chip& (0+255),b
 14628  002F9E                     l4495:
 14629                           
 14630                           ; BSR set to: 0
 14631                           ;ks0108.c: 63: }
 14632                           ;ks0108.c: 70: cmd = 0x40 | x;
 14633  002F9E  518C               	movf	ks0108GotoXY@x& (0+255),w,b
 14634  002FA0  0940               	iorlw	64
 14635  002FA2  6F8B               	movwf	ks0108GotoXY@cmd& (0+255),b
 14636                           
 14637                           ; BSR set to: 0
 14638                           ;ks0108.c: 71: ks0108WriteCommand(cmd, chip);
 14639  002FA4  C08A  F087         	movff	ks0108GotoXY@chip,ks0108WriteCommand@chip
 14640  002FA8  518B               	movf	ks0108GotoXY@cmd& (0+255),w,b
 14641  002FAA  ECA2  F01A         	call	_ks0108WriteCommand
 14642                           
 14643                           ;ks0108.c: 73: cmd = 0xB8 | pos.page;
 14644  002FAE  0100               	movlb	0	; () banked
 14645  002FB0  51D8               	movf	(_pos+2)& (0+255),w,b
 14646  002FB2  09B8               	iorlw	184
 14647  002FB4  6F8B               	movwf	ks0108GotoXY@cmd& (0+255),b
 14648                           
 14649                           ; BSR set to: 0
 14650                           ;ks0108.c: 75: ks0108WriteCommand(cmd, 0x00);
 14651  002FB6  6B87               	clrf	ks0108WriteCommand@chip& (0+255),b
 14652  002FB8  518B               	movf	ks0108GotoXY@cmd& (0+255),w,b
 14653  002FBA  ECA2  F01A         	call	_ks0108WriteCommand
 14654                           
 14655                           ;ks0108.c: 76: ks0108WriteCommand(cmd, 0x01);
 14656  002FBE  0E01               	movlw	1
 14657  002FC0  0100               	movlb	0	; () banked
 14658  002FC2  6F87               	movwf	ks0108WriteCommand@chip& (0+255),b
 14659  002FC4  518B               	movf	ks0108GotoXY@cmd& (0+255),w,b
 14660  002FC6  EFA2  F01A         	goto	_ks0108WriteCommand
 14661  002FCA                     __end_of_ks0108GotoXY:
 14662                           	opt stack 0
 14663                           tblptru	equ	0xFF8
 14664                           tblptrh	equ	0xFF7
 14665                           tblptrl	equ	0xFF6
 14666                           tablat	equ	0xFF5
 14667                           prodh	equ	0xFF4
 14668                           prodl	equ	0xFF3
 14669                           intcon	equ	0xFF2
 14670                           postinc0	equ	0xFEE
 14671                           wreg	equ	0xFE8
 14672                           indf1	equ	0xFE7
 14673                           postinc1	equ	0xFE6
 14674                           postdec1	equ	0xFE5
 14675                           fsr1h	equ	0xFE2
 14676                           fsr1l	equ	0xFE1
 14677                           indf2	equ	0xFDF
 14678                           postinc2	equ	0xFDE
 14679                           postdec2	equ	0xFDD
 14680                           fsr2h	equ	0xFDA
 14681                           fsr2l	equ	0xFD9
 14682                           status	equ	0xFD8
 14683                           
 14684 ;; *************** function _ks0108WriteCommand *****************
 14685 ;; Defined at:
 14686 ;;		line 216 in file "../lib/ks0108.c"
 14687 ;; Parameters:    Size  Location     Type
 14688 ;;  cmd             1    wreg     unsigned char 
 14689 ;;  chip            1   39[BANK0 ] unsigned char 
 14690 ;; Auto vars:     Size  Location     Type
 14691 ;;  cmd             1   40[BANK0 ] unsigned char 
 14692 ;; Return value:  Size  Location     Type
 14693 ;;		None               void
 14694 ;; Registers used:
 14695 ;;		wreg, status,2, status,0, cstack
 14696 ;; Tracked objects:
 14697 ;;		On entry : F/0
 14698 ;;		On exit  : 0/0
 14699 ;;		Unchanged: 0/0
 14700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14701 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14702 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14704 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14705 ;;Total ram usage:        2 bytes
 14706 ;; Hardware stack levels used:    1
 14707 ;; Hardware stack levels required when called:    9
 14708 ;; This function calls:
 14709 ;;		_ks0108Enable
 14710 ;; This function is called by:
 14711 ;;		_ks0108GotoXY
 14712 ;;		_ks0108Init
 14713 ;;		_ks0108WriteData
 14714 ;; This function uses a non-reentrant model
 14715 ;;
 14716                           
 14717                           	psect	text46
 14718  003544                     __ptext46:
 14719                           	opt stack 0
 14720  003544                     _ks0108WriteCommand:
 14721                           	opt stack 16
 14722                           
 14723                           ;incstack = 0
 14724                           ;ks0108WriteCommand@cmd stored from wreg
 14725  003544  6F88               	movwf	ks0108WriteCommand@cmd& (0+255),b
 14726                           
 14727                           ; BSR set to: 0
 14728                           ;ks0108.c: 218: if(chip == 0x00) {
 14729  003546  6787               	tstfsz	ks0108WriteCommand@chip& (0+255),b
 14730  003548  D003               	goto	l4469
 14731                           
 14732                           ; BSR set to: 0
 14733                           ;ks0108.c: 219: LATC3 = 1;
 14734  00354A  868B               	bsf	3979,3,c	;volatile
 14735                           
 14736                           ;ks0108.c: 220: LATC2 = 0;
 14737  00354C  948B               	bcf	3979,2,c	;volatile
 14738                           
 14739                           ;ks0108.c: 221: } else if(chip == 0x01) {
 14740  00354E  D004               	goto	l1047
 14741  003550                     l4469:
 14742                           
 14743                           ; BSR set to: 0
 14744  003550  0587               	decf	ks0108WriteCommand@chip& (0+255),w,b
 14745  003552  E102               	bnz	l1047
 14746                           
 14747                           ; BSR set to: 0
 14748                           ;ks0108.c: 222: LATC3 = 0;
 14749  003554  968B               	bcf	3979,3,c	;volatile
 14750                           
 14751                           ;ks0108.c: 223: LATC2 = 1;
 14752  003556  848B               	bsf	3979,2,c	;volatile
 14753  003558                     l1047:
 14754                           
 14755                           ; BSR set to: 0
 14756                           ;ks0108.c: 224: }
 14757                           ;ks0108.c: 226: LATE1 = 0;
 14758  003558  928D               	bcf	3981,1,c	;volatile
 14759                           
 14760                           ;ks0108.c: 227: LATE2 = 0;
 14761  00355A  948D               	bcf	3981,2,c	;volatile
 14762                           
 14763                           ;ks0108.c: 229: TRISD = 0x00;
 14764  00355C  6A95               	clrf	3989,c	;volatile
 14765                           
 14766                           ;ks0108.c: 230: LATD = cmd;
 14767  00355E  C088  FF8C         	movff	ks0108WriteCommand@cmd,3980	;volatile
 14768                           
 14769                           ; BSR set to: 0
 14770                           ;ks0108.c: 231: ks0108Enable();
 14771  003562  EC3A  F01A         	call	_ks0108Enable	;wreg free
 14772                           
 14773                           ;ks0108.c: 232: LATD = 0x00;
 14774  003566  6A8C               	clrf	3980,c	;volatile
 14775  003568  0012               	return	
 14776  00356A                     __end_of_ks0108WriteCommand:
 14777                           	opt stack 0
 14778                           tblptru	equ	0xFF8
 14779                           tblptrh	equ	0xFF7
 14780                           tblptrl	equ	0xFF6
 14781                           tablat	equ	0xFF5
 14782                           prodh	equ	0xFF4
 14783                           prodl	equ	0xFF3
 14784                           intcon	equ	0xFF2
 14785                           postinc0	equ	0xFEE
 14786                           wreg	equ	0xFE8
 14787                           indf1	equ	0xFE7
 14788                           postinc1	equ	0xFE6
 14789                           postdec1	equ	0xFE5
 14790                           fsr1h	equ	0xFE2
 14791                           fsr1l	equ	0xFE1
 14792                           indf2	equ	0xFDF
 14793                           postinc2	equ	0xFDE
 14794                           postdec2	equ	0xFDD
 14795                           fsr2h	equ	0xFDA
 14796                           fsr2l	equ	0xFD9
 14797                           status	equ	0xFD8
 14798                           
 14799 ;; *************** function _ks0108Enable *****************
 14800 ;; Defined at:
 14801 ;;		line 19 in file "../lib/ks0108.c"
 14802 ;; Parameters:    Size  Location     Type
 14803 ;;		None
 14804 ;; Auto vars:     Size  Location     Type
 14805 ;;		None
 14806 ;; Return value:  Size  Location     Type
 14807 ;;		None               void
 14808 ;; Registers used:
 14809 ;;		wreg, status,2
 14810 ;; Tracked objects:
 14811 ;;		On entry : 0/0
 14812 ;;		On exit  : 0/0
 14813 ;;		Unchanged: 0/0
 14814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14818 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14819 ;;Total ram usage:        0 bytes
 14820 ;; Hardware stack levels used:    1
 14821 ;; Hardware stack levels required when called:    8
 14822 ;; This function calls:
 14823 ;;		Nothing
 14824 ;; This function is called by:
 14825 ;;		_ks0108WriteCommand
 14826 ;;		_ks0108WriteData
 14827 ;; This function uses a non-reentrant model
 14828 ;;
 14829                           
 14830                           	psect	text47
 14831  003474                     __ptext47:
 14832                           	opt stack 0
 14833  003474                     _ks0108Enable:
 14834                           	opt stack 16
 14835                           
 14836                           ;ks0108.c: 20: { delayus_variable=(unsigned char)(5/1); asm("movlb (_delayus_variable) >
      +                          > 8"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); } asm("decfsz (_delay
      +                          us_variable)&0ffh,f"); asm("goto $ - 12");;
 14837                           
 14838                           ;incstack = 0
 14839  003474  0E05               	movlw	5
 14840  003476  0100               	movlb	0	; () banked
 14841  003478  6FD2               	movwf	_delayus_variable& (0+255),b
 14842  00347A  0100               	movlb	_delayus_variable shr (0+8)	;# 
 14843  00347C  F000               	nop		;# 
 14844  00347E  F000               	nop		;# 
 14845  003480  F000               	nop		;# 
 14846  003482  F000               	nop		;# 
 14847  003484  F000               	nop		;# 
 14848  003486  2FD2               	decfsz	_delayus_variable& (0+255),f,b	;# 
 14849  003488  EF3E  F01A         	goto	($+-12)	;# 
 14850                           
 14851                           ;ks0108.c: 21: LATE0 = 1;
 14852  00348C  808D               	bsf	3981,0,c	;volatile
 14853                           
 14854                           ;ks0108.c: 22: { delayus_variable=(unsigned char)(5/1); asm("movlb (_delayus_variable) >
      +                          > 8"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); } asm("decfsz (_delay
      +                          us_variable)&0ffh,f"); asm("goto $ - 12");;
 14855  00348E  F000               	nop		;# 
 14856  003490  F000               	nop		;# 
 14857  003492  F000               	nop		;# 
 14858  003494  F000               	nop		;# 
 14859  003496  F000               	nop		;# 
 14860  003498  2FD2               	decfsz	_delayus_variable& (0+255),f,b	;# 
 14861  00349A  EF47  F01A         	goto	($+-12)	;# 
 14862                           
 14863                           ;ks0108.c: 23: LATE0 = 0;
 14864  00349E  908D               	bcf	3981,0,c	;volatile
 14865  0034A0  0C05               	retlw	5
 14866  0034A2                     __end_of_ks0108Enable:
 14867                           	opt stack 0
 14868                           tblptru	equ	0xFF8
 14869                           tblptrh	equ	0xFF7
 14870                           tblptrl	equ	0xFF6
 14871                           tablat	equ	0xFF5
 14872                           prodh	equ	0xFF4
 14873                           prodl	equ	0xFF3
 14874                           intcon	equ	0xFF2
 14875                           postinc0	equ	0xFEE
 14876                           wreg	equ	0xFE8
 14877                           indf1	equ	0xFE7
 14878                           postinc1	equ	0xFE6
 14879                           postdec1	equ	0xFE5
 14880                           fsr1h	equ	0xFE2
 14881                           fsr1l	equ	0xFE1
 14882                           indf2	equ	0xFDF
 14883                           postinc2	equ	0xFDE
 14884                           postdec2	equ	0xFDD
 14885                           fsr2h	equ	0xFDA
 14886                           fsr2l	equ	0xFD9
 14887                           status	equ	0xFD8
 14888                           
 14889 ;; *************** function ___wmul *****************
 14890 ;; Defined at:
 14891 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
 14892 ;; Parameters:    Size  Location     Type
 14893 ;;  multiplier      2   39[BANK0 ] unsigned int 
 14894 ;;  multiplicand    2   41[BANK0 ] unsigned int 
 14895 ;; Auto vars:     Size  Location     Type
 14896 ;;  product         2   43[BANK0 ] unsigned int 
 14897 ;; Return value:  Size  Location     Type
 14898 ;;                  2   39[BANK0 ] unsigned int 
 14899 ;; Registers used:
 14900 ;;		wreg, status,2, status,0, prodl, prodh
 14901 ;; Tracked objects:
 14902 ;;		On entry : F/0
 14903 ;;		On exit  : F/0
 14904 ;;		Unchanged: 0/0
 14905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14906 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14907 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14909 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14910 ;;Total ram usage:        6 bytes
 14911 ;; Hardware stack levels used:    1
 14912 ;; Hardware stack levels required when called:    8
 14913 ;; This function calls:
 14914 ;;		Nothing
 14915 ;; This function is called by:
 14916 ;;		_ks0108PutChar
 14917 ;;		_sprintf
 14918 ;; This function uses a non-reentrant model
 14919 ;;
 14920                           
 14921                           	psect	text48
 14922  00356A                     __ptext48:
 14923                           	opt stack 0
 14924  00356A                     ___wmul:
 14925                           	opt stack 20
 14926                           
 14927                           ; BSR set to: 0
 14928                           
 14929                           ;incstack = 0
 14930  00356A  5187               	movf	___wmul@multiplier& (0+255),w,b
 14931  00356C  0389               	mulwf	___wmul@multiplicand& (0+255),b
 14932  00356E  CFF3 F08B          	movff	prodl,___wmul@product
 14933  003572  CFF4 F08C          	movff	prodh,___wmul@product+1
 14934  003576  5187               	movf	___wmul@multiplier& (0+255),w,b
 14935  003578  038A               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 14936  00357A  50F3               	movf	prodl,w,c
 14937  00357C  278C               	addwf	(___wmul@product+1)& (0+255),f,b
 14938  00357E  5188               	movf	(___wmul@multiplier+1)& (0+255),w,b
 14939  003580  0389               	mulwf	___wmul@multiplicand& (0+255),b
 14940  003582  50F3               	movf	prodl,w,c
 14941  003584  278C               	addwf	(___wmul@product+1)& (0+255),f,b
 14942                           
 14943                           ; BSR set to: 0
 14944  003586  C08B  F087         	movff	___wmul@product,?___wmul
 14945  00358A  C08C  F088         	movff	___wmul@product+1,?___wmul+1
 14946                           
 14947                           ; BSR set to: 0
 14948  00358E  0012               	return	
 14949  003590                     __end_of___wmul:
 14950                           	opt stack 0
 14951                           tblptru	equ	0xFF8
 14952                           tblptrh	equ	0xFF7
 14953                           tblptrl	equ	0xFF6
 14954                           tablat	equ	0xFF5
 14955                           prodh	equ	0xFF4
 14956                           prodl	equ	0xFF3
 14957                           intcon	equ	0xFF2
 14958                           postinc0	equ	0xFEE
 14959                           wreg	equ	0xFE8
 14960                           indf1	equ	0xFE7
 14961                           postinc1	equ	0xFE6
 14962                           postdec1	equ	0xFE5
 14963                           fsr1h	equ	0xFE2
 14964                           fsr1l	equ	0xFE1
 14965                           indf2	equ	0xFDF
 14966                           postinc2	equ	0xFDE
 14967                           postdec2	equ	0xFDD
 14968                           fsr2h	equ	0xFDA
 14969                           fsr2l	equ	0xFD9
 14970                           status	equ	0xFD8
 14971                           
 14972 ;; *************** function _InitializeSystem *****************
 14973 ;; Defined at:
 14974 ;;		line 24 in file "../misc.c"
 14975 ;; Parameters:    Size  Location     Type
 14976 ;;		None
 14977 ;; Auto vars:     Size  Location     Type
 14978 ;;  pll_startup_    2   55[BANK0 ] unsigned int 
 14979 ;; Return value:  Size  Location     Type
 14980 ;;		None               void
 14981 ;; Registers used:
 14982 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14983 ;; Tracked objects:
 14984 ;;		On entry : F/0
 14985 ;;		On exit  : F/0
 14986 ;;		Unchanged: 0/0
 14987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14989 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14991 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14992 ;;Total ram usage:        2 bytes
 14993 ;; Hardware stack levels used:    1
 14994 ;; Hardware stack levels required when called:    9
 14995 ;; This function calls:
 14996 ;;		_MTouchInit
 14997 ;;		_MTouchSetButton
 14998 ;;		_MTouchSetSensor
 14999 ;;		_uart16_init
 15000 ;; This function is called by:
 15001 ;;		_main
 15002 ;; This function uses a non-reentrant model
 15003 ;;
 15004                           
 15005                           	psect	text49
 15006  000F12                     __ptext49:
 15007                           	opt stack 0
 15008  000F12                     _InitializeSystem:
 15009                           	opt stack 21
 15010                           
 15011                           ; BSR set to: 0
 15012                           ;misc.c: 36: unsigned int pll_startup_counter = 600;
 15013                           
 15014                           ; BSR set to: 0
 15015                           ;incstack = 0
 15016  000F12  0E02               	movlw	2
 15017  000F14  6F98               	movwf	(InitializeSystem@pll_startup_counter+1)& (0+255),b
 15018  000F16  0E58               	movlw	88
 15019  000F18  6F97               	movwf	InitializeSystem@pll_startup_counter& (0+255),b
 15020                           
 15021                           ;misc.c: 38: OSCCON = 0b01110000;
 15022  000F1A  0E70               	movlw	112
 15023  000F1C  6ED3               	movwf	4051,c	;volatile
 15024                           
 15025                           ; BSR set to: 0
 15026                           ;misc.c: 39: OSCTUNEbits.PLLEN = 1;
 15027  000F1E  8C9B               	bsf	3995,6,c	;volatile
 15028  000F20                     l6335:
 15029                           
 15030                           ; BSR set to: 0
 15031  000F20  0797               	decf	InitializeSystem@pll_startup_counter& (0+255),f,b
 15032  000F22  A0D8               	btfss	status,0,c
 15033  000F24  0798               	decf	(InitializeSystem@pll_startup_counter+1)& (0+255),f,b
 15034  000F26  0100               	movlb	0	; () banked
 15035  000F28  2997               	incf	InitializeSystem@pll_startup_counter& (0+255),w,b
 15036  000F2A  B4D8               	btfsc	status,2,c
 15037  000F2C  2998               	incf	(InitializeSystem@pll_startup_counter+1)& (0+255),w,b
 15038  000F2E  E1F8               	bnz	l6335
 15039                           
 15040                           ; BSR set to: 0
 15041                           ;misc.c: 44: RCONbits.IPEN = 1;
 15042  000F30  8ED0               	bsf	4048,7,c	;volatile
 15043                           
 15044                           ; BSR set to: 0
 15045                           ;misc.c: 47: T2CONbits.T2CKPS = 3;
 15046  000F32  0E03               	movlw	3
 15047  000F34  12BA               	iorwf	4026,f,c	;volatile
 15048                           
 15049                           ;misc.c: 48: PR2 = 200;
 15050  000F36  0EC8               	movlw	200
 15051  000F38  6EBB               	movwf	4027,c	;volatile
 15052                           
 15053                           ;misc.c: 49: T2CONbits.T2OUTPS = 3;
 15054  000F3A  50BA               	movf	4026,w,c	;volatile
 15055  000F3C  0B87               	andlw	-121
 15056  000F3E  0918               	iorlw	24
 15057  000F40  6EBA               	movwf	4026,c	;volatile
 15058                           
 15059                           ; BSR set to: 0
 15060                           ;misc.c: 50: T2CONbits.TMR2ON = 1;
 15061  000F42  84BA               	bsf	4026,2,c	;volatile
 15062                           
 15063                           ; BSR set to: 0
 15064                           ;misc.c: 51: IPR1bits.TMR2IP = 1;
 15065  000F44  829F               	bsf	3999,1,c	;volatile
 15066                           
 15067                           ; BSR set to: 0
 15068                           ;misc.c: 52: PIR1bits.TMR2IF = 0;
 15069  000F46  929E               	bcf	3998,1,c	;volatile
 15070                           
 15071                           ; BSR set to: 0
 15072                           ;misc.c: 53: PIE1bits.TMR2IE = 1;
 15073  000F48  829D               	bsf	3997,1,c	;volatile
 15074                           
 15075                           ;misc.c: 56: T4CONbits.T4CKPS = 3;
 15076  000F4A  0E03               	movlw	3
 15077  000F4C  010F               	movlb	15	; () banked
 15078  000F4E  1351               	iorwf	81,f,b	;volatile
 15079                           
 15080                           ;misc.c: 57: PR4 = 100;
 15081  000F50  0E64               	movlw	100
 15082  000F52  6F52               	movwf	82,b	;volatile
 15083                           
 15084                           ; BSR set to: 15
 15085                           ;misc.c: 58: T4CONbits.T4OUTPS = 0;
 15086  000F54  9751               	bcf	81,3,b	;volatile
 15087  000F56  9951               	bcf	81,4,b	;volatile
 15088  000F58  9B51               	bcf	81,5,b	;volatile
 15089  000F5A  9D51               	bcf	81,6,b	;volatile
 15090                           
 15091                           ; BSR set to: 15
 15092                           ;misc.c: 59: T4CONbits.TMR4ON = 1;
 15093  000F5C  8551               	bsf	81,2,b	;volatile
 15094                           
 15095                           ; BSR set to: 15
 15096                           ;misc.c: 60: IPR5bits.TMR4IP = 1;
 15097  000F5E  807F               	bsf	3967,0,c	;volatile
 15098                           
 15099                           ; BSR set to: 15
 15100                           ;misc.c: 61: PIR5bits.TMR4IF = 0;
 15101  000F60  907E               	bcf	3966,0,c	;volatile
 15102                           
 15103                           ; BSR set to: 15
 15104                           ;misc.c: 62: PIE5bits.TMR4IE = 1;
 15105  000F62  807D               	bsf	3965,0,c	;volatile
 15106                           
 15107                           ; BSR set to: 15
 15108                           ;misc.c: 70: MTouchInit();
 15109  000F64  EC1D  F01B         	call	_MTouchInit	;wreg free
 15110                           
 15111                           ; BSR set to: 15
 15112                           ;misc.c: 72: ANSELA = 0b00000000;
 15113  000F68  6B38               	clrf	56,b	;volatile
 15114                           
 15115                           ; BSR set to: 15
 15116                           ;misc.c: 73: ANSELB = 0b00000000;
 15117  000F6A  6B39               	clrf	57,b	;volatile
 15118                           
 15119                           ; BSR set to: 15
 15120                           ;misc.c: 74: ANSELC = 0b00000000;
 15121  000F6C  6B3A               	clrf	58,b	;volatile
 15122                           
 15123                           ; BSR set to: 15
 15124                           ;misc.c: 75: ANSELD = 0b00000000;
 15125  000F6E  6B3B               	clrf	59,b	;volatile
 15126                           
 15127                           ; BSR set to: 15
 15128                           ;misc.c: 76: ANSELE = 0b00000000;
 15129  000F70  6B3C               	clrf	60,b	;volatile
 15130                           
 15131                           ; BSR set to: 15
 15132                           ;misc.c: 80: MTouchSetSensor(0, &TRISB, &LATB, 0, 12, -1, -1, -1);
 15133  000F72  0E0F               	movlw	15	;volatile
 15134  000F74  0100               	movlb	0	; () banked
 15135  000F76  6F88               	movwf	(MTouchSetSensor@tris+1)& (0+255),b
 15136  000F78  D8DC               	call	PL30	;call to abstracted procedure
 15137  000F7A  6B8B               	clrf	MTouchSetSensor@ioBitNumber& (0+255),b
 15138  000F7C  0E0C               	movlw	12
 15139  000F7E  D8D2               	call	PL6	;call to abstracted procedure
 15140  000F80  0E00               	movlw	0
 15141  000F82  EC44  F00D         	call	_MTouchSetSensor
 15142                           
 15143                           ; BSR set to: 0
 15144                           ;misc.c: 81: MTouchSetSensor(1, &TRISB, &LATB, 1, 10, -1, -1, -1);
 15145  000F86  0E0F               	movlw	15	;volatile
 15146  000F88  6F88               	movwf	(MTouchSetSensor@tris+1)& (0+255),b
 15147  000F8A  D8D3               	call	PL30	;call to abstracted procedure
 15148  000F8C  0E01               	movlw	1
 15149  000F8E  6F8B               	movwf	MTouchSetSensor@ioBitNumber& (0+255),b
 15150  000F90  0E0A               	movlw	10
 15151  000F92  D8C8               	call	PL6	;call to abstracted procedure
 15152  000F94  0E01               	movlw	1
 15153  000F96  EC44  F00D         	call	_MTouchSetSensor
 15154                           
 15155                           ; BSR set to: 0
 15156                           ;misc.c: 82: MTouchSetSensor(2, &TRISB, &LATB, 2, 8, -1, -1, -1);
 15157  000F9A  0E0F               	movlw	15	;volatile
 15158  000F9C  6F88               	movwf	(MTouchSetSensor@tris+1)& (0+255),b
 15159  000F9E  D8C9               	call	PL30	;call to abstracted procedure
 15160  000FA0  0E02               	movlw	2
 15161  000FA2  6F8B               	movwf	MTouchSetSensor@ioBitNumber& (0+255),b
 15162  000FA4  0E08               	movlw	8
 15163  000FA6  D8BE               	call	PL6	;call to abstracted procedure
 15164  000FA8  0E02               	movlw	2
 15165  000FAA  EC44  F00D         	call	_MTouchSetSensor
 15166                           
 15167                           ; BSR set to: 0
 15168                           ;misc.c: 83: MTouchSetSensor(3, &TRISB, &LATB, 5, 13, -1, -1, -1);
 15169  000FAE  0E0F               	movlw	15	;volatile
 15170  000FB0  6F88               	movwf	(MTouchSetSensor@tris+1)& (0+255),b
 15171  000FB2  D8BF               	call	PL30	;call to abstracted procedure
 15172  000FB4  0E05               	movlw	5
 15173  000FB6  6F8B               	movwf	MTouchSetSensor@ioBitNumber& (0+255),b
 15174  000FB8  0E0D               	movlw	13
 15175  000FBA  D8B4               	call	PL6	;call to abstracted procedure
 15176  000FBC  0E03               	movlw	3
 15177  000FBE  EC44  F00D         	call	_MTouchSetSensor
 15178                           
 15179                           ; BSR set to: 0
 15180                           ;misc.c: 84: MTouchSetSensor(4, &TRISA, &LATA, 0, 0, -1, -1, -1);
 15181  000FC2  0E0F               	movlw	15	;volatile
 15182  000FC4  6F88               	movwf	(MTouchSetSensor@tris+1)& (0+255),b
 15183  000FC6  D8BC               	call	PL42	;call to abstracted procedure
 15184  000FC8  6B8B               	clrf	MTouchSetSensor@ioBitNumber& (0+255),b
 15185  000FCA  6B8C               	clrf	MTouchSetSensor@channelNumber& (0+255),b
 15186  000FCC  698E               	setf	(MTouchSetSensor@threshold+1)& (0+255),b
 15187  000FCE  698D               	setf	MTouchSetSensor@threshold& (0+255),b
 15188  000FD0  6990               	setf	(MTouchSetSensor@oversampling+1)& (0+255),b
 15189  000FD2  698F               	setf	MTouchSetSensor@oversampling& (0+255),b
 15190  000FD4  6991               	setf	MTouchSetSensor@chargeDelay& (0+255),b
 15191  000FD6  0E04               	movlw	4
 15192  000FD8  EC44  F00D         	call	_MTouchSetSensor
 15193                           
 15194                           ; BSR set to: 0
 15195                           ;misc.c: 85: MTouchSetSensor(5, &TRISA, &LATA, 1, 1, -1, -1, -1);
 15196  000FDC  0E0F               	movlw	15	;volatile
 15197  000FDE  6F88               	movwf	(MTouchSetSensor@tris+1)& (0+255),b
 15198  000FE0  D8AF               	call	PL42	;call to abstracted procedure
 15199  000FE2  0E01               	movlw	1
 15200  000FE4  6F8B               	movwf	MTouchSetSensor@ioBitNumber& (0+255),b
 15201  000FE6  D89E               	call	PL6	;call to abstracted procedure
 15202  000FE8  0E05               	movlw	5
 15203  000FEA  EC44  F00D         	call	_MTouchSetSensor
 15204                           
 15205                           ; BSR set to: 0
 15206                           ;misc.c: 86: MTouchSetSensor(6, &TRISB, &LATB, 4, 11, -1, -1, -1);
 15207  000FEE  0E0F               	movlw	15	;volatile
 15208  000FF0  6F88               	movwf	(MTouchSetSensor@tris+1)& (0+255),b
 15209  000FF2  D89F               	call	PL30	;call to abstracted procedure
 15210  000FF4  0E04               	movlw	4
 15211  000FF6  6F8B               	movwf	MTouchSetSensor@ioBitNumber& (0+255),b
 15212  000FF8  0E0B               	movlw	11
 15213  000FFA  D894               	call	PL6	;call to abstracted procedure
 15214  000FFC  0E06               	movlw	6
 15215  000FFE  EC44  F00D         	call	_MTouchSetSensor
 15216                           
 15217                           ; BSR set to: 0
 15218                           ;misc.c: 87: MTouchSetSensor(7, &TRISB, &LATB, 3, 9, -1, -1, -1);
 15219  001002  0E0F               	movlw	15	;volatile
 15220  001004  6F88               	movwf	(MTouchSetSensor@tris+1)& (0+255),b
 15221  001006  D895               	call	PL30	;call to abstracted procedure
 15222  001008  0E03               	movlw	3
 15223  00100A  6F8B               	movwf	MTouchSetSensor@ioBitNumber& (0+255),b
 15224  00100C  0E09               	movlw	9
 15225  00100E  D88A               	call	PL6	;call to abstracted procedure
 15226  001010  0E07               	movlw	7
 15227  001012  EC44  F00D         	call	_MTouchSetSensor
 15228                           
 15229                           ; BSR set to: 0
 15230                           ;misc.c: 88: MTouchSetSensor(8, &TRISA, &LATA, 2, 2, -1, -1, -1);
 15231  001016  0E0F               	movlw	15	;volatile
 15232  001018  6F88               	movwf	(MTouchSetSensor@tris+1)& (0+255),b
 15233  00101A  D892               	call	PL42	;call to abstracted procedure
 15234  00101C  0E02               	movlw	2
 15235  00101E  6F8B               	movwf	MTouchSetSensor@ioBitNumber& (0+255),b
 15236  001020  D881               	call	PL6	;call to abstracted procedure
 15237  001022  0E08               	movlw	8
 15238  001024  EC44  F00D         	call	_MTouchSetSensor
 15239                           
 15240                           ; BSR set to: 0
 15241                           ;misc.c: 89: MTouchSetSensor(9, &TRISA, &LATA, 3, 3, -1, -1, -1);
 15242  001028  0E0F               	movlw	15	;volatile
 15243  00102A  6F88               	movwf	(MTouchSetSensor@tris+1)& (0+255),b
 15244  00102C  D889               	call	PL42	;call to abstracted procedure
 15245  00102E  0E03               	movlw	3
 15246  001030  6F8B               	movwf	MTouchSetSensor@ioBitNumber& (0+255),b
 15247  001032  D878               	call	PL6	;call to abstracted procedure
 15248  001034  0E09               	movlw	9
 15249  001036  EC44  F00D         	call	_MTouchSetSensor
 15250                           
 15251                           ; BSR set to: 0
 15252                           ;misc.c: 90: MTouchSetSensor(10, &TRISA, &LATA, 4, 4, -1, -1, -1);
 15253  00103A  0E0F               	movlw	15	;volatile
 15254  00103C  6F88               	movwf	(MTouchSetSensor@tris+1)& (0+255),b
 15255  00103E  D880               	call	PL42	;call to abstracted procedure
 15256  001040  0E04               	movlw	4
 15257  001042  6F8B               	movwf	MTouchSetSensor@ioBitNumber& (0+255),b
 15258  001044  D86F               	call	PL6	;call to abstracted procedure
 15259  001046  0E0A               	movlw	10
 15260  001048  EC44  F00D         	call	_MTouchSetSensor
 15261                           
 15262                           ; BSR set to: 0
 15263                           ;misc.c: 122: MTouchSetButton(KEY_0_AVT_PWR_220, 0, DECODE_ONE_EVENT);
 15264  00104C  6B87               	clrf	MTouchSetButton@sensorNumber& (0+255),b
 15265  00104E  0E10               	movlw	16
 15266  001050  6F88               	movwf	MTouchSetButton@decode& (0+255),b
 15267  001052  0E00               	movlw	0
 15268  001054  EC73  F015         	call	_MTouchSetButton
 15269                           
 15270                           ; BSR set to: 0
 15271                           ;misc.c: 123: MTouchSetButton(KEY_1_LT_NOSHY, 1, DECODE_ONE_EVENT);
 15272  001058  0E01               	movlw	1
 15273  00105A  6F87               	movwf	MTouchSetButton@sensorNumber& (0+255),b
 15274  00105C  0E10               	movlw	16
 15275  00105E  6F88               	movwf	MTouchSetButton@decode& (0+255),b
 15276  001060  0E01               	movlw	1
 15277  001062  EC73  F015         	call	_MTouchSetButton
 15278                           
 15279                           ; BSR set to: 0
 15280                           ;misc.c: 124: MTouchSetButton(KEY_2_LT_SALON_M, 2, DECODE_ONE_EVENT);
 15281  001066  0E02               	movlw	2
 15282  001068  6F87               	movwf	MTouchSetButton@sensorNumber& (0+255),b
 15283  00106A  0E10               	movlw	16
 15284  00106C  6F88               	movwf	MTouchSetButton@decode& (0+255),b
 15285  00106E  0E02               	movlw	2
 15286  001070  EC73  F015         	call	_MTouchSetButton
 15287                           
 15288                           ; BSR set to: 0
 15289                           ;misc.c: 125: MTouchSetButton(KEY_3_LT_SALON_P, 3, DECODE_ONE_EVENT);
 15290  001074  0E03               	movlw	3
 15291  001076  6F87               	movwf	MTouchSetButton@sensorNumber& (0+255),b
 15292  001078  0E10               	movlw	16
 15293  00107A  6F88               	movwf	MTouchSetButton@decode& (0+255),b
 15294  00107C  0E03               	movlw	3
 15295  00107E  EC73  F015         	call	_MTouchSetButton
 15296                           
 15297                           ; BSR set to: 0
 15298                           ;misc.c: 126: MTouchSetButton(KEY_4_VENT_OUT, 4, DECODE_ONE_EVENT);
 15299  001082  0E04               	movlw	4
 15300  001084  6F87               	movwf	MTouchSetButton@sensorNumber& (0+255),b
 15301  001086  0E10               	movlw	16
 15302  001088  6F88               	movwf	MTouchSetButton@decode& (0+255),b
 15303  00108A  0E04               	movlw	4
 15304  00108C  EC73  F015         	call	_MTouchSetButton
 15305                           
 15306                           ; BSR set to: 0
 15307                           ;misc.c: 127: MTouchSetButton(KEY_5_VENT_IN, 5, DECODE_ONE_EVENT);
 15308  001090  0E05               	movlw	5
 15309  001092  6F87               	movwf	MTouchSetButton@sensorNumber& (0+255),b
 15310  001094  0E10               	movlw	16
 15311  001096  6F88               	movwf	MTouchSetButton@decode& (0+255),b
 15312  001098  0E05               	movlw	5
 15313  00109A  EC73  F015         	call	_MTouchSetButton
 15314                           
 15315                           ; BSR set to: 0
 15316                           ;misc.c: 128: MTouchSetButton(KEY_6_ROZ_ON, 6, DECODE_ONE_EVENT);
 15317  00109E  0E06               	movlw	6
 15318  0010A0  6F87               	movwf	MTouchSetButton@sensorNumber& (0+255),b
 15319  0010A2  0E10               	movlw	16
 15320  0010A4  6F88               	movwf	MTouchSetButton@decode& (0+255),b
 15321  0010A6  0E06               	movlw	6
 15322  0010A8  EC73  F015         	call	_MTouchSetButton
 15323                           
 15324                           ; BSR set to: 0
 15325                           ;misc.c: 129: MTouchSetButton(KEY_7_LT_OUT_BACK, 7, DECODE_ONE_EVENT);
 15326  0010AC  0E07               	movlw	7
 15327  0010AE  6F87               	movwf	MTouchSetButton@sensorNumber& (0+255),b
 15328  0010B0  0E10               	movlw	16
 15329  0010B2  6F88               	movwf	MTouchSetButton@decode& (0+255),b
 15330  0010B4  0E07               	movlw	7
 15331  0010B6  EC73  F015         	call	_MTouchSetButton
 15332                           
 15333                           ; BSR set to: 0
 15334                           ;misc.c: 130: MTouchSetButton(KEY_8_LT_OUT_SIDE, 8, DECODE_ONE_EVENT);
 15335  0010BA  0E08               	movlw	8
 15336  0010BC  6F87               	movwf	MTouchSetButton@sensorNumber& (0+255),b
 15337  0010BE  0E10               	movlw	16
 15338  0010C0  6F88               	movwf	MTouchSetButton@decode& (0+255),b
 15339  0010C2  0E08               	movlw	8
 15340  0010C4  EC73  F015         	call	_MTouchSetButton
 15341                           
 15342                           ; BSR set to: 0
 15343                           ;misc.c: 131: MTouchSetButton(KEY_9_LT_SHELF_M, 9, DECODE_ONE_EVENT);
 15344  0010C8  0E09               	movlw	9
 15345  0010CA  6F87               	movwf	MTouchSetButton@sensorNumber& (0+255),b
 15346  0010CC  0E10               	movlw	16
 15347  0010CE  6F88               	movwf	MTouchSetButton@decode& (0+255),b
 15348  0010D0  0E09               	movlw	9
 15349  0010D2  EC73  F015         	call	_MTouchSetButton
 15350                           
 15351                           ; BSR set to: 0
 15352                           ;misc.c: 132: MTouchSetButton(KEY_10_LT_SHELF_P, 10, DECODE_ONE_EVENT);
 15353  0010D6  0E0A               	movlw	10
 15354  0010D8  6F87               	movwf	MTouchSetButton@sensorNumber& (0+255),b
 15355  0010DA  0E10               	movlw	16
 15356  0010DC  6F88               	movwf	MTouchSetButton@decode& (0+255),b
 15357  0010DE  0E0A               	movlw	10
 15358  0010E0  EC73  F015         	call	_MTouchSetButton
 15359                           
 15360                           ; BSR set to: 0
 15361                           ;misc.c: 135: MTouchSetButton(KEY_2_LT_SALON_MM, 2, DECODE_PRESS_REPEAT | DECODE_ONE_EVE
      +                          NT);
 15362  0010E4  0E02               	movlw	2
 15363  0010E6  6F87               	movwf	MTouchSetButton@sensorNumber& (0+255),b
 15364  0010E8  0E18               	movlw	24
 15365  0010EA  6F88               	movwf	MTouchSetButton@decode& (0+255),b
 15366  0010EC  0E0B               	movlw	11
 15367  0010EE  EC73  F015         	call	_MTouchSetButton
 15368                           
 15369                           ; BSR set to: 0
 15370                           ;misc.c: 136: MTouchSetButton(KEY_3_LT_SALON_PP, 3, DECODE_PRESS_REPEAT | DECODE_ONE_EVE
      +                          NT);
 15371  0010F2  0E03               	movlw	3
 15372  0010F4  6F87               	movwf	MTouchSetButton@sensorNumber& (0+255),b
 15373  0010F6  0E18               	movlw	24
 15374  0010F8  6F88               	movwf	MTouchSetButton@decode& (0+255),b
 15375  0010FA  0E0C               	movlw	12
 15376  0010FC  EC73  F015         	call	_MTouchSetButton
 15377                           
 15378                           ; BSR set to: 0
 15379                           ;misc.c: 138: uart16_init();
 15380  001100  EC0E  F01B         	call	_uart16_init	;wreg free
 15381                           
 15382                           ; BSR set to: 0
 15383                           ;misc.c: 139: TRISCbits.TRISC6 = 0;
 15384  001104  9C94               	bcf	3988,6,c	;volatile
 15385                           
 15386                           ; BSR set to: 0
 15387                           ;misc.c: 140: TRISCbits.TRISC7 = 1;
 15388  001106  8E94               	bsf	3988,7,c	;volatile
 15389                           
 15390                           ; BSR set to: 0
 15391                           ;misc.c: 141: RCIP = 0;
 15392  001108  9A9F               	bcf	3999,5,c	;volatile
 15393                           
 15394                           ; BSR set to: 0
 15395                           ;misc.c: 142: RCIE = 1;
 15396  00110A  8A9D               	bsf	3997,5,c	;volatile
 15397                           
 15398                           ; BSR set to: 0
 15399                           ;misc.c: 144: TRISBbits.TRISB6 = 0;
 15400  00110C  9C93               	bcf	3987,6,c	;volatile
 15401                           
 15402                           ; BSR set to: 0
 15403                           ;misc.c: 145: TRISBbits.TRISB7 = 0;
 15404  00110E  9E93               	bcf	3987,7,c	;volatile
 15405                           
 15406                           ; BSR set to: 0
 15407                           ;misc.c: 146: TRISAbits.TRISA6 = 0;
 15408  001110  9C92               	bcf	3986,6,c	;volatile
 15409                           
 15410                           ; BSR set to: 0
 15411                           ;misc.c: 147: TRISAbits.TRISA7 = 0;
 15412  001112  9E92               	bcf	3986,7,c	;volatile
 15413                           
 15414                           ; BSR set to: 0
 15415                           ;misc.c: 149: LATBbits.LATB6 = 0;
 15416  001114  9C8A               	bcf	3978,6,c	;volatile
 15417                           
 15418                           ; BSR set to: 0
 15419                           ;misc.c: 150: LATBbits.LATB7 = 0;
 15420  001116  9E8A               	bcf	3978,7,c	;volatile
 15421                           
 15422                           ; BSR set to: 0
 15423                           ;misc.c: 151: LATAbits.LATA6 = 0;
 15424  001118  9C89               	bcf	3977,6,c	;volatile
 15425                           
 15426                           ; BSR set to: 0
 15427                           ;misc.c: 152: LATAbits.LATA7 = 0;
 15428  00111A  9E89               	bcf	3977,7,c	;volatile
 15429                           
 15430                           ; BSR set to: 0
 15431                           ;misc.c: 155: TRISCbits.TRISC4 = 0;
 15432  00111C  9894               	bcf	3988,4,c	;volatile
 15433                           
 15434                           ; BSR set to: 0
 15435                           ;misc.c: 156: LATCbits.LATC4 = 1;
 15436  00111E  888B               	bsf	3979,4,c	;volatile
 15437                           
 15438                           ; BSR set to: 0
 15439                           ;misc.c: 159: INTCONbits.PEIE = 1;
 15440  001120  8CF2               	bsf	intcon,6,c	;volatile
 15441                           
 15442                           ; BSR set to: 0
 15443  001122  0012               	return	
 15444  001124                     __end_of_InitializeSystem:
 15445                           	opt stack 0
 15446  001124                     PL6:
 15447                           	opt stack 21
 15448  001124  6F8C               	movwf	MTouchSetSensor@channelNumber& (0+255),b
 15449  001126  698E               	setf	(MTouchSetSensor@threshold+1)& (0+255),b
 15450  001128  698D               	setf	MTouchSetSensor@threshold& (0+255),b
 15451  00112A  6990               	setf	(MTouchSetSensor@oversampling+1)& (0+255),b
 15452  00112C  698F               	setf	MTouchSetSensor@oversampling& (0+255),b
 15453  00112E  6991               	setf	MTouchSetSensor@chargeDelay& (0+255),b
 15454  001130  0012               	return	
 15455  001132                     __end_ofPL6:
 15456                           	opt stack 0
 15457  001132                     PL30:
 15458                           	opt stack 21
 15459  001132  0E93               	movlw	147	;volatile
 15460  001134  6F87               	movwf	MTouchSetSensor@tris& (0+255),b
 15461  001136  0E0F               	movlw	15	;volatile
 15462  001138  6F8A               	movwf	(MTouchSetSensor@lat+1)& (0+255),b
 15463  00113A  0E8A               	movlw	138	;volatile
 15464  00113C  6F89               	movwf	MTouchSetSensor@lat& (0+255),b
 15465  00113E  0C8A               	retlw	138
 15466  001140                     __end_ofPL30:
 15467                           	opt stack 0
 15468  001140                     PL42:
 15469                           	opt stack 21
 15470  001140  0E92               	movlw	146	;volatile
 15471  001142  6F87               	movwf	MTouchSetSensor@tris& (0+255),b
 15472  001144  0E0F               	movlw	15	;volatile
 15473  001146  6F8A               	movwf	(MTouchSetSensor@lat+1)& (0+255),b
 15474  001148  0E89               	movlw	137	;volatile
 15475  00114A  6F89               	movwf	MTouchSetSensor@lat& (0+255),b
 15476  00114C  0C89               	retlw	137
 15477  00114E                     __end_ofPL42:
 15478                           	opt stack 0
 15479                           tblptru	equ	0xFF8
 15480                           tblptrh	equ	0xFF7
 15481                           tblptrl	equ	0xFF6
 15482                           tablat	equ	0xFF5
 15483                           prodh	equ	0xFF4
 15484                           prodl	equ	0xFF3
 15485                           intcon	equ	0xFF2
 15486                           postinc0	equ	0xFEE
 15487                           wreg	equ	0xFE8
 15488                           indf1	equ	0xFE7
 15489                           postinc1	equ	0xFE6
 15490                           postdec1	equ	0xFE5
 15491                           fsr1h	equ	0xFE2
 15492                           fsr1l	equ	0xFE1
 15493                           indf2	equ	0xFDF
 15494                           postinc2	equ	0xFDE
 15495                           postdec2	equ	0xFDD
 15496                           fsr2h	equ	0xFDA
 15497                           fsr2l	equ	0xFD9
 15498                           status	equ	0xFD8
 15499                           
 15500 ;; *************** function _uart16_init *****************
 15501 ;; Defined at:
 15502 ;;		line 27 in file "../lib/usart.c"
 15503 ;; Parameters:    Size  Location     Type
 15504 ;;		None
 15505 ;; Auto vars:     Size  Location     Type
 15506 ;;		None
 15507 ;; Return value:  Size  Location     Type
 15508 ;;		None               void
 15509 ;; Registers used:
 15510 ;;		wreg, status,2
 15511 ;; Tracked objects:
 15512 ;;		On entry : F/0
 15513 ;;		On exit  : F/0
 15514 ;;		Unchanged: F/0
 15515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15519 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15520 ;;Total ram usage:        0 bytes
 15521 ;; Hardware stack levels used:    1
 15522 ;; Hardware stack levels required when called:    8
 15523 ;; This function calls:
 15524 ;;		Nothing
 15525 ;; This function is called by:
 15526 ;;		_InitializeSystem
 15527 ;; This function uses a non-reentrant model
 15528 ;;
 15529                           
 15530                           	psect	text50
 15531  00361C                     __ptext50:
 15532                           	opt stack 0
 15533  00361C                     _uart16_init:
 15534                           	opt stack 21
 15535                           
 15536                           ; BSR set to: 0
 15537                           ;usart.c: 29: SPBRG = ((64000000ul)/(64UL * 9600))-1;
 15538                           
 15539                           ; BSR set to: 0
 15540                           ;incstack = 0
 15541  00361C  0E67               	movlw	103
 15542  00361E  6EAF               	movwf	4015,c	;volatile
 15543                           
 15544                           ; BSR set to: 0
 15545                           ;usart.c: 30: BRGH1 = 0;
 15546  003620  94AC               	bcf	4012,2,c	;volatile
 15547                           
 15548                           ; BSR set to: 0
 15549                           ;usart.c: 34: BRG161 = 0;
 15550  003622  96B8               	bcf	4024,3,c	;volatile
 15551                           
 15552                           ; BSR set to: 0
 15553                           ;usart.c: 37: SYNC1 = 0;
 15554  003624  98AC               	bcf	4012,4,c	;volatile
 15555                           
 15556                           ; BSR set to: 0
 15557                           ;usart.c: 38: SPEN1 = 1;
 15558  003626  8EAB               	bsf	4011,7,c	;volatile
 15559                           
 15560                           ; BSR set to: 0
 15561                           ;usart.c: 39: CREN1 = 1;
 15562  003628  88AB               	bsf	4011,4,c	;volatile
 15563                           
 15564                           ; BSR set to: 0
 15565                           ;usart.c: 40: SREN1 = 0;
 15566  00362A  9AAB               	bcf	4011,5,c	;volatile
 15567                           
 15568                           ; BSR set to: 0
 15569                           ;usart.c: 41: TXIE = 0;
 15570  00362C  989D               	bcf	3997,4,c	;volatile
 15571                           
 15572                           ; BSR set to: 0
 15573                           ;usart.c: 42: RCIE = 0;
 15574  00362E  9A9D               	bcf	3997,5,c	;volatile
 15575                           
 15576                           ; BSR set to: 0
 15577                           ;usart.c: 43: TX91 = 0;
 15578  003630  9CAC               	bcf	4012,6,c	;volatile
 15579                           
 15580                           ; BSR set to: 0
 15581                           ;usart.c: 44: RX91 = 0;
 15582  003632  9CAB               	bcf	4011,6,c	;volatile
 15583                           
 15584                           ; BSR set to: 0
 15585                           ;usart.c: 45: TXEN1 = 0;
 15586  003634  9AAC               	bcf	4012,5,c	;volatile
 15587                           
 15588                           ; BSR set to: 0
 15589                           ;usart.c: 46: TXEN1 = 1;
 15590  003636  8AAC               	bsf	4012,5,c	;volatile
 15591                           
 15592                           ; BSR set to: 0
 15593  003638  0C67               	retlw	103
 15594  00363A                     __end_of_uart16_init:
 15595                           	opt stack 0
 15596                           tblptru	equ	0xFF8
 15597                           tblptrh	equ	0xFF7
 15598                           tblptrl	equ	0xFF6
 15599                           tablat	equ	0xFF5
 15600                           prodh	equ	0xFF4
 15601                           prodl	equ	0xFF3
 15602                           intcon	equ	0xFF2
 15603                           postinc0	equ	0xFEE
 15604                           wreg	equ	0xFE8
 15605                           indf1	equ	0xFE7
 15606                           postinc1	equ	0xFE6
 15607                           postdec1	equ	0xFE5
 15608                           fsr1h	equ	0xFE2
 15609                           fsr1l	equ	0xFE1
 15610                           indf2	equ	0xFDF
 15611                           postinc2	equ	0xFDE
 15612                           postdec2	equ	0xFDD
 15613                           fsr2h	equ	0xFDA
 15614                           fsr2l	equ	0xFD9
 15615                           status	equ	0xFD8
 15616                           
 15617 ;; *************** function _MTouchSetSensor *****************
 15618 ;; Defined at:
 15619 ;;		line 78 in file "../lib/mTouchCap/mTouchSensor.c"
 15620 ;; Parameters:    Size  Location     Type
 15621 ;;  sensorNumber    1    wreg     unsigned char 
 15622 ;;  tris            2   39[BANK0 ] PTR volatile unsigned ch
 15623 ;;		 -> TRISA(1), TRISB(1), 
 15624 ;;  lat             2   41[BANK0 ] PTR volatile unsigned ch
 15625 ;;		 -> LATA(1), LATB(1), 
 15626 ;;  ioBitNumber     1   43[BANK0 ] unsigned char 
 15627 ;;  channelNumbe    1   44[BANK0 ] unsigned char 
 15628 ;;  threshold       2   45[BANK0 ] short 
 15629 ;;  oversampling    2   47[BANK0 ] short 
 15630 ;;  chargeDelay     1   49[BANK0 ] char 
 15631 ;; Auto vars:     Size  Location     Type
 15632 ;;  sensorNumber    1   52[BANK0 ] unsigned char 
 15633 ;;  pSensor         2   53[BANK0 ] PTR struct tag_SENSOR
 15634 ;;		 -> sensors(352), 
 15635 ;; Return value:  Size  Location     Type
 15636 ;;		None               void
 15637 ;; Registers used:
 15638 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15639 ;; Tracked objects:
 15640 ;;		On entry : F/0
 15641 ;;		On exit  : F/0
 15642 ;;		Unchanged: 0/0
 15643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15644 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15645 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15646 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15647 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15648 ;;Total ram usage:       16 bytes
 15649 ;; Hardware stack levels used:    1
 15650 ;; Hardware stack levels required when called:    8
 15651 ;; This function calls:
 15652 ;;		Nothing
 15653 ;; This function is called by:
 15654 ;;		_InitializeSystem
 15655 ;; This function uses a non-reentrant model
 15656 ;;
 15657                           
 15658                           	psect	text51
 15659  001A88                     __ptext51:
 15660                           	opt stack 0
 15661  001A88                     _MTouchSetSensor:
 15662                           	opt stack 21
 15663                           
 15664                           ; BSR set to: 0
 15665                           ;incstack = 0
 15666                           ;MTouchSetSensor@sensorNumber stored from wreg
 15667  001A88  6F94               	movwf	MTouchSetSensor@sensorNumber& (0+255),b
 15668                           
 15669                           ; BSR set to: 0
 15670                           ;mTouchSensor.c: 81: SENSOR* pSensor;
 15671                           ;mTouchSensor.c: 83: pSensor = (SENSOR*)sensors + sensorNumber;
 15672  001A8A  5194               	movf	MTouchSetSensor@sensorNumber& (0+255),w,b
 15673  001A8C  0D20               	mullw	32
 15674  001A8E  0E00               	movlw	low _sensors
 15675  001A90  24F3               	addwf	prodl,w,c
 15676  001A92  6F95               	movwf	MTouchSetSensor@pSensor& (0+255),b
 15677  001A94  0E04               	movlw	high _sensors
 15678  001A96  20F4               	addwfc	prodh,w,c
 15679  001A98  6F96               	movwf	(MTouchSetSensor@pSensor+1)& (0+255),b
 15680                           
 15681                           ; BSR set to: 0
 15682                           ;mTouchSensor.c: 85: if(threshold > 0)
 15683  001A9A  518E               	movf	(MTouchSetSensor@threshold+1)& (0+255),w,b
 15684  001A9C  0A80               	xorlw	128
 15685  001A9E  0F80               	addlw	-128
 15686  001AA0  0E01               	movlw	1
 15687  001AA2  B4D8               	btfsc	status,2,c
 15688  001AA4  5D8D               	subwf	MTouchSetSensor@threshold& (0+255),w,b
 15689  001AA6  E31A               	bnc	l5667
 15690                           
 15691                           ; BSR set to: 0
 15692                           ;mTouchSensor.c: 86: {
 15693                           ;mTouchSensor.c: 87: pSensor->pressThreshold = threshold;
 15694  001AA8  EE20 F012          	lfsr	2,18
 15695  001AAC  5195               	movf	MTouchSetSensor@pSensor& (0+255),w,b
 15696  001AAE  26D9               	addwf	fsr2l,f,c
 15697  001AB0  5196               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
 15698  001AB2  22DA               	addwfc	fsr2h,f,c
 15699  001AB4  C08D  FFDE         	movff	MTouchSetSensor@threshold,postinc2
 15700  001AB8  C08E  FFDD         	movff	MTouchSetSensor@threshold+1,postdec2
 15701                           
 15702                           ;mTouchSensor.c: 88: pSensor->releaseThreshold = threshold>>1;
 15703  001ABC  358E               	rlcf	(MTouchSetSensor@threshold+1)& (0+255),w,b
 15704  001ABE  318E               	rrcf	(MTouchSetSensor@threshold+1)& (0+255),w,b
 15705  001AC0  6F93               	movwf	(??_MTouchSetSensor+1)& (0+255),b
 15706  001AC2  318D               	rrcf	MTouchSetSensor@threshold& (0+255),w,b
 15707  001AC4  6F92               	movwf	??_MTouchSetSensor& (0+255),b
 15708  001AC6  EE20 F014          	lfsr	2,20
 15709  001ACA  5195               	movf	MTouchSetSensor@pSensor& (0+255),w,b
 15710  001ACC  26D9               	addwf	fsr2l,f,c
 15711  001ACE  5196               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
 15712  001AD0  22DA               	addwfc	fsr2h,f,c
 15713  001AD2  C092  FFDE         	movff	??_MTouchSetSensor,postinc2
 15714  001AD6  C093  FFDD         	movff	??_MTouchSetSensor+1,postdec2
 15715                           
 15716                           ;mTouchSensor.c: 89: }else{
 15717  001ADA  D00F               	goto	l78
 15718  001ADC                     l5667:
 15719                           
 15720                           ; BSR set to: 0
 15721                           ;mTouchSensor.c: 90: pSensor->pressThreshold = 800;
 15722  001ADC  EE20 F012          	lfsr	2,18
 15723  001AE0  D88C               	call	PL110	;call to abstracted procedure
 15724  001AE2  0E03               	movlw	3
 15725  001AE4  6EDD               	movwf	postdec2,c
 15726                           
 15727                           ;mTouchSensor.c: 91: pSensor->releaseThreshold = 800>>1;
 15728  001AE6  EE20 F014          	lfsr	2,20
 15729  001AEA  5195               	movf	MTouchSetSensor@pSensor& (0+255),w,b
 15730  001AEC  26D9               	addwf	fsr2l,f,c
 15731  001AEE  5196               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
 15732  001AF0  22DA               	addwfc	fsr2h,f,c
 15733  001AF2  0E90               	movlw	144
 15734  001AF4  6EDE               	movwf	postinc2,c
 15735  001AF6  0E01               	movlw	1
 15736  001AF8  6EDD               	movwf	postdec2,c
 15737  001AFA                     l78:
 15738                           
 15739                           ; BSR set to: 0
 15740                           ;mTouchSensor.c: 92: }
 15741                           ;mTouchSensor.c: 93: pSensor->trisReg = tris;
 15742  001AFA  EE20 F008          	lfsr	2,8
 15743  001AFE  5195               	movf	MTouchSetSensor@pSensor& (0+255),w,b
 15744  001B00  26D9               	addwf	fsr2l,f,c
 15745  001B02  5196               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
 15746  001B04  22DA               	addwfc	fsr2h,f,c
 15747  001B06  C087  FFDE         	movff	MTouchSetSensor@tris,postinc2
 15748  001B0A  C088  FFDD         	movff	MTouchSetSensor@tris+1,postdec2
 15749                           
 15750                           ;mTouchSensor.c: 94: pSensor->latReg = lat;
 15751  001B0E  EE20 F00A          	lfsr	2,10
 15752  001B12  5195               	movf	MTouchSetSensor@pSensor& (0+255),w,b
 15753  001B14  26D9               	addwf	fsr2l,f,c
 15754  001B16  5196               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
 15755  001B18  22DA               	addwfc	fsr2h,f,c
 15756  001B1A  C089  FFDE         	movff	MTouchSetSensor@lat,postinc2
 15757  001B1E  C08A  FFDD         	movff	MTouchSetSensor@lat+1,postdec2
 15758                           
 15759                           ;mTouchSensor.c: 95: pSensor->ioMask = 1<<ioBitNumber;
 15760  001B22  EE20 F01D          	lfsr	2,29
 15761  001B26  5195               	movf	MTouchSetSensor@pSensor& (0+255),w,b
 15762  001B28  26D9               	addwf	fsr2l,f,c
 15763  001B2A  5196               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
 15764  001B2C  22DA               	addwfc	fsr2h,f,c
 15765  001B2E  C08B  F092         	movff	MTouchSetSensor@ioBitNumber,??_MTouchSetSensor
 15766  001B32  0E01               	movlw	1
 15767  001B34  6F93               	movwf	(??_MTouchSetSensor+1)& (0+255),b
 15768  001B36  2B92               	incf	??_MTouchSetSensor& (0+255),f,b
 15769  001B38  D002               	goto	u5354
 15770  001B3A                     u5355:
 15771  001B3A  90D8               	bcf	status,0,c
 15772  001B3C  3793               	rlcf	(??_MTouchSetSensor+1)& (0+255),f,b
 15773  001B3E                     u5354:
 15774  001B3E  2F92               	decfsz	??_MTouchSetSensor& (0+255),f,b
 15775  001B40  D7FC               	goto	u5355
 15776  001B42  5193               	movf	(??_MTouchSetSensor+1)& (0+255),w,b
 15777  001B44  6EDF               	movwf	indf2,c
 15778                           
 15779                           ;mTouchSensor.c: 96: pSensor->channelNumber = channelNumber;
 15780  001B46  EE20 F01E          	lfsr	2,30
 15781  001B4A  5195               	movf	MTouchSetSensor@pSensor& (0+255),w,b
 15782  001B4C  26D9               	addwf	fsr2l,f,c
 15783  001B4E  5196               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
 15784  001B50  22DA               	addwfc	fsr2h,f,c
 15785  001B52  C08C  FFDF         	movff	MTouchSetSensor@channelNumber,indf2
 15786                           
 15787                           ;mTouchSensor.c: 97: pSensor->state = SENSOR_INITIALIZING;
 15788  001B56  EE20 F01C          	lfsr	2,28
 15789  001B5A  5195               	movf	MTouchSetSensor@pSensor& (0+255),w,b
 15790  001B5C  26D9               	addwf	fsr2l,f,c
 15791  001B5E  5196               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
 15792  001B60  22DA               	addwfc	fsr2h,f,c
 15793  001B62  6ADF               	clrf	indf2,c
 15794                           
 15795                           ;mTouchSensor.c: 98: pSensor->debounceCount = 8 + 50;
 15796  001B64  EE20 F01A          	lfsr	2,26
 15797  001B68  5195               	movf	MTouchSetSensor@pSensor& (0+255),w,b
 15798  001B6A  26D9               	addwf	fsr2l,f,c
 15799  001B6C  5196               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
 15800  001B6E  22DA               	addwfc	fsr2h,f,c
 15801  001B70  0E3A               	movlw	58
 15802  001B72  6EDE               	movwf	postinc2,c
 15803  001B74  6ADD               	clrf	postdec2,c
 15804                           
 15805                           ; BSR set to: 0
 15806                           ;mTouchSensor.c: 101: if(oversampling > 0)
 15807  001B76  5190               	movf	(MTouchSetSensor@oversampling+1)& (0+255),w,b
 15808  001B78  0A80               	xorlw	128
 15809  001B7A  0F80               	addlw	-128
 15810  001B7C  0E01               	movlw	1
 15811  001B7E  B4D8               	btfsc	status,2,c
 15812  001B80  5D8F               	subwf	MTouchSetSensor@oversampling& (0+255),w,b
 15813  001B82  E30B               	bnc	l5673
 15814                           
 15815                           ; BSR set to: 0
 15816                           ;mTouchSensor.c: 102: {
 15817                           ;mTouchSensor.c: 103: pSensor->samplesNumber = oversampling;
 15818  001B84  EE20 F010          	lfsr	2,16
 15819  001B88  5195               	movf	MTouchSetSensor@pSensor& (0+255),w,b
 15820  001B8A  26D9               	addwf	fsr2l,f,c
 15821  001B8C  5196               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
 15822  001B8E  22DA               	addwfc	fsr2h,f,c
 15823  001B90  C08F  FFDE         	movff	MTouchSetSensor@oversampling,postinc2
 15824  001B94  C090  FFDD         	movff	MTouchSetSensor@oversampling+1,postdec2
 15825                           
 15826                           ;mTouchSensor.c: 104: }else{
 15827  001B98  D004               	goto	l5675
 15828  001B9A                     l5673:
 15829                           
 15830                           ; BSR set to: 0
 15831                           ;mTouchSensor.c: 105: pSensor->samplesNumber = 32;
 15832  001B9A  EE20 F010          	lfsr	2,16
 15833  001B9E  D82D               	call	PL110	;call to abstracted procedure
 15834  001BA0  6ADD               	clrf	postdec2,c
 15835  001BA2                     l5675:
 15836                           
 15837                           ; BSR set to: 0
 15838                           ;mTouchSensor.c: 106: }
 15839                           ;mTouchSensor.c: 108: pSensor->sampleCounter = pSensor->samplesNumber;
 15840  001BA2  EE20 F010          	lfsr	2,16
 15841  001BA6  5195               	movf	MTouchSetSensor@pSensor& (0+255),w,b
 15842  001BA8  26D9               	addwf	fsr2l,f,c
 15843  001BAA  5196               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
 15844  001BAC  22DA               	addwfc	fsr2h,f,c
 15845  001BAE  EE10 F00E          	lfsr	1,14
 15846  001BB2  5195               	movf	MTouchSetSensor@pSensor& (0+255),w,b
 15847  001BB4  26E1               	addwf	fsr1l,f,c
 15848  001BB6  5196               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
 15849  001BB8  22E2               	addwfc	fsr1h,f,c
 15850  001BBA  CFDE FFE6          	movff	postinc2,postinc1
 15851  001BBE  CFDD FFE5          	movff	postdec2,postdec1
 15852                           
 15853                           ; BSR set to: 0
 15854                           ;mTouchSensor.c: 119: pSensor->delta = 0;
 15855  001BC2  EE20 F018          	lfsr	2,24
 15856  001BC6  5195               	movf	MTouchSetSensor@pSensor& (0+255),w,b
 15857  001BC8  26D9               	addwf	fsr2l,f,c
 15858  001BCA  5196               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
 15859  001BCC  22DA               	addwfc	fsr2h,f,c
 15860  001BCE  6ADE               	clrf	postinc2,c
 15861  001BD0  6ADD               	clrf	postdec2,c
 15862                           
 15863                           ; BSR set to: 0
 15864                           ;mTouchSensor.c: 120: pSensor->oversampleFilterData = 0;
 15865  001BD2  EE20 F004          	lfsr	2,4
 15866  001BD6  5195               	movf	MTouchSetSensor@pSensor& (0+255),w,b
 15867  001BD8  26D9               	addwf	fsr2l,f,c
 15868  001BDA  5196               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
 15869  001BDC  22DA               	addwfc	fsr2h,f,c
 15870  001BDE  6ADE               	clrf	postinc2,c
 15871  001BE0  6ADE               	clrf	postinc2,c
 15872  001BE2  6ADE               	clrf	postinc2,c
 15873  001BE4  6ADD               	clrf	postdec2,c
 15874                           
 15875                           ; BSR set to: 0
 15876                           ;mTouchSensor.c: 121: pSensor->decimateFilterData = 0;
 15877  001BE6  EE20 F00C          	lfsr	2,12
 15878  001BEA  5195               	movf	MTouchSetSensor@pSensor& (0+255),w,b
 15879  001BEC  26D9               	addwf	fsr2l,f,c
 15880  001BEE  5196               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
 15881  001BF0  22DA               	addwfc	fsr2h,f,c
 15882  001BF2  0E00               	movlw	0
 15883  001BF4  6EDE               	movwf	postinc2,c
 15884  001BF6  6EDD               	movwf	postdec2,c
 15885                           
 15886                           ; BSR set to: 0
 15887  001BF8  0C00               	retlw	0
 15888  001BFA                     __end_of_MTouchSetSensor:
 15889                           	opt stack 0
 15890  001BFA                     PL110:
 15891                           	opt stack 21
 15892  001BFA  5195               	movf	MTouchSetSensor@pSensor& (0+255),w,b
 15893  001BFC  26D9               	addwf	fsr2l,f,c
 15894  001BFE  5196               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
 15895  001C00  22DA               	addwfc	fsr2h,f,c
 15896  001C02  0E20               	movlw	32
 15897  001C04  6EDE               	movwf	postinc2,c
 15898  001C06  0C20               	retlw	32
 15899  001C08                     __end_ofPL110:
 15900                           	opt stack 0
 15901                           tblptru	equ	0xFF8
 15902                           tblptrh	equ	0xFF7
 15903                           tblptrl	equ	0xFF6
 15904                           tablat	equ	0xFF5
 15905                           prodh	equ	0xFF4
 15906                           prodl	equ	0xFF3
 15907                           intcon	equ	0xFF2
 15908                           postinc0	equ	0xFEE
 15909                           wreg	equ	0xFE8
 15910                           indf1	equ	0xFE7
 15911                           postinc1	equ	0xFE6
 15912                           postdec1	equ	0xFE5
 15913                           fsr1h	equ	0xFE2
 15914                           fsr1l	equ	0xFE1
 15915                           indf2	equ	0xFDF
 15916                           postinc2	equ	0xFDE
 15917                           postdec2	equ	0xFDD
 15918                           fsr2h	equ	0xFDA
 15919                           fsr2l	equ	0xFD9
 15920                           status	equ	0xFD8
 15921                           
 15922 ;; *************** function _MTouchSetButton *****************
 15923 ;; Defined at:
 15924 ;;		line 68 in file "../lib/mTouchCap/mTouchButton.c"
 15925 ;; Parameters:    Size  Location     Type
 15926 ;;  buttonNumber    1    wreg     unsigned char 
 15927 ;;  sensorNumber    1   39[BANK0 ] unsigned char 
 15928 ;;  decode          1   40[BANK0 ] unsigned char 
 15929 ;; Auto vars:     Size  Location     Type
 15930 ;;  buttonNumber    1   43[BANK0 ] unsigned char 
 15931 ;;  pButton         2   44[BANK0 ] PTR struct tag_MTOUCHBUT
 15932 ;;		 -> buttons(104), 
 15933 ;; Return value:  Size  Location     Type
 15934 ;;		None               void
 15935 ;; Registers used:
 15936 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15937 ;; Tracked objects:
 15938 ;;		On entry : F/0
 15939 ;;		On exit  : F/0
 15940 ;;		Unchanged: 0/0
 15941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15942 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15943 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15944 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15945 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15946 ;;Total ram usage:        7 bytes
 15947 ;; Hardware stack levels used:    1
 15948 ;; Hardware stack levels required when called:    8
 15949 ;; This function calls:
 15950 ;;		Nothing
 15951 ;; This function is called by:
 15952 ;;		_InitializeSystem
 15953 ;; This function uses a non-reentrant model
 15954 ;;
 15955                           
 15956                           	psect	text52
 15957  002AE6                     __ptext52:
 15958                           	opt stack 0
 15959  002AE6                     _MTouchSetButton:
 15960                           	opt stack 21
 15961                           
 15962                           ; BSR set to: 0
 15963                           ;incstack = 0
 15964                           ;MTouchSetButton@buttonNumber stored from wreg
 15965  002AE6  6F8B               	movwf	MTouchSetButton@buttonNumber& (0+255),b
 15966                           
 15967                           ; BSR set to: 0
 15968                           ;mTouchButton.c: 69: MTOUCHBUTTON* pButton;
 15969                           ;mTouchButton.c: 71: pButton = (MTOUCHBUTTON*)buttons + buttonNumber;
 15970  002AE8  518B               	movf	MTouchSetButton@buttonNumber& (0+255),w,b
 15971  002AEA  0D08               	mullw	8
 15972  002AEC  0E00               	movlw	low _buttons
 15973  002AEE  24F3               	addwf	prodl,w,c
 15974  002AF0  0100               	movlb	0	; () banked
 15975  002AF2  6F8C               	movwf	MTouchSetButton@pButton& (0+255),b
 15976  002AF4  0E02               	movlw	high _buttons
 15977  002AF6  20F4               	addwfc	prodh,w,c
 15978  002AF8  6F8D               	movwf	(MTouchSetButton@pButton+1)& (0+255),b
 15979                           
 15980                           ; BSR set to: 0
 15981                           ;mTouchButton.c: 73: pButton->state = CONTROL_RELEASED | CONTROL_IDLE;
 15982  002AFA  C08C  FFD9         	movff	MTouchSetButton@pButton,fsr2l
 15983  002AFE  C08D  FFDA         	movff	MTouchSetButton@pButton+1,fsr2h
 15984  002B02  0E82               	movlw	130
 15985  002B04  6EDF               	movwf	indf2,c
 15986                           
 15987                           ; BSR set to: 0
 15988                           ;mTouchButton.c: 74: pButton->curState = CONTROL_RELEASED;
 15989  002B06  EE20 F001          	lfsr	2,1
 15990  002B0A  518C               	movf	MTouchSetButton@pButton& (0+255),w,b
 15991  002B0C  26D9               	addwf	fsr2l,f,c
 15992  002B0E  518D               	movf	(MTouchSetButton@pButton+1)& (0+255),w,b
 15993  002B10  22DA               	addwfc	fsr2h,f,c
 15994  002B12  0E02               	movlw	2
 15995  002B14  6EDF               	movwf	indf2,c
 15996                           
 15997                           ; BSR set to: 0
 15998                           ;mTouchButton.c: 75: pButton->decode = decode;
 15999  002B16  EE20 F002          	lfsr	2,2
 16000  002B1A  518C               	movf	MTouchSetButton@pButton& (0+255),w,b
 16001  002B1C  26D9               	addwf	fsr2l,f,c
 16002  002B1E  518D               	movf	(MTouchSetButton@pButton+1)& (0+255),w,b
 16003  002B20  22DA               	addwfc	fsr2h,f,c
 16004  002B22  C088  FFDF         	movff	MTouchSetButton@decode,indf2
 16005                           
 16006                           ; BSR set to: 0
 16007                           ;mTouchButton.c: 76: pButton->pSensor = (SENSOR*)sensors + sensorNumber;
 16008  002B26  5187               	movf	MTouchSetButton@sensorNumber& (0+255),w,b
 16009  002B28  0D20               	mullw	32
 16010  002B2A  0E00               	movlw	low _sensors
 16011  002B2C  6F89               	movwf	??_MTouchSetButton& (0+255),b
 16012  002B2E  0E04               	movlw	high _sensors
 16013  002B30  6F8A               	movwf	(??_MTouchSetButton+1)& (0+255),b
 16014  002B32  50F3               	movf	prodl,w,c
 16015  002B34  2789               	addwf	??_MTouchSetButton& (0+255),f,b
 16016  002B36  50F4               	movf	prodh,w,c
 16017  002B38  238A               	addwfc	(??_MTouchSetButton+1)& (0+255),f,b
 16018  002B3A  EE20 F004          	lfsr	2,4
 16019  002B3E  518C               	movf	MTouchSetButton@pButton& (0+255),w,b
 16020  002B40  26D9               	addwf	fsr2l,f,c
 16021  002B42  518D               	movf	(MTouchSetButton@pButton+1)& (0+255),w,b
 16022  002B44  22DA               	addwfc	fsr2h,f,c
 16023  002B46  C089  FFDE         	movff	??_MTouchSetButton,postinc2
 16024  002B4A  C08A  FFDD         	movff	??_MTouchSetButton+1,postdec2
 16025                           
 16026                           ; BSR set to: 0
 16027                           ;mTouchButton.c: 77: pButton->pressCounter = 6400;
 16028  002B4E  EE20 F006          	lfsr	2,6
 16029  002B52  518C               	movf	MTouchSetButton@pButton& (0+255),w,b
 16030  002B54  26D9               	addwf	fsr2l,f,c
 16031  002B56  518D               	movf	(MTouchSetButton@pButton+1)& (0+255),w,b
 16032  002B58  22DA               	addwfc	fsr2h,f,c
 16033  002B5A  6ADE               	clrf	postinc2,c
 16034  002B5C  0E19               	movlw	25
 16035  002B5E  6EDD               	movwf	postdec2,c
 16036                           
 16037                           ; BSR set to: 0
 16038                           ;mTouchButton.c: 78: pButton->prevSensorState = SENSOR_RELEASED;
 16039  002B60  EE20 F003          	lfsr	2,3
 16040  002B64  518C               	movf	MTouchSetButton@pButton& (0+255),w,b
 16041  002B66  26D9               	addwf	fsr2l,f,c
 16042  002B68  518D               	movf	(MTouchSetButton@pButton+1)& (0+255),w,b
 16043  002B6A  22DA               	addwfc	fsr2h,f,c
 16044  002B6C  0E01               	movlw	1
 16045  002B6E  6EDF               	movwf	indf2,c
 16046                           
 16047                           ; BSR set to: 0
 16048  002B70  0C01               	retlw	1
 16049  002B72                     __end_of_MTouchSetButton:
 16050                           	opt stack 0
 16051                           tblptru	equ	0xFF8
 16052                           tblptrh	equ	0xFF7
 16053                           tblptrl	equ	0xFF6
 16054                           tablat	equ	0xFF5
 16055                           prodh	equ	0xFF4
 16056                           prodl	equ	0xFF3
 16057                           intcon	equ	0xFF2
 16058                           postinc0	equ	0xFEE
 16059                           wreg	equ	0xFE8
 16060                           indf1	equ	0xFE7
 16061                           postinc1	equ	0xFE6
 16062                           postdec1	equ	0xFE5
 16063                           fsr1h	equ	0xFE2
 16064                           fsr1l	equ	0xFE1
 16065                           indf2	equ	0xFDF
 16066                           postinc2	equ	0xFDE
 16067                           postdec2	equ	0xFDD
 16068                           fsr2h	equ	0xFDA
 16069                           fsr2l	equ	0xFD9
 16070                           status	equ	0xFD8
 16071                           
 16072 ;; *************** function _MTouchInit *****************
 16073 ;; Defined at:
 16074 ;;		line 125 in file "../lib/mTouchCap/mTouchSensor.c"
 16075 ;; Parameters:    Size  Location     Type
 16076 ;;		None
 16077 ;; Auto vars:     Size  Location     Type
 16078 ;;		None
 16079 ;; Return value:  Size  Location     Type
 16080 ;;		None               void
 16081 ;; Registers used:
 16082 ;;		wreg, status,2
 16083 ;; Tracked objects:
 16084 ;;		On entry : F/F
 16085 ;;		On exit  : F/F
 16086 ;;		Unchanged: E/0
 16087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16091 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16092 ;;Total ram usage:        0 bytes
 16093 ;; Hardware stack levels used:    1
 16094 ;; Hardware stack levels required when called:    8
 16095 ;; This function calls:
 16096 ;;		Nothing
 16097 ;; This function is called by:
 16098 ;;		_InitializeSystem
 16099 ;; This function uses a non-reentrant model
 16100 ;;
 16101                           
 16102                           	psect	text53
 16103  00363A                     __ptext53:
 16104                           	opt stack 0
 16105  00363A                     _MTouchInit:
 16106                           	opt stack 21
 16107                           
 16108                           ; BSR set to: 15
 16109                           ;mTouchSensor.c: 128: {ADCON0=0; ADCON1=0; ADCON2=0; ADCON2bits.ADFM=1; ADCON2bits.ACQT=
      +                          1; ADCON2bits.ADCS = 1; ADCON0bits.ADON = 1;};
 16110                           
 16111                           ; BSR set to: 0
 16112                           ;incstack = 0
 16113  00363A  6AC2               	clrf	4034,c	;volatile
 16114  00363C  6AC1               	clrf	4033,c	;volatile
 16115  00363E  6AC0               	clrf	4032,c	;volatile
 16116  003640  8EC0               	bsf	4032,7,c	;volatile
 16117                           
 16118                           ; BSR set to: 15
 16119  003642  50C0               	movf	4032,w,c	;volatile
 16120  003644  0BC7               	andlw	-57
 16121  003646  0908               	iorlw	8
 16122  003648  6EC0               	movwf	4032,c	;volatile
 16123  00364A  50C0               	movf	4032,w,c	;volatile
 16124  00364C  0BF8               	andlw	-8
 16125  00364E  0901               	iorlw	1
 16126  003650  6EC0               	movwf	4032,c	;volatile
 16127                           
 16128                           ; BSR set to: 15
 16129  003652  80C2               	bsf	4034,0,c	;volatile
 16130                           
 16131                           ; BSR set to: 15
 16132  003654  0012               	return	
 16133  003656                     __end_of_MTouchInit:
 16134                           	opt stack 0
 16135                           tblptru	equ	0xFF8
 16136                           tblptrh	equ	0xFF7
 16137                           tblptrl	equ	0xFF6
 16138                           tablat	equ	0xFF5
 16139                           prodh	equ	0xFF4
 16140                           prodl	equ	0xFF3
 16141                           intcon	equ	0xFF2
 16142                           postinc0	equ	0xFEE
 16143                           wreg	equ	0xFE8
 16144                           indf1	equ	0xFE7
 16145                           postinc1	equ	0xFE6
 16146                           postdec1	equ	0xFE5
 16147                           fsr1h	equ	0xFE2
 16148                           fsr1l	equ	0xFE1
 16149                           indf2	equ	0xFDF
 16150                           postinc2	equ	0xFDE
 16151                           postdec2	equ	0xFDD
 16152                           fsr2h	equ	0xFDA
 16153                           fsr2l	equ	0xFD9
 16154                           status	equ	0xFD8
 16155                           
 16156 ;; *************** function _InitMessages *****************
 16157 ;; Defined at:
 16158 ;;		line 20 in file "../lib/messages.c"
 16159 ;; Parameters:    Size  Location     Type
 16160 ;;		None
 16161 ;; Auto vars:     Size  Location     Type
 16162 ;;  i               1   39[BANK0 ] unsigned char 
 16163 ;; Return value:  Size  Location     Type
 16164 ;;		None               void
 16165 ;; Registers used:
 16166 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16167 ;; Tracked objects:
 16168 ;;		On entry : 0/0
 16169 ;;		On exit  : F/0
 16170 ;;		Unchanged: 0/0
 16171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16173 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16175 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16176 ;;Total ram usage:        1 bytes
 16177 ;; Hardware stack levels used:    1
 16178 ;; Hardware stack levels required when called:    8
 16179 ;; This function calls:
 16180 ;;		Nothing
 16181 ;; This function is called by:
 16182 ;;		_main
 16183 ;; This function uses a non-reentrant model
 16184 ;;
 16185                           
 16186                           	psect	text54
 16187  003368                     __ptext54:
 16188                           	opt stack 0
 16189  003368                     _InitMessages:
 16190                           	opt stack 22
 16191                           
 16192                           ;messages.c: 21: char i;
 16193                           ;messages.c: 23: for(i = 0; i < (10); i++){
 16194                           
 16195                           ; BSR set to: 15
 16196                           ;incstack = 0
 16197  003368  0100               	movlb	0	; () banked
 16198  00336A  6B87               	clrf	InitMessages@i& (0+255),b
 16199  00336C                     l6305:
 16200                           
 16201                           ; BSR set to: 0
 16202                           ;messages.c: 24: Messages[i] = MSG_PHASE_NONE;
 16203  00336C  5187               	movf	InitMessages@i& (0+255),w,b
 16204  00336E  0F24               	addlw	low _Messages	;volatile
 16205  003370  6ED9               	movwf	fsr2l,c
 16206  003372  6ADA               	clrf	fsr2h,c
 16207  003374  6ADF               	clrf	indf2,c
 16208                           
 16209                           ; BSR set to: 0
 16210  003376  2B87               	incf	InitMessages@i& (0+255),f,b
 16211                           
 16212                           ; BSR set to: 0
 16213  003378  0E09               	movlw	9
 16214  00337A  6587               	cpfsgt	InitMessages@i& (0+255),b
 16215  00337C  D7F7               	goto	l6305
 16216                           
 16217                           ; BSR set to: 0
 16218                           ;messages.c: 28: }
 16219                           ;messages.c: 31: for(i = 0; i < 1; i++)
 16220  00337E  6B87               	clrf	InitMessages@i& (0+255),b
 16221  003380                     l6315:
 16222                           
 16223                           ; BSR set to: 0
 16224                           ;messages.c: 32: BroadcastMessages[i] = MSG_PHASE_NONE;
 16225  003380  5187               	movf	InitMessages@i& (0+255),w,b
 16226  003382  0FD0               	addlw	low _BroadcastMessages	;volatile
 16227  003384  6ED9               	movwf	fsr2l,c
 16228  003386  6ADA               	clrf	fsr2h,c
 16229  003388  6ADF               	clrf	indf2,c
 16230                           
 16231                           ; BSR set to: 0
 16232  00338A  2B87               	incf	InitMessages@i& (0+255),f,b
 16233                           
 16234                           ; BSR set to: 0
 16235  00338C  5187               	movf	InitMessages@i& (0+255),w,b
 16236  00338E  E0F8               	bz	l6315
 16237                           
 16238                           ; BSR set to: 0
 16239                           ;messages.c: 36: for(i = 0; i < 4; i++)
 16240  003390  6B87               	clrf	InitMessages@i& (0+255),b
 16241  003392                     l6325:
 16242                           
 16243                           ; BSR set to: 0
 16244                           ;messages.c: 37: BSem[i] = 0;
 16245  003392  5187               	movf	InitMessages@i& (0+255),w,b
 16246  003394  0F2E               	addlw	low _BSem	;volatile
 16247  003396  6ED9               	movwf	fsr2l,c
 16248  003398  6ADA               	clrf	fsr2h,c
 16249  00339A  6ADF               	clrf	indf2,c
 16250                           
 16251                           ; BSR set to: 0
 16252  00339C  2B87               	incf	InitMessages@i& (0+255),f,b
 16253                           
 16254                           ; BSR set to: 0
 16255  00339E  0E03               	movlw	3
 16256  0033A0  6587               	cpfsgt	InitMessages@i& (0+255),b
 16257  0033A2  D7F7               	goto	l6325
 16258  0033A4  0C03               	retlw	3
 16259  0033A6                     __end_of_InitMessages:
 16260                           	opt stack 0
 16261                           tblptru	equ	0xFF8
 16262                           tblptrh	equ	0xFF7
 16263                           tblptrl	equ	0xFF6
 16264                           tablat	equ	0xFF5
 16265                           prodh	equ	0xFF4
 16266                           prodl	equ	0xFF3
 16267                           intcon	equ	0xFF2
 16268                           postinc0	equ	0xFEE
 16269                           wreg	equ	0xFE8
 16270                           indf1	equ	0xFE7
 16271                           postinc1	equ	0xFE6
 16272                           postdec1	equ	0xFE5
 16273                           fsr1h	equ	0xFE2
 16274                           fsr1l	equ	0xFE1
 16275                           indf2	equ	0xFDF
 16276                           postinc2	equ	0xFDE
 16277                           postdec2	equ	0xFDD
 16278                           fsr2h	equ	0xFDA
 16279                           fsr2l	equ	0xFD9
 16280                           status	equ	0xFD8
 16281                           
 16282 ;; *************** function _LO_ISR *****************
 16283 ;; Defined at:
 16284 ;;		line 88 in file "../isr.c"
 16285 ;; Parameters:    Size  Location     Type
 16286 ;;		None
 16287 ;; Auto vars:     Size  Location     Type
 16288 ;;  i               1   34[COMRAM] unsigned char 
 16289 ;;  lcData          1   33[COMRAM] unsigned char 
 16290 ;;  lcAdr           1   32[COMRAM] unsigned char 
 16291 ;; Return value:  Size  Location     Type
 16292 ;;		None               void
 16293 ;; Registers used:
 16294 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 16295 ;; Tracked objects:
 16296 ;;		On entry : 0/0
 16297 ;;		On exit  : 0/0
 16298 ;;		Unchanged: 0/0
 16299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16301 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16302 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16303 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16304 ;;Total ram usage:       17 bytes
 16305 ;; Hardware stack levels used:    1
 16306 ;; Hardware stack levels required when called:    7
 16307 ;; This function calls:
 16308 ;;		_BSemOn
 16309 ;;		_Busy_eep
 16310 ;;		_Read_b_eep
 16311 ;;		_SendMessage
 16312 ;;		_Write_b_eep
 16313 ;;		_crc_mb
 16314 ;;		_crc_mb_check
 16315 ;;		_putbyte
 16316 ;;		_set_ee_default
 16317 ;;		_timed_getc
 16318 ;; This function is called by:
 16319 ;;		Interrupt level 1
 16320 ;; This function uses a non-reentrant model
 16321 ;;
 16322                           
 16323                           	psect	intcodelo
 16324  000018                     __pintcodelo:
 16325                           	opt stack 0
 16326  000018                     _LO_ISR:
 16327                           	opt stack 15
 16328                           
 16329                           ; BSR set to: 0
 16330                           ;incstack = 0
 16331  000018  CFD8 F018          	movff	status,??_LO_ISR+5
 16332  00001C  CFE8 F019          	movff	wreg,??_LO_ISR+6
 16333  000020  CFE0 F01A          	movff	bsr,??_LO_ISR+7
 16334  000024  CFD9 F01B          	movff	fsr2l,??_LO_ISR+8
 16335  000028  CFDA F01C          	movff	fsr2h,??_LO_ISR+9
 16336  00002C  CFF6 F01D          	movff	tblptrl,??_LO_ISR+10
 16337  000030  CFF7 F01E          	movff	tblptrh,??_LO_ISR+11
 16338  000034  CFF8 F01F          	movff	tblptru,??_LO_ISR+12
 16339  000038  CFF5 F020          	movff	tablat,??_LO_ISR+13
 16340                           
 16341                           ;isr.c: 90: char i;
 16342                           ;isr.c: 91: char lcData, lcAdr;
 16343                           ;isr.c: 94: __nop();
 16344  00003C  F000               	nop	
 16345                           
 16346                           ;isr.c: 96: if(RCIF && RCIE) {
 16347  00003E  BA9E               	btfsc	3998,5,c	;volatile
 16348  000040  AA9D               	btfss	3997,5,c	;volatile
 16349  000042  D1C3               	goto	i1l480
 16350                           
 16351                           ;isr.c: 100: RxTxBuff[0] = timed_getc();
 16352  000044  ECC8  F01A         	call	_timed_getc	;wreg free
 16353  000048  0101               	movlb	1	; () banked
 16354  00004A  6F19               	movwf	_RxTxBuff& (0+255),b
 16355                           
 16356                           ; BSR set to: 1
 16357                           ;isr.c: 103: if(RxTxBuff[0] == 0xEA) {
 16358  00004C  5119               	movf	_RxTxBuff& (0+255),w,b
 16359  00004E  0AEA               	xorlw	234
 16360  000050  B4D8               	btfsc	status,2,c
 16361                           
 16362                           ; BSR set to: 1
 16363  000052  00FF               	reset		;# 
 16364                           
 16365                           ;isr.c: 105: }
 16366                           ;isr.c: 107: if((RxTxBuff[0] != 0x55)) goto error;
 16367  000054  5119               	movf	_RxTxBuff& (0+255),w,b
 16368  000056  0A55               	xorlw	85
 16369  000058  B4D8               	btfsc	status,2,c
 16370                           
 16371                           ; BSR set to: 1
 16372                           ;isr.c: 108: if((FERR1) || (OERR1) || timeout_error) goto error;
 16373  00005A  B4AB               	btfsc	4011,2,c	;volatile
 16374  00005C  D1AD               	goto	i1l405
 16375                           
 16376                           ; BSR set to: 1
 16377  00005E  B2AB               	btfsc	4011,1,c	;volatile
 16378  000060  D1AB               	goto	i1l405
 16379                           
 16380                           ; BSR set to: 1
 16381  000062  5043               	movf	_timeout_error,w,c	;volatile
 16382  000064  E001 D1A8          	bnz	i1l405
 16383                           
 16384                           ; BSR set to: 1
 16385                           ;isr.c: 110: RxTxBuff[1] = timed_getc();
 16386  000068  ECC8  F01A         	call	_timed_getc	;wreg free
 16387  00006C  0101               	movlb	1	; () banked
 16388  00006E  6F1A               	movwf	(_RxTxBuff+1)& (0+255),b
 16389                           
 16390                           ; BSR set to: 1
 16391                           ;isr.c: 111: if((FERR1) || (OERR1) || timeout_error) goto error;
 16392  000070  A4AB               	btfss	4011,2,c	;volatile
 16393                           
 16394                           ; BSR set to: 1
 16395  000072  B2AB               	btfsc	4011,1,c	;volatile
 16396  000074  D1A1               	goto	i1l405
 16397                           
 16398                           ; BSR set to: 1
 16399  000076  5043               	movf	_timeout_error,w,c	;volatile
 16400  000078  E001 D19E          	bnz	i1l405
 16401  00007C  D18F               	goto	i1l6879
 16402  00007E                     i1l6677:
 16403                           
 16404                           ; BSR set to: 1
 16405                           ;isr.c: 121: RxTxBuff[2] = timed_getc();
 16406  00007E  ECC8  F01A         	call	_timed_getc	;wreg free
 16407  000082  0101               	movlb	1	; () banked
 16408  000084  6F1B               	movwf	(_RxTxBuff+2)& (0+255),b
 16409                           
 16410                           ; BSR set to: 1
 16411                           ;isr.c: 122: if((FERR1) || (OERR1) || timeout_error) goto error;
 16412  000086  A4AB               	btfss	4011,2,c	;volatile
 16413                           
 16414                           ; BSR set to: 1
 16415  000088  B2AB               	btfsc	4011,1,c	;volatile
 16416  00008A  D196               	goto	i1l405
 16417                           
 16418                           ; BSR set to: 1
 16419  00008C  5043               	movf	_timeout_error,w,c	;volatile
 16420  00008E  E001 D193          	bnz	i1l405
 16421                           
 16422                           ; BSR set to: 1
 16423                           ;isr.c: 124: RxTxBuff[3] = timed_getc();
 16424  000092  ECC8  F01A         	call	_timed_getc	;wreg free
 16425  000096  0101               	movlb	1	; () banked
 16426  000098  6F1C               	movwf	(_RxTxBuff+3)& (0+255),b
 16427                           
 16428                           ; BSR set to: 1
 16429                           ;isr.c: 125: if((FERR1) || (OERR1) || timeout_error) goto error;
 16430  00009A  A4AB               	btfss	4011,2,c	;volatile
 16431                           
 16432                           ; BSR set to: 1
 16433  00009C  B2AB               	btfsc	4011,1,c	;volatile
 16434  00009E  D18C               	goto	i1l405
 16435                           
 16436                           ; BSR set to: 1
 16437  0000A0  5043               	movf	_timeout_error,w,c	;volatile
 16438  0000A2  E001 D189          	bnz	i1l405
 16439                           
 16440                           ; BSR set to: 1
 16441                           ;isr.c: 127: for(i = 0; i < RxTxBuff[3] + 2; i++) {
 16442  0000A6  6A23               	clrf	LO_ISR@i,c
 16443  0000A8  D010               	goto	i1l6703
 16444  0000AA                     i1l6693:
 16445                           
 16446                           ; BSR set to: 1
 16447                           ;isr.c: 128: RxTxBuff[i + 4] = timed_getc();
 16448  0000AA  0E1D               	movlw	low (_RxTxBuff+4)
 16449  0000AC  2423               	addwf	LO_ISR@i,w,c
 16450  0000AE  6ED9               	movwf	fsr2l,c
 16451  0000B0  6ADA               	clrf	fsr2h,c
 16452  0000B2  0E01               	movlw	high (_RxTxBuff+4)
 16453  0000B4  22DA               	addwfc	fsr2h,f,c
 16454  0000B6  ECC8  F01A         	call	_timed_getc	;wreg free
 16455  0000BA  6EDF               	movwf	indf2,c
 16456                           
 16457                           ;isr.c: 129: if((FERR1) || (OERR1) || timeout_error) goto error;
 16458  0000BC  A4AB               	btfss	4011,2,c	;volatile
 16459  0000BE  B2AB               	btfsc	4011,1,c	;volatile
 16460  0000C0  D17B               	goto	i1l405
 16461  0000C2  5043               	movf	_timeout_error,w,c	;volatile
 16462  0000C4  E001 D178          	bnz	i1l405
 16463  0000C8  2A23               	incf	LO_ISR@i,f,c
 16464  0000CA                     i1l6703:
 16465  0000CA  0101               	movlb	1	; () banked
 16466  0000CC  511C               	movf	(_RxTxBuff+3)& (0+255),w,b
 16467  0000CE  6E13               	movwf	??_LO_ISR& (0+255),c
 16468  0000D0  6A14               	clrf	(??_LO_ISR+1)& (0+255),c
 16469  0000D2  0E02               	movlw	2
 16470  0000D4  2613               	addwf	??_LO_ISR,f,c
 16471  0000D6  0E00               	movlw	0
 16472  0000D8  2214               	addwfc	??_LO_ISR+1,f,c
 16473  0000DA  5023               	movf	LO_ISR@i,w,c
 16474  0000DC  6E15               	movwf	(??_LO_ISR+2)& (0+255),c
 16475  0000DE  6A16               	clrf	(??_LO_ISR+3)& (0+255),c
 16476  0000E0  5016               	movf	??_LO_ISR+3,w,c
 16477  0000E2  0A80               	xorlw	128
 16478  0000E4  6E17               	movwf	(??_LO_ISR+4)& (0+255),c
 16479  0000E6  5013               	movf	??_LO_ISR,w,c
 16480  0000E8  5C15               	subwf	??_LO_ISR+2,w,c
 16481  0000EA  5014               	movf	??_LO_ISR+1,w,c
 16482  0000EC  0A80               	xorlw	128
 16483  0000EE  5817               	subwfb	(??_LO_ISR+4)& (0+255),w,c
 16484  0000F0  E3DC               	bnc	i1l6693
 16485                           
 16486                           ; BSR set to: 1
 16487                           ;isr.c: 130: }
 16488                           ;isr.c: 131: if(crc_mb_check(RxTxBuff, RxTxBuff[3] + 4) == 0) break;
 16489  0000F2  0E01               	movlw	high _RxTxBuff
 16490  0000F4  6E0A               	movwf	crc_mb_check@buffer+1,c
 16491  0000F6  0E19               	movlw	low _RxTxBuff
 16492  0000F8  6E09               	movwf	crc_mb_check@buffer,c
 16493  0000FA  511C               	movf	(_RxTxBuff+3)& (0+255),w,b
 16494  0000FC  0F04               	addlw	4
 16495  0000FE  6E0B               	movwf	crc_mb_check@cnt,c
 16496  000100  EC12  F018         	call	_crc_mb_check	;wreg free
 16497  000104  0900               	iorlw	0
 16498  000106  E101 D157          	bz	i1l405
 16499                           
 16500                           ;isr.c: 133: for(i = 0; i < RxTxBuff[3]; i++) {
 16501  00010A  6A23               	clrf	LO_ISR@i,c
 16502  00010C  D014               	goto	i1l6715
 16503  00010E                     i1l6709:
 16504                           
 16505                           ; BSR set to: 1
 16506                           ;isr.c: 134: (Busy_eep(), Write_b_eep(RxTxBuff[2]++,RxTxBuff[4 + i]));
 16507  00010E  EC66  F01B         	call	_Busy_eep	;wreg free
 16508  000112  0101               	movlb	1	; () banked
 16509  000114  EE21  F01B         	lfsr	2,_RxTxBuff+2
 16510  000118  50DF               	movf	indf2,w,c
 16511  00011A  2ADF               	incf	indf2,f,c
 16512  00011C  6E01               	movwf	Write_b_eep@badd,c
 16513  00011E  6A02               	clrf	Write_b_eep@badd+1,c
 16514  000120  0E1D               	movlw	low (_RxTxBuff+4)
 16515  000122  2423               	addwf	LO_ISR@i,w,c
 16516  000124  6ED9               	movwf	fsr2l,c
 16517  000126  6ADA               	clrf	fsr2h,c
 16518  000128  0E01               	movlw	high (_RxTxBuff+4)
 16519  00012A  22DA               	addwfc	fsr2h,f,c
 16520  00012C  50DF               	movf	indf2,w,c
 16521  00012E  6E03               	movwf	Write_b_eep@bdat,c
 16522  000130  EC72  F019         	call	_Write_b_eep	;wreg free
 16523  000134  2A23               	incf	LO_ISR@i,f,c
 16524  000136                     i1l6715:
 16525  000136  0101               	movlb	1	; () banked
 16526  000138  511C               	movf	(_RxTxBuff+3)& (0+255),w,b
 16527  00013A  5C23               	subwf	LO_ISR@i,w,c
 16528  00013C  E3E8               	bnc	i1l6709
 16529                           
 16530                           ; BSR set to: 1
 16531                           ;isr.c: 135: }
 16532                           ;isr.c: 136: crc_mb(RxTxBuff, (0+2)); for(i = 0; i < ((0) + 4); i ++) {putbyte(RxTxBuff[
      +                          i]);};
 16533  00013E  0E01               	movlw	high _RxTxBuff
 16534  000140  6E0A               	movwf	crc_mb@buffer+1,c
 16535  000142  0E19               	movlw	low _RxTxBuff
 16536  000144  6E09               	movwf	crc_mb@buffer,c
 16537  000146  0E02               	movlw	2
 16538  000148  6E0B               	movwf	crc_mb@count,c
 16539  00014A  EC6A  F018         	call	_crc_mb	;wreg free
 16540  00014E  6A23               	clrf	LO_ISR@i,c
 16541  000150                     i1l6725:
 16542  000150  0101               	movlb	1	; () banked
 16543  000152  0E19               	movlw	low _RxTxBuff
 16544  000154  2423               	addwf	LO_ISR@i,w,c
 16545  000156  6ED9               	movwf	fsr2l,c
 16546  000158  6ADA               	clrf	fsr2h,c
 16547  00015A  0E01               	movlw	high _RxTxBuff
 16548  00015C  22DA               	addwfc	fsr2h,f,c
 16549  00015E  50DF               	movf	indf2,w,c
 16550  000160  EC60  F01B         	call	_putbyte
 16551                           
 16552                           ; BSR set to: 1
 16553  000164  2A23               	incf	LO_ISR@i,f,c
 16554                           
 16555                           ; BSR set to: 1
 16556  000166  0E03               	movlw	3
 16557  000168  6423               	cpfsgt	LO_ISR@i,c
 16558  00016A  D7F2               	goto	i1l6725
 16559  00016C  D125               	goto	i1l405
 16560  00016E                     i1l6731:
 16561                           
 16562                           ; BSR set to: 1
 16563                           ;isr.c: 141: for(i = 2; i < ((2) + 4); i ++) {RxTxBuff[i] = timed_getc();if((FERR1) || (
      +                          OERR1) || timeout_error) goto error;}if(crc_mb_check(RxTxBuff, (2) + 2) == 0) break;
 16564  00016E  0E02               	movlw	2
 16565  000170  6E23               	movwf	LO_ISR@i,c
 16566  000172                     i1l6737:
 16567  000172  0101               	movlb	1	; () banked
 16568  000174  0E19               	movlw	low _RxTxBuff
 16569  000176  2423               	addwf	LO_ISR@i,w,c
 16570  000178  6ED9               	movwf	fsr2l,c
 16571  00017A  6ADA               	clrf	fsr2h,c
 16572  00017C  0E01               	movlw	high _RxTxBuff
 16573  00017E  22DA               	addwfc	fsr2h,f,c
 16574  000180  ECC8  F01A         	call	_timed_getc	;wreg free
 16575  000184  6EDF               	movwf	indf2,c
 16576  000186  A4AB               	btfss	4011,2,c	;volatile
 16577  000188  B2AB               	btfsc	4011,1,c	;volatile
 16578  00018A  D116               	goto	i1l405
 16579  00018C  5043               	movf	_timeout_error,w,c	;volatile
 16580  00018E  E001 D113          	bnz	i1l405
 16581  000192  2A23               	incf	LO_ISR@i,f,c
 16582  000194  0E05               	movlw	5
 16583  000196  6423               	cpfsgt	LO_ISR@i,c
 16584  000198  D7EC               	goto	i1l6737
 16585  00019A  0101               	movlb	1	; () banked
 16586  00019C  0E01               	movlw	high _RxTxBuff
 16587  00019E  6E0A               	movwf	crc_mb_check@buffer+1,c
 16588  0001A0  0E19               	movlw	low _RxTxBuff
 16589  0001A2  6E09               	movwf	crc_mb_check@buffer,c
 16590  0001A4  0E04               	movlw	4
 16591  0001A6  6E0B               	movwf	crc_mb_check@cnt,c
 16592  0001A8  EC12  F018         	call	_crc_mb_check	;wreg free
 16593  0001AC  0900               	iorlw	0
 16594  0001AE  E101 D103          	bz	i1l405
 16595                           
 16596                           ;isr.c: 142: lcAdr = RxTxBuff[2];
 16597  0001B2  C11B  F021         	movff	_RxTxBuff+2,LO_ISR@lcAdr
 16598                           
 16599                           ;isr.c: 143: lcData = RxTxBuff[3];
 16600  0001B6  C11C  F022         	movff	_RxTxBuff+3,LO_ISR@lcData
 16601                           
 16602                           ;isr.c: 144: for(i = 0; i < lcData; i++) {
 16603  0001BA  6A23               	clrf	LO_ISR@i,c
 16604  0001BC  D00F               	goto	i1l6759
 16605  0001BE                     i1l6753:
 16606                           
 16607                           ;isr.c: 145: RxTxBuff[2 + i] = Read_b_eep(lcAdr++);
 16608  0001BE  0101               	movlb	1	; () banked
 16609  0001C0  0E1B               	movlw	low (_RxTxBuff+2)
 16610  0001C2  2423               	addwf	LO_ISR@i,w,c
 16611  0001C4  6ED9               	movwf	fsr2l,c
 16612  0001C6  6ADA               	clrf	fsr2h,c
 16613  0001C8  0E01               	movlw	high (_RxTxBuff+2)
 16614  0001CA  22DA               	addwfc	fsr2h,f,c
 16615  0001CC  C021  F001         	movff	LO_ISR@lcAdr,Read_b_eep@badd
 16616  0001D0  6A02               	clrf	Read_b_eep@badd+1,c
 16617  0001D2  ECEE  F01A         	call	_Read_b_eep	;wreg free
 16618  0001D6  6EDF               	movwf	indf2,c
 16619  0001D8  2A21               	incf	LO_ISR@lcAdr,f,c
 16620  0001DA  2A23               	incf	LO_ISR@i,f,c
 16621  0001DC                     i1l6759:
 16622  0001DC  5022               	movf	LO_ISR@lcData,w,c
 16623  0001DE  5C23               	subwf	LO_ISR@i,w,c
 16624  0001E0  E3EE               	bnc	i1l6753
 16625                           
 16626                           ;isr.c: 146: }
 16627                           ;isr.c: 147: crc_mb(RxTxBuff, (lcData+2)); for(i = 0; i < ((lcData) + 4); i ++) {putbyte
      +                          (RxTxBuff[i]);};
 16628  0001E2  0101               	movlb	1	; () banked
 16629  0001E4  0E01               	movlw	high _RxTxBuff
 16630  0001E6  6E0A               	movwf	crc_mb@buffer+1,c
 16631  0001E8  0E19               	movlw	low _RxTxBuff
 16632  0001EA  6E09               	movwf	crc_mb@buffer,c
 16633  0001EC  5022               	movf	LO_ISR@lcData,w,c
 16634  0001EE  0F02               	addlw	2
 16635  0001F0  6E0B               	movwf	crc_mb@count,c
 16636  0001F2  EC6A  F018         	call	_crc_mb	;wreg free
 16637  0001F6  6A23               	clrf	LO_ISR@i,c
 16638  0001F8  D00B               	goto	i1l6769
 16639  0001FA                     i1l6765:
 16640  0001FA  0101               	movlb	1	; () banked
 16641  0001FC  0E19               	movlw	low _RxTxBuff
 16642  0001FE  2423               	addwf	LO_ISR@i,w,c
 16643  000200  6ED9               	movwf	fsr2l,c
 16644  000202  6ADA               	clrf	fsr2h,c
 16645  000204  0E01               	movlw	high _RxTxBuff
 16646  000206  22DA               	addwfc	fsr2h,f,c
 16647  000208  50DF               	movf	indf2,w,c
 16648  00020A  EC60  F01B         	call	_putbyte
 16649                           
 16650                           ; BSR set to: 1
 16651  00020E  2A23               	incf	LO_ISR@i,f,c
 16652  000210                     i1l6769:
 16653  000210  5022               	movf	LO_ISR@lcData,w,c
 16654  000212  6E13               	movwf	??_LO_ISR& (0+255),c
 16655  000214  6A14               	clrf	(??_LO_ISR+1)& (0+255),c
 16656  000216  0E04               	movlw	4
 16657  000218  2613               	addwf	??_LO_ISR,f,c
 16658  00021A  0E00               	movlw	0
 16659  00021C  2214               	addwfc	??_LO_ISR+1,f,c
 16660  00021E  5023               	movf	LO_ISR@i,w,c
 16661  000220  6E15               	movwf	(??_LO_ISR+2)& (0+255),c
 16662  000222  6A16               	clrf	(??_LO_ISR+3)& (0+255),c
 16663  000224  5016               	movf	??_LO_ISR+3,w,c
 16664  000226  0A80               	xorlw	128
 16665  000228  6E17               	movwf	(??_LO_ISR+4)& (0+255),c
 16666  00022A  5013               	movf	??_LO_ISR,w,c
 16667  00022C  5C15               	subwf	??_LO_ISR+2,w,c
 16668  00022E  5014               	movf	??_LO_ISR+1,w,c
 16669  000230  0A80               	xorlw	128
 16670  000232  5817               	subwfb	(??_LO_ISR+4)& (0+255),w,c
 16671  000234  E301 D0C0          	bc	i1l405
 16672  000238  D7E0               	goto	i1l6765
 16673  00023A                     i1l6771:
 16674                           
 16675                           ; BSR set to: 1
 16676                           ;isr.c: 151: for(i = 2; i < ((1) + 4); i ++) {RxTxBuff[i] = timed_getc();if((FERR1) || (
      +                          OERR1) || timeout_error) goto error;}if(crc_mb_check(RxTxBuff, (1) + 2) == 0) break;
 16677  00023A  0E02               	movlw	2
 16678  00023C  6E23               	movwf	LO_ISR@i,c
 16679  00023E                     i1l6777:
 16680  00023E  0101               	movlb	1	; () banked
 16681  000240  0E19               	movlw	low _RxTxBuff
 16682  000242  2423               	addwf	LO_ISR@i,w,c
 16683  000244  6ED9               	movwf	fsr2l,c
 16684  000246  6ADA               	clrf	fsr2h,c
 16685  000248  0E01               	movlw	high _RxTxBuff
 16686  00024A  22DA               	addwfc	fsr2h,f,c
 16687  00024C  ECC8  F01A         	call	_timed_getc	;wreg free
 16688  000250  6EDF               	movwf	indf2,c
 16689  000252  A4AB               	btfss	4011,2,c	;volatile
 16690  000254  B2AB               	btfsc	4011,1,c	;volatile
 16691  000256  D0B0               	goto	i1l405
 16692  000258  5043               	movf	_timeout_error,w,c	;volatile
 16693  00025A  E001 D0AD          	bnz	i1l405
 16694  00025E  2A23               	incf	LO_ISR@i,f,c
 16695  000260  0E04               	movlw	4
 16696  000262  6423               	cpfsgt	LO_ISR@i,c
 16697  000264  D7EC               	goto	i1l6777
 16698  000266  0101               	movlb	1	; () banked
 16699  000268  0E01               	movlw	high _RxTxBuff
 16700  00026A  6E0A               	movwf	crc_mb_check@buffer+1,c
 16701  00026C  0E19               	movlw	low _RxTxBuff
 16702  00026E  6E09               	movwf	crc_mb_check@buffer,c
 16703  000270  0E03               	movlw	3
 16704  000272  6E0B               	movwf	crc_mb_check@cnt,c
 16705  000274  EC12  F018         	call	_crc_mb_check	;wreg free
 16706  000278  0900               	iorlw	0
 16707  00027A  E101 D09D          	bz	i1l405
 16708                           
 16709                           ;isr.c: 152: SendMessage(USB_FLASH_SEND_CMD);
 16710  00027E  0E05               	movlw	5
 16711  000280  EC43  F01B         	call	_SendMessage
 16712                           
 16713                           ;isr.c: 154: crc_mb(RxTxBuff, (0+2)); for(i = 0; i < ((0) + 4); i ++) {putbyte(RxTxBuff[
      +                          i]);};
 16714  000284  0101               	movlb	1	; () banked
 16715  000286  0E01               	movlw	high _RxTxBuff
 16716  000288  6E0A               	movwf	crc_mb@buffer+1,c
 16717  00028A  0E19               	movlw	low _RxTxBuff
 16718  00028C  6E09               	movwf	crc_mb@buffer,c
 16719  00028E  0E02               	movlw	2
 16720  000290  6E0B               	movwf	crc_mb@count,c
 16721  000292  EC6A  F018         	call	_crc_mb	;wreg free
 16722  000296  6A23               	clrf	LO_ISR@i,c
 16723  000298                     i1l6801:
 16724  000298  0101               	movlb	1	; () banked
 16725  00029A  0E19               	movlw	low _RxTxBuff
 16726  00029C  2423               	addwf	LO_ISR@i,w,c
 16727  00029E  6ED9               	movwf	fsr2l,c
 16728  0002A0  6ADA               	clrf	fsr2h,c
 16729  0002A2  0E01               	movlw	high _RxTxBuff
 16730  0002A4  22DA               	addwfc	fsr2h,f,c
 16731  0002A6  50DF               	movf	indf2,w,c
 16732  0002A8  EC60  F01B         	call	_putbyte
 16733                           
 16734                           ; BSR set to: 1
 16735  0002AC  2A23               	incf	LO_ISR@i,f,c
 16736                           
 16737                           ; BSR set to: 1
 16738  0002AE  0E03               	movlw	3
 16739  0002B0  6423               	cpfsgt	LO_ISR@i,c
 16740  0002B2  D7F2               	goto	i1l6801
 16741  0002B4  D081               	goto	i1l405
 16742  0002B6                     i1l6807:
 16743                           
 16744                           ; BSR set to: 1
 16745                           ;isr.c: 159: for(i = 2; i < ((0) + 4); i ++) {RxTxBuff[i] = timed_getc();if((FERR1) || (
      +                          OERR1) || timeout_error) goto error;}if(crc_mb_check(RxTxBuff, (0) + 2) == 0) break;
 16746  0002B6  0E02               	movlw	2
 16747  0002B8  6E23               	movwf	LO_ISR@i,c
 16748  0002BA                     i1l6813:
 16749  0002BA  0101               	movlb	1	; () banked
 16750  0002BC  0E19               	movlw	low _RxTxBuff
 16751  0002BE  2423               	addwf	LO_ISR@i,w,c
 16752  0002C0  6ED9               	movwf	fsr2l,c
 16753  0002C2  6ADA               	clrf	fsr2h,c
 16754  0002C4  0E01               	movlw	high _RxTxBuff
 16755  0002C6  22DA               	addwfc	fsr2h,f,c
 16756  0002C8  ECC8  F01A         	call	_timed_getc	;wreg free
 16757  0002CC  6EDF               	movwf	indf2,c
 16758  0002CE  A4AB               	btfss	4011,2,c	;volatile
 16759  0002D0  B2AB               	btfsc	4011,1,c	;volatile
 16760  0002D2  D072               	goto	i1l405
 16761  0002D4  5043               	movf	_timeout_error,w,c	;volatile
 16762  0002D6  E170               	bnz	i1l405
 16763  0002D8  2A23               	incf	LO_ISR@i,f,c
 16764  0002DA  0E03               	movlw	3
 16765  0002DC  6423               	cpfsgt	LO_ISR@i,c
 16766  0002DE  D7ED               	goto	i1l6813
 16767  0002E0  0101               	movlb	1	; () banked
 16768  0002E2  0E01               	movlw	high _RxTxBuff
 16769  0002E4  6E0A               	movwf	crc_mb_check@buffer+1,c
 16770  0002E6  0E19               	movlw	low _RxTxBuff
 16771  0002E8  6E09               	movwf	crc_mb_check@buffer,c
 16772  0002EA  0E02               	movlw	2
 16773  0002EC  6E0B               	movwf	crc_mb_check@cnt,c
 16774  0002EE  EC12  F018         	call	_crc_mb_check	;wreg free
 16775  0002F2  0900               	iorlw	0
 16776  0002F4  E061               	bz	i1l405
 16777                           
 16778                           ;isr.c: 160: set_ee_default();
 16779  0002F6  EC3F  F018         	call	_set_ee_default	;wreg free
 16780                           
 16781                           ;isr.c: 161: crc_mb(RxTxBuff, (0+2)); for(i = 0; i < ((0) + 4); i ++) {putbyte(RxTxBuff[
      +                          i]);};
 16782  0002FA  0101               	movlb	1	; () banked
 16783  0002FC  0E01               	movlw	high _RxTxBuff
 16784  0002FE  6E0A               	movwf	crc_mb@buffer+1,c
 16785  000300  0E19               	movlw	low _RxTxBuff
 16786  000302  6E09               	movwf	crc_mb@buffer,c
 16787  000304  0E02               	movlw	2
 16788  000306  6E0B               	movwf	crc_mb@count,c
 16789  000308  EC6A  F018         	call	_crc_mb	;wreg free
 16790  00030C  6A23               	clrf	LO_ISR@i,c
 16791  00030E                     i1l6839:
 16792  00030E  0101               	movlb	1	; () banked
 16793  000310  0E19               	movlw	low _RxTxBuff
 16794  000312  2423               	addwf	LO_ISR@i,w,c
 16795  000314  6ED9               	movwf	fsr2l,c
 16796  000316  6ADA               	clrf	fsr2h,c
 16797  000318  0E01               	movlw	high _RxTxBuff
 16798  00031A  22DA               	addwfc	fsr2h,f,c
 16799  00031C  50DF               	movf	indf2,w,c
 16800  00031E  EC60  F01B         	call	_putbyte
 16801                           
 16802                           ; BSR set to: 1
 16803  000322  2A23               	incf	LO_ISR@i,f,c
 16804                           
 16805                           ; BSR set to: 1
 16806  000324  0E03               	movlw	3
 16807  000326  6423               	cpfsgt	LO_ISR@i,c
 16808  000328  D7F2               	goto	i1l6839
 16809  00032A  D046               	goto	i1l405
 16810  00032C                     i1l6845:
 16811                           
 16812                           ; BSR set to: 1
 16813                           ;isr.c: 166: for(i = 2; i < ((1) + 4); i ++) {RxTxBuff[i] = timed_getc();if((FERR1) || (
      +                          OERR1) || timeout_error) goto error;}if(crc_mb_check(RxTxBuff, (1) + 2) == 0) break;
 16814  00032C  0E02               	movlw	2
 16815  00032E  6E23               	movwf	LO_ISR@i,c
 16816  000330                     i1l6851:
 16817  000330  0101               	movlb	1	; () banked
 16818  000332  0E19               	movlw	low _RxTxBuff
 16819  000334  2423               	addwf	LO_ISR@i,w,c
 16820  000336  6ED9               	movwf	fsr2l,c
 16821  000338  6ADA               	clrf	fsr2h,c
 16822  00033A  0E01               	movlw	high _RxTxBuff
 16823  00033C  22DA               	addwfc	fsr2h,f,c
 16824  00033E  ECC8  F01A         	call	_timed_getc	;wreg free
 16825  000342  6EDF               	movwf	indf2,c
 16826  000344  A4AB               	btfss	4011,2,c	;volatile
 16827  000346  B2AB               	btfsc	4011,1,c	;volatile
 16828  000348  D037               	goto	i1l405
 16829  00034A  5043               	movf	_timeout_error,w,c	;volatile
 16830  00034C  E135               	bnz	i1l405
 16831  00034E  2A23               	incf	LO_ISR@i,f,c
 16832  000350  0E04               	movlw	4
 16833  000352  6423               	cpfsgt	LO_ISR@i,c
 16834  000354  D7ED               	goto	i1l6851
 16835  000356  0101               	movlb	1	; () banked
 16836  000358  0E01               	movlw	high _RxTxBuff
 16837  00035A  6E0A               	movwf	crc_mb_check@buffer+1,c
 16838  00035C  0E19               	movlw	low _RxTxBuff
 16839  00035E  6E09               	movwf	crc_mb_check@buffer,c
 16840  000360  0E03               	movlw	3
 16841  000362  6E0B               	movwf	crc_mb_check@cnt,c
 16842  000364  EC12  F018         	call	_crc_mb_check	;wreg free
 16843  000368  0900               	iorlw	0
 16844  00036A  E026               	bz	i1l405
 16845  00036C  D00C               	goto	i1l6875
 16846  00036E                     i1l6867:
 16847                           
 16848                           ; BSR set to: 1
 16849                           ;isr.c: 171: BSemOn(SEM_RX_DONE);
 16850  00036E  0E01               	movlw	1
 16851  000370  EC4B  F01B         	call	_BSemOn
 16852                           
 16853                           ;isr.c: 172: break;
 16854  000374  D010               	goto	i1l474
 16855  000376                     i1l6869:
 16856                           
 16857                           ; BSR set to: 1
 16858                           ;isr.c: 174: BSemOn(SEM_WR_DONE);
 16859  000376  0E02               	movlw	2
 16860  000378  EC4B  F01B         	call	_BSemOn
 16861                           
 16862                           ;isr.c: 175: break;
 16863  00037C  D00C               	goto	i1l474
 16864  00037E                     i1l6871:
 16865                           
 16866                           ; BSR set to: 1
 16867                           ;isr.c: 177: BSemOn(SEM_WR_ERR);
 16868  00037E  0E03               	movlw	3
 16869  000380  EC4B  F01B         	call	_BSemOn
 16870                           
 16871                           ;isr.c: 178: break;
 16872  000384  D008               	goto	i1l474
 16873  000386                     i1l6875:
 16874  000386  0101               	movlb	1	; () banked
 16875  000388  511B               	movf	(_RxTxBuff+2)& (0+255),w,b
 16876                           
 16877                           ; Switch size 1, requested type "space"
 16878                           ; Number of cases is 3, Range of values is 1 to 3
 16879                           ; switch strategies available:
 16880                           ; Name         Instructions Cycles
 16881                           ; simple_byte           10     6 (average)
 16882                           ;	Chosen strategy is simple_byte
 16883  00038A  0A01               	xorlw	1	; case 1
 16884  00038C  E0F0               	bz	i1l6867
 16885  00038E  0A03               	xorlw	3	; case 2
 16886  000390  E0F2               	bz	i1l6869
 16887  000392  0A01               	xorlw	1	; case 3
 16888  000394  E0F4               	bz	i1l6871
 16889  000396                     i1l474:
 16890                           
 16891                           ;isr.c: 183: __nop();
 16892  000396  F000               	nop	
 16893                           
 16894                           ;isr.c: 184: __nop();
 16895  000398  F000               	nop	
 16896                           
 16897                           ;isr.c: 185: break;
 16898  00039A  D00E               	goto	i1l405
 16899  00039C                     i1l6879:
 16900                           
 16901                           ; BSR set to: 1
 16902  00039C  511A               	movf	(_RxTxBuff+1)& (0+255),w,b
 16903                           
 16904                           ; Switch size 1, requested type "space"
 16905                           ; Number of cases is 5, Range of values is 8 to 16
 16906                           ; switch strategies available:
 16907                           ; Name         Instructions Cycles
 16908                           ; simple_byte           16     9 (average)
 16909                           ;	Chosen strategy is simple_byte
 16910  00039E  0A08               	xorlw	8	; case 8
 16911  0003A0  E101 D66D          	bz	i1l6677
 16912  0003A4  0A01               	xorlw	1	; case 9
 16913  0003A6  E101 D6E2          	bz	i1l6731
 16914  0003AA  0A03               	xorlw	3	; case 10
 16915  0003AC  E101 D745          	bz	i1l6771
 16916  0003B0  0A01               	xorlw	1	; case 11
 16917  0003B2  E081               	bz	i1l6807
 16918  0003B4  0A1B               	xorlw	27	; case 16
 16919  0003B6  E0BA               	bz	i1l6845
 16920  0003B8                     i1l405:
 16921                           
 16922                           ;isr.c: 191: if(RCIF) dummy = RCREG;
 16923  0003B8  BA9E               	btfsc	3998,5,c	;volatile
 16924  0003BA  CFAE F042          	movff	4014,_dummy	;volatile
 16925                           
 16926                           ;isr.c: 192: if(RCIF) dummy = RCREG;
 16927  0003BE  BA9E               	btfsc	3998,5,c	;volatile
 16928  0003C0  CFAE F042          	movff	4014,_dummy	;volatile
 16929                           
 16930                           ;isr.c: 193: CREN1 = 0;
 16931  0003C4  98AB               	bcf	4011,4,c	;volatile
 16932                           
 16933                           ;isr.c: 194: __nop();
 16934  0003C6  F000               	nop	
 16935                           
 16936                           ;isr.c: 195: CREN1 = 1;
 16937  0003C8  88AB               	bsf	4011,4,c	;volatile
 16938  0003CA                     i1l480:
 16939  0003CA  C020  FFF5         	movff	??_LO_ISR+13,tablat
 16940  0003CE  C01F  FFF8         	movff	??_LO_ISR+12,tblptru
 16941  0003D2  C01E  FFF7         	movff	??_LO_ISR+11,tblptrh
 16942  0003D6  C01D  FFF6         	movff	??_LO_ISR+10,tblptrl
 16943  0003DA  C01C  FFDA         	movff	??_LO_ISR+9,fsr2h
 16944  0003DE  C01B  FFD9         	movff	??_LO_ISR+8,fsr2l
 16945  0003E2  C01A  FFE0         	movff	??_LO_ISR+7,bsr
 16946  0003E6  C019  FFE8         	movff	??_LO_ISR+6,wreg
 16947  0003EA  C018  FFD8         	movff	??_LO_ISR+5,status
 16948  0003EE  0010               	retfie	
 16949  0003F0                     __end_of_LO_ISR:
 16950                           	opt stack 0
 16951                           tblptru	equ	0xFF8
 16952                           tblptrh	equ	0xFF7
 16953                           tblptrl	equ	0xFF6
 16954                           tablat	equ	0xFF5
 16955                           prodh	equ	0xFF4
 16956                           prodl	equ	0xFF3
 16957                           intcon	equ	0xFF2
 16958                           postinc0	equ	0xFEE
 16959                           wreg	equ	0xFE8
 16960                           indf1	equ	0xFE7
 16961                           postinc1	equ	0xFE6
 16962                           postdec1	equ	0xFE5
 16963                           fsr1h	equ	0xFE2
 16964                           fsr1l	equ	0xFE1
 16965                           bsr	equ	0xFE0
 16966                           indf2	equ	0xFDF
 16967                           postinc2	equ	0xFDE
 16968                           postdec2	equ	0xFDD
 16969                           fsr2h	equ	0xFDA
 16970                           fsr2l	equ	0xFD9
 16971                           status	equ	0xFD8
 16972                           
 16973 ;; *************** function _timed_getc *****************
 16974 ;; Defined at:
 16975 ;;		line 97 in file "../lib/usart.c"
 16976 ;; Parameters:    Size  Location     Type
 16977 ;;		None
 16978 ;; Auto vars:     Size  Location     Type
 16979 ;;  timeout         2    0[COMRAM] unsigned short 
 16980 ;; Return value:  Size  Location     Type
 16981 ;;                  1    wreg      unsigned char 
 16982 ;; Registers used:
 16983 ;;		wreg, status,2, status,0, cstack
 16984 ;; Tracked objects:
 16985 ;;		On entry : 0/0
 16986 ;;		On exit  : 0/0
 16987 ;;		Unchanged: 0/0
 16988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16990 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16992 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16993 ;;Total ram usage:        2 bytes
 16994 ;; Hardware stack levels used:    1
 16995 ;; Hardware stack levels required when called:    5
 16996 ;; This function calls:
 16997 ;;		_getbyte
 16998 ;; This function is called by:
 16999 ;;		_LO_ISR
 17000 ;; This function uses a non-reentrant model
 17001 ;;
 17002                           
 17003                           	psect	text56
 17004  003590                     __ptext56:
 17005                           	opt stack 0
 17006  003590                     _timed_getc:
 17007                           	opt stack 16
 17008                           
 17009                           ;usart.c: 98: WORD timeout;
 17010                           ;usart.c: 100: timeout_error = 0;
 17011                           
 17012                           ;incstack = 0
 17013  003590  6A43               	clrf	_timeout_error,c	;volatile
 17014                           
 17015                           ;usart.c: 101: timeout = 0;
 17016  003592  6A01               	clrf	timed_getc@timeout,c
 17017  003594  6A02               	clrf	timed_getc@timeout+1,c
 17018  003596                     i1l222:
 17019  003596  F000               	nop	
 17020  003598  BA9E               	btfsc	3998,5,c	;volatile
 17021  00359A  D007               	goto	i1l225
 17022  00359C  4A01               	infsnz	timed_getc@timeout,f,c
 17023  00359E  2A02               	incf	timed_getc@timeout+1,f,c
 17024  0035A0  0E10               	movlw	16
 17025  0035A2  5C01               	subwf	timed_getc@timeout& (0+255),w,c
 17026  0035A4  0E27               	movlw	39
 17027  0035A6  5802               	subwfb	(timed_getc@timeout+1)& (0+255),w,c
 17028  0035A8  E3F6               	bnc	i1l222
 17029  0035AA                     i1l225:
 17030                           
 17031                           ;usart.c: 105: if (RCIF) {
 17032  0035AA  BA9E               	btfsc	3998,5,c	;volatile
 17033                           
 17034                           ;usart.c: 106: return (getbyte());
 17035  0035AC  EF5C  F01B         	goto	i1l211	;wreg free
 17036                           
 17037                           ;usart.c: 108: timeout_error = 1;
 17038  0035B0  0E01               	movlw	1
 17039  0035B2  6E43               	movwf	_timeout_error,c	;volatile
 17040                           
 17041                           ;usart.c: 109: return (0);
 17042  0035B4  0C00               	retlw	0
 17043  0035B6                     __end_of_timed_getc:
 17044                           	opt stack 0
 17045                           tblptru	equ	0xFF8
 17046                           tblptrh	equ	0xFF7
 17047                           tblptrl	equ	0xFF6
 17048                           tablat	equ	0xFF5
 17049                           prodh	equ	0xFF4
 17050                           prodl	equ	0xFF3
 17051                           intcon	equ	0xFF2
 17052                           postinc0	equ	0xFEE
 17053                           wreg	equ	0xFE8
 17054                           indf1	equ	0xFE7
 17055                           postinc1	equ	0xFE6
 17056                           postdec1	equ	0xFE5
 17057                           fsr1h	equ	0xFE2
 17058                           fsr1l	equ	0xFE1
 17059                           bsr	equ	0xFE0
 17060                           indf2	equ	0xFDF
 17061                           postinc2	equ	0xFDE
 17062                           postdec2	equ	0xFDD
 17063                           fsr2h	equ	0xFDA
 17064                           fsr2l	equ	0xFD9
 17065                           status	equ	0xFD8
 17066                           
 17067 ;; *************** function _getbyte *****************
 17068 ;; Defined at:
 17069 ;;		line 76 in file "../lib/usart.c"
 17070 ;; Parameters:    Size  Location     Type
 17071 ;;		None
 17072 ;; Auto vars:     Size  Location     Type
 17073 ;;		None
 17074 ;; Return value:  Size  Location     Type
 17075 ;;                  1    wreg      unsigned char 
 17076 ;; Registers used:
 17077 ;;		wreg, status,2
 17078 ;; Tracked objects:
 17079 ;;		On entry : 0/0
 17080 ;;		On exit  : 0/0
 17081 ;;		Unchanged: 0/0
 17082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17086 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17087 ;;Total ram usage:        0 bytes
 17088 ;; Hardware stack levels used:    1
 17089 ;; Hardware stack levels required when called:    4
 17090 ;; This function calls:
 17091 ;;		Nothing
 17092 ;; This function is called by:
 17093 ;;		_timed_getc
 17094 ;; This function uses a non-reentrant model
 17095 ;;
 17096                           
 17097                           	psect	text57
 17098  0036B4                     __ptext57:
 17099                           	opt stack 0
 17100  0036B4                     _getbyte:
 17101                           	opt stack 16
 17102                           
 17103                           ;usart.c: 78: while (!RCIF) {
 17104                           
 17105                           ;incstack = 0
 17106  0036B4  D001               	goto	i1l211
 17107  0036B6                     i1l212:
 17108                           
 17109                           ;usart.c: 79: __nop();
 17110  0036B6  F000               	nop	
 17111  0036B8                     i1l211:
 17112  0036B8  AA9E               	btfss	3998,5,c	;volatile
 17113  0036BA  D7FD               	goto	i1l212
 17114                           
 17115                           ;usart.c: 81: }
 17116                           ;usart.c: 82: return RCREG;
 17117  0036BC  50AE               	movf	4014,w,c	;volatile
 17118  0036BE  0012               	return	
 17119  0036C0                     __end_of_getbyte:
 17120                           	opt stack 0
 17121                           tblptru	equ	0xFF8
 17122                           tblptrh	equ	0xFF7
 17123                           tblptrl	equ	0xFF6
 17124                           tablat	equ	0xFF5
 17125                           prodh	equ	0xFF4
 17126                           prodl	equ	0xFF3
 17127                           intcon	equ	0xFF2
 17128                           postinc0	equ	0xFEE
 17129                           wreg	equ	0xFE8
 17130                           indf1	equ	0xFE7
 17131                           postinc1	equ	0xFE6
 17132                           postdec1	equ	0xFE5
 17133                           fsr1h	equ	0xFE2
 17134                           fsr1l	equ	0xFE1
 17135                           bsr	equ	0xFE0
 17136                           indf2	equ	0xFDF
 17137                           postinc2	equ	0xFDE
 17138                           postdec2	equ	0xFDD
 17139                           fsr2h	equ	0xFDA
 17140                           fsr2l	equ	0xFD9
 17141                           status	equ	0xFD8
 17142                           
 17143 ;; *************** function _set_ee_default *****************
 17144 ;; Defined at:
 17145 ;;		line 28 in file "../lib/eeprom.c"
 17146 ;; Parameters:    Size  Location     Type
 17147 ;;		None
 17148 ;; Auto vars:     Size  Location     Type
 17149 ;;  i               2   13[COMRAM] unsigned int 
 17150 ;;  c1              1   12[COMRAM] unsigned char 
 17151 ;;  c               1   11[COMRAM] unsigned char 
 17152 ;; Return value:  Size  Location     Type
 17153 ;;		None               void
 17154 ;; Registers used:
 17155 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17156 ;; Tracked objects:
 17157 ;;		On entry : 0/1
 17158 ;;		On exit  : 0/0
 17159 ;;		Unchanged: 0/0
 17160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17162 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17164 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17165 ;;Total ram usage:        4 bytes
 17166 ;; Hardware stack levels used:    1
 17167 ;; Hardware stack levels required when called:    6
 17168 ;; This function calls:
 17169 ;;		_read___ee
 17170 ;;		_write___ee
 17171 ;; This function is called by:
 17172 ;;		_LO_ISR
 17173 ;; This function uses a non-reentrant model
 17174 ;;
 17175                           
 17176                           	psect	text58
 17177  00307E                     __ptext58:
 17178                           	opt stack 0
 17179  00307E                     _set_ee_default:
 17180                           	opt stack 15
 17181                           
 17182                           ;eeprom.c: 29: unsigned int i;
 17183                           ;eeprom.c: 30: char c, c1;
 17184                           ;eeprom.c: 31: for(i = 0; i < 256; i ++){
 17185                           
 17186                           ;incstack = 0
 17187  00307E  6A0E               	clrf	set_ee_default@i,c
 17188  003080  6A0F               	clrf	set_ee_default@i+1,c
 17189  003082                     i1l6219:
 17190                           
 17191                           ;eeprom.c: 33: c = eedata[i];
 17192  003082  0E1B               	movlw	low _eedata
 17193  003084  240E               	addwf	set_ee_default@i,w,c
 17194  003086  6EF6               	movwf	tblptrl,c
 17195  003088  0EF3               	movlw	high _eedata
 17196  00308A  200F               	addwfc	set_ee_default@i+1,w,c
 17197  00308C  6EF7               	movwf	tblptrh,c
 17198  00308E                     	if	0	;There are less than 3 active tblptr bytes
 17199  00308E                     	endif
 17200  00308E  0008               	tblrd		*
 17201  003090  CFF5 F00C          	movff	tablat,set_ee_default@c
 17202                           
 17203                           ;eeprom.c: 34: read___ee(i, (char *)&c1, sizeof(c1));
 17204  003094  C00E  F006         	movff	set_ee_default@i,read___ee@adr
 17205  003098  C00F  F007         	movff	set_ee_default@i+1,read___ee@adr+1
 17206  00309C  0E0D               	movlw	low set_ee_default@c1
 17207  00309E  6E08               	movwf	read___ee@var,c
 17208  0030A0  0E01               	movlw	1
 17209  0030A2  6E09               	movwf	read___ee@byte,c
 17210  0030A4  ECDB  F01A         	call	_read___ee	;wreg free
 17211                           
 17212                           ;eeprom.c: 35: if(c != c1){
 17213  0030A8  500C               	movf	set_ee_default@c,w,c
 17214  0030AA  180D               	xorwf	set_ee_default@c1,w,c
 17215  0030AC  E00A               	bz	i1l6227
 17216                           
 17217                           ;eeprom.c: 36: write___ee(i, (char *)&c, sizeof(c));
 17218  0030AE  C00E  F008         	movff	set_ee_default@i,write___ee@adr
 17219  0030B2  C00F  F009         	movff	set_ee_default@i+1,write___ee@adr+1
 17220  0030B6  0E0C               	movlw	low set_ee_default@c
 17221  0030B8  6E0A               	movwf	write___ee@var,c
 17222  0030BA  0E01               	movlw	1
 17223  0030BC  6E0B               	movwf	write___ee@byte,c
 17224  0030BE  EC51  F01A         	call	_write___ee	;wreg free
 17225  0030C2                     i1l6227:
 17226  0030C2  4A0E               	infsnz	set_ee_default@i,f,c
 17227  0030C4  2A0F               	incf	set_ee_default@i+1,f,c
 17228  0030C6  0E00               	movlw	0
 17229  0030C8  5C0E               	subwf	set_ee_default@i,w,c
 17230  0030CA  0E01               	movlw	1
 17231  0030CC  580F               	subwfb	set_ee_default@i+1,w,c
 17232  0030CE  B0D8               	btfsc	status,0,c
 17233  0030D0  0012               	return	
 17234  0030D2  D7D7               	goto	i1l6219
 17235  0030D4                     __end_of_set_ee_default:
 17236                           	opt stack 0
 17237                           tblptru	equ	0xFF8
 17238                           tblptrh	equ	0xFF7
 17239                           tblptrl	equ	0xFF6
 17240                           tablat	equ	0xFF5
 17241                           prodh	equ	0xFF4
 17242                           prodl	equ	0xFF3
 17243                           intcon	equ	0xFF2
 17244                           postinc0	equ	0xFEE
 17245                           wreg	equ	0xFE8
 17246                           indf1	equ	0xFE7
 17247                           postinc1	equ	0xFE6
 17248                           postdec1	equ	0xFE5
 17249                           fsr1h	equ	0xFE2
 17250                           fsr1l	equ	0xFE1
 17251                           bsr	equ	0xFE0
 17252                           indf2	equ	0xFDF
 17253                           postinc2	equ	0xFDE
 17254                           postdec2	equ	0xFDD
 17255                           fsr2h	equ	0xFDA
 17256                           fsr2l	equ	0xFD9
 17257                           status	equ	0xFD8
 17258                           
 17259 ;; *************** function _write___ee *****************
 17260 ;; Defined at:
 17261 ;;		line 11 in file "../lib/eeprom.c"
 17262 ;; Parameters:    Size  Location     Type
 17263 ;;  adr             2    7[COMRAM] unsigned int 
 17264 ;;  var             1    9[COMRAM] PTR unsigned char 
 17265 ;;		 -> set_ee_default@c(1), 
 17266 ;;  byte            1   10[COMRAM] unsigned char 
 17267 ;; Auto vars:     Size  Location     Type
 17268 ;;		None
 17269 ;; Return value:  Size  Location     Type
 17270 ;;		None               void
 17271 ;; Registers used:
 17272 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17273 ;; Tracked objects:
 17274 ;;		On entry : 0/1
 17275 ;;		On exit  : 0/0
 17276 ;;		Unchanged: 0/0
 17277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17278 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17281 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17282 ;;Total ram usage:        4 bytes
 17283 ;; Hardware stack levels used:    1
 17284 ;; Hardware stack levels required when called:    5
 17285 ;; This function calls:
 17286 ;;		_Busy_eep
 17287 ;;		_Write_b_eep
 17288 ;; This function is called by:
 17289 ;;		_set_ee_default
 17290 ;; This function uses a non-reentrant model
 17291 ;;
 17292                           
 17293                           	psect	text59
 17294  0034A2                     __ptext59:
 17295                           	opt stack 0
 17296  0034A2                     _write___ee:
 17297                           	opt stack 15
 17298                           
 17299                           ;eeprom.c: 12: while(byte--){
 17300                           
 17301                           ;incstack = 0
 17302  0034A2  D010               	goto	i1l5735
 17303  0034A4                     i1l5731:
 17304                           
 17305                           ;eeprom.c: 13: (Busy_eep(), Write_b_eep(adr+byte,(unsigned char)(*(((unsigned char *)var
      +                          )+byte))));
 17306  0034A4  EC66  F01B         	call	_Busy_eep	;wreg free
 17307  0034A8  500B               	movf	write___ee@byte,w,c
 17308  0034AA  2408               	addwf	write___ee@adr,w,c
 17309  0034AC  6E01               	movwf	Write_b_eep@badd,c
 17310  0034AE  0E00               	movlw	0
 17311  0034B0  2009               	addwfc	write___ee@adr+1,w,c
 17312  0034B2  6E02               	movwf	Write_b_eep@badd+1,c
 17313  0034B4  500A               	movf	write___ee@var,w,c
 17314  0034B6  240B               	addwf	write___ee@byte,w,c
 17315  0034B8  6ED9               	movwf	fsr2l,c
 17316  0034BA  6ADA               	clrf	fsr2h,c
 17317  0034BC  50DF               	movf	indf2,w,c
 17318  0034BE  6E03               	movwf	Write_b_eep@bdat,c
 17319  0034C0  EC72  F019         	call	_Write_b_eep	;wreg free
 17320  0034C4                     i1l5735:
 17321  0034C4  060B               	decf	write___ee@byte,f,c
 17322  0034C6  280B               	incf	write___ee@byte& (0+255),w,c
 17323  0034C8  B4D8               	btfsc	status,2,c
 17324  0034CA  0012               	return	
 17325  0034CC  D7EB               	goto	i1l5731
 17326  0034CE                     __end_of_write___ee:
 17327                           	opt stack 0
 17328                           tblptru	equ	0xFF8
 17329                           tblptrh	equ	0xFF7
 17330                           tblptrl	equ	0xFF6
 17331                           tablat	equ	0xFF5
 17332                           prodh	equ	0xFF4
 17333                           prodl	equ	0xFF3
 17334                           intcon	equ	0xFF2
 17335                           postinc0	equ	0xFEE
 17336                           wreg	equ	0xFE8
 17337                           indf1	equ	0xFE7
 17338                           postinc1	equ	0xFE6
 17339                           postdec1	equ	0xFE5
 17340                           fsr1h	equ	0xFE2
 17341                           fsr1l	equ	0xFE1
 17342                           bsr	equ	0xFE0
 17343                           indf2	equ	0xFDF
 17344                           postinc2	equ	0xFDE
 17345                           postdec2	equ	0xFDD
 17346                           fsr2h	equ	0xFDA
 17347                           fsr2l	equ	0xFD9
 17348                           status	equ	0xFD8
 17349                           
 17350 ;; *************** function _Write_b_eep *****************
 17351 ;; Defined at:
 17352 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\EEP\write_B.c"
 17353 ;; Parameters:    Size  Location     Type
 17354 ;;  badd            2    0[COMRAM] unsigned int 
 17355 ;;  bdat            1    2[COMRAM] unsigned char 
 17356 ;; Auto vars:     Size  Location     Type
 17357 ;;  GIE_BIT_VAL     1    6[COMRAM] unsigned char 
 17358 ;; Return value:  Size  Location     Type
 17359 ;;		None               void
 17360 ;; Registers used:
 17361 ;;		wreg, status,2, status,0
 17362 ;; Tracked objects:
 17363 ;;		On entry : 0/1
 17364 ;;		On exit  : 0/0
 17365 ;;		Unchanged: 0/0
 17366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17367 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17368 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17369 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17370 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17371 ;;Total ram usage:        7 bytes
 17372 ;; Hardware stack levels used:    1
 17373 ;; Hardware stack levels required when called:    4
 17374 ;; This function calls:
 17375 ;;		Nothing
 17376 ;; This function is called by:
 17377 ;;		_write___ee
 17378 ;;		_LO_ISR
 17379 ;; This function uses a non-reentrant model
 17380 ;;
 17381                           
 17382                           	psect	text60
 17383  0032E4                     __ptext60:
 17384                           	opt stack 0
 17385  0032E4                     _Write_b_eep:
 17386                           	opt stack 15
 17387                           
 17388                           ;incstack = 0
 17389  0032E4  C002  F004         	movff	Write_b_eep@badd+1,??_Write_b_eep
 17390  0032E8  C004  F005         	movff	??_Write_b_eep,??_Write_b_eep+1
 17391  0032EC  6A06               	clrf	(??_Write_b_eep+2)& (0+255),c
 17392  0032EE  5005               	movf	??_Write_b_eep+1,w,c
 17393  0032F0  0B03               	andlw	3
 17394  0032F2  6EAA               	movwf	4010,c	;volatile
 17395  0032F4  C001  FFA9         	movff	Write_b_eep@badd,4009	;volatile
 17396  0032F8  C003  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
 17397  0032FC  9EA6               	bcf	4006,7,c	;volatile
 17398  0032FE  9CA6               	bcf	4006,6,c	;volatile
 17399  003300  84A6               	bsf	4006,2,c	;volatile
 17400  003302  0E00               	movlw	0
 17401  003304  BEF2               	btfsc	intcon,7,c	;volatile
 17402  003306  0E01               	movlw	1
 17403  003308  6E07               	movwf	Write_b_eep@GIE_BIT_VAL,c
 17404  00330A  9EF2               	bcf	intcon,7,c	;volatile
 17405  00330C  0E55               	movlw	85
 17406  00330E  6EA7               	movwf	4007,c	;volatile
 17407  003310  0EAA               	movlw	170
 17408  003312  6EA7               	movwf	4007,c	;volatile
 17409  003314  82A6               	bsf	4006,1,c	;volatile
 17410  003316                     i1l1317:
 17411  003316  B2A6               	btfsc	4006,1,c	;volatile
 17412  003318  D7FE               	goto	i1l1317
 17413  00331A  B007               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
 17414  00331C  D002               	bra	i1u454_25
 17415  00331E  9EF2               	bcf	intcon,7,c	;volatile
 17416  003320  D001               	bra	i1u454_26
 17417  003322                     i1u454_25:
 17418  003322  8EF2               	bsf	intcon,7,c	;volatile
 17419  003324                     i1u454_26:
 17420  003324  94A6               	bcf	4006,2,c	;volatile
 17421  003326  0012               	return	
 17422  003328                     __end_of_Write_b_eep:
 17423                           	opt stack 0
 17424                           tblptru	equ	0xFF8
 17425                           tblptrh	equ	0xFF7
 17426                           tblptrl	equ	0xFF6
 17427                           tablat	equ	0xFF5
 17428                           prodh	equ	0xFF4
 17429                           prodl	equ	0xFF3
 17430                           intcon	equ	0xFF2
 17431                           postinc0	equ	0xFEE
 17432                           wreg	equ	0xFE8
 17433                           indf1	equ	0xFE7
 17434                           postinc1	equ	0xFE6
 17435                           postdec1	equ	0xFE5
 17436                           fsr1h	equ	0xFE2
 17437                           fsr1l	equ	0xFE1
 17438                           bsr	equ	0xFE0
 17439                           indf2	equ	0xFDF
 17440                           postinc2	equ	0xFDE
 17441                           postdec2	equ	0xFDD
 17442                           fsr2h	equ	0xFDA
 17443                           fsr2l	equ	0xFD9
 17444                           status	equ	0xFD8
 17445                           
 17446 ;; *************** function _Busy_eep *****************
 17447 ;; Defined at:
 17448 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\EEP\busy_eep.c"
 17449 ;; Parameters:    Size  Location     Type
 17450 ;;		None
 17451 ;; Auto vars:     Size  Location     Type
 17452 ;;		None
 17453 ;; Return value:  Size  Location     Type
 17454 ;;		None               void
 17455 ;; Registers used:
 17456 ;;		None
 17457 ;; Tracked objects:
 17458 ;;		On entry : 0/1
 17459 ;;		On exit  : 0/0
 17460 ;;		Unchanged: 0/0
 17461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17465 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17466 ;;Total ram usage:        0 bytes
 17467 ;; Hardware stack levels used:    1
 17468 ;; Hardware stack levels required when called:    4
 17469 ;; This function calls:
 17470 ;;		Nothing
 17471 ;; This function is called by:
 17472 ;;		_write___ee
 17473 ;;		_LO_ISR
 17474 ;; This function uses a non-reentrant model
 17475 ;;
 17476                           
 17477                           	psect	text61
 17478  0036CC                     __ptext61:
 17479                           	opt stack 0
 17480  0036CC                     _Busy_eep:
 17481                           	opt stack 15
 17482  0036CC                     i1l1286:
 17483  0036CC  A2A6               	btfss	4006,1,c	;volatile
 17484  0036CE  0012               	return	
 17485  0036D0  D7FD               	goto	i1l1286
 17486  0036D2                     __end_of_Busy_eep:
 17487                           	opt stack 0
 17488                           tblptru	equ	0xFF8
 17489                           tblptrh	equ	0xFF7
 17490                           tblptrl	equ	0xFF6
 17491                           tablat	equ	0xFF5
 17492                           prodh	equ	0xFF4
 17493                           prodl	equ	0xFF3
 17494                           intcon	equ	0xFF2
 17495                           postinc0	equ	0xFEE
 17496                           wreg	equ	0xFE8
 17497                           indf1	equ	0xFE7
 17498                           postinc1	equ	0xFE6
 17499                           postdec1	equ	0xFE5
 17500                           fsr1h	equ	0xFE2
 17501                           fsr1l	equ	0xFE1
 17502                           bsr	equ	0xFE0
 17503                           indf2	equ	0xFDF
 17504                           postinc2	equ	0xFDE
 17505                           postdec2	equ	0xFDD
 17506                           fsr2h	equ	0xFDA
 17507                           fsr2l	equ	0xFD9
 17508                           status	equ	0xFD8
 17509                           
 17510 ;; *************** function _read___ee *****************
 17511 ;; Defined at:
 17512 ;;		line 18 in file "../lib/eeprom.c"
 17513 ;; Parameters:    Size  Location     Type
 17514 ;;  adr             2    5[COMRAM] unsigned int 
 17515 ;;  var             1    7[COMRAM] PTR unsigned char 
 17516 ;;		 -> set_ee_default@c1(1), 
 17517 ;;  byte            1    8[COMRAM] unsigned char 
 17518 ;; Auto vars:     Size  Location     Type
 17519 ;;		None
 17520 ;; Return value:  Size  Location     Type
 17521 ;;		None               void
 17522 ;; Registers used:
 17523 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17524 ;; Tracked objects:
 17525 ;;		On entry : 0/1
 17526 ;;		On exit  : 0/0
 17527 ;;		Unchanged: 0/0
 17528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17529 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17532 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17533 ;;Total ram usage:        4 bytes
 17534 ;; Hardware stack levels used:    1
 17535 ;; Hardware stack levels required when called:    5
 17536 ;; This function calls:
 17537 ;;		_Read_b_eep
 17538 ;; This function is called by:
 17539 ;;		_set_ee_default
 17540 ;; This function uses a non-reentrant model
 17541 ;;
 17542                           
 17543                           	psect	text62
 17544  0035B6                     __ptext62:
 17545                           	opt stack 0
 17546  0035B6                     _read___ee:
 17547                           	opt stack 15
 17548                           
 17549                           ;eeprom.c: 19: while(byte--){
 17550                           
 17551                           ;incstack = 0
 17552  0035B6  D00D               	goto	i1l5741
 17553  0035B8                     i1l5739:
 17554                           
 17555                           ;eeprom.c: 20: (unsigned char)(*(((unsigned char *)var)+byte))=Read_b_eep(adr+byte);
 17556  0035B8  5008               	movf	read___ee@var,w,c
 17557  0035BA  2409               	addwf	read___ee@byte,w,c
 17558  0035BC  6ED9               	movwf	fsr2l,c
 17559  0035BE  6ADA               	clrf	fsr2h,c
 17560  0035C0  5009               	movf	read___ee@byte,w,c
 17561  0035C2  2406               	addwf	read___ee@adr,w,c
 17562  0035C4  6E01               	movwf	Read_b_eep@badd,c
 17563  0035C6  0E00               	movlw	0
 17564  0035C8  2007               	addwfc	read___ee@adr+1,w,c
 17565  0035CA  6E02               	movwf	Read_b_eep@badd+1,c
 17566  0035CC  ECEE  F01A         	call	_Read_b_eep	;wreg free
 17567  0035D0  6EDF               	movwf	indf2,c
 17568  0035D2                     i1l5741:
 17569  0035D2  0609               	decf	read___ee@byte,f,c
 17570  0035D4  2809               	incf	read___ee@byte& (0+255),w,c
 17571  0035D6  B4D8               	btfsc	status,2,c
 17572  0035D8  0012               	return	
 17573  0035DA  D7EE               	goto	i1l5739
 17574  0035DC                     __end_of_read___ee:
 17575                           	opt stack 0
 17576                           tblptru	equ	0xFF8
 17577                           tblptrh	equ	0xFF7
 17578                           tblptrl	equ	0xFF6
 17579                           tablat	equ	0xFF5
 17580                           prodh	equ	0xFF4
 17581                           prodl	equ	0xFF3
 17582                           intcon	equ	0xFF2
 17583                           postinc0	equ	0xFEE
 17584                           wreg	equ	0xFE8
 17585                           indf1	equ	0xFE7
 17586                           postinc1	equ	0xFE6
 17587                           postdec1	equ	0xFE5
 17588                           fsr1h	equ	0xFE2
 17589                           fsr1l	equ	0xFE1
 17590                           bsr	equ	0xFE0
 17591                           indf2	equ	0xFDF
 17592                           postinc2	equ	0xFDE
 17593                           postdec2	equ	0xFDD
 17594                           fsr2h	equ	0xFDA
 17595                           fsr2l	equ	0xFD9
 17596                           status	equ	0xFD8
 17597                           
 17598 ;; *************** function _Read_b_eep *****************
 17599 ;; Defined at:
 17600 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\EEP\read_B.c"
 17601 ;; Parameters:    Size  Location     Type
 17602 ;;  badd            2    0[COMRAM] unsigned int 
 17603 ;; Auto vars:     Size  Location     Type
 17604 ;;		None
 17605 ;; Return value:  Size  Location     Type
 17606 ;;                  1    wreg      unsigned char 
 17607 ;; Registers used:
 17608 ;;		wreg, status,2, status,0
 17609 ;; Tracked objects:
 17610 ;;		On entry : 0/1
 17611 ;;		On exit  : 0/0
 17612 ;;		Unchanged: 0/0
 17613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17614 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17616 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17617 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17618 ;;Total ram usage:        5 bytes
 17619 ;; Hardware stack levels used:    1
 17620 ;; Hardware stack levels required when called:    4
 17621 ;; This function calls:
 17622 ;;		Nothing
 17623 ;; This function is called by:
 17624 ;;		_read___ee
 17625 ;;		_LO_ISR
 17626 ;; This function uses a non-reentrant model
 17627 ;;
 17628                           
 17629                           	psect	text63
 17630  0035DC                     __ptext63:
 17631                           	opt stack 0
 17632  0035DC                     _Read_b_eep:
 17633                           	opt stack 15
 17634                           
 17635                           ;incstack = 0
 17636  0035DC  C002  F003         	movff	Read_b_eep@badd+1,??_Read_b_eep
 17637  0035E0  C003  F004         	movff	??_Read_b_eep,??_Read_b_eep+1
 17638  0035E4  6A05               	clrf	(??_Read_b_eep+2)& (0+255),c
 17639  0035E6  5004               	movf	??_Read_b_eep+1,w,c
 17640  0035E8  0B03               	andlw	3
 17641  0035EA  6EAA               	movwf	4010,c	;volatile
 17642  0035EC  C001  FFA9         	movff	Read_b_eep@badd,4009	;volatile
 17643  0035F0  9CA6               	bcf	4006,6,c	;volatile
 17644  0035F2  9EA6               	bcf	4006,7,c	;volatile
 17645  0035F4  80A6               	bsf	4006,0,c	;volatile
 17646  0035F6  F000               	nop	
 17647  0035F8  F000               	nop	
 17648  0035FA  50A8               	movf	4008,w,c	;volatile
 17649  0035FC  0012               	return	
 17650  0035FE                     __end_of_Read_b_eep:
 17651                           	opt stack 0
 17652                           tblptru	equ	0xFF8
 17653                           tblptrh	equ	0xFF7
 17654                           tblptrl	equ	0xFF6
 17655                           tablat	equ	0xFF5
 17656                           prodh	equ	0xFF4
 17657                           prodl	equ	0xFF3
 17658                           intcon	equ	0xFF2
 17659                           postinc0	equ	0xFEE
 17660                           wreg	equ	0xFE8
 17661                           indf1	equ	0xFE7
 17662                           postinc1	equ	0xFE6
 17663                           postdec1	equ	0xFE5
 17664                           fsr1h	equ	0xFE2
 17665                           fsr1l	equ	0xFE1
 17666                           bsr	equ	0xFE0
 17667                           indf2	equ	0xFDF
 17668                           postinc2	equ	0xFDE
 17669                           postdec2	equ	0xFDD
 17670                           fsr2h	equ	0xFDA
 17671                           fsr2l	equ	0xFD9
 17672                           status	equ	0xFD8
 17673                           
 17674 ;; *************** function _putbyte *****************
 17675 ;; Defined at:
 17676 ;;		line 50 in file "../lib/usart.c"
 17677 ;; Parameters:    Size  Location     Type
 17678 ;;  byte            1    wreg     unsigned char 
 17679 ;; Auto vars:     Size  Location     Type
 17680 ;;  byte            1    0[COMRAM] unsigned char 
 17681 ;; Return value:  Size  Location     Type
 17682 ;;		None               void
 17683 ;; Registers used:
 17684 ;;		wreg
 17685 ;; Tracked objects:
 17686 ;;		On entry : F/1
 17687 ;;		On exit  : F/1
 17688 ;;		Unchanged: F/0
 17689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17691 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17693 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17694 ;;Total ram usage:        1 bytes
 17695 ;; Hardware stack levels used:    1
 17696 ;; Hardware stack levels required when called:    4
 17697 ;; This function calls:
 17698 ;;		Nothing
 17699 ;; This function is called by:
 17700 ;;		_LO_ISR
 17701 ;; This function uses a non-reentrant model
 17702 ;;
 17703                           
 17704                           	psect	text64
 17705  0036C0                     __ptext64:
 17706                           	opt stack 0
 17707  0036C0                     _putbyte:
 17708                           	opt stack 17
 17709                           
 17710                           ;incstack = 0
 17711                           ;putbyte@byte stored from wreg
 17712  0036C0  6E01               	movwf	putbyte@byte,c
 17713  0036C2                     i1l199:
 17714                           
 17715                           ; BSR set to: 1
 17716  0036C2  A2AC               	btfss	4012,1,c	;volatile
 17717  0036C4  D7FE               	goto	i1l199
 17718                           
 17719                           ; BSR set to: 1
 17720                           ;usart.c: 58: TXREG = byte;
 17721  0036C6  C001  FFAD         	movff	putbyte@byte,4013	;volatile
 17722                           
 17723                           ; BSR set to: 1
 17724  0036CA  0012               	return	
 17725  0036CC                     __end_of_putbyte:
 17726                           	opt stack 0
 17727                           tblptru	equ	0xFF8
 17728                           tblptrh	equ	0xFF7
 17729                           tblptrl	equ	0xFF6
 17730                           tablat	equ	0xFF5
 17731                           prodh	equ	0xFF4
 17732                           prodl	equ	0xFF3
 17733                           intcon	equ	0xFF2
 17734                           postinc0	equ	0xFEE
 17735                           wreg	equ	0xFE8
 17736                           indf1	equ	0xFE7
 17737                           postinc1	equ	0xFE6
 17738                           postdec1	equ	0xFE5
 17739                           fsr1h	equ	0xFE2
 17740                           fsr1l	equ	0xFE1
 17741                           bsr	equ	0xFE0
 17742                           indf2	equ	0xFDF
 17743                           postinc2	equ	0xFDE
 17744                           postdec2	equ	0xFDD
 17745                           fsr2h	equ	0xFDA
 17746                           fsr2l	equ	0xFD9
 17747                           status	equ	0xFD8
 17748                           
 17749 ;; *************** function _crc_mb_check *****************
 17750 ;; Defined at:
 17751 ;;		line 74 in file "../lib/modbus_RTU.c"
 17752 ;; Parameters:    Size  Location     Type
 17753 ;;  buffer          2    8[COMRAM] PTR unsigned char 
 17754 ;;		 -> RxTxBuff(128), 
 17755 ;;  cnt             1   10[COMRAM] unsigned char 
 17756 ;; Auto vars:     Size  Location     Type
 17757 ;;  crc             2   16[COMRAM] unsigned int 
 17758 ;;  i               1   15[COMRAM] unsigned char 
 17759 ;; Return value:  Size  Location     Type
 17760 ;;                  1    wreg      unsigned char 
 17761 ;; Registers used:
 17762 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17763 ;; Tracked objects:
 17764 ;;		On entry : F/1
 17765 ;;		On exit  : 0/0
 17766 ;;		Unchanged: 0/0
 17767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17768 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17769 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17770 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17771 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17772 ;;Total ram usage:       10 bytes
 17773 ;; Hardware stack levels used:    1
 17774 ;; Hardware stack levels required when called:    5
 17775 ;; This function calls:
 17776 ;;		_crc_mb_calc
 17777 ;;		_crc_mb_init
 17778 ;; This function is called by:
 17779 ;;		_LO_ISR
 17780 ;; This function uses a non-reentrant model
 17781 ;;
 17782                           
 17783                           	psect	text65
 17784  003024                     __ptext65:
 17785                           	opt stack 0
 17786  003024                     _crc_mb_check:
 17787                           	opt stack 16
 17788                           
 17789                           ; BSR set to: 1
 17790                           ;modbus_RTU.c: 76: unsigned int crc;
 17791                           ;modbus_RTU.c: 77: unsigned char i;
 17792                           ;modbus_RTU.c: 79: crc_mb_init(&crc);
 17793                           
 17794                           ; BSR set to: 1
 17795                           ;incstack = 0
 17796  003024  0E11               	movlw	crc_mb_check@crc& (0+255)
 17797  003026  EC53  F01B         	call	_crc_mb_init
 17798                           
 17799                           ; BSR set to: 1
 17800                           ;modbus_RTU.c: 81: for (i = 0; i < cnt; i++) {
 17801  00302A  6A10               	clrf	crc_mb_check@i,c
 17802  00302C  D00C               	goto	i1l6261
 17803  00302E                     i1l6255:
 17804                           
 17805                           ;modbus_RTU.c: 82: crc_mb_calc(&crc, *buffer++);
 17806  00302E  C009  FFD9         	movff	crc_mb_check@buffer,fsr2l
 17807  003032  C00A  FFDA         	movff	crc_mb_check@buffer+1,fsr2h
 17808  003036  50DF               	movf	indf2,w,c
 17809  003038  6E01               	movwf	crc_mb_calc@next,c
 17810  00303A  0E11               	movlw	crc_mb_check@crc& (0+255)
 17811  00303C  EC86  F017         	call	_crc_mb_calc
 17812  003040  4A09               	infsnz	crc_mb_check@buffer,f,c
 17813  003042  2A0A               	incf	crc_mb_check@buffer+1,f,c
 17814  003044  2A10               	incf	crc_mb_check@i,f,c
 17815  003046                     i1l6261:
 17816  003046  500B               	movf	crc_mb_check@cnt,w,c
 17817  003048  5C10               	subwf	crc_mb_check@i,w,c
 17818  00304A  E3F1               	bnc	i1l6255
 17819                           
 17820                           ;modbus_RTU.c: 83: }
 17821                           ;modbus_RTU.c: 93: if (((unsigned char) (crc) == *buffer++) && ((unsigned char) (crc >> 
      +                          8) == *buffer)) return 1;
 17822  00304C  C009  FFD9         	movff	crc_mb_check@buffer,fsr2l
 17823  003050  C00A  FFDA         	movff	crc_mb_check@buffer+1,fsr2h
 17824  003054  4A09               	infsnz	crc_mb_check@buffer,f,c
 17825  003056  2A0A               	incf	crc_mb_check@buffer+1,f,c
 17826  003058  5011               	movf	crc_mb_check@crc,w,c
 17827  00305A  62DF               	cpfseq	indf2,c
 17828  00305C  0C00               	retlw	0
 17829  00305E  C009  FFD9         	movff	crc_mb_check@buffer,fsr2l
 17830  003062  C00A  FFDA         	movff	crc_mb_check@buffer+1,fsr2h
 17831  003066  50DF               	movf	indf2,w,c
 17832  003068  6E0C               	movwf	??_crc_mb_check& (0+255),c
 17833  00306A  C012  F00D         	movff	crc_mb_check@crc+1,??_crc_mb_check+1
 17834  00306E  C00D  F00E         	movff	??_crc_mb_check+1,??_crc_mb_check+2
 17835  003072  6A0F               	clrf	(??_crc_mb_check+3)& (0+255),c
 17836  003074  500E               	movf	??_crc_mb_check+2,w,c
 17837  003076  180C               	xorwf	??_crc_mb_check,w,c
 17838  003078  E101               	bnz	i1l6271
 17839  00307A  0C01               	retlw	1
 17840  00307C                     i1l6271:
 17841                           
 17842                           ;modbus_RTU.c: 96: return 0;
 17843  00307C  0C00               	retlw	0
 17844  00307E                     __end_of_crc_mb_check:
 17845                           	opt stack 0
 17846                           tblptru	equ	0xFF8
 17847                           tblptrh	equ	0xFF7
 17848                           tblptrl	equ	0xFF6
 17849                           tablat	equ	0xFF5
 17850                           prodh	equ	0xFF4
 17851                           prodl	equ	0xFF3
 17852                           intcon	equ	0xFF2
 17853                           postinc0	equ	0xFEE
 17854                           wreg	equ	0xFE8
 17855                           indf1	equ	0xFE7
 17856                           postinc1	equ	0xFE6
 17857                           postdec1	equ	0xFE5
 17858                           fsr1h	equ	0xFE2
 17859                           fsr1l	equ	0xFE1
 17860                           bsr	equ	0xFE0
 17861                           indf2	equ	0xFDF
 17862                           postinc2	equ	0xFDE
 17863                           postdec2	equ	0xFDD
 17864                           fsr2h	equ	0xFDA
 17865                           fsr2l	equ	0xFD9
 17866                           status	equ	0xFD8
 17867                           
 17868 ;; *************** function _crc_mb *****************
 17869 ;; Defined at:
 17870 ;;		line 58 in file "../lib/modbus_RTU.c"
 17871 ;; Parameters:    Size  Location     Type
 17872 ;;  buffer          2    8[COMRAM] PTR unsigned char 
 17873 ;;		 -> RxTxBuff(128), 
 17874 ;;  count           1   10[COMRAM] unsigned char 
 17875 ;; Auto vars:     Size  Location     Type
 17876 ;;  CRC             2   15[COMRAM] unsigned int 
 17877 ;;  i               1   14[COMRAM] unsigned char 
 17878 ;; Return value:  Size  Location     Type
 17879 ;;                  2    8[COMRAM] unsigned int 
 17880 ;; Registers used:
 17881 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17882 ;; Tracked objects:
 17883 ;;		On entry : F/1
 17884 ;;		On exit  : 0/0
 17885 ;;		Unchanged: 0/0
 17886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17887 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17888 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17889 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17890 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17891 ;;Total ram usage:        9 bytes
 17892 ;; Hardware stack levels used:    1
 17893 ;; Hardware stack levels required when called:    5
 17894 ;; This function calls:
 17895 ;;		_crc_mb_calc
 17896 ;;		_crc_mb_init
 17897 ;; This function is called by:
 17898 ;;		_LO_ISR
 17899 ;; This function uses a non-reentrant model
 17900 ;;
 17901                           
 17902                           	psect	text66
 17903  0030D4                     __ptext66:
 17904                           	opt stack 0
 17905  0030D4                     _crc_mb:
 17906                           	opt stack 16
 17907                           
 17908                           ; BSR set to: 1
 17909                           ;modbus_RTU.c: 59: unsigned int CRC;
 17910                           ;modbus_RTU.c: 60: unsigned char i;
 17911                           ;modbus_RTU.c: 62: crc_mb_init(&CRC);
 17912                           
 17913                           ;incstack = 0
 17914  0030D4  0E10               	movlw	crc_mb@CRC& (0+255)
 17915  0030D6  EC53  F01B         	call	_crc_mb_init
 17916                           
 17917                           ; BSR set to: 1
 17918                           ;modbus_RTU.c: 63: for (i = 0; i < count; i ++) {
 17919  0030DA  6A0F               	clrf	crc_mb@i,c
 17920  0030DC  D00C               	goto	i1l6285
 17921  0030DE                     i1l6279:
 17922                           
 17923                           ;modbus_RTU.c: 64: crc_mb_calc(&CRC, *buffer++);
 17924  0030DE  C009  FFD9         	movff	crc_mb@buffer,fsr2l
 17925  0030E2  C00A  FFDA         	movff	crc_mb@buffer+1,fsr2h
 17926  0030E6  50DF               	movf	indf2,w,c
 17927  0030E8  6E01               	movwf	crc_mb_calc@next,c
 17928  0030EA  0E10               	movlw	crc_mb@CRC& (0+255)
 17929  0030EC  EC86  F017         	call	_crc_mb_calc
 17930  0030F0  4A09               	infsnz	crc_mb@buffer,f,c
 17931  0030F2  2A0A               	incf	crc_mb@buffer+1,f,c
 17932  0030F4  2A0F               	incf	crc_mb@i,f,c
 17933  0030F6                     i1l6285:
 17934  0030F6  500B               	movf	crc_mb@count,w,c
 17935  0030F8  5C0F               	subwf	crc_mb@i,w,c
 17936  0030FA  E3F1               	bnc	i1l6279
 17937                           
 17938                           ;modbus_RTU.c: 65: }
 17939                           ;modbus_RTU.c: 66: *buffer++ = (unsigned char )(CRC >> 8);
 17940  0030FC  C011  F00C         	movff	crc_mb@CRC+1,??_crc_mb
 17941  003100  C00C  F00D         	movff	??_crc_mb,??_crc_mb+1
 17942  003104  6A0E               	clrf	(??_crc_mb+2)& (0+255),c
 17943  003106  500D               	movf	??_crc_mb+1,w,c
 17944  003108  C009  FFD9         	movff	crc_mb@buffer,fsr2l
 17945  00310C  C00A  FFDA         	movff	crc_mb@buffer+1,fsr2h
 17946  003110  6EDF               	movwf	indf2,c
 17947  003112  4A09               	infsnz	crc_mb@buffer,f,c
 17948  003114  2A0A               	incf	crc_mb@buffer+1,f,c
 17949                           
 17950                           ;modbus_RTU.c: 67: *buffer = (unsigned char ) CRC;
 17951  003116  C009  FFD9         	movff	crc_mb@buffer,fsr2l
 17952  00311A  C00A  FFDA         	movff	crc_mb@buffer+1,fsr2h
 17953  00311E  C010  FFDF         	movff	crc_mb@CRC,indf2
 17954  003122  0012               	return	
 17955  003124                     __end_of_crc_mb:
 17956                           	opt stack 0
 17957                           tblptru	equ	0xFF8
 17958                           tblptrh	equ	0xFF7
 17959                           tblptrl	equ	0xFF6
 17960                           tablat	equ	0xFF5
 17961                           prodh	equ	0xFF4
 17962                           prodl	equ	0xFF3
 17963                           intcon	equ	0xFF2
 17964                           postinc0	equ	0xFEE
 17965                           wreg	equ	0xFE8
 17966                           indf1	equ	0xFE7
 17967                           postinc1	equ	0xFE6
 17968                           postdec1	equ	0xFE5
 17969                           fsr1h	equ	0xFE2
 17970                           fsr1l	equ	0xFE1
 17971                           bsr	equ	0xFE0
 17972                           indf2	equ	0xFDF
 17973                           postinc2	equ	0xFDE
 17974                           postdec2	equ	0xFDD
 17975                           fsr2h	equ	0xFDA
 17976                           fsr2l	equ	0xFD9
 17977                           status	equ	0xFD8
 17978                           
 17979 ;; *************** function _crc_mb_init *****************
 17980 ;; Defined at:
 17981 ;;		line 20 in file "../lib/modbus_RTU.c"
 17982 ;; Parameters:    Size  Location     Type
 17983 ;;  code            1    wreg     PTR unsigned int 
 17984 ;;		 -> crc_mb_check@crc(2), crc_mb@CRC(2), 
 17985 ;; Auto vars:     Size  Location     Type
 17986 ;;  code            1    0[COMRAM] PTR unsigned int 
 17987 ;;		 -> crc_mb_check@crc(2), crc_mb@CRC(2), 
 17988 ;; Return value:  Size  Location     Type
 17989 ;;		None               void
 17990 ;; Registers used:
 17991 ;;		wreg, fsr2l, fsr2h, status,2
 17992 ;; Tracked objects:
 17993 ;;		On entry : F/1
 17994 ;;		On exit  : F/1
 17995 ;;		Unchanged: F/0
 17996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17998 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17999 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18000 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18001 ;;Total ram usage:        1 bytes
 18002 ;; Hardware stack levels used:    1
 18003 ;; Hardware stack levels required when called:    4
 18004 ;; This function calls:
 18005 ;;		Nothing
 18006 ;; This function is called by:
 18007 ;;		_crc_mb
 18008 ;;		_crc_mb_check
 18009 ;; This function uses a non-reentrant model
 18010 ;;
 18011                           
 18012                           	psect	text67
 18013  0036A6                     __ptext67:
 18014                           	opt stack 0
 18015  0036A6                     _crc_mb_init:
 18016                           	opt stack 16
 18017                           
 18018                           ;incstack = 0
 18019                           ;crc_mb_init@code stored from wreg
 18020  0036A6  6E01               	movwf	crc_mb_init@code,c
 18021                           
 18022                           ; BSR set to: 1
 18023                           ;modbus_RTU.c: 21: *code = 0xffff;
 18024  0036A8  5001               	movf	crc_mb_init@code,w,c
 18025  0036AA  6ED9               	movwf	fsr2l,c
 18026  0036AC  6ADA               	clrf	fsr2h,c
 18027  0036AE  68DE               	setf	postinc2,c
 18028  0036B0  68DD               	setf	postdec2,c
 18029                           
 18030                           ; BSR set to: 1
 18031  0036B2  0CFF               	retlw	255
 18032  0036B4                     __end_of_crc_mb_init:
 18033                           	opt stack 0
 18034                           tblptru	equ	0xFF8
 18035                           tblptrh	equ	0xFF7
 18036                           tblptrl	equ	0xFF6
 18037                           tablat	equ	0xFF5
 18038                           prodh	equ	0xFF4
 18039                           prodl	equ	0xFF3
 18040                           intcon	equ	0xFF2
 18041                           postinc0	equ	0xFEE
 18042                           wreg	equ	0xFE8
 18043                           indf1	equ	0xFE7
 18044                           postinc1	equ	0xFE6
 18045                           postdec1	equ	0xFE5
 18046                           fsr1h	equ	0xFE2
 18047                           fsr1l	equ	0xFE1
 18048                           bsr	equ	0xFE0
 18049                           indf2	equ	0xFDF
 18050                           postinc2	equ	0xFDE
 18051                           postdec2	equ	0xFDD
 18052                           fsr2h	equ	0xFDA
 18053                           fsr2l	equ	0xFD9
 18054                           status	equ	0xFD8
 18055                           
 18056 ;; *************** function _crc_mb_calc *****************
 18057 ;; Defined at:
 18058 ;;		line 44 in file "../lib/modbus_RTU.c"
 18059 ;; Parameters:    Size  Location     Type
 18060 ;;  code            1    wreg     PTR unsigned int 
 18061 ;;		 -> crc_mb_check@crc(2), crc_mb@CRC(2), 
 18062 ;;  next            1    0[COMRAM] unsigned char 
 18063 ;; Auto vars:     Size  Location     Type
 18064 ;;  code            1    7[COMRAM] PTR unsigned int 
 18065 ;;		 -> crc_mb_check@crc(2), crc_mb@CRC(2), 
 18066 ;;  i               1    6[COMRAM] unsigned char 
 18067 ;;  flag            1    5[COMRAM] unsigned char 
 18068 ;; Return value:  Size  Location     Type
 18069 ;;                  1    wreg      unsigned char 
 18070 ;; Registers used:
 18071 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18072 ;; Tracked objects:
 18073 ;;		On entry : 0/1
 18074 ;;		On exit  : 0/0
 18075 ;;		Unchanged: 0/0
 18076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18077 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18078 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18079 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18080 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18081 ;;Total ram usage:        8 bytes
 18082 ;; Hardware stack levels used:    1
 18083 ;; Hardware stack levels required when called:    4
 18084 ;; This function calls:
 18085 ;;		Nothing
 18086 ;; This function is called by:
 18087 ;;		_crc_mb
 18088 ;;		_crc_mb_check
 18089 ;; This function uses a non-reentrant model
 18090 ;;
 18091                           
 18092                           	psect	text68
 18093  002F0C                     __ptext68:
 18094                           	opt stack 0
 18095  002F0C                     _crc_mb_calc:
 18096                           	opt stack 16
 18097                           
 18098                           ; BSR set to: 1
 18099                           ;incstack = 0
 18100                           ;crc_mb_calc@code stored from wreg
 18101  002F0C  6E08               	movwf	crc_mb_calc@code,c
 18102                           
 18103                           ;modbus_RTU.c: 45: unsigned char flag;
 18104                           ;modbus_RTU.c: 46: unsigned char i;
 18105                           ;modbus_RTU.c: 47: *code ^= next;
 18106  002F0E  5008               	movf	crc_mb_calc@code,w,c
 18107  002F10  6ED9               	movwf	fsr2l,c
 18108  002F12  6ADA               	clrf	fsr2h,c
 18109  002F14  5001               	movf	crc_mb_calc@next,w,c
 18110  002F16  1ADE               	xorwf	postinc2,f,c
 18111  002F18  0E00               	movlw	0
 18112  002F1A  1ADD               	xorwf	postdec2,f,c
 18113                           
 18114                           ;modbus_RTU.c: 49: for (i = 0; i < 8; i++) {
 18115  002F1C  6A07               	clrf	crc_mb_calc@i,c
 18116  002F1E                     i1l6125:
 18117                           
 18118                           ;modbus_RTU.c: 50: flag = *code & 1;
 18119  002F1E  5008               	movf	crc_mb_calc@code,w,c
 18120  002F20  6ED9               	movwf	fsr2l,c
 18121  002F22  6ADA               	clrf	fsr2h,c
 18122  002F24  50DF               	movf	indf2,w,c
 18123  002F26  0B01               	andlw	1
 18124  002F28  6E06               	movwf	crc_mb_calc@flag,c
 18125                           
 18126                           ;modbus_RTU.c: 51: *code = *code >> 1;
 18127  002F2A  5008               	movf	crc_mb_calc@code,w,c
 18128  002F2C  6ED9               	movwf	fsr2l,c
 18129  002F2E  6ADA               	clrf	fsr2h,c
 18130  002F30  CFDE F002          	movff	postinc2,??_crc_mb_calc
 18131  002F34  CFDD F003          	movff	postdec2,??_crc_mb_calc+1
 18132  002F38  90D8               	bcf	status,0,c
 18133  002F3A  3003               	rrcf	??_crc_mb_calc+1,w,c
 18134  002F3C  6E05               	movwf	(??_crc_mb_calc+3)& (0+255),c
 18135  002F3E  3002               	rrcf	??_crc_mb_calc,w,c
 18136  002F40  6E04               	movwf	(??_crc_mb_calc+2)& (0+255),c
 18137  002F42  5008               	movf	crc_mb_calc@code,w,c
 18138  002F44  6ED9               	movwf	fsr2l,c
 18139  002F46  6ADA               	clrf	fsr2h,c
 18140  002F48  C004  FFDE         	movff	??_crc_mb_calc+2,postinc2
 18141  002F4C  C005  FFDD         	movff	??_crc_mb_calc+3,postdec2
 18142                           
 18143                           ;modbus_RTU.c: 52: if (flag) *code ^= 0xA001;
 18144  002F50  5006               	movf	crc_mb_calc@flag,w,c
 18145  002F52  E007               	bz	i1l6131
 18146  002F54  5008               	movf	crc_mb_calc@code,w,c
 18147  002F56  6ED9               	movwf	fsr2l,c
 18148  002F58  6ADA               	clrf	fsr2h,c
 18149  002F5A  0E01               	movlw	1
 18150  002F5C  1ADE               	xorwf	postinc2,f,c
 18151  002F5E  0EA0               	movlw	160
 18152  002F60  1ADD               	xorwf	postdec2,f,c
 18153  002F62                     i1l6131:
 18154  002F62  2A07               	incf	crc_mb_calc@i,f,c
 18155  002F64  0E07               	movlw	7
 18156  002F66  6407               	cpfsgt	crc_mb_calc@i,c
 18157  002F68  D7DA               	goto	i1l6125
 18158  002F6A  0C07               	retlw	7
 18159  002F6C                     __end_of_crc_mb_calc:
 18160                           	opt stack 0
 18161                           tblptru	equ	0xFF8
 18162                           tblptrh	equ	0xFF7
 18163                           tblptrl	equ	0xFF6
 18164                           tablat	equ	0xFF5
 18165                           prodh	equ	0xFF4
 18166                           prodl	equ	0xFF3
 18167                           intcon	equ	0xFF2
 18168                           postinc0	equ	0xFEE
 18169                           wreg	equ	0xFE8
 18170                           indf1	equ	0xFE7
 18171                           postinc1	equ	0xFE6
 18172                           postdec1	equ	0xFE5
 18173                           fsr1h	equ	0xFE2
 18174                           fsr1l	equ	0xFE1
 18175                           bsr	equ	0xFE0
 18176                           indf2	equ	0xFDF
 18177                           postinc2	equ	0xFDE
 18178                           postdec2	equ	0xFDD
 18179                           fsr2h	equ	0xFDA
 18180                           fsr2l	equ	0xFD9
 18181                           status	equ	0xFD8
 18182                           
 18183 ;; *************** function _SendMessage *****************
 18184 ;; Defined at:
 18185 ;;		line 43 in file "../lib/messages.c"
 18186 ;; Parameters:    Size  Location     Type
 18187 ;;  Msg             1    wreg     unsigned char 
 18188 ;; Auto vars:     Size  Location     Type
 18189 ;;  Msg             1    0[COMRAM] unsigned char 
 18190 ;; Return value:  Size  Location     Type
 18191 ;;		None               void
 18192 ;; Registers used:
 18193 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18194 ;; Tracked objects:
 18195 ;;		On entry : 0/1
 18196 ;;		On exit  : 0/0
 18197 ;;		Unchanged: 0/0
 18198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18200 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18202 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18203 ;;Total ram usage:        1 bytes
 18204 ;; Hardware stack levels used:    1
 18205 ;; Hardware stack levels required when called:    4
 18206 ;; This function calls:
 18207 ;;		Nothing
 18208 ;; This function is called by:
 18209 ;;		_LO_ISR
 18210 ;; This function uses a non-reentrant model
 18211 ;;
 18212                           
 18213                           	psect	text69
 18214  003686                     __ptext69:
 18215                           	opt stack 0
 18216  003686                     _SendMessage:
 18217                           	opt stack 17
 18218                           
 18219                           ;incstack = 0
 18220                           ;SendMessage@Msg stored from wreg
 18221  003686  6E01               	movwf	SendMessage@Msg,c
 18222                           
 18223                           ;messages.c: 44: Messages[Msg] = MSG_PHASE_PREPARE;
 18224  003688  5001               	movf	SendMessage@Msg,w,c
 18225  00368A  0F24               	addlw	low _Messages	;volatile
 18226  00368C  6ED9               	movwf	fsr2l,c
 18227  00368E  6ADA               	clrf	fsr2h,c
 18228  003690  0E01               	movlw	1
 18229  003692  6EDF               	movwf	indf2,c
 18230  003694  0C01               	retlw	1
 18231  003696                     __end_of_SendMessage:
 18232                           	opt stack 0
 18233                           tblptru	equ	0xFF8
 18234                           tblptrh	equ	0xFF7
 18235                           tblptrl	equ	0xFF6
 18236                           tablat	equ	0xFF5
 18237                           prodh	equ	0xFF4
 18238                           prodl	equ	0xFF3
 18239                           intcon	equ	0xFF2
 18240                           postinc0	equ	0xFEE
 18241                           wreg	equ	0xFE8
 18242                           indf1	equ	0xFE7
 18243                           postinc1	equ	0xFE6
 18244                           postdec1	equ	0xFE5
 18245                           fsr1h	equ	0xFE2
 18246                           fsr1l	equ	0xFE1
 18247                           bsr	equ	0xFE0
 18248                           indf2	equ	0xFDF
 18249                           postinc2	equ	0xFDE
 18250                           postdec2	equ	0xFDD
 18251                           fsr2h	equ	0xFDA
 18252                           fsr2l	equ	0xFD9
 18253                           status	equ	0xFD8
 18254                           
 18255 ;; *************** function _BSemOn *****************
 18256 ;; Defined at:
 18257 ;;		line 142 in file "../lib/messages.c"
 18258 ;; Parameters:    Size  Location     Type
 18259 ;;  Sem             1    wreg     unsigned char 
 18260 ;; Auto vars:     Size  Location     Type
 18261 ;;  Sem             1    0[COMRAM] unsigned char 
 18262 ;; Return value:  Size  Location     Type
 18263 ;;		None               void
 18264 ;; Registers used:
 18265 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18266 ;; Tracked objects:
 18267 ;;		On entry : 0/1
 18268 ;;		On exit  : 0/0
 18269 ;;		Unchanged: 0/0
 18270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18272 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18274 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18275 ;;Total ram usage:        1 bytes
 18276 ;; Hardware stack levels used:    1
 18277 ;; Hardware stack levels required when called:    4
 18278 ;; This function calls:
 18279 ;;		Nothing
 18280 ;; This function is called by:
 18281 ;;		_LO_ISR
 18282 ;; This function uses a non-reentrant model
 18283 ;;
 18284                           
 18285                           	psect	text70
 18286  003696                     __ptext70:
 18287                           	opt stack 0
 18288  003696                     _BSemOn:
 18289                           	opt stack 17
 18290                           
 18291                           ;incstack = 0
 18292                           ;BSemOn@Sem stored from wreg
 18293  003696  6E01               	movwf	BSemOn@Sem,c
 18294                           
 18295                           ;messages.c: 143: BSem[Sem] = 1;
 18296  003698  5001               	movf	BSemOn@Sem,w,c
 18297  00369A  0F2E               	addlw	low _BSem	;volatile
 18298  00369C  6ED9               	movwf	fsr2l,c
 18299  00369E  6ADA               	clrf	fsr2h,c
 18300  0036A0  0E01               	movlw	1
 18301  0036A2  6EDF               	movwf	indf2,c
 18302  0036A4  0C01               	retlw	1
 18303  0036A6                     __end_of_BSemOn:
 18304                           	opt stack 0
 18305                           tblptru	equ	0xFF8
 18306                           tblptrh	equ	0xFF7
 18307                           tblptrl	equ	0xFF6
 18308                           tablat	equ	0xFF5
 18309                           prodh	equ	0xFF4
 18310                           prodl	equ	0xFF3
 18311                           intcon	equ	0xFF2
 18312                           postinc0	equ	0xFEE
 18313                           wreg	equ	0xFE8
 18314                           indf1	equ	0xFE7
 18315                           postinc1	equ	0xFE6
 18316                           postdec1	equ	0xFE5
 18317                           fsr1h	equ	0xFE2
 18318                           fsr1l	equ	0xFE1
 18319                           bsr	equ	0xFE0
 18320                           indf2	equ	0xFDF
 18321                           postinc2	equ	0xFDE
 18322                           postdec2	equ	0xFDD
 18323                           fsr2h	equ	0xFDA
 18324                           fsr2l	equ	0xFD9
 18325                           status	equ	0xFD8
 18326                           
 18327 ;; *************** function _HI_ISR *****************
 18328 ;; Defined at:
 18329 ;;		line 32 in file "../isr.c"
 18330 ;; Parameters:    Size  Location     Type
 18331 ;;		None
 18332 ;; Auto vars:     Size  Location     Type
 18333 ;;		None
 18334 ;; Return value:  Size  Location     Type
 18335 ;;		None               void
 18336 ;; Registers used:
 18337 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18338 ;; Tracked objects:
 18339 ;;		On entry : 0/0
 18340 ;;		On exit  : 0/0
 18341 ;;		Unchanged: 0/0
 18342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18345 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18346 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18347 ;;Total ram usage:        7 bytes
 18348 ;; Hardware stack levels used:    1
 18349 ;; Hardware stack levels required when called:    3
 18350 ;; This function calls:
 18351 ;;		_MTouchAcquisition
 18352 ;; This function is called by:
 18353 ;;		Interrupt level 2
 18354 ;; This function uses a non-reentrant model
 18355 ;;
 18356                           
 18357                           	psect	intcode
 18358  000008                     __pintcode:
 18359                           	opt stack 0
 18360  000008                     _HI_ISR:
 18361                           	opt stack 15
 18362                           
 18363                           ;incstack = 0
 18364  000008  CFE1 F081          	movff	fsr1l,??_HI_ISR+1
 18365  00000C  CFE2 F082          	movff	fsr1h,??_HI_ISR+2
 18366  000010  CFD9 F083          	movff	fsr2l,??_HI_ISR+3
 18367  000014  EFB4  F016         	goto	int_func
 18368                           tblptru	equ	0xFF8
 18369                           tblptrh	equ	0xFF7
 18370                           tblptrl	equ	0xFF6
 18371                           tablat	equ	0xFF5
 18372                           prodh	equ	0xFF4
 18373                           prodl	equ	0xFF3
 18374                           intcon	equ	0xFF2
 18375                           postinc0	equ	0xFEE
 18376                           wreg	equ	0xFE8
 18377                           indf1	equ	0xFE7
 18378                           postinc1	equ	0xFE6
 18379                           postdec1	equ	0xFE5
 18380                           fsr1h	equ	0xFE2
 18381                           fsr1l	equ	0xFE1
 18382                           bsr	equ	0xFE0
 18383                           indf2	equ	0xFDF
 18384                           postinc2	equ	0xFDE
 18385                           postdec2	equ	0xFDD
 18386                           fsr2h	equ	0xFDA
 18387                           fsr2l	equ	0xFD9
 18388                           status	equ	0xFD8
 18389                           
 18390                           	psect	intcode_body
 18391  002D68                     __pintcode_body:
 18392                           	opt stack 15
 18393  002D68                     int_func:
 18394                           	opt stack 15
 18395  002D68  CFDA F084          	movff	fsr2h,??_HI_ISR+4
 18396  002D6C  CFF3 F085          	movff	prodl,??_HI_ISR+5
 18397  002D70  CFF4 F086          	movff	prodh,??_HI_ISR+6
 18398                           
 18399                           ;isr.c: 33: static WORD w_pwm;
 18400                           ;isr.c: 34: static BYTE beep;
 18401                           ;isr.c: 37: if((PIE1bits.TMR2IE) && (PIR1bits.TMR2IF)) {
 18402  002D74  B29D               	btfsc	3997,1,c	;volatile
 18403  002D76  A29E               	btfss	3998,1,c	;volatile
 18404  002D78  D009               	goto	i2l8411
 18405                           
 18406                           ;isr.c: 39: sys_tick++;
 18407  002D7A  4A3C               	infsnz	_sys_tick,f,c	;volatile
 18408  002D7C  2A3D               	incf	_sys_tick+1,f,c	;volatile
 18409                           
 18410                           ;isr.c: 40: _sys_tick++;
 18411  002D7E  0100               	movlb	0	; () banked
 18412  002D80  4BC6               	infsnz	__sys_tick& (0+255),f,b	;volatile
 18413  002D82  2BC7               	incf	(__sys_tick+1)& (0+255),f,b	;volatile
 18414                           
 18415                           ; BSR set to: 0
 18416                           ;isr.c: 41: MTouchAcquisition();
 18417  002D84  ECBF  F00E         	call	_MTouchAcquisition	;wreg free
 18418                           
 18419                           ; BSR set to: 0
 18420                           ;isr.c: 43: TMR2 = 0;
 18421  002D88  6ABC               	clrf	4028,c	;volatile
 18422                           
 18423                           ; BSR set to: 0
 18424                           ;isr.c: 44: PIR1bits.TMR2IF = 0;
 18425  002D8A  929E               	bcf	3998,1,c	;volatile
 18426  002D8C                     i2l8411:
 18427                           
 18428                           ;isr.c: 45: }
 18429                           ;isr.c: 47: if((PIE5bits.TMR4IE) && (PIR5bits.TMR4IF)) {
 18430  002D8C  B07D               	btfsc	3965,0,c	;volatile
 18431  002D8E  A07E               	btfss	3966,0,c	;volatile
 18432  002D90  D017               	goto	i2l399
 18433                           
 18434                           ;isr.c: 49: if(beep_timer > 0) {
 18435  002D92  0100               	movlb	0	; () banked
 18436  002D94  51C9               	movf	(_beep_timer+1)& (0+255),w,b	;volatile
 18437  002D96  11C8               	iorwf	_beep_timer& (0+255),w,b	;volatile
 18438  002D98  E00F               	bz	i2l395
 18439                           
 18440                           ; BSR set to: 0
 18441                           ;isr.c: 50: beep_timer--;
 18442  002D9A  07C8               	decf	_beep_timer& (0+255),f,b	;volatile
 18443  002D9C  A0D8               	btfss	status,0,c
 18444  002D9E  07C9               	decf	(_beep_timer+1)& (0+255),f,b	;volatile
 18445                           
 18446                           ; BSR set to: 0
 18447                           ;isr.c: 51: LATAbits.LATA4 = 1;
 18448  002DA0  8889               	bsf	3977,4,c	;volatile
 18449                           
 18450                           ; BSR set to: 0
 18451                           ;isr.c: 52: if((beep++) & 1) {
 18452  002DA2  2BCE               	incf	HI_ISR@beep& (0+255),f,b
 18453  002DA4  05CE               	decf	HI_ISR@beep& (0+255),w,b
 18454  002DA6  6F80               	movwf	??_HI_ISR& (0+255),b
 18455  002DA8  A180               	btfss	??_HI_ISR& (0+255),0,b
 18456  002DAA  D002               	goto	i2l396
 18457                           
 18458                           ; BSR set to: 0
 18459                           ;isr.c: 53: LATAbits.LATA4 = 0;
 18460  002DAC  9889               	bcf	3977,4,c	;volatile
 18461                           
 18462                           ;isr.c: 54: } else {
 18463  002DAE  D001               	goto	i2l397
 18464  002DB0                     i2l396:
 18465                           
 18466                           ; BSR set to: 0
 18467                           ;isr.c: 55: LATAbits.LATA4 = 1;
 18468  002DB0  8889               	bsf	3977,4,c	;volatile
 18469  002DB2                     i2l397:
 18470                           
 18471                           ; BSR set to: 0
 18472                           ;isr.c: 56: }
 18473                           ;isr.c: 57: __nop();
 18474  002DB2  F000               	nop	
 18475                           
 18476                           ;isr.c: 58: __nop();
 18477  002DB4  F000               	nop	
 18478                           
 18479                           ;isr.c: 59: } else {
 18480  002DB6  D001               	goto	i2l398
 18481  002DB8                     i2l395:
 18482                           
 18483                           ; BSR set to: 0
 18484                           ;isr.c: 60: LATAbits.LATA4 = 0;
 18485  002DB8  9889               	bcf	3977,4,c	;volatile
 18486  002DBA                     i2l398:
 18487                           
 18488                           ;isr.c: 61: }
 18489                           ;isr.c: 64: TMR4 = 0;
 18490  002DBA  010F               	movlb	15	; () banked
 18491  002DBC  6B53               	clrf	83,b	;volatile
 18492                           
 18493                           ;isr.c: 65: PIR5bits.TMR4IF = 0;
 18494  002DBE  907E               	bcf	3966,0,c	;volatile
 18495  002DC0                     i2l399:
 18496  002DC0  C086  FFF4         	movff	??_HI_ISR+6,prodh
 18497  002DC4  C085  FFF3         	movff	??_HI_ISR+5,prodl
 18498  002DC8  C084  FFDA         	movff	??_HI_ISR+4,fsr2h
 18499  002DCC  C083  FFD9         	movff	??_HI_ISR+3,fsr2l
 18500  002DD0  C082  FFE2         	movff	??_HI_ISR+2,fsr1h
 18501  002DD4  C081  FFE1         	movff	??_HI_ISR+1,fsr1l
 18502  002DD8  0011               	retfie		f
 18503  002DDA                     __end_of_HI_ISR:
 18504                           	opt stack 0
 18505                           tblptru	equ	0xFF8
 18506                           tblptrh	equ	0xFF7
 18507                           tblptrl	equ	0xFF6
 18508                           tablat	equ	0xFF5
 18509                           prodh	equ	0xFF4
 18510                           prodl	equ	0xFF3
 18511                           intcon	equ	0xFF2
 18512                           postinc0	equ	0xFEE
 18513                           wreg	equ	0xFE8
 18514                           indf1	equ	0xFE7
 18515                           postinc1	equ	0xFE6
 18516                           postdec1	equ	0xFE5
 18517                           fsr1h	equ	0xFE2
 18518                           fsr1l	equ	0xFE1
 18519                           bsr	equ	0xFE0
 18520                           indf2	equ	0xFDF
 18521                           postinc2	equ	0xFDE
 18522                           postdec2	equ	0xFDD
 18523                           fsr2h	equ	0xFDA
 18524                           fsr2l	equ	0xFD9
 18525                           status	equ	0xFD8
 18526                           
 18527 ;; *************** function _MTouchAcquisition *****************
 18528 ;; Defined at:
 18529 ;;		line 249 in file "../lib/mTouchCap/mTouchSensor.c"
 18530 ;; Parameters:    Size  Location     Type
 18531 ;;		None
 18532 ;; Auto vars:     Size  Location     Type
 18533 ;;  pCurrentSens    2   30[BANK0 ] PTR struct tag_SENSOR
 18534 ;;		 -> sensors(352), 
 18535 ;;  pPreviousSen    2   27[BANK0 ] PTR struct tag_SENSOR
 18536 ;;		 -> sensors(352), 
 18537 ;;  pLastSensor     2   25[BANK0 ] PTR struct tag_SENSOR
 18538 ;;		 -> sensors(352), 
 18539 ;;  data            2   23[BANK0 ] short 
 18540 ;;  i               1   29[BANK0 ] unsigned char 
 18541 ;; Return value:  Size  Location     Type
 18542 ;;		None               void
 18543 ;; Registers used:
 18544 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18545 ;; Tracked objects:
 18546 ;;		On entry : F/0
 18547 ;;		On exit  : F/0
 18548 ;;		Unchanged: 0/0
 18549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18551 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18552 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18553 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18554 ;;Total ram usage:       12 bytes
 18555 ;; Hardware stack levels used:    1
 18556 ;; Hardware stack levels required when called:    2
 18557 ;; This function calls:
 18558 ;;		_MTouchAcquisitionCVD
 18559 ;;		_MTouchSensorDecode
 18560 ;; This function is called by:
 18561 ;;		_HI_ISR
 18562 ;; This function uses a non-reentrant model
 18563 ;;
 18564                           
 18565                           	psect	text72
 18566  001D7E                     __ptext72:
 18567                           	opt stack 0
 18568  001D7E                     _MTouchAcquisition:
 18569                           	opt stack 15
 18570                           
 18571                           ; BSR set to: 0
 18572                           ;mTouchSensor.c: 251: INT16 data;
 18573                           ;mTouchSensor.c: 252: UINT8 i;
 18574                           ;mTouchSensor.c: 254: static UINT8 startSensorNumber = 0;
 18575                           ;mTouchSensor.c: 255: SENSOR* pCurrentSensor;
 18576                           ;mTouchSensor.c: 256: SENSOR* pLastSensor;
 18577                           ;mTouchSensor.c: 259: SENSOR* pPreviousSensor;
 18578                           ;mTouchSensor.c: 264: pCurrentSensor = (SENSOR*)sensors + startSensorNumber;
 18579                           
 18580                           ;incstack = 0
 18581  001D7E  51CF               	movf	MTouchAcquisition@startSensorNumber& (0+255),w,b
 18582  001D80  0D20               	mullw	32
 18583  001D82  0E00               	movlw	low _sensors
 18584  001D84  24F3               	addwf	prodl,w,c
 18585  001D86  6F7E               	movwf	MTouchAcquisition@pCurrentSensor& (0+255),b
 18586  001D88  0E04               	movlw	high _sensors
 18587  001D8A  20F4               	addwfc	prodh,w,c
 18588  001D8C  6F7F               	movwf	(MTouchAcquisition@pCurrentSensor+1)& (0+255),b
 18589                           
 18590                           ; BSR set to: 0
 18591                           ;mTouchSensor.c: 265: pLastSensor = (SENSOR*)sensors + (11-1);
 18592  001D8E  0E05               	movlw	high (_sensors+320)
 18593  001D90  6F7A               	movwf	(MTouchAcquisition@pLastSensor+1)& (0+255),b
 18594  001D92  0E40               	movlw	low (_sensors+320)
 18595  001D94  6F79               	movwf	MTouchAcquisition@pLastSensor& (0+255),b
 18596                           
 18597                           ; BSR set to: 0
 18598                           ;mTouchSensor.c: 268: if(startSensorNumber == (11-1))
 18599  001D96  51CF               	movf	MTouchAcquisition@startSensorNumber& (0+255),w,b
 18600  001D98  0A0A               	xorlw	10
 18601  001D9A  E105               	bnz	i2l8261
 18602                           
 18603                           ; BSR set to: 0
 18604                           ;mTouchSensor.c: 269: {
 18605                           ;mTouchSensor.c: 270: pPreviousSensor = (SENSOR*)sensors;
 18606  001D9C  0E04               	movlw	high _sensors
 18607  001D9E  6F7C               	movwf	(MTouchAcquisition@pPreviousSensor+1)& (0+255),b
 18608  001DA0  0E00               	movlw	low _sensors
 18609  001DA2  6F7B               	movwf	MTouchAcquisition@pPreviousSensor& (0+255),b
 18610                           
 18611                           ;mTouchSensor.c: 271: }else{
 18612  001DA4  D006               	goto	i2l8263
 18613  001DA6                     i2l8261:
 18614                           
 18615                           ; BSR set to: 0
 18616                           ;mTouchSensor.c: 272: pPreviousSensor = pCurrentSensor + 1;
 18617  001DA6  0E20               	movlw	32
 18618  001DA8  257E               	addwf	MTouchAcquisition@pCurrentSensor& (0+255),w,b
 18619  001DAA  6F7B               	movwf	MTouchAcquisition@pPreviousSensor& (0+255),b
 18620  001DAC  0E00               	movlw	0
 18621  001DAE  217F               	addwfc	(MTouchAcquisition@pCurrentSensor+1)& (0+255),w,b
 18622  001DB0  6F7C               	movwf	(MTouchAcquisition@pPreviousSensor+1)& (0+255),b
 18623  001DB2                     i2l8263:
 18624                           
 18625                           ; BSR set to: 0
 18626                           ;mTouchSensor.c: 273: }
 18627                           ;mTouchSensor.c: 276: for(i=0; i<11; i++)
 18628  001DB2  6B7D               	clrf	MTouchAcquisition@i& (0+255),b
 18629  001DB4                     i2l8269:
 18630                           
 18631                           ; BSR set to: 0
 18632                           ;mTouchSensor.c: 277: {
 18633                           ;mTouchSensor.c: 278: if((pCurrentSensor->state&SENSOR_DISCONNECTED) == 0)
 18634  001DB4  EE20 F01C          	lfsr	2,28
 18635  001DB8  517E               	movf	MTouchAcquisition@pCurrentSensor& (0+255),w,b
 18636  001DBA  26D9               	addwf	fsr2l,f,c
 18637  001DBC  517F               	movf	(MTouchAcquisition@pCurrentSensor+1)& (0+255),w,b
 18638  001DBE  22DA               	addwfc	fsr2h,f,c
 18639  001DC0  50DF               	movf	indf2,w,c
 18640  001DC2  6F74               	movwf	??_MTouchAcquisition& (0+255),b
 18641  001DC4  BF74               	btfsc	??_MTouchAcquisition& (0+255),7,b
 18642  001DC6  D054               	goto	i2l8283
 18643                           
 18644                           ; BSR set to: 0
 18645                           ;mTouchSensor.c: 279: {
 18646                           ;mTouchSensor.c: 287: data = MTouchAcquisitionCVD(pCurrentSensor,pPreviousSensor);
 18647  001DC8  C07F  F061         	movff	MTouchAcquisition@pCurrentSensor+1,MTouchAcquisitionCVD@pCurrentSensor+1
 18648  001DCC  C07E  F060         	movff	MTouchAcquisition@pCurrentSensor,MTouchAcquisitionCVD@pCurrentSensor
 18649  001DD0  C07C  F063         	movff	MTouchAcquisition@pPreviousSensor+1,MTouchAcquisitionCVD@pPreviousSensor+1
 18650  001DD4  C07B  F062         	movff	MTouchAcquisition@pPreviousSensor,MTouchAcquisitionCVD@pPreviousSensor
 18651  001DD8  ECA7  F008         	call	_MTouchAcquisitionCVD	;wreg free
 18652  001DDC  C060  F077         	movff	?_MTouchAcquisitionCVD,MTouchAcquisition@data
 18653  001DE0  C061  F078         	movff	?_MTouchAcquisitionCVD+1,MTouchAcquisition@data+1
 18654                           
 18655                           ; BSR set to: 0
 18656                           ;mTouchSensor.c: 292: if(data > pCurrentSensor->decimateFilterData)
 18657  001DE4  D861               	call	PL76	;call to abstracted procedure
 18658  001DE6  5175               	movf	(??_MTouchAcquisition+1)& (0+255),w,b
 18659  001DE8  0A80               	xorlw	128
 18660  001DEA  6F76               	movwf	(??_MTouchAcquisition+2)& (0+255),b
 18661  001DEC  5177               	movf	MTouchAcquisition@data& (0+255),w,b
 18662  001DEE  5D74               	subwf	??_MTouchAcquisition& (0+255),w,b
 18663  001DF0  5178               	movf	(MTouchAcquisition@data+1)& (0+255),w,b
 18664  001DF2  0A80               	xorlw	128
 18665  001DF4  5976               	subwfb	(??_MTouchAcquisition+2)& (0+255),w,b
 18666  001DF6  E20A               	bc	i2l8277
 18667                           
 18668                           ; BSR set to: 0
 18669                           ;mTouchSensor.c: 293: {
 18670                           ;mTouchSensor.c: 294: pCurrentSensor->decimateFilterData++;
 18671  001DF8  EE20 F00C          	lfsr	2,12
 18672  001DFC  517E               	movf	MTouchAcquisition@pCurrentSensor& (0+255),w,b
 18673  001DFE  26D9               	addwf	fsr2l,f,c
 18674  001E00  517F               	movf	(MTouchAcquisition@pCurrentSensor+1)& (0+255),w,b
 18675  001E02  22DA               	addwfc	fsr2h,f,c
 18676  001E04  2ADE               	incf	postinc2,f,c
 18677  001E06  0E00               	movlw	0
 18678  001E08  22DD               	addwfc	postdec2,f,c
 18679                           
 18680                           ;mTouchSensor.c: 295: } else {
 18681  001E0A  D003               	goto	i2l116
 18682  001E0C                     i2l8277:
 18683                           
 18684                           ; BSR set to: 0
 18685                           ;mTouchSensor.c: 296: pCurrentSensor->decimateFilterData--;
 18686  001E0C  EE20 F00C          	lfsr	2,12
 18687  001E10  D856               	call	PL100	;call to abstracted procedure
 18688  001E12                     i2l116:
 18689                           
 18690                           ; BSR set to: 0
 18691                           ;mTouchSensor.c: 297: }
 18692                           ;mTouchSensor.c: 300: pCurrentSensor->oversampleFilterData += pCurrentSensor->decimateFi
      +                          lterData;
 18693  001E12  D84A               	call	PL76	;call to abstracted procedure
 18694  001E14  EE20 F004          	lfsr	2,4
 18695  001E18  517E               	movf	MTouchAcquisition@pCurrentSensor& (0+255),w,b
 18696  001E1A  26D9               	addwf	fsr2l,f,c
 18697  001E1C  517F               	movf	(MTouchAcquisition@pCurrentSensor+1)& (0+255),w,b
 18698  001E1E  22DA               	addwfc	fsr2h,f,c
 18699  001E20  5174               	movf	??_MTouchAcquisition& (0+255),w,b
 18700  001E22  26DE               	addwf	postinc2,f,c
 18701  001E24  5175               	movf	(??_MTouchAcquisition+1)& (0+255),w,b
 18702  001E26  22DE               	addwfc	postinc2,f,c
 18703  001E28  0E00               	movlw	0
 18704  001E2A  BF75               	btfsc	(??_MTouchAcquisition+1)& (0+255),7,b
 18705  001E2C  0EFF               	movlw	255
 18706  001E2E  22DE               	addwfc	postinc2,f,c
 18707  001E30  22DD               	addwfc	postdec2,f,c
 18708                           
 18709                           ;mTouchSensor.c: 302: if((pCurrentSensor->sampleCounter)-- <= 0)
 18710  001E32  EE20 F00E          	lfsr	2,14
 18711  001E36  D843               	call	PL100	;call to abstracted procedure
 18712  001E38  2AD9               	incf	fsr2l,f,c
 18713  001E3A  1CDD               	comf	postdec2,w,c
 18714  001E3C  0EFF               	movlw	255
 18715  001E3E  B4D8               	btfsc	status,2,c
 18716  001E40  18DF               	xorwf	indf2,w,c
 18717  001E42  E116               	bnz	i2l8283
 18718                           
 18719                           ; BSR set to: 0
 18720                           ;mTouchSensor.c: 303: {
 18721                           ;mTouchSensor.c: 304: MTouchSensorDecode(pCurrentSensor);
 18722  001E44  C07F  F06A         	movff	MTouchAcquisition@pCurrentSensor+1,MTouchSensorDecode@pSensor+1
 18723  001E48  C07E  F069         	movff	MTouchAcquisition@pCurrentSensor,MTouchSensorDecode@pSensor
 18724  001E4C  EC7D  F00C         	call	_MTouchSensorDecode	;wreg free
 18725                           
 18726                           ; BSR set to: 0
 18727                           ;mTouchSensor.c: 305: pCurrentSensor->sampleCounter = pCurrentSensor->samplesNumber;
 18728  001E50  EE20 F010          	lfsr	2,16
 18729  001E54  517E               	movf	MTouchAcquisition@pCurrentSensor& (0+255),w,b
 18730  001E56  26D9               	addwf	fsr2l,f,c
 18731  001E58  517F               	movf	(MTouchAcquisition@pCurrentSensor+1)& (0+255),w,b
 18732  001E5A  22DA               	addwfc	fsr2h,f,c
 18733  001E5C  EE10 F00E          	lfsr	1,14
 18734  001E60  517E               	movf	MTouchAcquisition@pCurrentSensor& (0+255),w,b
 18735  001E62  26E1               	addwf	fsr1l,f,c
 18736  001E64  517F               	movf	(MTouchAcquisition@pCurrentSensor+1)& (0+255),w,b
 18737  001E66  22E2               	addwfc	fsr1h,f,c
 18738  001E68  CFDE FFE6          	movff	postinc2,postinc1
 18739  001E6C  CFDD FFE5          	movff	postdec2,postdec1
 18740  001E70                     i2l8283:
 18741                           
 18742                           ; BSR set to: 0
 18743                           ;mTouchSensor.c: 306: }
 18744                           ;mTouchSensor.c: 308: }
 18745                           ;mTouchSensor.c: 312: pPreviousSensor = pCurrentSensor;
 18746  001E70  C07F  F07C         	movff	MTouchAcquisition@pCurrentSensor+1,MTouchAcquisition@pPreviousSensor+1
 18747  001E74  C07E  F07B         	movff	MTouchAcquisition@pCurrentSensor,MTouchAcquisition@pPreviousSensor
 18748                           
 18749                           ; BSR set to: 0
 18750                           ;mTouchSensor.c: 315: if(pCurrentSensor == pLastSensor)
 18751  001E78  517A               	movf	(MTouchAcquisition@pLastSensor+1)& (0+255),w,b
 18752  001E7A  197F               	xorwf	(MTouchAcquisition@pCurrentSensor+1)& (0+255),w,b
 18753  001E7C  E102               	bnz	i2u910_45
 18754  001E7E  5179               	movf	MTouchAcquisition@pLastSensor& (0+255),w,b
 18755  001E80  197E               	xorwf	MTouchAcquisition@pCurrentSensor& (0+255),w,b
 18756  001E82                     i2u910_45:
 18757  001E82  E105               	bnz	i2l8289
 18758                           
 18759                           ; BSR set to: 0
 18760                           ;mTouchSensor.c: 316: {
 18761                           ;mTouchSensor.c: 317: pCurrentSensor = (SENSOR*)sensors;
 18762  001E84  0E04               	movlw	high _sensors
 18763  001E86  6F7F               	movwf	(MTouchAcquisition@pCurrentSensor+1)& (0+255),b
 18764  001E88  0E00               	movlw	low _sensors
 18765  001E8A  6F7E               	movwf	MTouchAcquisition@pCurrentSensor& (0+255),b
 18766                           
 18767                           ;mTouchSensor.c: 318: continue;
 18768  001E8C  D004               	goto	i2l8291
 18769  001E8E                     i2l8289:
 18770                           
 18771                           ; BSR set to: 0
 18772                           ;mTouchSensor.c: 319: }
 18773                           ;mTouchSensor.c: 321: pCurrentSensor++;
 18774  001E8E  0E20               	movlw	32
 18775  001E90  277E               	addwf	MTouchAcquisition@pCurrentSensor& (0+255),f,b
 18776  001E92  0E00               	movlw	0
 18777  001E94  237F               	addwfc	(MTouchAcquisition@pCurrentSensor+1)& (0+255),f,b
 18778  001E96                     i2l8291:
 18779                           
 18780                           ; BSR set to: 0
 18781  001E96  2B7D               	incf	MTouchAcquisition@i& (0+255),f,b
 18782  001E98  0E0A               	movlw	10
 18783  001E9A  657D               	cpfsgt	MTouchAcquisition@i& (0+255),b
 18784  001E9C  D78B               	goto	i2l8269
 18785                           
 18786                           ; BSR set to: 0
 18787                           ;mTouchSensor.c: 322: }
 18788                           ;mTouchSensor.c: 324: startSensorNumber++;
 18789  001E9E  2BCF               	incf	MTouchAcquisition@startSensorNumber& (0+255),f,b
 18790                           
 18791                           ; BSR set to: 0
 18792                           ;mTouchSensor.c: 326: if(startSensorNumber > (11-1))
 18793  001EA0  65CF               	cpfsgt	MTouchAcquisition@startSensorNumber& (0+255),b
 18794  001EA2  0C0A               	retlw	10
 18795                           
 18796                           ; BSR set to: 0
 18797                           ;mTouchSensor.c: 327: {
 18798                           ;mTouchSensor.c: 328: startSensorNumber = 0;
 18799  001EA4  6BCF               	clrf	MTouchAcquisition@startSensorNumber& (0+255),b
 18800                           
 18801                           ; BSR set to: 0
 18802  001EA6  0012               	return	
 18803  001EA8                     __end_of_MTouchAcquisition:
 18804                           	opt stack 0
 18805  001EA8                     PL76:
 18806                           	opt stack 15
 18807  001EA8  EE20 F00C          	lfsr	2,12
 18808  001EAC  517E               	movf	MTouchAcquisition@pCurrentSensor& (0+255),w,b
 18809  001EAE  26D9               	addwf	fsr2l,f,c
 18810  001EB0  517F               	movf	(MTouchAcquisition@pCurrentSensor+1)& (0+255),w,b
 18811  001EB2  22DA               	addwfc	fsr2h,f,c
 18812  001EB4  CFDE F074          	movff	postinc2,??_MTouchAcquisition
 18813  001EB8  CFDD F075          	movff	postdec2,??_MTouchAcquisition+1
 18814  001EBC  0012               	return	
 18815  001EBE                     __end_ofPL76:
 18816                           	opt stack 0
 18817  001EBE                     PL100:
 18818                           	opt stack 15
 18819  001EBE  517E               	movf	MTouchAcquisition@pCurrentSensor& (0+255),w,b
 18820  001EC0  26D9               	addwf	fsr2l,f,c
 18821  001EC2  517F               	movf	(MTouchAcquisition@pCurrentSensor+1)& (0+255),w,b
 18822  001EC4  22DA               	addwfc	fsr2h,f,c
 18823  001EC6  06DE               	decf	postinc2,f,c
 18824  001EC8  0E00               	movlw	0
 18825  001ECA  5ADD               	subwfb	postdec2,f,c
 18826  001ECC  0C00               	retlw	0
 18827  001ECE                     __end_ofPL100:
 18828                           	opt stack 0
 18829                           tblptru	equ	0xFF8
 18830                           tblptrh	equ	0xFF7
 18831                           tblptrl	equ	0xFF6
 18832                           tablat	equ	0xFF5
 18833                           prodh	equ	0xFF4
 18834                           prodl	equ	0xFF3
 18835                           intcon	equ	0xFF2
 18836                           postinc0	equ	0xFEE
 18837                           wreg	equ	0xFE8
 18838                           indf1	equ	0xFE7
 18839                           postinc1	equ	0xFE6
 18840                           postdec1	equ	0xFE5
 18841                           fsr1h	equ	0xFE2
 18842                           fsr1l	equ	0xFE1
 18843                           bsr	equ	0xFE0
 18844                           indf2	equ	0xFDF
 18845                           postinc2	equ	0xFDE
 18846                           postdec2	equ	0xFDD
 18847                           fsr2h	equ	0xFDA
 18848                           fsr2l	equ	0xFD9
 18849                           status	equ	0xFD8
 18850                           
 18851 ;; *************** function _MTouchSensorDecode *****************
 18852 ;; Defined at:
 18853 ;;		line 136 in file "../lib/mTouchCap/mTouchSensor.c"
 18854 ;; Parameters:    Size  Location     Type
 18855 ;;  pSensor         2    9[BANK0 ] PTR struct tag_SENSOR
 18856 ;;		 -> sensors(352), 
 18857 ;; Auto vars:     Size  Location     Type
 18858 ;;  delta           2   15[BANK0 ] short 
 18859 ;; Return value:  Size  Location     Type
 18860 ;;		None               void
 18861 ;; Registers used:
 18862 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, cstack
 18863 ;; Tracked objects:
 18864 ;;		On entry : F/0
 18865 ;;		On exit  : F/0
 18866 ;;		Unchanged: 0/0
 18867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18868 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18869 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18870 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18871 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18872 ;;Total ram usage:        8 bytes
 18873 ;; Hardware stack levels used:    1
 18874 ;; Hardware stack levels required when called:    1
 18875 ;; This function calls:
 18876 ;;		_MTouchUpdateSensorAverage
 18877 ;; This function is called by:
 18878 ;;		_MTouchAcquisition
 18879 ;; This function uses a non-reentrant model
 18880 ;;
 18881                           
 18882                           	psect	text73
 18883  0018FA                     __ptext73:
 18884                           	opt stack 0
 18885  0018FA                     _MTouchSensorDecode:
 18886                           	opt stack 15
 18887                           
 18888                           ; BSR set to: 0
 18889                           ;mTouchSensor.c: 139: INT16 delta;
 18890                           ;mTouchSensor.c: 141: delta = pSensor->oversampleFilterData - pSensor->average;
 18891                           
 18892                           ; BSR set to: 0
 18893                           ;incstack = 0
 18894  0018FA  C069  FFD9         	movff	MTouchSensorDecode@pSensor,fsr2l
 18895  0018FE  C06A  FFDA         	movff	MTouchSensorDecode@pSensor+1,fsr2h
 18896  001902  CFDE F06B          	movff	postinc2,??_MTouchSensorDecode
 18897  001906  CFDD F06C          	movff	postdec2,??_MTouchSensorDecode+1
 18898  00190A  EE20 F004          	lfsr	2,4
 18899  00190E  5169               	movf	MTouchSensorDecode@pSensor& (0+255),w,b
 18900  001910  26D9               	addwf	fsr2l,f,c
 18901  001912  516A               	movf	(MTouchSensorDecode@pSensor+1)& (0+255),w,b
 18902  001914  22DA               	addwfc	fsr2h,f,c
 18903  001916  CFDE F06D          	movff	postinc2,??_MTouchSensorDecode+2
 18904  00191A  CFDD F06E          	movff	postdec2,??_MTouchSensorDecode+3
 18905  00191E  516B               	movf	??_MTouchSensorDecode& (0+255),w,b
 18906  001920  5D6D               	subwf	(??_MTouchSensorDecode+2)& (0+255),w,b
 18907  001922  6F6F               	movwf	MTouchSensorDecode@delta& (0+255),b
 18908  001924  516C               	movf	(??_MTouchSensorDecode+1)& (0+255),w,b
 18909  001926  596E               	subwfb	(??_MTouchSensorDecode+3)& (0+255),w,b
 18910  001928  6F70               	movwf	(MTouchSensorDecode@delta+1)& (0+255),b
 18911                           
 18912                           ; BSR set to: 0
 18913                           ;mTouchSensor.c: 143: if(delta < 0)
 18914  00192A  5170               	movf	(MTouchSensorDecode@delta+1)& (0+255),w,b
 18915  00192C  0A80               	xorlw	128
 18916  00192E  6EF3               	movwf	prodl,c
 18917  001930  0E80               	movlw	128
 18918  001932  5CF3               	subwf	prodl,w,c
 18919  001934  0E00               	movlw	0
 18920  001936  B4D8               	btfsc	status,2,c
 18921  001938  5D6F               	subwf	MTouchSensorDecode@delta& (0+255),w,b
 18922  00193A  E202               	bc	i2l7885
 18923                           
 18924                           ; BSR set to: 0
 18925                           ;mTouchSensor.c: 144: {
 18926                           ;mTouchSensor.c: 145: delta = 0;
 18927  00193C  6B6F               	clrf	MTouchSensorDecode@delta& (0+255),b
 18928  00193E  6B70               	clrf	(MTouchSensorDecode@delta+1)& (0+255),b
 18929  001940                     i2l7885:
 18930                           
 18931                           ; BSR set to: 0
 18932                           ;mTouchSensor.c: 146: }
 18933                           ;mTouchSensor.c: 148: pSensor->delta = delta;
 18934  001940  EE20 F018          	lfsr	2,24
 18935  001944  5169               	movf	MTouchSensorDecode@pSensor& (0+255),w,b
 18936  001946  26D9               	addwf	fsr2l,f,c
 18937  001948  516A               	movf	(MTouchSensorDecode@pSensor+1)& (0+255),w,b
 18938  00194A  22DA               	addwfc	fsr2h,f,c
 18939  00194C  C06F  FFDE         	movff	MTouchSensorDecode@delta,postinc2
 18940  001950  C070  FFDD         	movff	MTouchSensorDecode@delta+1,postdec2
 18941                           
 18942                           ;mTouchSensor.c: 150: switch(pSensor->state)
 18943  001954  D065               	goto	i2l7915
 18944  001956                     i2l7887:
 18945                           
 18946                           ; BSR set to: 0
 18947                           ;mTouchSensor.c: 153: {
 18948                           ;mTouchSensor.c: 154: if (pSensor->debounceCount-- <= 0)
 18949  001956  D87B               	call	PL26	;call to abstracted procedure
 18950  001958  B4D8               	btfsc	status,2,c
 18951  00195A  18DF               	xorwf	indf2,w,c
 18952  00195C  E104               	bnz	i2l7891
 18953                           
 18954                           ; BSR set to: 0
 18955                           ;mTouchSensor.c: 155: {
 18956                           ;mTouchSensor.c: 156: pSensor->state = SENSOR_RELEASED;
 18957  00195E  D88B               	call	PL92	;call to abstracted procedure
 18958                           
 18959                           ;mTouchSensor.c: 157: pSensor->debounceCount = 8;
 18960  001960  EE20 F01A          	lfsr	2,26
 18961  001964  D880               	call	PL38	;call to abstracted procedure
 18962  001966                     i2l7891:
 18963                           
 18964                           ; BSR set to: 0
 18965                           ;mTouchSensor.c: 158: }
 18966                           ;mTouchSensor.c: 159: pSensor->average = pSensor->oversampleFilterData;
 18967  001966  EE20 F004          	lfsr	2,4
 18968  00196A  5169               	movf	MTouchSensorDecode@pSensor& (0+255),w,b
 18969  00196C  26D9               	addwf	fsr2l,f,c
 18970  00196E  516A               	movf	(MTouchSensorDecode@pSensor+1)& (0+255),w,b
 18971  001970  22DA               	addwfc	fsr2h,f,c
 18972  001972  C069  FFE1         	movff	MTouchSensorDecode@pSensor,fsr1l
 18973  001976  C06A  FFE2         	movff	MTouchSensorDecode@pSensor+1,fsr1h
 18974  00197A  CFDE FFE6          	movff	postinc2,postinc1
 18975  00197E  CFDE FFE6          	movff	postinc2,postinc1
 18976  001982  CFDE FFE6          	movff	postinc2,postinc1
 18977  001986  CFDD FFE5          	movff	postdec2,postdec1
 18978                           
 18979                           ;mTouchSensor.c: 160: break;
 18980  00198A  D056               	goto	i2l7917
 18981  00198C                     i2l7893:
 18982                           
 18983                           ; BSR set to: 0
 18984                           ;mTouchSensor.c: 165: {
 18985                           ;mTouchSensor.c: 166: if(delta > pSensor->pressThreshold)
 18986  00198C  EE20 F012          	lfsr	2,18
 18987  001990  5169               	movf	MTouchSensorDecode@pSensor& (0+255),w,b
 18988  001992  26D9               	addwf	fsr2l,f,c
 18989  001994  516A               	movf	(MTouchSensorDecode@pSensor+1)& (0+255),w,b
 18990  001996  22DA               	addwfc	fsr2h,f,c
 18991  001998  CFDE F06B          	movff	postinc2,??_MTouchSensorDecode
 18992  00199C  CFDD F06C          	movff	postdec2,??_MTouchSensorDecode+1
 18993  0019A0  516F               	movf	MTouchSensorDecode@delta& (0+255),w,b
 18994  0019A2  5D6B               	subwf	??_MTouchSensorDecode& (0+255),w,b
 18995  0019A4  5170               	movf	(MTouchSensorDecode@delta+1)& (0+255),w,b
 18996  0019A6  596C               	subwfb	(??_MTouchSensorDecode+1)& (0+255),w,b
 18997  0019A8  E20C               	bc	i2l7899
 18998                           
 18999                           ; BSR set to: 0
 19000                           ;mTouchSensor.c: 167: {
 19001                           ;mTouchSensor.c: 168: if (pSensor->debounceCount-- <= 0)
 19002  0019AA  D851               	call	PL26	;call to abstracted procedure
 19003  0019AC  B4D8               	btfsc	status,2,c
 19004  0019AE  18DF               	xorwf	indf2,w,c
 19005  0019B0  E10B               	bnz	i2l7901
 19006                           
 19007                           ; BSR set to: 0
 19008                           ;mTouchSensor.c: 169: {
 19009                           ;mTouchSensor.c: 170: pSensor->state = SENSOR_PRESSED;
 19010  0019B2  EE20 F01C          	lfsr	2,28
 19011  0019B6  5169               	movf	MTouchSensorDecode@pSensor& (0+255),w,b
 19012  0019B8  26D9               	addwf	fsr2l,f,c
 19013  0019BA  516A               	movf	(MTouchSensorDecode@pSensor+1)& (0+255),w,b
 19014  0019BC  22DA               	addwfc	fsr2h,f,c
 19015  0019BE  0E02               	movlw	2
 19016  0019C0  6EDF               	movwf	indf2,c
 19017  0019C2                     i2l7899:
 19018                           
 19019                           ; BSR set to: 0
 19020                           ;mTouchSensor.c: 174: else
 19021                           ;mTouchSensor.c: 175: {
 19022                           ;mTouchSensor.c: 176: pSensor->debounceCount = 8;
 19023  0019C2  EE20 F01A          	lfsr	2,26
 19024  0019C6  D84F               	call	PL38	;call to abstracted procedure
 19025  0019C8                     i2l7901:
 19026                           
 19027                           ; BSR set to: 0
 19028                           ;mTouchSensor.c: 177: }
 19029                           ;mTouchSensor.c: 179: MTouchUpdateSensorAverage(pSensor, 8);
 19030  0019C8  C06A  F061         	movff	MTouchSensorDecode@pSensor+1,MTouchUpdateSensorAverage@pSensor+1
 19031  0019CC  C069  F060         	movff	MTouchSensorDecode@pSensor,MTouchUpdateSensorAverage@pSensor
 19032  0019D0  6B63               	clrf	(MTouchUpdateSensorAverage@rate+1)& (0+255),b
 19033  0019D2  0E08               	movlw	8
 19034  0019D4  6F62               	movwf	MTouchUpdateSensorAverage@rate& (0+255),b
 19035  0019D6  ECA5  F013         	call	_MTouchUpdateSensorAverage	;wreg free
 19036                           
 19037                           ;mTouchSensor.c: 181: break;
 19038  0019DA  D02E               	goto	i2l7917
 19039  0019DC                     i2l7903:
 19040                           
 19041                           ; BSR set to: 0
 19042                           ;mTouchSensor.c: 186: {
 19043                           ;mTouchSensor.c: 187: if(delta < pSensor->releaseThreshold)
 19044  0019DC  EE20 F014          	lfsr	2,20
 19045  0019E0  5169               	movf	MTouchSensorDecode@pSensor& (0+255),w,b
 19046  0019E2  26D9               	addwf	fsr2l,f,c
 19047  0019E4  516A               	movf	(MTouchSensorDecode@pSensor+1)& (0+255),w,b
 19048  0019E6  22DA               	addwfc	fsr2h,f,c
 19049  0019E8  CFDE F06B          	movff	postinc2,??_MTouchSensorDecode
 19050  0019EC  CFDD F06C          	movff	postdec2,??_MTouchSensorDecode+1
 19051  0019F0  516B               	movf	??_MTouchSensorDecode& (0+255),w,b
 19052  0019F2  5D6F               	subwf	MTouchSensorDecode@delta& (0+255),w,b
 19053  0019F4  516C               	movf	(??_MTouchSensorDecode+1)& (0+255),w,b
 19054  0019F6  5970               	subwfb	(MTouchSensorDecode@delta+1)& (0+255),w,b
 19055  0019F8  E205               	bc	i2l7909
 19056                           
 19057                           ; BSR set to: 0
 19058                           ;mTouchSensor.c: 188: {
 19059                           ;mTouchSensor.c: 189: if (pSensor->debounceCount-- <= 0)
 19060  0019FA  D829               	call	PL26	;call to abstracted procedure
 19061  0019FC  B4D8               	btfsc	status,2,c
 19062  0019FE  18DF               	xorwf	indf2,w,c
 19063  001A00  E104               	bnz	i2l7911
 19064                           
 19065                           ; BSR set to: 0
 19066                           ;mTouchSensor.c: 190: {
 19067                           ;mTouchSensor.c: 191: pSensor->state = SENSOR_RELEASED;
 19068  001A02  D839               	call	PL92	;call to abstracted procedure
 19069  001A04                     i2l7909:
 19070                           
 19071                           ; BSR set to: 0
 19072                           ;mTouchSensor.c: 195: else
 19073                           ;mTouchSensor.c: 196: {
 19074                           ;mTouchSensor.c: 197: pSensor->debounceCount = 8;
 19075  001A04  EE20 F01A          	lfsr	2,26
 19076  001A08  D82E               	call	PL38	;call to abstracted procedure
 19077  001A0A                     i2l7911:
 19078                           
 19079                           ; BSR set to: 0
 19080                           ;mTouchSensor.c: 198: }
 19081                           ;mTouchSensor.c: 200: MTouchUpdateSensorAverage(pSensor, 800);
 19082  001A0A  C06A  F061         	movff	MTouchSensorDecode@pSensor+1,MTouchUpdateSensorAverage@pSensor+1
 19083  001A0E  C069  F060         	movff	MTouchSensorDecode@pSensor,MTouchUpdateSensorAverage@pSensor
 19084  001A12  0E03               	movlw	3
 19085  001A14  6F63               	movwf	(MTouchUpdateSensorAverage@rate+1)& (0+255),b
 19086  001A16  0E20               	movlw	32
 19087  001A18  6F62               	movwf	MTouchUpdateSensorAverage@rate& (0+255),b
 19088  001A1A  ECA5  F013         	call	_MTouchUpdateSensorAverage	;wreg free
 19089                           
 19090                           ;mTouchSensor.c: 202: break;
 19091  001A1E  D00C               	goto	i2l7917
 19092  001A20                     i2l7915:
 19093                           
 19094                           ; BSR set to: 0
 19095  001A20  EE20 F01C          	lfsr	2,28
 19096  001A24  5169               	movf	MTouchSensorDecode@pSensor& (0+255),w,b
 19097  001A26  26D9               	addwf	fsr2l,f,c
 19098  001A28  516A               	movf	(MTouchSensorDecode@pSensor+1)& (0+255),w,b
 19099  001A2A  22DA               	addwfc	fsr2h,f,c
 19100  001A2C  50DF               	movf	indf2,w,c
 19101                           
 19102                           ; Switch size 1, requested type "space"
 19103                           ; Number of cases is 3, Range of values is 0 to 2
 19104                           ; switch strategies available:
 19105                           ; Name         Instructions Cycles
 19106                           ; simple_byte           10     6 (average)
 19107                           ;	Chosen strategy is simple_byte
 19108  001A2E  E093               	bz	i2l7887
 19109  001A30  0A01               	xorlw	1	; case 1
 19110  001A32  E0AC               	bz	i2l7893
 19111  001A34  0A03               	xorlw	3	; case 2
 19112  001A36  E0D2               	bz	i2l7903
 19113  001A38                     i2l7917:
 19114                           
 19115                           ; BSR set to: 0
 19116                           ;mTouchSensor.c: 209: pSensor->oversampleFilterData = 0;
 19117  001A38  EE20 F004          	lfsr	2,4
 19118  001A3C  5169               	movf	MTouchSensorDecode@pSensor& (0+255),w,b
 19119  001A3E  26D9               	addwf	fsr2l,f,c
 19120  001A40  516A               	movf	(MTouchSensorDecode@pSensor+1)& (0+255),w,b
 19121  001A42  22DA               	addwfc	fsr2h,f,c
 19122  001A44  6ADE               	clrf	postinc2,c
 19123  001A46  6ADE               	clrf	postinc2,c
 19124  001A48  6ADE               	clrf	postinc2,c
 19125  001A4A  6ADD               	clrf	postdec2,c
 19126                           
 19127                           ; BSR set to: 0
 19128  001A4C  0012               	return	
 19129  001A4E                     __end_of_MTouchSensorDecode:
 19130                           	opt stack 0
 19131  001A4E                     PL26:
 19132                           	opt stack 15
 19133  001A4E  EE20 F01A          	lfsr	2,26
 19134  001A52  5169               	movf	MTouchSensorDecode@pSensor& (0+255),w,b
 19135  001A54  26D9               	addwf	fsr2l,f,c
 19136  001A56  516A               	movf	(MTouchSensorDecode@pSensor+1)& (0+255),w,b
 19137  001A58  22DA               	addwfc	fsr2h,f,c
 19138  001A5A  06DE               	decf	postinc2,f,c
 19139  001A5C  0E00               	movlw	0
 19140  001A5E  5ADD               	subwfb	postdec2,f,c
 19141  001A60  2AD9               	incf	fsr2l,f,c
 19142  001A62  1CDD               	comf	postdec2,w,c
 19143  001A64  0CFF               	retlw	255
 19144  001A66                     __end_ofPL26:
 19145                           	opt stack 0
 19146  001A66                     PL38:
 19147                           	opt stack 15
 19148  001A66  5169               	movf	MTouchSensorDecode@pSensor& (0+255),w,b
 19149  001A68  26D9               	addwf	fsr2l,f,c
 19150  001A6A  516A               	movf	(MTouchSensorDecode@pSensor+1)& (0+255),w,b
 19151  001A6C  22DA               	addwfc	fsr2h,f,c
 19152  001A6E  0E08               	movlw	8
 19153  001A70  6EDE               	movwf	postinc2,c
 19154  001A72  6ADD               	clrf	postdec2,c
 19155  001A74  0C08               	retlw	8
 19156  001A76                     __end_ofPL38:
 19157                           	opt stack 0
 19158  001A76                     PL92:
 19159                           	opt stack 15
 19160  001A76  EE20 F01C          	lfsr	2,28
 19161  001A7A  5169               	movf	MTouchSensorDecode@pSensor& (0+255),w,b
 19162  001A7C  26D9               	addwf	fsr2l,f,c
 19163  001A7E  516A               	movf	(MTouchSensorDecode@pSensor+1)& (0+255),w,b
 19164  001A80  22DA               	addwfc	fsr2h,f,c
 19165  001A82  0E01               	movlw	1
 19166  001A84  6EDF               	movwf	indf2,c
 19167  001A86  0C01               	retlw	1
 19168  001A88                     __end_ofPL92:
 19169                           	opt stack 0
 19170                           tblptru	equ	0xFF8
 19171                           tblptrh	equ	0xFF7
 19172                           tblptrl	equ	0xFF6
 19173                           tablat	equ	0xFF5
 19174                           prodh	equ	0xFF4
 19175                           prodl	equ	0xFF3
 19176                           intcon	equ	0xFF2
 19177                           postinc0	equ	0xFEE
 19178                           wreg	equ	0xFE8
 19179                           indf1	equ	0xFE7
 19180                           postinc1	equ	0xFE6
 19181                           postdec1	equ	0xFE5
 19182                           fsr1h	equ	0xFE2
 19183                           fsr1l	equ	0xFE1
 19184                           bsr	equ	0xFE0
 19185                           indf2	equ	0xFDF
 19186                           postinc2	equ	0xFDE
 19187                           postdec2	equ	0xFDD
 19188                           fsr2h	equ	0xFDA
 19189                           fsr2l	equ	0xFD9
 19190                           status	equ	0xFD8
 19191                           
 19192 ;; *************** function _MTouchUpdateSensorAverage *****************
 19193 ;; Defined at:
 19194 ;;		line 214 in file "../lib/mTouchCap/mTouchSensor.c"
 19195 ;; Parameters:    Size  Location     Type
 19196 ;;  pSensor         2    0[BANK0 ] PTR struct tag_SENSOR
 19197 ;;		 -> sensors(352), 
 19198 ;;  rate            2    2[BANK0 ] unsigned short 
 19199 ;; Auto vars:     Size  Location     Type
 19200 ;;		None
 19201 ;; Return value:  Size  Location     Type
 19202 ;;		None               void
 19203 ;; Registers used:
 19204 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19205 ;; Tracked objects:
 19206 ;;		On entry : F/0
 19207 ;;		On exit  : F/0
 19208 ;;		Unchanged: 0/0
 19209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19210 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19212 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19213 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19214 ;;Total ram usage:        9 bytes
 19215 ;; Hardware stack levels used:    1
 19216 ;; This function calls:
 19217 ;;		Nothing
 19218 ;; This function is called by:
 19219 ;;		_MTouchSensorDecode
 19220 ;; This function uses a non-reentrant model
 19221 ;;
 19222                           
 19223                           	psect	text74
 19224  00274A                     __ptext74:
 19225                           	opt stack 0
 19226  00274A                     _MTouchUpdateSensorAverage:
 19227                           	opt stack 15
 19228                           
 19229                           ; BSR set to: 0
 19230                           ;mTouchSensor.c: 216: if(pSensor->averageCount++ >= rate)
 19231                           
 19232                           ; BSR set to: 0
 19233                           ;incstack = 0
 19234  00274A  EE20 F016          	lfsr	2,22
 19235  00274E  5160               	movf	MTouchUpdateSensorAverage@pSensor& (0+255),w,b
 19236  002750  26D9               	addwf	fsr2l,f,c
 19237  002752  5161               	movf	(MTouchUpdateSensorAverage@pSensor+1)& (0+255),w,b
 19238  002754  22DA               	addwfc	fsr2h,f,c
 19239  002756  CFDF F064          	movff	indf2,??_MTouchUpdateSensorAverage
 19240  00275A  2ADE               	incf	postinc2,f,c
 19241  00275C  CFDF F065          	movff	indf2,??_MTouchUpdateSensorAverage+1
 19242  002760  0E00               	movlw	0
 19243  002762  22DD               	addwfc	postdec2,f,c
 19244  002764  5162               	movf	MTouchUpdateSensorAverage@rate& (0+255),w,b
 19245  002766  5D64               	subwf	??_MTouchUpdateSensorAverage& (0+255),w,b
 19246  002768  5163               	movf	(MTouchUpdateSensorAverage@rate+1)& (0+255),w,b
 19247  00276A  5965               	subwfb	(??_MTouchUpdateSensorAverage+1)& (0+255),w,b
 19248  00276C  A0D8               	btfss	status,0,c
 19249  00276E  0012               	return	
 19250                           
 19251                           ; BSR set to: 0
 19252                           ;mTouchSensor.c: 217: {
 19253                           ;mTouchSensor.c: 218: pSensor->averageCount = 0;
 19254  002770  EE20 F016          	lfsr	2,22
 19255  002774  5160               	movf	MTouchUpdateSensorAverage@pSensor& (0+255),w,b
 19256  002776  26D9               	addwf	fsr2l,f,c
 19257  002778  5161               	movf	(MTouchUpdateSensorAverage@pSensor+1)& (0+255),w,b
 19258  00277A  22DA               	addwfc	fsr2h,f,c
 19259  00277C  0E00               	movlw	0
 19260  00277E  6EDE               	movwf	postinc2,c
 19261  002780  6EDD               	movwf	postdec2,c
 19262                           
 19263                           ;mTouchSensor.c: 235: pSensor->average -= pSensor->average >> 3;
 19264  002782  0E03               	movlw	3
 19265  002784  6F64               	movwf	??_MTouchUpdateSensorAverage& (0+255),b
 19266  002786  C060  FFD9         	movff	MTouchUpdateSensorAverage@pSensor,fsr2l
 19267  00278A  C061  FFDA         	movff	MTouchUpdateSensorAverage@pSensor+1,fsr2h
 19268  00278E  D81A               	call	PL16	;call to abstracted procedure
 19269  002790  5EDE               	subwf	postinc2,f,c
 19270  002792  5166               	movf	(??_MTouchUpdateSensorAverage+2)& (0+255),w,b
 19271  002794  5ADE               	subwfb	postinc2,f,c
 19272  002796  5167               	movf	(??_MTouchUpdateSensorAverage+3)& (0+255),w,b
 19273  002798  5ADE               	subwfb	postinc2,f,c
 19274  00279A  5168               	movf	(??_MTouchUpdateSensorAverage+4)& (0+255),w,b
 19275  00279C  5ADD               	subwfb	postdec2,f,c
 19276                           
 19277                           ;mTouchSensor.c: 236: pSensor->average += pSensor->oversampleFilterData >> 3;
 19278  00279E  0E03               	movlw	3
 19279  0027A0  6F64               	movwf	??_MTouchUpdateSensorAverage& (0+255),b
 19280  0027A2  EE20 F004          	lfsr	2,4
 19281  0027A6  5160               	movf	MTouchUpdateSensorAverage@pSensor& (0+255),w,b
 19282  0027A8  26D9               	addwf	fsr2l,f,c
 19283  0027AA  5161               	movf	(MTouchUpdateSensorAverage@pSensor+1)& (0+255),w,b
 19284  0027AC  22DA               	addwfc	fsr2h,f,c
 19285  0027AE  D80A               	call	PL16	;call to abstracted procedure
 19286  0027B0  26DE               	addwf	postinc2,f,c
 19287  0027B2  5166               	movf	(??_MTouchUpdateSensorAverage+2)& (0+255),w,b
 19288  0027B4  22DE               	addwfc	postinc2,f,c
 19289  0027B6  5167               	movf	(??_MTouchUpdateSensorAverage+3)& (0+255),w,b
 19290  0027B8  22DE               	addwfc	postinc2,f,c
 19291  0027BA  5168               	movf	(??_MTouchUpdateSensorAverage+4)& (0+255),w,b
 19292  0027BC  22DD               	addwfc	postdec2,f,c
 19293  0027BE  52DD               	movf	postdec2,f,c
 19294  0027C0  52DD               	movf	postdec2,f,c
 19295                           
 19296                           ; BSR set to: 0
 19297  0027C2  0012               	return	
 19298  0027C4                     __end_of_MTouchUpdateSensorAverage:
 19299                           	opt stack 0
 19300  0027C4                     PL16:
 19301                           	opt stack 15
 19302  0027C4  CFDE F065          	movff	postinc2,??_MTouchUpdateSensorAverage+1
 19303  0027C8  CFDE F066          	movff	postinc2,??_MTouchUpdateSensorAverage+2
 19304  0027CC  CFDE F067          	movff	postinc2,??_MTouchUpdateSensorAverage+3
 19305  0027D0  CFDE F068          	movff	postinc2,??_MTouchUpdateSensorAverage+4
 19306  0027D4                     i2u763_45:
 19307  0027D4  6764               	tstfsz	??_MTouchUpdateSensorAverage& (0+255),b
 19308  0027D6  D001               	goto	i2u763_46
 19309  0027D8  D007               	goto	i2u763_47
 19310  0027DA                     i2u763_46:
 19311  0027DA  3568               	rlcf	(??_MTouchUpdateSensorAverage+4)& (0+255),w,b
 19312  0027DC  3368               	rrcf	(??_MTouchUpdateSensorAverage+4)& (0+255),f,b
 19313  0027DE  3367               	rrcf	(??_MTouchUpdateSensorAverage+3)& (0+255),f,b
 19314  0027E0  3366               	rrcf	(??_MTouchUpdateSensorAverage+2)& (0+255),f,b
 19315  0027E2  3365               	rrcf	(??_MTouchUpdateSensorAverage+1)& (0+255),f,b
 19316  0027E4  2F64               	decfsz	??_MTouchUpdateSensorAverage& (0+255),f,b
 19317  0027E6  D7F6               	goto	i2u763_45
 19318  0027E8                     i2u763_47:
 19319  0027E8  C060  FFD9         	movff	MTouchUpdateSensorAverage@pSensor,fsr2l
 19320  0027EC  C061  FFDA         	movff	MTouchUpdateSensorAverage@pSensor+1,fsr2h
 19321  0027F0  5165               	movf	(??_MTouchUpdateSensorAverage+1)& (0+255),w,b
 19322  0027F2  0012               	return	
 19323  0027F4                     __end_ofPL16:
 19324                           	opt stack 0
 19325                           tblptru	equ	0xFF8
 19326                           tblptrh	equ	0xFF7
 19327                           tblptrl	equ	0xFF6
 19328                           tablat	equ	0xFF5
 19329                           prodh	equ	0xFF4
 19330                           prodl	equ	0xFF3
 19331                           intcon	equ	0xFF2
 19332                           postinc0	equ	0xFEE
 19333                           wreg	equ	0xFE8
 19334                           indf1	equ	0xFE7
 19335                           postinc1	equ	0xFE6
 19336                           postdec1	equ	0xFE5
 19337                           fsr1h	equ	0xFE2
 19338                           fsr1l	equ	0xFE1
 19339                           bsr	equ	0xFE0
 19340                           indf2	equ	0xFDF
 19341                           postinc2	equ	0xFDE
 19342                           postdec2	equ	0xFDD
 19343                           fsr2h	equ	0xFDA
 19344                           fsr2l	equ	0xFD9
 19345                           status	equ	0xFD8
 19346                           
 19347 ;; *************** function _MTouchAcquisitionCVD *****************
 19348 ;; Defined at:
 19349 ;;		line 121 in file "../lib/mTouchCap/mTouchAcquistion.c"
 19350 ;; Parameters:    Size  Location     Type
 19351 ;;  pCurrentSens    2    0[BANK0 ] PTR struct tag_SENSOR
 19352 ;;		 -> sensors(352), 
 19353 ;;  pPreviousSen    2    2[BANK0 ] PTR struct tag_SENSOR
 19354 ;;		 -> sensors(352), 
 19355 ;; Auto vars:     Size  Location     Type
 19356 ;;  curTris         2   17[BANK0 ] PTR volatile unsigned ch
 19357 ;;		 -> TRISA(1), TRISB(1), 
 19358 ;;  curLat          2   14[BANK0 ] PTR volatile unsigned ch
 19359 ;;		 -> LATA(1), LATB(1), 
 19360 ;;  prevLat         2   12[BANK0 ] PTR volatile unsigned ch
 19361 ;;		 -> LATA(1), LATB(1), 
 19362 ;;  prevTris        2    8[BANK0 ] PTR volatile unsigned ch
 19363 ;;		 -> TRISA(1), TRISB(1), 
 19364 ;;  result          2    6[BANK0 ] short 
 19365 ;;  curIOMask       1   19[BANK0 ] unsigned char 
 19366 ;;  prevIOMask      1   16[BANK0 ] unsigned char 
 19367 ;;  curChannelNu    1   11[BANK0 ] unsigned char 
 19368 ;;  prevChannelN    1   10[BANK0 ] unsigned char 
 19369 ;; Return value:  Size  Location     Type
 19370 ;;                  2    0[BANK0 ] short 
 19371 ;; Registers used:
 19372 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19373 ;; Tracked objects:
 19374 ;;		On entry : F/0
 19375 ;;		On exit  : F/0
 19376 ;;		Unchanged: 0/0
 19377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19378 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19379 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19380 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19381 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19382 ;;Total ram usage:       20 bytes
 19383 ;; Hardware stack levels used:    1
 19384 ;; This function calls:
 19385 ;;		Nothing
 19386 ;; This function is called by:
 19387 ;;		_MTouchAcquisition
 19388 ;; This function uses a non-reentrant model
 19389 ;;
 19390                           
 19391                           	psect	text75
 19392  00114E                     __ptext75:
 19393                           	opt stack 0
 19394  00114E                     _MTouchAcquisitionCVD:
 19395                           	opt stack 16
 19396                           
 19397                           ; BSR set to: 0
 19398                           ;mTouchAcquistion.c: 123: SFR prevTris;
 19399                           ;mTouchAcquistion.c: 124: SFR prevLat;
 19400                           ;mTouchAcquistion.c: 125: IOMASK prevIOMask;
 19401                           ;mTouchAcquistion.c: 126: SFR curTris;
 19402                           ;mTouchAcquistion.c: 127: SFR curLat;
 19403                           ;mTouchAcquistion.c: 128: IOMASK curIOMask;
 19404                           ;mTouchAcquistion.c: 129: UINT8 prevChannelNumber;
 19405                           ;mTouchAcquistion.c: 130: UINT8 curChannelNumber;
 19406                           ;mTouchAcquistion.c: 131: INT16 result;
 19407                           ;mTouchAcquistion.c: 135: prevTris = pPreviousSensor->trisReg;
 19408                           
 19409                           ; BSR set to: 0
 19410                           ;incstack = 0
 19411  00114E  EE20 F008          	lfsr	2,8
 19412  001152  5162               	movf	MTouchAcquisitionCVD@pPreviousSensor& (0+255),w,b
 19413  001154  26D9               	addwf	fsr2l,f,c
 19414  001156  5163               	movf	(MTouchAcquisitionCVD@pPreviousSensor+1)& (0+255),w,b
 19415  001158  22DA               	addwfc	fsr2h,f,c
 19416  00115A  CFDE F068          	movff	postinc2,MTouchAcquisitionCVD@prevTris
 19417  00115E  CFDD F069          	movff	postdec2,MTouchAcquisitionCVD@prevTris+1
 19418                           
 19419                           ;mTouchAcquistion.c: 136: prevLat = pPreviousSensor->latReg;
 19420  001162  EE20 F00A          	lfsr	2,10
 19421  001166  5162               	movf	MTouchAcquisitionCVD@pPreviousSensor& (0+255),w,b
 19422  001168  26D9               	addwf	fsr2l,f,c
 19423  00116A  5163               	movf	(MTouchAcquisitionCVD@pPreviousSensor+1)& (0+255),w,b
 19424  00116C  22DA               	addwfc	fsr2h,f,c
 19425  00116E  CFDE F06C          	movff	postinc2,MTouchAcquisitionCVD@prevLat
 19426  001172  CFDD F06D          	movff	postdec2,MTouchAcquisitionCVD@prevLat+1
 19427                           
 19428                           ;mTouchAcquistion.c: 137: prevIOMask = pPreviousSensor->ioMask;
 19429  001176  EE20 F01D          	lfsr	2,29
 19430  00117A  5162               	movf	MTouchAcquisitionCVD@pPreviousSensor& (0+255),w,b
 19431  00117C  26D9               	addwf	fsr2l,f,c
 19432  00117E  5163               	movf	(MTouchAcquisitionCVD@pPreviousSensor+1)& (0+255),w,b
 19433  001180  22DA               	addwfc	fsr2h,f,c
 19434  001182  50DF               	movf	indf2,w,c
 19435  001184  6F70               	movwf	MTouchAcquisitionCVD@prevIOMask& (0+255),b
 19436                           
 19437                           ;mTouchAcquistion.c: 138: curTris = pCurrentSensor->trisReg;
 19438  001186  EE20 F008          	lfsr	2,8
 19439  00118A  5160               	movf	MTouchAcquisitionCVD@pCurrentSensor& (0+255),w,b
 19440  00118C  26D9               	addwf	fsr2l,f,c
 19441  00118E  5161               	movf	(MTouchAcquisitionCVD@pCurrentSensor+1)& (0+255),w,b
 19442  001190  22DA               	addwfc	fsr2h,f,c
 19443  001192  CFDE F071          	movff	postinc2,MTouchAcquisitionCVD@curTris
 19444  001196  CFDD F072          	movff	postdec2,MTouchAcquisitionCVD@curTris+1
 19445                           
 19446                           ;mTouchAcquistion.c: 139: curLat = pCurrentSensor->latReg;
 19447  00119A  EE20 F00A          	lfsr	2,10
 19448  00119E  5160               	movf	MTouchAcquisitionCVD@pCurrentSensor& (0+255),w,b
 19449  0011A0  26D9               	addwf	fsr2l,f,c
 19450  0011A2  5161               	movf	(MTouchAcquisitionCVD@pCurrentSensor+1)& (0+255),w,b
 19451  0011A4  22DA               	addwfc	fsr2h,f,c
 19452  0011A6  CFDE F06E          	movff	postinc2,MTouchAcquisitionCVD@curLat
 19453  0011AA  CFDD F06F          	movff	postdec2,MTouchAcquisitionCVD@curLat+1
 19454                           
 19455                           ;mTouchAcquistion.c: 140: curIOMask = pCurrentSensor->ioMask;
 19456  0011AE  EE20 F01D          	lfsr	2,29
 19457  0011B2  5160               	movf	MTouchAcquisitionCVD@pCurrentSensor& (0+255),w,b
 19458  0011B4  26D9               	addwf	fsr2l,f,c
 19459  0011B6  5161               	movf	(MTouchAcquisitionCVD@pCurrentSensor+1)& (0+255),w,b
 19460  0011B8  22DA               	addwfc	fsr2h,f,c
 19461  0011BA  50DF               	movf	indf2,w,c
 19462  0011BC  6F73               	movwf	MTouchAcquisitionCVD@curIOMask& (0+255),b
 19463                           
 19464                           ;mTouchAcquistion.c: 141: prevChannelNumber = pPreviousSensor->channelNumber;
 19465  0011BE  EE20 F01E          	lfsr	2,30
 19466  0011C2  5162               	movf	MTouchAcquisitionCVD@pPreviousSensor& (0+255),w,b
 19467  0011C4  26D9               	addwf	fsr2l,f,c
 19468  0011C6  5163               	movf	(MTouchAcquisitionCVD@pPreviousSensor+1)& (0+255),w,b
 19469  0011C8  22DA               	addwfc	fsr2h,f,c
 19470  0011CA  50DF               	movf	indf2,w,c
 19471  0011CC  6F6A               	movwf	MTouchAcquisitionCVD@prevChannelNumber& (0+255),b
 19472                           
 19473                           ;mTouchAcquistion.c: 142: curChannelNumber = pCurrentSensor->channelNumber;
 19474  0011CE  EE20 F01E          	lfsr	2,30
 19475  0011D2  5160               	movf	MTouchAcquisitionCVD@pCurrentSensor& (0+255),w,b
 19476  0011D4  26D9               	addwf	fsr2l,f,c
 19477  0011D6  5161               	movf	(MTouchAcquisitionCVD@pCurrentSensor+1)& (0+255),w,b
 19478  0011D8  22DA               	addwfc	fsr2h,f,c
 19479  0011DA  50DF               	movf	indf2,w,c
 19480  0011DC  6F6B               	movwf	MTouchAcquisitionCVD@curChannelNumber& (0+255),b
 19481                           
 19482                           ; BSR set to: 0
 19483                           ;mTouchAcquistion.c: 148: {ADCON0bits.CHS = prevChannelNumber;};
 19484  0011DE  C06A  F064         	movff	MTouchAcquisitionCVD@prevChannelNumber,??_MTouchAcquisitionCVD
 19485  0011E2  D8A6               	call	PL46	;call to abstracted procedure
 19486                           
 19487                           ; BSR set to: 0
 19488                           ;mTouchAcquistion.c: 151: *prevLat |= prevIOMask; *prevTris &= ~prevIOMask;
 19489  0011E4  C06C  FFD9         	movff	MTouchAcquisitionCVD@prevLat,fsr2l
 19490  0011E8  C06D  FFDA         	movff	MTouchAcquisitionCVD@prevLat+1,fsr2h
 19491  0011EC  5170               	movf	MTouchAcquisitionCVD@prevIOMask& (0+255),w,b
 19492  0011EE  12DF               	iorwf	indf2,f,c
 19493                           
 19494                           ; BSR set to: 0
 19495  0011F0  D8B3               	call	PL84	;call to abstracted procedure
 19496                           
 19497                           ; BSR set to: 0
 19498                           ;mTouchAcquistion.c: 154: *curLat &= ~curIOMask; *curTris &= ~curIOMask;
 19499  0011F2  D895               	call	PL44	;call to abstracted procedure
 19500                           
 19501                           ; BSR set to: 0
 19502  0011F4  D88B               	call	PL36	;call to abstracted procedure
 19503                           
 19504                           ; BSR set to: 0
 19505                           ;mTouchAcquistion.c: 157: { __nop();__nop();__nop();__nop();__nop();__nop();__nop();__no
      +                          p();__nop();__nop(); __nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__n
      +                          op();__nop(); };
 19506  0011F6  F000               	nop	
 19507  0011F8  F000               	nop	
 19508  0011FA  F000               	nop	
 19509  0011FC  F000               	nop	
 19510  0011FE  F000               	nop	
 19511  001200  F000               	nop	
 19512  001202  F000               	nop	
 19513  001204  F000               	nop	
 19514  001206  F000               	nop	
 19515  001208  F000               	nop	
 19516  00120A  F000               	nop	
 19517  00120C  F000               	nop	
 19518  00120E  F000               	nop	
 19519  001210  F000               	nop	
 19520  001212  F000               	nop	
 19521  001214  F000               	nop	
 19522  001216  F000               	nop	
 19523  001218  F000               	nop	
 19524  00121A  F000               	nop	
 19525  00121C  F000               	nop	
 19526                           
 19527                           ;mTouchAcquistion.c: 160: *curTris |= curIOMask;
 19528  00121E  C071  FFD9         	movff	MTouchAcquisitionCVD@curTris,fsr2l
 19529  001222  C072  FFDA         	movff	MTouchAcquisitionCVD@curTris+1,fsr2h
 19530  001226  0100               	movlb	0	; () banked
 19531  001228  5173               	movf	MTouchAcquisitionCVD@curIOMask& (0+255),w,b
 19532  00122A  12DF               	iorwf	indf2,f,c
 19533                           
 19534                           ;mTouchAcquistion.c: 163: {ADCON0bits.CHS = curChannelNumber;};
 19535  00122C  C06B  F064         	movff	MTouchAcquisitionCVD@curChannelNumber,??_MTouchAcquisitionCVD
 19536  001230  D87F               	call	PL46	;call to abstracted procedure
 19537                           
 19538                           ; BSR set to: 0
 19539                           ;mTouchAcquistion.c: 166: { __nop();__nop();__nop();__nop();__nop();__nop();__nop();__no
      +                          p();__nop();__nop(); __nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__n
      +                          op();__nop(); };
 19540  001232  F000               	nop	
 19541  001234  F000               	nop	
 19542  001236  F000               	nop	
 19543  001238  F000               	nop	
 19544  00123A  F000               	nop	
 19545  00123C  F000               	nop	
 19546  00123E  F000               	nop	
 19547  001240  F000               	nop	
 19548  001242  F000               	nop	
 19549  001244  F000               	nop	
 19550  001246  F000               	nop	
 19551  001248  F000               	nop	
 19552  00124A  F000               	nop	
 19553  00124C  F000               	nop	
 19554  00124E  F000               	nop	
 19555  001250  F000               	nop	
 19556  001252  F000               	nop	
 19557  001254  F000               	nop	
 19558  001256  F000               	nop	
 19559  001258  F000               	nop	
 19560                           
 19561                           ;mTouchAcquistion.c: 169: {ADCON0bits.DONE = 1;while(ADCON0bits.DONE);};
 19562  00125A  82C2               	bsf	4034,1,c	;volatile
 19563  00125C                     i2l11:
 19564  00125C  B2C2               	btfsc	4034,1,c	;volatile
 19565  00125E  D7FE               	goto	i2l11
 19566                           
 19567                           ;mTouchAcquistion.c: 172: *curTris &= ~curIOMask;
 19568  001260  0100               	movlb	0	; () banked
 19569  001262  D854               	call	PL36	;call to abstracted procedure
 19570                           
 19571                           ;mTouchAcquistion.c: 173: *prevLat &= ~prevIOMask;
 19572  001264  D882               	call	PL88	;call to abstracted procedure
 19573                           
 19574                           ; BSR set to: 0
 19575                           ;mTouchAcquistion.c: 179: result = 1024;
 19576  001266  0E04               	movlw	4
 19577  001268  6F67               	movwf	(MTouchAcquisitionCVD@result+1)& (0+255),b
 19578  00126A  6B66               	clrf	MTouchAcquisitionCVD@result& (0+255),b
 19579                           
 19580                           ; BSR set to: 0
 19581                           ;mTouchAcquistion.c: 181: result -= (((INT16)ADRESH << 8)+ADRESL);
 19582  00126C  D869               	call	PL64	;call to abstracted procedure
 19583  00126E  5F66               	subwf	MTouchAcquisitionCVD@result& (0+255),f,b
 19584  001270  5165               	movf	(??_MTouchAcquisitionCVD+1)& (0+255),w,b
 19585  001272  5B67               	subwfb	(MTouchAcquisitionCVD@result+1)& (0+255),f,b
 19586                           
 19587                           ; BSR set to: 0
 19588                           ;mTouchAcquistion.c: 186: {ADCON0bits.CHS = prevChannelNumber;};
 19589  001274  C06A  F064         	movff	MTouchAcquisitionCVD@prevChannelNumber,??_MTouchAcquisitionCVD
 19590  001278  D85B               	call	PL46	;call to abstracted procedure
 19591                           
 19592                           ; BSR set to: 0
 19593                           ;mTouchAcquistion.c: 189: *prevLat &= ~prevIOMask; *prevTris &= ~prevIOMask;
 19594  00127A  D877               	call	PL88	;call to abstracted procedure
 19595                           
 19596                           ; BSR set to: 0
 19597  00127C  D86D               	call	PL84	;call to abstracted procedure
 19598                           
 19599                           ; BSR set to: 0
 19600                           ;mTouchAcquistion.c: 192: *curLat |= curIOMask; *curTris &= ~curIOMask;
 19601  00127E  C06E  FFD9         	movff	MTouchAcquisitionCVD@curLat,fsr2l
 19602  001282  C06F  FFDA         	movff	MTouchAcquisitionCVD@curLat+1,fsr2h
 19603  001286  5173               	movf	MTouchAcquisitionCVD@curIOMask& (0+255),w,b
 19604  001288  12DF               	iorwf	indf2,f,c
 19605                           
 19606                           ; BSR set to: 0
 19607  00128A  D840               	call	PL36	;call to abstracted procedure
 19608                           
 19609                           ; BSR set to: 0
 19610                           ;mTouchAcquistion.c: 195: { __nop();__nop();__nop();__nop();__nop();__nop();__nop();__no
      +                          p();__nop();__nop(); __nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__n
      +                          op();__nop(); };
 19611  00128C  F000               	nop	
 19612  00128E  F000               	nop	
 19613  001290  F000               	nop	
 19614  001292  F000               	nop	
 19615  001294  F000               	nop	
 19616  001296  F000               	nop	
 19617  001298  F000               	nop	
 19618  00129A  F000               	nop	
 19619  00129C  F000               	nop	
 19620  00129E  F000               	nop	
 19621  0012A0  F000               	nop	
 19622  0012A2  F000               	nop	
 19623  0012A4  F000               	nop	
 19624  0012A6  F000               	nop	
 19625  0012A8  F000               	nop	
 19626  0012AA  F000               	nop	
 19627  0012AC  F000               	nop	
 19628  0012AE  F000               	nop	
 19629  0012B0  F000               	nop	
 19630  0012B2  F000               	nop	
 19631                           
 19632                           ;mTouchAcquistion.c: 198: *curTris |= curIOMask;
 19633  0012B4  C071  FFD9         	movff	MTouchAcquisitionCVD@curTris,fsr2l
 19634  0012B8  C072  FFDA         	movff	MTouchAcquisitionCVD@curTris+1,fsr2h
 19635  0012BC  5173               	movf	MTouchAcquisitionCVD@curIOMask& (0+255),w,b
 19636  0012BE  12DF               	iorwf	indf2,f,c
 19637                           
 19638                           ; BSR set to: 0
 19639                           ;mTouchAcquistion.c: 201: {ADCON0bits.CHS = curChannelNumber;};
 19640  0012C0  C06B  F064         	movff	MTouchAcquisitionCVD@curChannelNumber,??_MTouchAcquisitionCVD
 19641  0012C4  D835               	call	PL46	;call to abstracted procedure
 19642                           
 19643                           ; BSR set to: 0
 19644                           ;mTouchAcquistion.c: 204: { __nop();__nop();__nop();__nop();__nop();__nop();__nop();__no
      +                          p();__nop();__nop(); __nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__n
      +                          op();__nop(); };
 19645  0012C6  F000               	nop	
 19646  0012C8  F000               	nop	
 19647  0012CA  F000               	nop	
 19648  0012CC  F000               	nop	
 19649  0012CE  F000               	nop	
 19650  0012D0  F000               	nop	
 19651  0012D2  F000               	nop	
 19652  0012D4  F000               	nop	
 19653  0012D6  F000               	nop	
 19654  0012D8  F000               	nop	
 19655  0012DA  F000               	nop	
 19656  0012DC  F000               	nop	
 19657  0012DE  F000               	nop	
 19658  0012E0  F000               	nop	
 19659  0012E2  F000               	nop	
 19660  0012E4  F000               	nop	
 19661  0012E6  F000               	nop	
 19662  0012E8  F000               	nop	
 19663  0012EA  F000               	nop	
 19664  0012EC  F000               	nop	
 19665                           
 19666                           ;mTouchAcquistion.c: 207: {ADCON0bits.DONE = 1;while(ADCON0bits.DONE);};
 19667  0012EE  82C2               	bsf	4034,1,c	;volatile
 19668  0012F0                     i2l14:
 19669  0012F0  B2C2               	btfsc	4034,1,c	;volatile
 19670  0012F2  D7FE               	goto	i2l14
 19671                           
 19672                           ;mTouchAcquistion.c: 210: *curLat &= ~curIOMask;
 19673  0012F4  0100               	movlb	0	; () banked
 19674  0012F6  D813               	call	PL44	;call to abstracted procedure
 19675                           
 19676                           ;mTouchAcquistion.c: 211: *curTris &= ~curIOMask;
 19677  0012F8  D809               	call	PL36	;call to abstracted procedure
 19678                           
 19679                           ; BSR set to: 0
 19680                           ;mTouchAcquistion.c: 214: result += (((INT16)ADRESH << 8)+ADRESL);
 19681  0012FA  D822               	call	PL64	;call to abstracted procedure
 19682  0012FC  2766               	addwf	MTouchAcquisitionCVD@result& (0+255),f,b
 19683  0012FE  5165               	movf	(??_MTouchAcquisitionCVD+1)& (0+255),w,b
 19684  001300  2367               	addwfc	(MTouchAcquisitionCVD@result+1)& (0+255),f,b
 19685                           
 19686                           ; BSR set to: 0
 19687                           ;mTouchAcquistion.c: 216: return (UINT16)result;
 19688  001302  C066  F060         	movff	MTouchAcquisitionCVD@result,?_MTouchAcquisitionCVD
 19689  001306  C067  F061         	movff	MTouchAcquisitionCVD@result+1,?_MTouchAcquisitionCVD+1
 19690                           
 19691                           ; BSR set to: 0
 19692  00130A  0012               	return	
 19693  00130C                     __end_of_MTouchAcquisitionCVD:
 19694                           	opt stack 0
 19695  00130C                     PL36:
 19696                           	opt stack 16
 19697  00130C  1D73               	comf	MTouchAcquisitionCVD@curIOMask& (0+255),w,b
 19698  00130E  6F64               	movwf	??_MTouchAcquisitionCVD& (0+255),b
 19699  001310  C071  FFD9         	movff	MTouchAcquisitionCVD@curTris,fsr2l
 19700  001314  C072  FFDA         	movff	MTouchAcquisitionCVD@curTris+1,fsr2h
 19701  001318  5164               	movf	??_MTouchAcquisitionCVD& (0+255),w,b
 19702  00131A  16DF               	andwf	indf2,f,c
 19703  00131C  0012               	return	
 19704  00131E                     __end_ofPL36:
 19705                           	opt stack 0
 19706  00131E                     PL44:
 19707                           	opt stack 16
 19708  00131E  1D73               	comf	MTouchAcquisitionCVD@curIOMask& (0+255),w,b
 19709  001320  6F64               	movwf	??_MTouchAcquisitionCVD& (0+255),b
 19710  001322  C06E  FFD9         	movff	MTouchAcquisitionCVD@curLat,fsr2l
 19711  001326  C06F  FFDA         	movff	MTouchAcquisitionCVD@curLat+1,fsr2h
 19712  00132A  5164               	movf	??_MTouchAcquisitionCVD& (0+255),w,b
 19713  00132C  16DF               	andwf	indf2,f,c
 19714  00132E  0012               	return	
 19715  001330                     __end_ofPL44:
 19716                           	opt stack 0
 19717  001330                     PL46:
 19718                           	opt stack 16
 19719  001330  4764               	rlncf	??_MTouchAcquisitionCVD& (0+255),f,b
 19720  001332  4764               	rlncf	??_MTouchAcquisitionCVD& (0+255),f,b
 19721  001334  50C2               	movf	4034,w,c	;volatile
 19722  001336  1964               	xorwf	??_MTouchAcquisitionCVD& (0+255),w,b
 19723  001338  0B83               	andlw	-125
 19724  00133A  1964               	xorwf	??_MTouchAcquisitionCVD& (0+255),w,b
 19725  00133C  6EC2               	movwf	4034,c	;volatile
 19726  00133E  0012               	return	
 19727  001340                     __end_ofPL46:
 19728                           	opt stack 0
 19729  001340                     PL64:
 19730                           	opt stack 16
 19731  001340  50C3               	movf	4035,w,c	;volatile
 19732  001342  CFC4 F064          	movff	4036,??_MTouchAcquisitionCVD	;volatile
 19733  001346  6B65               	clrf	(??_MTouchAcquisitionCVD+1)& (0+255),b
 19734  001348  C064  F065         	movff	??_MTouchAcquisitionCVD,??_MTouchAcquisitionCVD+1
 19735  00134C  6B64               	clrf	??_MTouchAcquisitionCVD& (0+255),b
 19736  00134E  2764               	addwf	??_MTouchAcquisitionCVD& (0+255),f,b
 19737  001350  0E00               	movlw	0
 19738  001352  2365               	addwfc	(??_MTouchAcquisitionCVD+1)& (0+255),f,b
 19739  001354  5164               	movf	??_MTouchAcquisitionCVD& (0+255),w,b
 19740  001356  0012               	return	
 19741  001358                     __end_ofPL64:
 19742                           	opt stack 0
 19743  001358                     PL84:
 19744                           	opt stack 16
 19745  001358  1D70               	comf	MTouchAcquisitionCVD@prevIOMask& (0+255),w,b
 19746  00135A  6F64               	movwf	??_MTouchAcquisitionCVD& (0+255),b
 19747  00135C  C068  FFD9         	movff	MTouchAcquisitionCVD@prevTris,fsr2l
 19748  001360  C069  FFDA         	movff	MTouchAcquisitionCVD@prevTris+1,fsr2h
 19749  001364  5164               	movf	??_MTouchAcquisitionCVD& (0+255),w,b
 19750  001366  16DF               	andwf	indf2,f,c
 19751  001368  0012               	return	
 19752  00136A                     __end_ofPL84:
 19753                           	opt stack 0
 19754  00136A                     PL88:
 19755                           	opt stack 16
 19756  00136A  1D70               	comf	MTouchAcquisitionCVD@prevIOMask& (0+255),w,b
 19757  00136C  6F64               	movwf	??_MTouchAcquisitionCVD& (0+255),b
 19758  00136E  C06C  FFD9         	movff	MTouchAcquisitionCVD@prevLat,fsr2l
 19759  001372  C06D  FFDA         	movff	MTouchAcquisitionCVD@prevLat+1,fsr2h
 19760  001376  5164               	movf	??_MTouchAcquisitionCVD& (0+255),w,b
 19761  001378  16DF               	andwf	indf2,f,c
 19762  00137A  0012               	return	
 19763  00137C                     __end_ofPL88:
 19764                           	opt stack 0
 19765                           tblptru	equ	0xFF8
 19766                           tblptrh	equ	0xFF7
 19767                           tblptrl	equ	0xFF6
 19768                           tablat	equ	0xFF5
 19769                           prodh	equ	0xFF4
 19770                           prodl	equ	0xFF3
 19771                           intcon	equ	0xFF2
 19772                           postinc0	equ	0xFEE
 19773                           wreg	equ	0xFE8
 19774                           indf1	equ	0xFE7
 19775                           postinc1	equ	0xFE6
 19776                           postdec1	equ	0xFE5
 19777                           fsr1h	equ	0xFE2
 19778                           fsr1l	equ	0xFE1
 19779                           bsr	equ	0xFE0
 19780                           indf2	equ	0xFDF
 19781                           postinc2	equ	0xFDE
 19782                           postdec2	equ	0xFDD
 19783                           fsr2h	equ	0xFDA
 19784                           fsr2l	equ	0xFD9
 19785                           status	equ	0xFD8
 19786                           tblptru	equ	0xFF8
 19787                           tblptrh	equ	0xFF7
 19788                           tblptrl	equ	0xFF6
 19789                           tablat	equ	0xFF5
 19790                           prodh	equ	0xFF4
 19791                           prodl	equ	0xFF3
 19792                           intcon	equ	0xFF2
 19793                           postinc0	equ	0xFEE
 19794                           wreg	equ	0xFE8
 19795                           indf1	equ	0xFE7
 19796                           postinc1	equ	0xFE6
 19797                           postdec1	equ	0xFE5
 19798                           fsr1h	equ	0xFE2
 19799                           fsr1l	equ	0xFE1
 19800                           bsr	equ	0xFE0
 19801                           indf2	equ	0xFDF
 19802                           postinc2	equ	0xFDE
 19803                           postdec2	equ	0xFDD
 19804                           fsr2h	equ	0xFDA
 19805                           fsr2l	equ	0xFD9
 19806                           status	equ	0xFD8
 19807                           
 19808                           	psect	param0
 19809  0000                     tblptru	equ	0xFF8
 19810                           tblptrh	equ	0xFF7
 19811                           tblptrl	equ	0xFF6
 19812                           tablat	equ	0xFF5
 19813                           prodh	equ	0xFF4
 19814                           prodl	equ	0xFF3
 19815                           intcon	equ	0xFF2
 19816                           postinc0	equ	0xFEE
 19817                           wreg	equ	0xFE8
 19818                           indf1	equ	0xFE7
 19819                           postinc1	equ	0xFE6
 19820                           postdec1	equ	0xFE5
 19821                           fsr1h	equ	0xFE2
 19822                           fsr1l	equ	0xFE1
 19823                           bsr	equ	0xFE0
 19824                           indf2	equ	0xFDF
 19825                           postinc2	equ	0xFDE
 19826                           postdec2	equ	0xFDD
 19827                           fsr2h	equ	0xFDA
 19828                           fsr2l	equ	0xFD9
 19829                           status	equ	0xFD8
 19830                           tblptru	equ	0xFF8
 19831                           tblptrh	equ	0xFF7
 19832                           tblptrl	equ	0xFF6
 19833                           tablat	equ	0xFF5
 19834                           prodh	equ	0xFF4
 19835                           prodl	equ	0xFF3
 19836                           intcon	equ	0xFF2
 19837                           postinc0	equ	0xFEE
 19838                           wreg	equ	0xFE8
 19839                           indf1	equ	0xFE7
 19840                           postinc1	equ	0xFE6
 19841                           postdec1	equ	0xFE5
 19842                           fsr1h	equ	0xFE2
 19843                           fsr1l	equ	0xFE1
 19844                           bsr	equ	0xFE0
 19845                           indf2	equ	0xFDF
 19846                           postinc2	equ	0xFDE
 19847                           postdec2	equ	0xFDD
 19848                           fsr2h	equ	0xFDA
 19849                           fsr2l	equ	0xFD9
 19850                           status	equ	0xFD8


Data Sizes:
    Strings     8
    Constant    3548
    Data        4
    BSS         967
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     35      71
    BANK0           160     98     121
    BANK1           256     27     227
    BANK2           256     40     144
    BANK3           256      0     256
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    sensors.latReg	PTR volatile unsigned char  size(2) Largest target is 0
		 -> LATA(ABS[1]), LATB(ABS[1]), 

    sensors.trisReg	PTR volatile unsigned char  size(2) Largest target is 0
		 -> TRISA(ABS[1]), TRISB(ABS[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_1(CODE[8]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> str(BANK1[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK1[2]), 

    S2374$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0

    LabelClrTxt@lb.p_font	PTR const unsigned char  size(2) Largest target is 2892
		 -> font13(CODE[2892]), 

    LabelSetTxt@str	PTR unsigned char  size(2) Largest target is 28
		 -> str(BANK1[20]), lb_temp(BANK1[27]), 

    LabelSetTxt@lb.p_font	PTR const unsigned char  size(2) Largest target is 2892
		 -> font13(CODE[2892]), 

    LabelSetTxt@lb	PTR struct . size(2) Largest target is 28
		 -> lb_temp(BANK1[27]), 

    LabelCreate@font	PTR const unsigned char  size(2) Largest target is 2892
		 -> font13(CODE[2892]), 

    LabelCreate@lb.p_font	PTR const unsigned char  size(2) Largest target is 2892
		 -> font13(CODE[2892]), 

    LabelCreate@lb	PTR struct . size(2) Largest target is 28
		 -> lb_temp(BANK1[27]), 

    ks0108PutChar@pChImage	PTR const unsigned char  size(2) Largest target is 2892
		 -> font13(CODE[2892]), 

    ks0108PutChar@p_font	PTR const unsigned char  size(2) Largest target is 2892
		 -> font13(CODE[2892]), 

    crc_mb_check@buffer	PTR unsigned char  size(2) Largest target is 128
		 -> RxTxBuff(BANK1[128]), 

    crc_mb@buffer	PTR unsigned char  size(2) Largest target is 128
		 -> RxTxBuff(BANK1[128]), 

    crc_mb_calc@code	PTR unsigned int  size(1) Largest target is 2
		 -> crc_mb_check@crc(COMRAM[2]), crc_mb@CRC(COMRAM[2]), 

    crc_mb_init@code	PTR unsigned int  size(1) Largest target is 2
		 -> crc_mb_check@crc(COMRAM[2]), crc_mb@CRC(COMRAM[2]), 

    buttons.pSensor	PTR struct tag_SENSOR size(2) Largest target is 374
		 -> sensors(BIGRAM[352]), 

    lb_temp2.p_font	PTR const unsigned char  size(2) Largest target is 2892
		 -> font13(CODE[2892]), 

    S901$p_font	PTR const unsigned char  size(2) Largest target is 2892
		 -> font13(CODE[2892]), 

    lb_temp.p_font	PTR const unsigned char  size(2) Largest target is 2892
		 -> font13(CODE[2892]), 

    read___ee@var	PTR unsigned char  size(1) Largest target is 1
		 -> set_ee_default@c1(COMRAM[1]), 

    write___ee@var	PTR unsigned char  size(1) Largest target is 1
		 -> set_ee_default@c(COMRAM[1]), 

    MTouchAcquisition@pCurrentSensor.latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATA(ABS[1]), LATB(ABS[1]), 

    MTouchAcquisition@pCurrentSensor.trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISA(ABS[1]), TRISB(ABS[1]), 

    MTouchAcquisition@pPreviousSensor.latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATA(ABS[1]), LATB(ABS[1]), 

    MTouchAcquisition@pPreviousSensor.trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISA(ABS[1]), TRISB(ABS[1]), 

    MTouchAcquisition@pPreviousSensor	PTR struct tag_SENSOR size(2) Largest target is 374
		 -> sensors(BIGRAM[352]), 

    MTouchAcquisition@pLastSensor	PTR struct tag_SENSOR size(2) Largest target is 374
		 -> sensors(BIGRAM[352]), 

    MTouchAcquisition@pCurrentSensor	PTR struct tag_SENSOR size(2) Largest target is 374
		 -> sensors(BIGRAM[352]), 

    MTouchUpdateSensorAverage@pSensor.latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATA(ABS[1]), LATB(ABS[1]), 

    MTouchUpdateSensorAverage@pSensor.trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISA(ABS[1]), TRISB(ABS[1]), 

    MTouchUpdateSensorAverage@pSensor	PTR struct tag_SENSOR size(2) Largest target is 374
		 -> sensors(BIGRAM[352]), 

    MTouchSensorDecode@pSensor.latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATA(ABS[1]), LATB(ABS[1]), 

    MTouchSensorDecode@pSensor.trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISA(ABS[1]), TRISB(ABS[1]), 

    MTouchSensorDecode@pSensor	PTR struct tag_SENSOR size(2) Largest target is 374
		 -> sensors(BIGRAM[352]), 

    MTouchSetSensor@lat	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATA(ABS[1]), LATB(ABS[1]), 

    MTouchSetSensor@tris	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISA(ABS[1]), TRISB(ABS[1]), 

    MTouchSetSensor@pSensor.latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATA(ABS[1]), LATB(ABS[1]), 

    MTouchSetSensor@pSensor.trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISA(ABS[1]), TRISB(ABS[1]), 

    MTouchSetSensor@pSensor	PTR struct tag_SENSOR size(2) Largest target is 374
		 -> sensors(BIGRAM[352]), 

    MTouchDecodeButtons@pMostPressedButton.pSensor.latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATA(ABS[1]), LATB(ABS[1]), 

    MTouchDecodeButtons@pMostPressedButton.pSensor.trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISA(ABS[1]), TRISB(ABS[1]), 

    MTouchDecodeButtons@pMostPressedButton.pSensor	PTR struct tag_SENSOR size(2) Largest target is 374
		 -> sensors(BIGRAM[352]), 

    MTouchDecodeButtons@pSensor.latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATA(ABS[1]), LATB(ABS[1]), 

    MTouchDecodeButtons@pSensor.trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISA(ABS[1]), TRISB(ABS[1]), 

    MTouchDecodeButtons@pButton.pSensor	PTR struct tag_SENSOR size(2) Largest target is 374
		 -> sensors(BIGRAM[352]), 

    MTouchDecodeButtons@pSensor	PTR struct tag_SENSOR size(2) Largest target is 374
		 -> sensors(BIGRAM[352]), 

    MTouchDecodeButtons@pMostPressedButton	PTR struct tag_MTOUCHBUTTON size(2) Largest target is 117
		 -> NULL(NULL[0]), buttons(BANK2[104]), 

    MTouchDecodeButtons@pButton	PTR struct tag_MTOUCHBUTTON size(2) Largest target is 117
		 -> buttons(BANK2[104]), 

    S180tag_MTOUCHBUTTON$pSensor	PTR struct tag_SENSOR size(2) Largest target is 374
		 -> sensors(BIGRAM[352]), 

    MTouchSetButton@pButton.pSensor	PTR struct tag_SENSOR size(2) Largest target is 374
		 -> sensors(BIGRAM[352]), 

    MTouchSetButton@pButton	PTR struct tag_MTOUCHBUTTON size(2) Largest target is 117
		 -> buttons(BANK2[104]), 

    MTouchAcquisitionCVD@curLat	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATA(ABS[1]), LATB(ABS[1]), 

    MTouchAcquisitionCVD@pCurrentSensor.latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATA(ABS[1]), LATB(ABS[1]), 

    MTouchAcquisitionCVD@pCurrentSensor.trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISA(ABS[1]), TRISB(ABS[1]), 

    MTouchAcquisitionCVD@pCurrentSensor	PTR struct tag_SENSOR size(2) Largest target is 374
		 -> sensors(BIGRAM[352]), 

    MTouchAcquisitionCVD@curTris	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISA(ABS[1]), TRISB(ABS[1]), 

    MTouchAcquisitionCVD@prevLat	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATA(ABS[1]), LATB(ABS[1]), 

    S21tag_SENSOR$latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATA(ABS[1]), LATB(ABS[1]), 

    MTouchAcquisitionCVD@pPreviousSensor.latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATA(ABS[1]), LATB(ABS[1]), 

    S21tag_SENSOR$trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISA(ABS[1]), TRISB(ABS[1]), 

    MTouchAcquisitionCVD@pPreviousSensor.trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISA(ABS[1]), TRISB(ABS[1]), 

    MTouchAcquisitionCVD@pPreviousSensor	PTR struct tag_SENSOR size(2) Largest target is 374
		 -> sensors(BIGRAM[352]), 

    MTouchAcquisitionCVD@prevTris	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISA(ABS[1]), TRISB(ABS[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _HI_ISR in COMRAM

    None.

Critical Paths under _LO_ISR in COMRAM

    _LO_ISR->_crc_mb_check
    _set_ee_default->_write___ee
    _write___ee->_Write_b_eep
    _read___ee->_Read_b_eep
    _crc_mb_check->_crc_mb_calc
    _crc_mb->_crc_mb_calc

Critical Paths under _main in BANK0

    _MTouchDecode->_MTouchDecodeButtons
    _ds18b20_start->_write_1wire
    _ds18b20_read->___fladd
    _write_1wire->_ow_delay
    _read_1wire->_ow_delay
    _init_1wire->_ow_delay
    ___awtofl->___flpack
    _sprintf->___fladd
    _scale->___flmul
    ___awdiv->___awmod
    _fround->___flmul
    ___lbdiv->___lbmod
    ___flmul->___awtofl
    ___lltofl->___flpack
    ___fltol->_scale
    ___flsub->___fladd
    ___fladd->_fround
    _ks0108Init->_ks0108Fill
    _ks0108Fill->_ks0108GotoXY
    _LabelCreate->_LabelSetTxt
    _LabelSetTxt->_ks0108PutChar
    _ks0108PutChar->_ks0108ClearDot
    _ks0108PutChar->_ks0108SetDot
    _ks0108SetDot->_ks0108ReadData
    _ks0108ClearDot->_ks0108ReadData
    _ks0108WriteData->_ks0108WriteCommand
    _ks0108ReadData->_ks0108GotoXY
    _ks0108GotoXY->_ks0108WriteCommand
    _InitializeSystem->_MTouchSetSensor

Critical Paths under _HI_ISR in BANK0

    _HI_ISR->_MTouchAcquisition
    _MTouchAcquisition->_MTouchAcquisitionCVD
    _MTouchSensorDecode->_MTouchUpdateSensorAverage

Critical Paths under _LO_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _tsk_ds18b20->_ds18b20_read
    _ds18b20_read->___fladd
    _tsk_display->_sprintf
    _sprintf->___flsub
    ___flsub->___fladd

Critical Paths under _HI_ISR in BANK1

    None.

Critical Paths under _LO_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _tsk_display->_sprintf

Critical Paths under _HI_ISR in BANK2

    None.

Critical Paths under _LO_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HI_ISR in BANK3

    None.

Critical Paths under _LO_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HI_ISR in BANK4

    None.

Critical Paths under _LO_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HI_ISR in BANK5

    None.

Critical Paths under _LO_ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HI_ISR in BANK6

    None.

Critical Paths under _LO_ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HI_ISR in BANK7

    None.

Critical Paths under _LO_ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HI_ISR in BANK8

    None.

Critical Paths under _LO_ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HI_ISR in BANK9

    None.

Critical Paths under _LO_ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HI_ISR in BANK10

    None.

Critical Paths under _LO_ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HI_ISR in BANK11

    None.

Critical Paths under _LO_ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HI_ISR in BANK12

    None.

Critical Paths under _LO_ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HI_ISR in BANK13

    None.

Critical Paths under _LO_ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _HI_ISR in BANK14

    None.

Critical Paths under _LO_ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _HI_ISR in BANK15

    None.

Critical Paths under _LO_ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  116846
                               _Beep
                       _InitMessages
                   _InitializeSystem
                        _LabelCreate
                    _ProcessMessages
                       _ks0108GotoXY
                         _ks0108Init
                      _ks0108PutChar
                        _tsk_display
                        _tsk_ds18b20
                        _tsk_process
 ---------------------------------------------------------------------------------
 (1) _tsk_process                                          0     0      0     938
                               _Beep
                       _MTouchDecode
 ---------------------------------------------------------------------------------
 (2) _MTouchDecode                                         0     0      0     916
                _MTouchDecodeButtons
 ---------------------------------------------------------------------------------
 (3) _MTouchDecodeButtons                                 14    14      0     916
                                             39 BANK0     14    14      0
 ---------------------------------------------------------------------------------
 (2) _Beep                                                 1     1      0      22
                                             39 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _tsk_ds18b20                                          2     2      0   21985
                                             21 BANK1      2     2      0
                       _ds18b20_read
                      _ds18b20_start
 ---------------------------------------------------------------------------------
 (2) _ds18b20_start                                        2     2      0    4166
                                             45 BANK0      2     2      0
                         _init_1wire
                           _ow_delay
                        _write_1wire
 ---------------------------------------------------------------------------------
 (2) _ds18b20_read                                        14    10      4   17819
                                              7 BANK1     14    10      4
                           ___awtofl
                            ___fladd
                            ___flmul
                         _init_1wire
                         _read_1wire
                        _write_1wire
 ---------------------------------------------------------------------------------
 (3) _write_1wire                                          4     4      0    1464
                                             41 BANK0      4     4      0
                           _ow_delay
 ---------------------------------------------------------------------------------
 (3) _read_1wire                                           4     4      0    1445
                                             41 BANK0      4     4      0
                           _ow_delay
 ---------------------------------------------------------------------------------
 (3) _init_1wire                                           3     3      0    1368
                                             41 BANK0      3     3      0
                           _ow_delay
 ---------------------------------------------------------------------------------
 (4) _ow_delay                                             2     0      2    1334
                                             39 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) ___awtofl                                             9     5      4    2720
                                             49 BANK0      5     1      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (1) _tsk_display                                          0     0      0   57660
                        _LabelSetTxt
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             57    49      8   44793
                                             15 BANK1     12     4      8
                                              0 BANK2     40    40      0
                            ___awdiv
                            ___fladd
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                            ___lldiv
                            ___llmod
                           ___lltofl
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               13     9      4    9378
                                             73 BANK0      9     5      4
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1357
                                             39 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1523
                                             45 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             39 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              21    17      4    7154
                                             73 BANK0     17    13      4
                            ___flmul
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (4) ___lbmod                                              4     3      1     463
                                             39 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              4     3      1     472
                                             43 BANK0      4     3      1
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             19    11      8    5801
                                             54 BANK0     19    11      8
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtofl (ARG)
                           ___flpack
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         17     9      8     608
                                             39 BANK0     17     9      8
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          18    10      8     608
                                             39 BANK0     18    10      8
 ---------------------------------------------------------------------------------
 (3) ___lltofl                                             4     0      4    2541
                                             49 BANK0      4     0      4
                           ___flpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     694
                                             39 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     549
                                             39 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4     625
                                             82 BANK0     10     6      4
                            ___flmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    5023
                                              7 BANK1      8     0      8
                            ___fladd
                           ___lltofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             15     7      8    4690
                                             90 BANK0      8     0      8
                                              0 BANK1      7     7      0
                           ___awtofl (ARG)
                           ___flpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flpack                                            10     4      6    2433
                                             39 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (3) ___flneg                                              4     0      4     142
                                             39 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) ___flge                                               8     0      8     888
                                             39 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (1) _ks0108Init                                           0     0      0    2800
                            _DelayMs
                         _ks0108Fill
                 _ks0108WriteCommand
 ---------------------------------------------------------------------------------
 (2) _ks0108Fill                                           3     3      0    2177
                                             45 BANK0      3     3      0
                       _ks0108GotoXY
                    _ks0108WriteData
 ---------------------------------------------------------------------------------
 (2) _DelayMs                                              2     2      0      45
                                             39 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _ProcessMessages                                      1     1      0     268
                                             39 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _LabelCreate                                         10     3      7   13652
                                             82 BANK0     10     3      7
                        _LabelSetTxt
 ---------------------------------------------------------------------------------
 (2) _LabelSetTxt                                          9     5      4   12867
                                             74 BANK0      8     4      4
                       _ks0108GotoXY
                      _ks0108PutChar
 ---------------------------------------------------------------------------------
 (3) _ks0108PutChar                                       21    18      3   10467
                                             53 BANK0     21    18      3
                             ___wmul
                     _ks0108ClearDot
                       _ks0108SetDot
 ---------------------------------------------------------------------------------
 (4) _ks0108SetDot                                         5     4      1    4017
                                             48 BANK0      5     4      1
                       _ks0108GotoXY
                     _ks0108ReadData
                    _ks0108WriteData
 ---------------------------------------------------------------------------------
 (4) _ks0108ClearDot                                       5     4      1    3864
                                             48 BANK0      5     4      1
                       _ks0108GotoXY
                     _ks0108ReadData
                    _ks0108WriteData
 ---------------------------------------------------------------------------------
 (5) _ks0108WriteData                                      1     1      0     600
                                             41 BANK0      1     1      0
                       _ks0108Enable
                 _ks0108WriteCommand
 ---------------------------------------------------------------------------------
 (5) _ks0108ReadData                                       3     3      0    1624
                                             45 BANK0      3     3      0
                       _ks0108GotoXY
 ---------------------------------------------------------------------------------
 (6) _ks0108GotoXY                                         4     3      1    1441
                                             41 BANK0      4     3      1
                 _ks0108WriteCommand
 ---------------------------------------------------------------------------------
 (6) _ks0108WriteCommand                                   2     1      1     578
                                             39 BANK0      2     1      1
                       _ks0108Enable
 ---------------------------------------------------------------------------------
 (7) _ks0108Enable                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     802
                                             39 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _InitializeSystem                                     2     2      0    7409
                                             55 BANK0      2     2      0
                         _MTouchInit
                    _MTouchSetButton
                    _MTouchSetSensor
                        _uart16_init
 ---------------------------------------------------------------------------------
 (2) _uart16_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTouchSetSensor                                     16     5     11    5523
                                             39 BANK0     16     5     11
 ---------------------------------------------------------------------------------
 (2) _MTouchSetButton                                      7     5      2    1863
                                             39 BANK0      7     5      2
 ---------------------------------------------------------------------------------
 (2) _MTouchInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitMessages                                         1     1      0     204
                                             39 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _LO_ISR                                              17    17      0    5024
                                             18 COMRAM    17    17      0
                             _BSemOn
                           _Busy_eep
                         _Read_b_eep
                        _SendMessage
                        _Write_b_eep
                             _crc_mb
                       _crc_mb_check
                            _putbyte
                     _set_ee_default
                         _timed_getc
 ---------------------------------------------------------------------------------
 (10) _timed_getc                                          2     2      0      23
                                              0 COMRAM     2     2      0
                            _getbyte
 ---------------------------------------------------------------------------------
 (11) _getbyte                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _set_ee_default                                      4     4      0    1377
                                             11 COMRAM     4     4      0
                          _read___ee
                         _write___ee
 ---------------------------------------------------------------------------------
 (11) _write___ee                                          4     0      4     648
                                              7 COMRAM     4     0      4
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (12) _Write_b_eep                                         7     4      3     346
                                              0 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (12) _Busy_eep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _read___ee                                           4     0      4     525
                                              5 COMRAM     4     0      4
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (12) _Read_b_eep                                          5     3      2     223
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (10) _putbyte                                             1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) _crc_mb_check                                       10     7      3    1163
                                              8 COMRAM    10     7      3
                        _crc_mb_calc
                        _crc_mb_init
 ---------------------------------------------------------------------------------
 (10) _crc_mb                                              9     6      3    1075
                                              8 COMRAM     9     6      3
                        _crc_mb_calc
                        _crc_mb_init
 ---------------------------------------------------------------------------------
 (11) _crc_mb_init                                         1     1      0      82
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (11) _crc_mb_calc                                         8     7      1     395
                                              0 COMRAM     8     7      1
 ---------------------------------------------------------------------------------
 (10) _SendMessage                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) _BSemOn                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (13) _HI_ISR                                              7     7      0    3331
                                             32 BANK0      7     7      0
                  _MTouchAcquisition
 ---------------------------------------------------------------------------------
 (14) _MTouchAcquisition                                  12    12      0    3331
                                             20 BANK0     12    12      0
               _MTouchAcquisitionCVD
                 _MTouchSensorDecode
 ---------------------------------------------------------------------------------
 (15) _MTouchSensorDecode                                  8     6      2    1294
                                              9 BANK0      8     6      2
          _MTouchUpdateSensorAverage
 ---------------------------------------------------------------------------------
 (16) _MTouchUpdateSensorAverage                           9     5      4     445
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (15) _MTouchAcquisitionCVD                               20    16      4    1418
                                              0 BANK0     20    16      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Beep
   _InitMessages
   _InitializeSystem
     _MTouchInit
     _MTouchSetButton
     _MTouchSetSensor
     _uart16_init
   _LabelCreate
     _LabelSetTxt
       _ks0108GotoXY
         _ks0108WriteCommand
           _ks0108Enable
       _ks0108PutChar
         ___wmul
         _ks0108ClearDot
           _ks0108GotoXY
             _ks0108WriteCommand
               _ks0108Enable
           _ks0108ReadData
             _ks0108GotoXY
               _ks0108WriteCommand
                 _ks0108Enable
           _ks0108WriteData
             _ks0108Enable
             _ks0108WriteCommand
               _ks0108Enable
         _ks0108SetDot
           _ks0108GotoXY
             _ks0108WriteCommand
               _ks0108Enable
           _ks0108ReadData
             _ks0108GotoXY
               _ks0108WriteCommand
                 _ks0108Enable
           _ks0108WriteData
             _ks0108Enable
             _ks0108WriteCommand
               _ks0108Enable
   _ProcessMessages
   _ks0108GotoXY
     _ks0108WriteCommand
       _ks0108Enable
   _ks0108Init
     _DelayMs
     _ks0108Fill
       _ks0108GotoXY
         _ks0108WriteCommand
           _ks0108Enable
       _ks0108WriteData
         _ks0108Enable
         _ks0108WriteCommand
           _ks0108Enable
     _ks0108WriteCommand
       _ks0108Enable
   _ks0108PutChar
     ___wmul
     _ks0108ClearDot
       _ks0108GotoXY
         _ks0108WriteCommand
           _ks0108Enable
       _ks0108ReadData
         _ks0108GotoXY
           _ks0108WriteCommand
             _ks0108Enable
       _ks0108WriteData
         _ks0108Enable
         _ks0108WriteCommand
           _ks0108Enable
     _ks0108SetDot
       _ks0108GotoXY
         _ks0108WriteCommand
           _ks0108Enable
       _ks0108ReadData
         _ks0108GotoXY
           _ks0108WriteCommand
             _ks0108Enable
       _ks0108WriteData
         _ks0108Enable
         _ks0108WriteCommand
           _ks0108Enable
   _tsk_display
     _LabelSetTxt
       _ks0108GotoXY
         _ks0108WriteCommand
           _ks0108Enable
       _ks0108PutChar
         ___wmul
         _ks0108ClearDot
           _ks0108GotoXY
             _ks0108WriteCommand
               _ks0108Enable
           _ks0108ReadData
             _ks0108GotoXY
               _ks0108WriteCommand
                 _ks0108Enable
           _ks0108WriteData
             _ks0108Enable
             _ks0108WriteCommand
               _ks0108Enable
         _ks0108SetDot
           _ks0108GotoXY
             _ks0108WriteCommand
               _ks0108Enable
           _ks0108ReadData
             _ks0108GotoXY
               _ks0108WriteCommand
                 _ks0108Enable
           _ks0108WriteData
             _ks0108Enable
             _ks0108WriteCommand
               _ks0108Enable
     _sprintf
       ___awdiv
         ___awmod (ARG)
       ___fladd
         ___awtofl (ARG)
           ___flpack
         ___flpack (ARG)
         _fround (ARG)
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___flge
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
       ___flneg
       ___flsub
         ___fladd
           ___awtofl (ARG)
             ___flpack
           ___flpack (ARG)
           _fround (ARG)
             ___flmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtofl (ARG)
                 ___flpack
               ___flpack (ARG)
               ___lbdiv (ARG)
                 ___lbmod (ARG)
               ___lbmod (ARG)
             ___lbdiv
               ___lbmod (ARG)
             ___lbmod
         ___lltofl (ARG)
           ___flpack
       ___fltol
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtofl (ARG)
             ___flpack
           ___flpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
       ___lldiv
       ___llmod
       ___lltofl
         ___flpack
       ___wmul
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtofl (ARG)
             ___flpack
           ___flpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
       _isdigit
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtofl (ARG)
             ___flpack
           ___flpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
   _tsk_ds18b20
     _ds18b20_read
       ___awtofl
         ___flpack
       ___fladd
         ___awtofl (ARG)
           ___flpack
         ___flpack (ARG)
         _fround (ARG)
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtofl (ARG)
               ___flpack
             ___flpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtofl (ARG)
           ___flpack
         ___flpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
       _init_1wire
         _ow_delay
       _read_1wire
         _ow_delay
       _write_1wire
         _ow_delay
     _ds18b20_start
       _init_1wire
         _ow_delay
       _ow_delay
       _write_1wire
         _ow_delay
   _tsk_process
     _Beep
     _MTouchDecode
       _MTouchDecodeButtons

 _LO_ISR (ROOT)
   _BSemOn
   _Busy_eep
   _Read_b_eep
   _SendMessage
   _Write_b_eep
   _crc_mb
     _crc_mb_calc
     _crc_mb_init
   _crc_mb_check
     _crc_mb_calc
     _crc_mb_init
   _putbyte
   _set_ee_default
     _read___ee
       _Read_b_eep
     _write___ee
       _Busy_eep
       _Write_b_eep
   _timed_getc
     _getbyte

 _HI_ISR (ROOT)
   _MTouchAcquisition
     _MTouchAcquisitionCVD
     _MTouchSensorDecode
       _MTouchUpdateSensorAverage

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0     160      37        9.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0     100      11      100.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     28      90       9       56.3%
BITBANK1           100      0       0       6        0.0%
BANK1              100     1B      E3       7       88.7%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     62      79       5       75.6%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     23      47       1       74.7%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     333      12        0.0%
DATA                 0      0     493       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Fri Jul 29 12:12:56 2016

                          _tsk_ds18b20 1C08                                      _a 003E  
                                    _b 003F                                      _c 0036  
                                    _d 0038                                      _e 0109  
                                    _f 010D                                      _k 0111  
                                    _l 0115                                     PL2 0E34  
                                   PL4 0E50                                     PL6 1124  
                                   PL8 0B8C                                     l35 1436  
                                   l38 14B0                                     l39 149E  
                                   l78 1AFA                           ___awdiv@sign 0092  
                        write___ee@adr 0008                                     bsr 000FE0  
                        write___ee@var 000A                    ___wmul@multiplicand 0089  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
                      ks0108ReadData@i 008F                           ___flpack@arg 0087  
                                  PL10 25B2                                    PL20 0E90  
                                  PL12 0E6C                                    PL30 1132  
                                  PL22 0EBE                                    PL14 0E82  
                                  PL40 0BDC                                    PL32 2882  
                                  PL24 0BC8                                    PL16 27C4  
                                  PL50 0ED2                                    PL42 1140  
                                  PL34 23CC                                    PL26 1A4E  
                                  PL18 18C0                                    PL60 291A  
                                  PL52 0EF0                                    PL44 131E  
                                  PL36 130C                                    PL28 18D6  
                                  PL70 0C18                                    PL62 0BEA  
                                  PL54 23DE                                    PL46 1330  
                                  PL38 1A66                                    PL80 18E8  
                                  PL72 0EFE                                    PL64 1340  
                                  PL56 2900                                    PL48 1D46  
                                  PL90 2410                                    PL82 1728  
                                  PL74 23FA                                    PL66 315A  
                                  PL58 155E                                    PL92 1A76  
                                  PL84 1358                                    PL76 1EA8  
                                  PL68 0C02                                    PL94 29B6  
                                  PL86 210E                                    PL78 20FA  
                                  PL96 21FE                                    PL88 136A  
                                  PL98 1FFA                           ___flpack@exp 008B  
                                  l262 3670                                    l620 1C20  
                                  l621 1C22                                    l630 1C9E  
                                  l287 1F04                                    l631 1CA2  
                                  l623 1C4A                                    l296 3186  
                                  l640 1CF2                                    l642 1D1A  
                                  l618 1C0A                                    l635 1CD4  
                                  l636 1CD6                                    l573 29AE  
                                  l638 1CE6                                    l639 1CF0  
                                  l575 29A8                                    l931 2C94  
                                  l935 2CCA                                    _GIE 007F97  
                         __CFG_CPB$OFF 000000                                    _PR2 000FBB  
                                  _PR4 000F52                           __CFG_CPD$OFF 000000  
                      ks0108GotoXY@cmd 008B                         write___ee@byte 000B  
                                  _pos 00D6                                    fsr2 000FD9  
                                  _str 01B4                            _tsk_display 2DDA  
                 __size_of_Write_b_eep 0044                           ___awmod@sign 008C  
                                  prod 000FF3                                    wreg 000FE8  
           __end_of_ks0108WriteCommand 356A                           ___flmul@cntr 00A7  
                         ___flmul@sign 00A8                    _MTouchDecodeButtons 137C  
                                 PL100 1EBE                                   PL110 1BFA  
                                 PL102 156C                                   PL120 1D74  
                                 PL112 2008                                   PL104 0F08  
                                 PL130 273E                                   PL122 0C48  
                                 PL114 0C3A                                   PL106 0C2E  
                                 PL132 0C54                                   PL124 221C  
                                 PL116 220E                                   PL108 1D66  
                                 PL134 3018                                   PL126 2680  
                                 PL118 173A                                   PL136 31B2  
                                 PL128 2322                                   PL138 2CE8  
                         __CFG_LVP$OFF 000000                        _ks0108WriteData 329E  
                        ___flpack@sign 008C                    __end_of_LabelCreate 2AE6  
                         ___fltol@exp1 00BB                            _tsk_process 3328  
                                 l1016 2F80                                   l1033 2E60  
                                 l1140 34D4                                   l1212 04E2  
                                 l1061 2090                                   l1062 20DC  
                                 l1047 3558                                   l1063 209A  
                                 l1208 041A                                   l1139 34D0  
                                 l1272 0B0A                                   l1257 0932  
                                 l1274 0B3A                                   l1622 31EA  
                                 l1614 2310                                   l1551 26D0  
                                 l1546 269C                                   l1571 1624  
                                 l1811 2D56                                   l1580 16B2  
                                 l1732 24EA                                   l1557 26FE  
                                 l1565 15D2                                   l1821 2EFA  
                                 l1726 24A4                                   l1569 15FA  
                                 l4521 32CE                                   l4513 32B4  
                                 l7003 160C                  __end_of_ds18b20_start 31B2  
                                 l4541 2E56                                   l4517 32BE  
                                 l4509 32A8                                   l6141 341C  
                                 l7023 165A                                   l7111 29E6  
                                 l6305 336C                                   l7041 16CA  
                                 l7025 166A                                   l7017 1636  
                                 l7009 161A                                   l7201 340A  
                                 l6315 3380                                   l4483 2F78  
                                 l4571 2E9A                                   l7035 169C  
                                 l7027 1672                                   l7123 2A14  
                                 l8011 0510                                   l8003 04F0  
                                 l6325 3392                                   l4469 3550  
                                 l4573 2EA4                                   l4565 2E88  
                                 l4557 2E76                                   l4549 2E68  
                                 l6149 342E                                   l7053 16FA  
                                 l7045 16D6                                   l7037 16AC  
                                 l7029 1678                                   l7061 214E  
                                 l7205 3412                                   l7221 3516  
                                 l7213 3500                                   l7125 2A1C  
                                 l7117 2A04                                   l8101 0874  
                                 l8021 055E                                   l8005 04FE  
                                 l4901 1448                                   l6501 333A  
                                 l6335 0F20                                   l4495 2F9E  
                                 l7143 2A50                                   l7135 2A3A  
                                 l7127 2A20                                   l8103 087E  
                                 l6601 2C7C                                   l7081 21A8  
                                 l7065 217C                                   l8201 0B40  
                                 l6513 3356                                   l7139 2A44  
                                 l7171 2BD6                                   l7163 2BB8  
                                 l7155 2B92                                   l8203 0B46  
                                 l7323 2568                                   l7315 250E  
                                 l4907 145C                                   l6507 3348  
                                 l6621 2CDE                                   l7501 24D2  
                                 l7093 21C2                                   l7077 21A0  
                                 l7165 2BC0                                   l7421 0CEE  
                                 l8133 0914                                   l8117 08B6  
                                 l8125 0902                                   l8109 088A  
                                 l8061 06EC                                   l8053 0694  
                                 l8045 0630                                   l8037 05CA  
                                 l7261 28FE                                   l7325 2580  
                                 l4933 151A                                   l8231 2352  
                                 l8311 2ABC                                   l6615 2CB2  
                                 l6607 2CA8                                   l7511 224C  
                                 l7407 188E                                   l7167 2BC4  
                                 l7175 2BE0                                   l7159 2BAC  
                                 l7431 0D4E                                   l8151 09BA  
                                 l8127 090C                                   l8215 0B78  
                                 l4927 14D0                                   l4919 149A  
                                 l5673 1B9A                                   l8241 237A  
                                 l7513 2256                                   l7505 24DA  
                                 l7089 21BA                                   l7193 33F6  
                                 l8209 0B5E                                   l8161 0A4C  
                                 l8081 07FC                                   l8065 071A  
                                 l8049 0646                                   l8217 0B7E  
                                 l4937 1524                                   l4929 14DA  
                                 l5675 1BA2                                   l5667 1ADC  
                                 l7371 20D4                                   l7363 20B4  
                                 l8251 23C0                                   l8227 233C  
                                 l8307 2A9E                                   l7611 2632  
                                 l7507 24E6                                   l7195 33FA  
                                 l7179 2BEC                                   l7427 0D40  
                                 l8163 0A56                                   l8147 0958  
                                 l8139 0936                                   l8171 0A68  
                                 l7291 285E                                   l4891 13E8  
                                 l4939 1534                                   l8245 239A  
                                 l8237 2366                                   l7621 2656  
                                 l7517 227C                                   l7189 33F0  
                                 l7445 0E26                                   l8181 0A9C  
                                 l8077 078A                                   l7293 2860  
                                 l8247 23A8                                   l7623 265A  
                                 l7615 2642                                   l7551 2300  
                                 l7543 22E8                                   l7535 22C8  
                                 l7527 229A                                   l7463 243A  
                                 l7439 0DD4                                   l8191 0AE0  
                                 l8095 0822                                   l8087 0800  
                                 l7279 2808                                   l8335 1C32  
                                 l4879 138C                                   l7369 20CA  
                                 l7641 2D1A                                   l7553 230C  
                                 l7465 2444                                   l7457 3614  
                                 l8185 0AC4                                   l8177 0A7C  
                                 l8169 0A5E                                   l7379 20E6  
                                 l7627 266E                                   l7619 264A  
                                 l7547 22F8                                   l7483 247E  
                                 l8099 0868                                   l8451 2990  
                                 l7581 3206                                   l7637 2D0A  
                                 l7661 2ECA                                   l7469 2460  
                                 l8197 0B10                                   l8381 1D02  
                                 l8365 1CBE                                   l7575 31D4  
                                 l7639 2D16                                   l7399 181C  
                                 l7567 322A                                   l7649 2D48  
                                 l7665 2EEC                                   l7657 2EBA  
                                 l7497 24C2                                   l8393 1D24  
                                 l6955 26A6                                   l7595 25F0  
                                 l7659 2EC6                                   l7589 3532  
                                 l6965 26E6                                   l6957 26AA  
                                 l7597 25FA                                   l6981 3672  
                                 l7933 1F0A                                   l7925 1EFE  
                                 l6967 26F2                                   l6959 26C2  
                                 l7943 1F40                                   l7971 0412  
                                 l7947 1F44                                   l6997 15E4  
                                 l7991 04A2                                   l7967 0400  
                                 l7977 0432                                   l7985 048A  
                                 l7995 04D6                                   l7999 04EC  
                                 STR_1 FFF7                                   _LATA 000F89  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 _LATD 000F8C                                   u3824 316A  
                                 u7200 15B4                                   u3825 3166  
                                 u5354 1B3E                                   i2l11 125C  
                                 u5355 1B3A                                   _RCIE 007CED  
                                 _RCIF 007CF5                                   u7205 15B2  
                                 i2l14 12F0                                   u3854 2FF2  
                                 u3855 2FEE                                   u7400 2136  
                                 u3874 300A                                   u3875 3006  
                                 u8051 2430                                   u8300 2610  
                                 u8140 223E                                   u7420 2164  
                                 u7405 2134                                   u7190 1594  
                                 _RCIP 007CFD                                   u8071 2454  
                                 u8160 226C                                   u8305 260E  
                                 u8145 223C                                   u7425 2162  
                                 u7195 1592                                   u8165 226A  
                                 u8280 25E2                                   u8504 1EE0  
                                 u9145 2DF2                                   u7705 28E6  
                                 u8505 1EDC                                   u7706 28EC  
                                 u7724 2892                                   u7804 25C2  
                                 u8285 25E0                                   u7725 288E  
                                 u7805 25BE                                   u7654 2912  
                                 u7734 2818                                   u7814 251E  
                                 u7655 290E                                   u7735 2814  
                                 u7815 251A                                   u7744 2830  
                                 u7824 2536                                   u7745 282C  
                                 u7825 2532                                   u7674 292A  
                                 u7834 2558                                   u7675 2926  
                                 u7835 2554                                   u8555 1FAE  
                                 _RX91 007D5E                                   _BSem 002E  
                                 u8574 3198                                   u8575 3194  
                                 u7864 2578                                   u8584 31A8  
                                 u7865 2574                                   u8585 31A4  
                                 u7795 2878                                   u7796 287E  
                                 u7895 25A6                                   u7896 25AC  
                                 _TX91 007D66                                   _TMR2 000FBC  
                                 _TMR4 000F53                       ks0108GotoXY@chip 008A  
                                 _TXIE 007CEC                                   _Beep 3656  
                  __end_of_LabelSetTxt 23CC                                   _j_rx 003A  
                                 _main 2932                                   fsr1h 000FE2  
                                 fsr2h 000FDA                                   indf1 000FE7  
                                 fsr1l 000FE1                                   indf2 000FDF  
                                 fsr2l 000FD9                          __CFG_BORV$190 000000  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 03F0                          __CFG_IESO$OFF 000000  
                      __end_of_DelayMs 34F8                           _sprintf$3207 0268  
                         _sprintf$2387 026C                          ?_InitMessages 0001  
                 ?_MTouchDecodeButtons 0001            MTouchSetButton@buttonNumber 008B  
                 __end_of_MTouchDecode 36DA                             _MTouchInit 363A  
                                ?_Beep 0001                         SendMessage@Msg 0001  
                                _DC1B0 007DEC                                  _DC1B1 007DED  
                                _DC2B0 007B34                                  _DC2B1 007B35  
                          _write_1wire 24FC                          ___fltol@sign1 00BA  
                      __end_of___fladd 1728                                  ?_main 0001  
                      __end_of___awdiv 2A5A                        __end_of___lbdiv 3416  
                      __end_of___flneg 3544                                  _EEADR 000FA9  
                      __end_of___awmod 2BF6                        __end_of___lbmod 351E  
                      __end_of___flmul 21FE                        __end_of___flsub 33E2  
                      __end_of___fltol 2680                                  _BRGH1 007D62  
                                _CREN1 007D5C                        __end_of___lldiv 2D68  
                                _FERR1 007D5A                        ___awdiv@divisor 008F  
                      __end_of___llmod 2F0C                                  _LATC0 007C58  
                                _LATC2 007C5A                                  _LATC3 007C5B  
                                _LATE0 007C68                                  _LATE1 007C69  
                                _LATE2 007C6A                                  i1l211 36B8  
                                i1l212 36B6                                  i1l222 3596  
                                i1l225 35AA                                  i1l405 03B8  
                                i2l116 1E12                                  i1l199 36C2  
                                i1l480 03CA                                  i1l474 0396  
                                i2l395 2DB8                                  i2l396 2DB0  
                                i2l397 2DB2                                  _OERR1 007D59  
                                i2l398 2DBA                                  i2l399 2DC0  
                      ___awdiv@counter 0091                                  _RCREG 000FAE  
                                _SPEN1 007D5F                                  _SREN1 007D5D  
                                _SPBRG 000FAF                                  _PORTC 000F82  
                                _PORTD 000F83                        ks0108PutChar@x_ 00A2  
                      ks0108PutChar@y_ 00A3                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRMT1 007D61  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TXEN1 007D65                                  _SYNC1 007D64  
                                _TXREG 000FAD                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                          ___awtofl@sign 0095  
                       __CFG_EBTR3$OFF 000000                          __CFG_WRTB$OFF 000000  
                                ___gie 00D1                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                         Read_b_eep@badd 0001  
                      __end_of_getbyte 36C0           __end_of_MTouchAcquisitionCVD 130C  
                       __CFG_EBTRB$OFF 000000                        __end_of_dpowers FFF7  
               Write_b_eep@GIE_BIT_VAL 0007                                  _dummy 0042  
              __end_of_ProcessMessages 2CE8                                  _scale 0C5E  
                      __end_of_isdigit 361C                     __CFG_MCLRE$EXTMCLR 000000  
             __size_of_MTouchSetButton 008C                       ks0108SetDot@data 0094  
                                tablat 000FF5               __size_of_MTouchSetSensor 0172  
                     ProcessMessages@i 0087                                  status 000FD8  
                      __end_of_putbyte 36CC                        __end_of_sprintf 0B8C  
                       __CFG_HFOFST$ON 000000                        ___lbdiv@divisor 008B  
                         __end_ofPL100 1ECE                           __end_ofPL110 1C08  
                         __end_ofPL102 157C                           __end_ofPL120 1D7E  
                         __end_ofPL112 2016                           __end_ofPL104 0F12  
                         __end_ofPL130 274A                           __end_ofPL122 0C54  
                         __end_ofPL114 0C48                           __end_ofPL106 0C3A  
                         __end_ofPL132 0C5E                           __end_ofPL124 2228  
                         __end_ofPL116 221C                           __end_ofPL108 1D74  
                         __end_ofPL134 3024                           __end_ofPL126 268C  
                         __end_ofPL118 1748                           __end_ofPL136 31BE  
                         __end_ofPL128 232E                           __end_ofPL138 2CF2  
                      ___lbdiv@counter 008D                         ??_InitMessages 0087  
                ??_MTouchDecodeButtons 0087       MTouchAcquisition@pPreviousSensor 007B  
                         __end_of_Beep 366E                        __initialization 2BF6  
                         __end_of_main 29B6                             _Read_b_eep 35DC  
                        ??_SendMessage 0001                       __end_of_Busy_eep 36D2  
                         ?_uart16_init 0001                                 ??_Beep 0087  
                   ks0108ReadData@data 008E                                 ??_main 00C2  
                     set_ee_default@c1 000D              __size_of_InitializeSystem 0212  
                        __activetblptr 000002                   __end_of_crc_mb_check 307E  
              __end_of_ks0108WriteData 32E4                         __CFG_PLLCFG$ON 000000  
                      LabelCreate@font 00B6                            _LabelCreate 2A5A  
              MTouchSensorDecode@delta 006F                   __size_of__tdiv_to_l_ 00DE  
                          _LabelSetTxt 232E                     _MTouchSensorDecode 18FA  
                 __size_of_crc_mb_calc 0060                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                                 _ADCON2 000FC0  
                 __size_of_crc_mb_init 000E                       ___llmod@dividend 0087  
                               ?_scale 00A9                                 _ADRESH 000FC4  
                               _EEADRH 000FAA                                 _ADRESL 000FC3  
                               _BRG161 007DC3                                 _EEDATA 000FA8  
                               _CCPR1L 000FBE                                 _CCPR2L 000F67  
                     __end_of___flpack 273E                                 _CCPR4L 000F58  
                               _EECON2 000FA7                       ___awdiv@dividend 008D  
                     __end_of___awtofl 3254                                 _ANSELA 000F38  
                               _ANSELB 000F39                                 _ANSELC 000F3A  
                               _ANSELD 000F3B                                 _ANSELE 000F3C  
              __size_of_set_ee_default 0056                       __end_of___lltofl 3474  
                               i1l1317 3316                                 i1l1286 36CC  
                               i1l6131 2F62                                 i1l6125 2F1E  
                               i1l6227 30C2                                 i1l6219 3082  
                               i1l6261 3046                                 i1l6271 307C  
                               i1l6255 302E                                 i1l5731 34A4  
                               i1l6285 30F6                                 i1l5741 35D2  
                               i1l6279 30DE                                 i1l5735 34C4  
                               i1l6703 00CA                                 i1l6801 0298  
                               i1l5739 35B8                                 i1l6731 016E  
                               i1l6715 0136                                 i1l6813 02BA  
                               i1l6725 0150                                 i1l6709 010E  
                               i1l6807 02B6                                 i1l6753 01BE  
                               i1l6737 0172                                 i1l6851 0330  
                               i1l6771 023A                                 i1l6845 032C  
                               i1l6765 01FA                                 i1l6693 00AA  
                               i1l6677 007E                                 i1l6871 037E  
                               i1l6839 030E                                 i1l6759 01DC  
                               i1l6777 023E                                 i1l6769 0210  
                               i1l6867 036E                                 i1l6875 0386  
                               i1l6869 0376                                 i1l6879 039C  
                               i2l8411 2D8C                                 _HI_ISR 0008  
                               i2l8261 1DA6                                 i2l8263 1DB2  
                               i2l8291 1E96                                 i2l8283 1E70  
                               i2l7901 19C8                                 i2l8277 1E0C  
                               i2l8269 1DB4                                 i2l7911 1A0A  
                               i2l7903 19DC                                 i2l8289 1E8E  
                               i2l7915 1A20                                 i2l7909 1A04  
                               i2l7917 1A38                                 i2l7891 1966  
                               i2l7893 198C                                 i2l7885 1940  
                               i2l7887 1956                                 i2l7899 19C2  
                            ??_DelayMs 0087                    ?_MTouchSensorDecode 0069  
                               _OSCCON 000FD3                                 _BSemOn 3696  
        MTouchUpdateSensorAverage@rate 0062                            read_1wire@i 008C  
                       LabelSetTxt@str 00AC                                 _LO_ISR 0018  
                               _SWDTEN 007E88                         __CFG_XINST$OFF 000000  
                               _RxBuff 0300                       __end_of__powers_ F483  
                               ___flge 31BE                              ??___fladd 01C8  
                               ___wmul 356A                              ??___awdiv 0091  
                            ??___lbdiv 008C                              ??___flneg 008B  
                       __CFG_STVREN$ON 000000                              ??___awmod 008B  
                            ??___lbmod 0088                              ??___flmul 009E  
                               _eedata F31B                              ??___flsub 00C2  
                            ??___fltol 00B6                              ??___lldiv 008F  
                            ??___llmod 008F                                 _crc_mb 30D4  
                               _font13 F483                            ?_MTouchInit 0001  
                 ??_MTouchSensorDecode 006B                                 _fround 1748  
                               clear_0 2BFE                                 clear_1 2C12  
                               clear_2 2C24                                 clear_3 2C30  
                               clear_4 2C3C                                 clear_5 2C48  
                     ___awdiv@quotient 0093            MTouchAcquisitionCVD@curTris 0071  
                      ___awmod@divisor 0089                         sprintf@vd_2389 0276  
                               _ow_bit 00D3                             _ks0108Fill 3416  
                           _ks0108Init 3254                        ___awmod@counter 008B  
                            ??_getbyte 0001                  ks0108ReadData@incXAdd 008D  
          MTouchAcquisitionCVD@prevLat 006C                           __pdataCOMRAM 0044  
                            ??_isdigit 0087                       __end_of_ow_delay 3686  
                  __end_of_SendMessage 3696              MTouchSensorDecode@pSensor 0069  
                         __mediumconst F21A                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                            ??_putbyte 0001                              ??_sprintf 01DF  
                     ?_ProcessMessages 0001                       ___lbdiv@dividend 008C  
                MTouchAcquisition@data 0077                             ___fladd@f1 00BA  
                           ___fladd@f2 00BE                             ___flge@ff1 0087  
                           ___flge@ff2 008B              MTouchDecodeButtons@decode 008F  
           ?_MTouchUpdateSensorAverage 0060                        ___lbmod@divisor 0087  
                           __accesstop 0060                __end_of__initialization 2C6E  
                      ___lbmod@counter 0089                        __CFG_PBADEN$OFF 000000  
                           ___flneg@f1 0087                  __size_of_MTouchDecode 0004  
                           ___flmul@f1 0096                             ___flmul@f2 009A  
                           ___flsub@f1 01CF                             ___flsub@f2 01D3  
                           ___fltol@f1 00B2                    tsk_display@f_prev_T 0044  
                           ___awtofl@c 0091                      ??_MTouchSetButton 0089  
                    ??_MTouchSetSensor 0092                             _f_T_salona 00C2  
                       __pcstackCOMRAM 0001                __size_of_ks0108ClearDot 004E  
                         ?_tsk_ds18b20 0001                             ___lltofl@c 0091  
                 _MTouchAcquisitionCVD 114E                            ?_Read_b_eep 0001  
                        __end_of_scale 0E34                  __end_of_ks0108PutChar 20FA  
                           __end_ofPL2 0E50                             __end_ofPL4 0E6C  
                           __end_ofPL6 1132                             __end_ofPL8 0BC8  
                     ___lbdiv@quotient 008E                          ?_ds18b20_read 01CF  
              __size_of_ks0108ReadData 0068                          ds18b20_read@f 01D7  
                        ds18b20_read@i 01DC                          ds18b20_read@t 01D5  
                           __div_to_l_ 2228                       ?_ks0108WriteData 0001  
                         ?_tsk_display 0001                   __end_of_InitMessages 33A6  
                           _beep_count 0040                     ds18b20_read@dowcrc 01DB  
                         _MTouchDecode 36D6                        __div_to_l_@exp1 0098  
                           _beep_timer 00C8                        __div_to_l_@cntr 0097  
                         sprintf@integ 027A                                ??_scale 00AD  
                         ?_tsk_process 0001                        __div_to_l_@quot 0093  
                         sprintf@width 0285                             __pbssBANK0 00C2  
                           __pbssBANK1 0100                             __pbssBANK2 0200  
                           __pbssBANK3 0300                                ?_HI_ISR 0001  
                  __size_of_MTouchInit 001C                                ?_BSemOn 0001  
                            ?_Busy_eep 0001                                ?_LO_ISR 0001  
    __end_of_MTouchUpdateSensorAverage 27C4            tsk_ds18b20@_interrupt_state 00D4  
          MTouchSetButton@sensorNumber 0087                     _ks0108WriteCommand 3544  
                   __size_of_read___ee 0026                          __div_to_l_@f1 0087  
                        __div_to_l_@f2 008B                  ks0108WriteCommand@cmd 0088  
                      crc_mb_calc@code 0008                        crc_mb_calc@flag 0006  
                            BSemOn@Sem 0001                        crc_mb_calc@next 0001  
                   __CFG_CCP2MX$PORTC1 000000               MTouchDecodeButtons@state 008E  
                         init_1wire@st 008B                                LO_ISR@i 0023  
                              ?___flge 0087                  ?_MTouchAcquisitionCVD 0060  
                              ?___wmul 0087                    ?_ks0108WriteCommand 0087  
                   __CFG_CCP3MX$PORTB5 000000                  __size_of_crc_mb_check 005A  
                              ?_crc_mb 0009  MTouchDecodeButtons@pMostPressedButton 0090  
                      crc_mb_check@crc 0011                        crc_mb_check@cnt 000B  
                          _SendMessage 3686                              ?___flpack 0087  
                              ?_fround 00A9                              ?___awtofl 0091  
                       ??_ds18b20_read 01D3                          ??_Write_b_eep 0004  
                          ?_ks0108Fill 0001                            ?_ks0108Init 0001  
                         ?_write_1wire 0001                              ?___lltofl 0091  
                     _InitializeSystem 0F12                   __size_of_uart16_init 001E  
                      __CFG_WDTEN$SWON 000000                        LabelSetTxt@temp 00B0  
                    ks0108PutChar@base 00A8                            LO_ISR@lcAdr 0021  
                 ??_ks0108WriteCommand 0088                      ks0108PutChar@xCnt 009F  
                    ks0108PutChar@yCnt 00A0                      ks0108PutChar@mask 00A7  
                    ks0108PutChar@mode 0097                      ks0108PutChar@temp 00A1  
                       _set_ee_default 307E                    __size_of_Read_b_eep 0022  
                              _DelayMs 34CE                        __size_of_HI_ISR 2DD2  
                           ??_Busy_eep 0001                        __size_of_BSemOn 0010  
                      __size_of_LO_ISR 03D8           MTouchSetSensor@channelNumber 008C  
                      crc_mb_init@code 0001                           _crc_mb_check 3024  
                      __CFG_PWRTEN$OFF 000000                      __end_of__npowers_ F44F  
                              __Hparam 0000                             _scale$3206 00AD  
                              __Lparam 0000                          ?_ks0108Enable 0001  
                            ?_ow_delay 0087                             _init_1wire 289A  
                        InitMessages@i 0087                          ?_ks0108GotoXY 0089  
                           _read_1wire 27F4                          ?_ks0108SetDot 0090  
                      __size_of___flge 004C                                ___fladd 157C  
                              ___awdiv 29C6                                ___lbdiv 33E2  
                              ___flneg 351E                                ___awmod 2B72  
                              ___lbmod 34F8                                ___flmul 2120  
                              ___flsub 33A6                                ___fltol 25CA  
                              ___lldiv 2CF2                        __size_of___wmul 0026  
                              ___llmod 2EAA                        __size_of_crc_mb 0050  
     MTouchUpdateSensorAverage@pSensor 0060                             ??___flpack 008D  
               __size_of_ds18b20_start 0040                                __pcinit 2BF6  
                           ??___awtofl 0095                        __size_of_fround 0178  
                              __ramtop 1000                             ??___lltofl 0095  
                              __ptext0 2932                                __ptext1 3328  
                              __ptext2 36D6                                __ptext3 137C  
                              __ptext4 3656                                __ptext5 1C08  
                              __ptext6 3172                                __ptext7 1ECE  
                              __ptext8 24FC                                __ptext9 27F4  
                              _lb_temp 0199                                _getbyte 36B4  
                          ?__div_to_l_ 0087                           ?_LabelCreate 00B2  
                              _dpowers FFCF                              _T2CONbits 000FBA  
                    __end_of_read___ee 35DC                                _isdigit 35FE  
                              _buttons 0200                       ___awmod@dividend 0087  
                            _T4CONbits 000F51                           ?_LabelSetTxt 00AA  
                         read___ee@adr 0006                                _scratch 0100  
                          ow_delay@del 0087                 __end_of_set_ee_default 30D4  
                         read___ee@var 0008                                crc_mb@i 000F  
        MTouchAcquisitionCVD@curIOMask 0073                    __end_of_Write_b_eep 3328  
                              _sensors 0400                      timed_getc@timeout 0001  
                          ks0108Fill@i 008F                            ks0108Fill@j 008E  
                              _putbyte 36C0                                _sprintf 03F4  
                       __pintcode_body 2D68                   end_of_initialization 2C6E  
          __end_of_MTouchDecodeButtons 155E                          __Lmediumconst F21A  
                              int_func 2D68           MTouchAcquisitionCVD@prevTris 0068  
                  __size_of_ks0108Fill 0030                    __size_of_ks0108Init 004A  
                      ___lldiv@divisor 008B                         ??_ks0108Enable 0087  
                      ___lldiv@counter 0093                         ??_ks0108GotoXY 008A  
                       _ks0108ClearDot 2FCA                 ??_MTouchAcquisitionCVD 0064  
                           ??_ow_delay 0089                         ??_ks0108SetDot 0091  
                              postdec1 000FE5                                postdec2 000FDD  
                              postinc0 000FEE                                postinc1 000FE6  
                              postinc2 000FDE                         read_1wire@data 008B  
                         write_1wire@i 008C                           ??_MTouchInit 0087  
                           _timed_getc 3590                         __tdiv_to_l_@f1 0087  
                       __tdiv_to_l_@f2 008B                   __size_of_tsk_ds18b20 013E  
                        ??__tdiv_to_l_ 008F                  __size_of_InitMessages 003E  
                       ks0108Fill@mode 008D                         _ks0108ReadData 2E42  
                        ??_crc_mb_calc 0002                    ks0108PutChar@p_font 0095  
                        ??_crc_mb_init 0001             MTouchDecodeButtons@pButton 0093  
                     ___lbmod@dividend 0088                              _TRISAbits 000F92  
                            _TRISBbits 000F93                              _TRISCbits 000F94  
                            _TRISEbits 000F96             MTouchDecodeButtons@pSensor 008B  
                      ?_set_ee_default 0001                   __size_of_tsk_display 0068  
                      _MTouchSetButton 2AE6                        _MTouchSetSensor 1A88  
                        _ds18b20_start 3172                            ___lbmod@rem 008A  
                          ___flmul@exp 00A2            ??_MTouchUpdateSensorAverage 0064  
                 __size_of_tsk_process 0040                     __end_of_MTouchInit 3656  
                 __end_of_ds18b20_read 1FFA                         __end_of_HI_ISR 2DDA  
                       __end_of_BSemOn 36A6                         __end_of_LO_ISR 03F0  
               __end_of_ks0108ClearDot 3018  MTouchAcquisitionCVD@prevChannelNumber 006A  
                          _CCP4CONbits 000F57                    __size_of__div_to_l_ 00FA  
                          ?_init_1wire 0001                           _InitMessages 3368  
                          ?_read_1wire 0001                          LabelCreate@lb 00B2  
                        LabelCreate@ln 00B8                           ??_Read_b_eep 0003  
                       __end_of___flge 320A                 __end_of_ks0108ReadData 2EAA  
                       __end_of___wmul 3590                         ks0108PutChar@s 009A  
                           _write___ee 34A2                         ks0108PutChar@x 00A6  
                       ks0108PutChar@y 00A5                         __end_of_eedata F41B  
                        __pidataCOMRAM 36D2                    ks0108WriteData@data 0089  
          __size_of_MTouchSensorDecode 0154                         __end_of_crc_mb 3124  
                       __end_of_font13 FFCF                            _Write_b_eep 32E4  
                       __end_of_fround 18C0                     ks0108ClearDot@data 0094  
                     _delayus_variable 00D2                   __size_of_write_1wire 00B6  
                          __end_ofPL10 25CA                            __end_ofPL20 0EBE  
                          __end_ofPL12 0E82                            __end_ofPL30 1140  
                          __end_ofPL22 0ED2                            __end_ofPL14 0E90  
                          __end_ofPL40 0BEA                            __end_ofPL32 289A  
                          __end_ofPL24 0BDC                            __end_ofPL16 27F4  
                          __end_ofPL50 0EF0                            __end_ofPL42 114E  
                          __end_ofPL34 23DE                            __end_ofPL26 1A66  
                          __end_ofPL18 18D6                            __end_ofPL60 2932  
                          __end_ofPL52 0EFE                            __end_ofPL44 1330  
                          __end_ofPL36 131E                            __end_ofPL28 18E8  
                          __end_ofPL70 0C2E                            __end_ofPL62 0C02  
                          __end_ofPL54 23FA                            __end_ofPL46 1340  
                          __end_ofPL38 1A76                            __end_ofPL80 18FA  
                          __end_ofPL72 0F08                            __end_ofPL64 1358  
                          __end_ofPL56 291A                            __end_ofPL48 1D66  
                          __end_ofPL90 241E                            __end_ofPL82 173A  
                          __end_ofPL74 2410                            __end_ofPL66 3172  
                          __end_ofPL58 156C                            __end_ofPL92 1A88  
                          __end_ofPL84 136A                            __end_ofPL76 1EBE  
                          __end_ofPL68 0C18                            __end_ofPL94 29C6  
                          __end_ofPL86 2120                            __end_ofPL78 210E  
                          __end_ofPL96 220E                            __end_ofPL88 137C  
                          __end_ofPL98 2008                    start_initialization 2BF6  
                  __end_of__tdiv_to_l_ 24FC                             HI_ISR@beep 00CE  
       MTouchAcquisitionCVD@prevIOMask 0070                         ?_ds18b20_start 0001  
                      set_ee_default@c 000C                        set_ee_default@i 000E  
                  __end_of_crc_mb_calc 2F6C               ks0108PutChar@_fontHeight 009B  
                  __end_of_crc_mb_init 36B4                               ??_HI_ISR 0080  
  MTouchAcquisitionCVD@pPreviousSensor 0062                               ??_BSemOn 0001  
                   __end_of_Read_b_eep 35FE                               ??_LO_ISR 0013  
                      ___llmod@divisor 008B               __end_of_InitializeSystem 1124  
                      ___llmod@counter 008F                          LabelSetTxt@lb 00AA  
                      ?_ks0108ClearDot 0090                      __size_of_Busy_eep 0006  
             __size_of_ProcessMessages 0070                               ??___flge 008F  
                             ??___wmul 008B                               ??_crc_mb 000C  
                          ?_timed_getc 0001                        ?_ks0108ReadData 0001  
                         ?_SendMessage 0001                               ??_fround 00AD  
            _MTouchUpdateSensorAverage 274A                           ??_ks0108Fill 008D  
                         ??_ks0108Init 0090                    MTouchSetSensor@tris 0087  
                    __size_of___flpack 00B2                __end_of_MTouchSetButton 2B72  
                           fround@prec 00B9                      __size_of___awtofl 004A  
                          __pbssBIGRAM 0400                __end_of_MTouchSetSensor 1BFA  
                    __size_of___lltofl 002E                            __pbssCOMRAM 0024  
                        __pcstackBANK0 0060                          __pcstackBANK1 01C8  
                        __pcstackBANK2 0268                   __end_of_ks0108Enable 34A2  
                 __size_of_LabelCreate 008C                    __end_of__stringdata FFFF  
                 __end_of_ks0108GotoXY 2FCA                    __end_of_dscrc_table F31B  
                  __size_of_init_1wire 0066                   __end_of_ks0108SetDot 315A  
                         _isdigit$2795 0088                   __size_of_LabelSetTxt 009E  
                  __size_of_read_1wire 008E               __size_of_ks0108WriteData 0046  
                          putbyte@byte 0001        MTouchAcquisition@pCurrentSensor 007E  
                             ?_DelayMs 0001                            sprintf@_val 027E  
                          sprintf@flag 0283                            sprintf@fval 0289  
               __size_of_ks0108PutChar 00E4                 ks0108WriteCommand@chip 0087  
                          sprintf@prec 028D                     __end_of_ks0108Fill 3446  
                   __end_of_ks0108Init 329E                              __pintcode 0008  
                        __pmediumconst F21A                               ?___fladd 00BA  
                             ?___awdiv 008D                               ?___lbdiv 008B  
                             ?___flneg 0087                               ?___awmod 0087  
                             ?___lbmod 0087                               ?___flmul 0096  
                             ?___flsub 01CF                               ?___fltol 00B2  
                             ?___lldiv 0087                               ?___llmod 0087  
                            __npowers_ F41B                      __size_of_ow_delay 0018  
                        ??_uart16_init 0087                            ?_write___ee 0008  
                          __pintcodelo 0018                       __CFG_PRICLKEN$ON 000000  
                          __tdiv_to_l_ 241E                               ?_getbyte 0001  
                         ??__div_to_l_ 008F                              __sys_tick 00C6  
                             ?_isdigit 0001                            _crc_mb_calc 2F0C  
                          _crc_mb_init 36A6                               Beep@ms10 0087  
                      ??_ds18b20_start 008D                              _curr_task 0041  
                __size_of_ds18b20_read 012C                              _read___ee 35B6  
                             ?_putbyte 0001                               ?_sprintf 01D7  
          __size_of_ks0108WriteCommand 0026                   MTouchDecodeButtons@i 008D  
                       __size_of_scale 01D6                    __size_of_timed_getc 0026  
                       ___wmul@product 008B                               _LATAbits 000F89  
                             _LATBbits 000F8A                               _LATCbits 000F8B  
                             DelayMs@i 0088                               _IPR1bits 000F9F  
                             _PIE1bits 000F9D                               _IPR5bits 000F7F  
                             _PIE5bits 000F7D                               i1u454_25 3322  
                             i1u454_26 3324                               _PIR1bits 000F9E  
                   __end_of__div_to_l_ 2322                              crc_mb@CRC 0010  
                             _PIR5bits 000F7E                               i2u910_45 1E82  
                             i2u763_45 27D4                               i2u763_46 27DA  
                             i2u763_47 27E8                               _RCONbits 000FD0  
                     __CFG_WDTPS$32768 000000         MTouchDecodeButtons@sensorState 0092  
             MTouchSetSensor@threshold 008D                           LO_ISR@lcData 0022  
                    ??_ProcessMessages 0087                     crc_mb_check@buffer 0009  
                        _ks0108PutChar 2016                       ??_set_ee_default 000C  
                           _ADCON0bits 000FC2                            __stringdata FFF7  
                           _ADCON2bits 000FC0                      ___wmul@multiplier 0087  
                          _dscrc_table F21B                           _ds18b20_read 1ECE  
                        ks0108GotoXY@x 008C                          ks0108GotoXY@y 0089  
                      Write_b_eep@badd 0001                        Write_b_eep@bdat 0003  
                     ?_MTouchSetButton 0087                    __end_of_uart16_init 363A  
                     ?_MTouchSetSensor 0087                          ks0108SetDot@x 0093  
                        ks0108SetDot@y 0090                           LabelCreate@i 00BB  
                         LabelCreate@x 00B4                           LabelCreate@y 00B5  
 MTouchAcquisitionCVD@curChannelNumber 006B                             ?_read___ee 0006  
                            copy_data0 2C62                     MTouchAcquisition@i 007D  
                  __size_of_write___ee 002C                               _Busy_eep 36CC  
                    _MTouchAcquisition 1D7E                       __size_of_DelayMs 002A  
                             _Messages 0024                             _EECON1bits 000FA6  
                             __Hparam0 0000                     ?_MTouchAcquisition 0001  
              ks0108PutChar@_fontWidth 009C             MTouchSetSensor@chargeDelay 0091  
                      write_1wire@data 008B                      ??_ks0108WriteData 0089  
                         LabelSetTxt@i 00B1                               __Lparam0 0000  
                         ??_init_1wire 0089           __size_of_MTouchDecodeButtons 01E2  
                        ??_tsk_ds18b20 01DD                               _RxTxBuff 0119  
                   __CFG_BOREN$SBORDIS 000000                           ??_read_1wire 0089  
                    __CFG_P2BMX$PORTD2 000000                     MTouchSetSensor@lat 0089  
        __size_of_MTouchAcquisitionCVD 01BE                    ??_MTouchAcquisition 0074  
                     __size_of___fladd 01AC                       __size_of___awdiv 0094  
                     __size_of___lbdiv 0034                       __size_of___flneg 0026  
           MTouchAcquisitionCVD@curLat 006E                       __size_of___awmod 0084  
                     __size_of___lbmod 0026                       __size_of___flmul 00DE  
                     __size_of___flsub 003C                       __size_of___fltol 00B6  
                     __size_of___lldiv 0076                       __size_of___llmod 0062  
                             ___flpack 268C                         ?_ks0108PutChar 0095  
                             ___awtofl 320A                            _fround$3204 00B5  
                          _fround$3205 00B1                           ?_Write_b_eep 0001  
                __size_of_ks0108Enable 002E             MTouchAcquisitionCVD@result 0066  
                             ___lltofl 3446             MTouchSetSensor@ioBitNumber 008B  
                 __size_of_SendMessage 0010                  __size_of_ks0108GotoXY 005E  
                __size_of_ks0108SetDot 0036            MTouchSetSensor@sensorNumber 0094  
                        ??_tsk_display 00C2                             sprintf@exp 0287  
                     __size_of_getbyte 000C                       __size_of_isdigit 001E  
  InitializeSystem@pll_startup_counter 0097                          crc_mb_check@i 0010  
   __size_of_MTouchUpdateSensorAverage 007A                          ?_MTouchDecode 0001  
                             __ptext10 289A                               __ptext11 366E  
                             __ptext20 34F8                               __ptext12 320A  
                             __ptext21 33E2                               __ptext13 2DDA  
                             __ptext30 157C                               __ptext22 2120  
                             __ptext14 03F4                               __ptext31 268C  
                             __ptext23 241E                               __ptext15 0C5E  
                             __ptext40 2016                               __ptext32 351E  
                             __ptext24 2228                               __ptext16 2B72  
                             __ptext41 3124                               __ptext33 31BE  
                             __ptext25 3446                               __ptext17 29C6  
                             __ptext50 361C                               __ptext42 2FCA  
                             __ptext34 3254                               __ptext26 2EAA  
                             __ptext18 35FE                               __ptext51 1A88  
                             __ptext43 329E                               __ptext35 3416  
                             __ptext27 2CF2                               __ptext19 1748  
                             __ptext60 32E4                               __ptext52 2AE6  
                             __ptext44 2E42                               __ptext36 34CE  
                             __ptext28 25CA                               __ptext61 36CC  
                             __ptext53 363A                               __ptext45 2F6C  
                             __ptext37 2C78                               __ptext29 33A6  
                             __ptext70 3696                               __ptext62 35B6  
                             __ptext54 3368                               __ptext46 3544  
                             __ptext38 2A5A                               __ptext63 35DC  
                             __ptext47 3474                               __ptext39 232E  
                             __ptext72 1D7E                               __ptext64 36C0  
                             __ptext56 3590                               __ptext48 356A  
                             __ptext73 18FA                               __ptext65 3024  
                             __ptext57 36B4                               __ptext49 0F12  
                             __ptext74 274A                               __ptext66 30D4  
                             __ptext58 307E                               __ptext75 114E  
                             __ptext67 36A6                               __ptext59 34A2  
                             __ptext68 2F0C                               __ptext69 3686  
                        ??_tsk_process 0095                               __powers_ F44F  
                   __end_of_init_1wire 2900              __end_of_MTouchAcquisition 1EA8  
                     ??_ks0108ClearDot 0091                       __size_of_putbyte 000C  
                     __size_of_sprintf 0798                     __end_of_read_1wire 2882  
                        __size_of_Beep 0018                          __size_of_main 0084  
                    ?_InitializeSystem 0001                       ??_ks0108ReadData 008D  
                        read___ee@byte 0009                     ??_InitializeSystem 0097  
                             _ow_delay 366E                           _ks0108Enable 3474  
                         _ks0108GotoXY 2F6C                      tsk_ds18b20@f_temp 0032  
           __end_of_MTouchSensorDecode 1A4E                      tsk_ds18b20@_state 00CC  
   MTouchAcquisitionCVD@pCurrentSensor 0060                           _ks0108SetDot 3124  
                         ??_timed_getc 0001                            _uart16_init 361C  
                    tsk_ds18b20@ow_err 00D5                          ??_write_1wire 0089  
                  __end_of_tsk_ds18b20 1D46                               _sys_tick 003C  
                ___flmul@f3_as_product 00A3                           crc_mb@buffer 0009  
                           DelayMs@cnt 0087                            _OSCTUNEbits 000F9B  
                           _INTCONbits 000FF2                 MTouchSetButton@pButton 008C  
                       ??_MTouchDecode 0095            MTouchSetSensor@oversampling 008F  
                             isdigit@c 0089                               scale@scl 00B1  
                          ??_read___ee 000A                      _BroadcastMessages 00D0  
                  __end_of_tsk_display 2E42                               intlevel1 0000  
                             intlevel2 0000                              sprintf@ap 0270  
                     __tdiv_to_l_@exp1 0097                              sprintf@vd 0272  
                     __tdiv_to_l_@cntr 0096                              sprintf@sp 01D7  
                     __tdiv_to_l_@quot 0092                           crc_mb_calc@i 0007  
                   __end_of_timed_getc 35B6                 MTouchSetSensor@pSensor 0095  
                     ___lldiv@dividend 0087                          _timeout_error 0043  
                        ?_crc_mb_check 0009                    __end_of_tsk_process 3368  
                ks0108PutChar@pChImage 009D                        ??_ks0108PutChar 0098  
                      ks0108ClearDot@x 0093                        ks0108ClearDot@y 0090  
                         ??_write___ee 000C                            crc_mb@count 000B  
                MTouchSetButton@decode 0088                           ?__tdiv_to_l_ 0087  
                        ??_LabelCreate 00B9                               sprintf@c 028F  
                             sprintf@f 01D9                  tsk_ds18b20@_prev_tick 00CA  
                     ___lldiv@quotient 008F                           ?_crc_mb_calc 0001  
                        ??_LabelSetTxt 00AE                           ?_crc_mb_init 0001  
                    __CFG_T3CMX$PORTC0 000000                    __end_of_write_1wire 25B2  
   MTouchAcquisition@startSensorNumber 00CF                   ks0108PutChar@chWidth 00A4  
           __size_of_MTouchAcquisition 012A                           ___fladd@exp1 01CE  
                         ___fladd@exp2 01CD                         ??_crc_mb_check 000C  
                         ___fladd@sign 01CC                      __CFG_FOSC$INTIO67 000000  
                   __end_of_write___ee 34CE                        _ProcessMessages 2C78  
         MTouchAcquisition@pLastSensor 0079  
