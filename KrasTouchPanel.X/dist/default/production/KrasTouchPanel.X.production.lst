

Microchip Technology PIC18 PRO Macro Assembler V1.33 build 59893 
                                                                                               Wed Jul 27 13:37:07 2016

Microchip Technology Omniscient Code Generator (PRO mode) build 59893
     1                           	processor	18F46K22
     2                           	fnconf	param0,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    65                           	psect	param0,global,class=BANK0,space=1,delta=1
    66                           	psect	pa_nodes,global,class=CODE,delta=1
    67  0000                     tblptrh	equ	0xFF7
    68                           tblptrl	equ	0xFF6
    69                           tablat	equ	0xFF5
    70                           prodh	equ	0xFF4
    71                           prodl	equ	0xFF3
    72                           intcon	equ	0xFF2
    73                           wreg	equ	0xFE8
    74                           indf1	equ	0xFE7
    75                           postinc1	equ	0xFE6
    76                           postdec1	equ	0xFE5
    77                           fsr1h	equ	0xFE2
    78                           fsr1l	equ	0xFE1
    79                           indf2	equ	0xFDF
    80                           postinc2	equ	0xFDE
    81                           postdec2	equ	0xFDD
    82                           fsr2h	equ	0xFDA
    83                           fsr2l	equ	0xFD9
    84                           status	equ	0xFD8
    85                           
    86                           	psect	eeprom_data
    87  F00000  01 00 01 00 02 00 16 06 	db	1,0,1,0,2,0,22,6	;# 
    88  F00008  25 0B 16 0F 16 06 25 0A 	db	37,11,22,15,22,6,37,10	;# 
    89  F00010  14 00 00 00 00 00 00 00 	db	20,0,0,0,0,0,0,0	;# 
    90  F00018  80 3F 00 00 00 00 00 00 	db	128,63,0,0,0,0,0,0	;# 
    91  F00020  80 3F 00 00 00 00 00 00 	db	128,63,0,0,0,0,0,0	;# 
    92  F00028  80 3F 16 06 25 00 00 00 	db	128,63,22,6,37,0,0,0	;# 
    93  F00030  00 00 00 00 00 00 80 3F 	db	0,0,0,0,0,0,128,63	;# 
    94  F00038  08 07 B8 0B 00 00 40 06 	db	8,7,184,11,0,0,64,6	;# 
    95  F00040  F0 0A 00 00 66 66 26 3F 	db	240,10,0,0,102,102,38,63	;# 
    96  F00048  1B 2F 5D 3D 33 33 F3 3F 	db	27,47,93,61,51,51,243,63	;# 
    97  F00050  66 66 26 3F 42 60 65 3C 	db	102,102,38,63,66,96,101,60	;# 
    98  F00058  00 00 80 40 00 80 BB 45 	db	0,0,128,64,0,128,187,69	;# 
    99  F00060  00 00 00 41 00 00 00 42 	db	0,0,0,65,0,0,0,66	;# 
   100  F00068  F0 0A 02 A4 70 7D 3F A4 	db	240,10,2,164,112,125,63,164	;# 
   101  F00070  70 7D 3F 00 00 00 00 00 	db	112,125,63,0,0,0,0,0	;# 
   102  F00078  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
   103  F00080  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
   104  F00088  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
   105  F00090  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
   106  F00098  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
   107  F000A0  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
   108  F000A8  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
   109  F000B0  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
   110  F000B8  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
   111  F000C0  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
   112  F000C8  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
   113  F000D0  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
   114  F000D8  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
   115  F000E0  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
   116  F000E8  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
   117  F000F0  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
   118  F000F8  00 00 00 00 00 00 00 00 	db	0,0,0,0,0,0,0,0	;# 
   119  0000                     tblptrh	equ	0xFF7
   120                           tblptrl	equ	0xFF6
   121                           tablat	equ	0xFF5
   122                           prodh	equ	0xFF4
   123                           prodl	equ	0xFF3
   124                           intcon	equ	0xFF2
   125                           wreg	equ	0xFE8
   126                           indf1	equ	0xFE7
   127                           postinc1	equ	0xFE6
   128                           postdec1	equ	0xFE5
   129                           fsr1h	equ	0xFE2
   130                           fsr1l	equ	0xFE1
   131                           indf2	equ	0xFDF
   132                           postinc2	equ	0xFDE
   133                           postdec2	equ	0xFDD
   134                           fsr2h	equ	0xFDA
   135                           fsr2l	equ	0xFD9
   136                           status	equ	0xFD8
   137                           
   138                           	psect	mediumconst
   139  00F3AA                     __pmediumconst:
   140                           	opt stack 0
   141  00F3AA  00                 	db	0
   142  00F3AB                     _eedata:
   143                           	opt stack 0
   144  00F3AB  01                 	db	1
   145  00F3AC  00                 	db	0
   146  00F3AD  01                 	db	1
   147  00F3AE  00                 	db	0
   148  00F3AF  02                 	db	2
   149  00F3B0  00                 	db	0
   150  00F3B1  16                 	db	22
   151  00F3B2  06                 	db	6
   152  00F3B3  25                 	db	37
   153  00F3B4  0B                 	db	11
   154  00F3B5  16                 	db	22
   155  00F3B6  0F                 	db	15
   156  00F3B7  16                 	db	22
   157  00F3B8  06                 	db	6
   158  00F3B9  25                 	db	37
   159  00F3BA  0A                 	db	10
   160  00F3BB  14                 	db	20
   161  00F3BC  00                 	db	0
   162  00F3BD  00                 	db	0
   163  00F3BE  00                 	db	0
   164  00F3BF  00                 	db	0
   165  00F3C0  00                 	db	0
   166  00F3C1  00                 	db	0
   167  00F3C2  00                 	db	0
   168  00F3C3  80                 	db	128
   169  00F3C4  3F                 	db	63
   170  00F3C5  00                 	db	0
   171  00F3C6  00                 	db	0
   172  00F3C7  00                 	db	0
   173  00F3C8  00                 	db	0
   174  00F3C9  00                 	db	0
   175  00F3CA  00                 	db	0
   176  00F3CB  80                 	db	128
   177  00F3CC  3F                 	db	63
   178  00F3CD  00                 	db	0
   179  00F3CE  00                 	db	0
   180  00F3CF  00                 	db	0
   181  00F3D0  00                 	db	0
   182  00F3D1  00                 	db	0
   183  00F3D2  00                 	db	0
   184  00F3D3  80                 	db	128
   185  00F3D4  3F                 	db	63
   186  00F3D5  16                 	db	22
   187  00F3D6  06                 	db	6
   188  00F3D7  25                 	db	37
   189  00F3D8  00                 	db	0
   190  00F3D9  00                 	db	0
   191  00F3DA  00                 	db	0
   192  00F3DB  00                 	db	0
   193  00F3DC  00                 	db	0
   194  00F3DD  00                 	db	0
   195  00F3DE  00                 	db	0
   196  00F3DF  00                 	db	0
   197  00F3E0  00                 	db	0
   198  00F3E1  80                 	db	128
   199  00F3E2  3F                 	db	63
   200  00F3E3  08                 	db	8
   201  00F3E4  07                 	db	7
   202  00F3E5  B8                 	db	184
   203  00F3E6  0B                 	db	11
   204  00F3E7  00                 	db	0
   205  00F3E8  00                 	db	0
   206  00F3E9  40                 	db	64
   207  00F3EA  06                 	db	6
   208  00F3EB  F0                 	db	240
   209  00F3EC  0A                 	db	10
   210  00F3ED  00                 	db	0
   211  00F3EE  00                 	db	0
   212  00F3EF  66                 	db	102
   213  00F3F0  66                 	db	102
   214  00F3F1  26                 	db	38
   215  00F3F2  3F                 	db	63
   216  00F3F3  1B                 	db	27
   217  00F3F4  2F                 	db	47
   218  00F3F5  5D                 	db	93
   219  00F3F6  3D                 	db	61
   220  00F3F7  33                 	db	51
   221  00F3F8  33                 	db	51
   222  00F3F9  F3                 	db	243
   223  00F3FA  3F                 	db	63
   224  00F3FB  66                 	db	102
   225  00F3FC  66                 	db	102
   226  00F3FD  26                 	db	38
   227  00F3FE  3F                 	db	63
   228  00F3FF  42                 	db	66
   229  00F400  60                 	db	96
   230  00F401  65                 	db	101
   231  00F402  3C                 	db	60
   232  00F403  00                 	db	0
   233  00F404  00                 	db	0
   234  00F405  80                 	db	128
   235  00F406  40                 	db	64
   236  00F407  00                 	db	0
   237  00F408  80                 	db	128
   238  00F409  BB                 	db	187
   239  00F40A  45                 	db	69
   240  00F40B  00                 	db	0
   241  00F40C  00                 	db	0
   242  00F40D  00                 	db	0
   243  00F40E  41                 	db	65
   244  00F40F  00                 	db	0
   245  00F410  00                 	db	0
   246  00F411  00                 	db	0
   247  00F412  42                 	db	66
   248  00F413  F0                 	db	240
   249  00F414  0A                 	db	10
   250  00F415  02                 	db	2
   251  00F416  A4                 	db	164
   252  00F417  70                 	db	112
   253  00F418  7D                 	db	125
   254  00F419  3F                 	db	63
   255  00F41A  A4                 	db	164
   256  00F41B  70                 	db	112
   257  00F41C  7D                 	db	125
   258  00F41D  3F                 	db	63
   259  00F41E  00                 	db	0
   260  00F41F  00                 	db	0
   261  00F420  00                 	db	0
   262  00F421  00                 	db	0
   263  00F422  00                 	db	0
   264  00F423  00                 	db	0
   265  00F424  00                 	db	0
   266  00F425  00                 	db	0
   267  00F426  00                 	db	0
   268  00F427  00                 	db	0
   269  00F428  00                 	db	0
   270  00F429  00                 	db	0
   271  00F42A  00                 	db	0
   272  00F42B  00                 	db	0
   273  00F42C  00                 	db	0
   274  00F42D  00                 	db	0
   275  00F42E  00                 	db	0
   276  00F42F  00                 	db	0
   277  00F430  00                 	db	0
   278  00F431  00                 	db	0
   279  00F432  00                 	db	0
   280  00F433  00                 	db	0
   281  00F434  00                 	db	0
   282  00F435  00                 	db	0
   283  00F436  00                 	db	0
   284  00F437  00                 	db	0
   285  00F438  00                 	db	0
   286  00F439  00                 	db	0
   287  00F43A  00                 	db	0
   288  00F43B  00                 	db	0
   289  00F43C  00                 	db	0
   290  00F43D  00                 	db	0
   291  00F43E  00                 	db	0
   292  00F43F  00                 	db	0
   293  00F440  00                 	db	0
   294  00F441  00                 	db	0
   295  00F442  00                 	db	0
   296  00F443  00                 	db	0
   297  00F444  00                 	db	0
   298  00F445  00                 	db	0
   299  00F446  00                 	db	0
   300  00F447  00                 	db	0
   301  00F448  00                 	db	0
   302  00F449  00                 	db	0
   303  00F44A  00                 	db	0
   304  00F44B  00                 	db	0
   305  00F44C  00                 	db	0
   306  00F44D  00                 	db	0
   307  00F44E  00                 	db	0
   308  00F44F  00                 	db	0
   309  00F450  00                 	db	0
   310  00F451  00                 	db	0
   311  00F452  00                 	db	0
   312  00F453  00                 	db	0
   313  00F454  00                 	db	0
   314  00F455  00                 	db	0
   315  00F456  00                 	db	0
   316  00F457  00                 	db	0
   317  00F458  00                 	db	0
   318  00F459  00                 	db	0
   319  00F45A  00                 	db	0
   320  00F45B  00                 	db	0
   321  00F45C  00                 	db	0
   322  00F45D  00                 	db	0
   323  00F45E  00                 	db	0
   324  00F45F  00                 	db	0
   325  00F460  00                 	db	0
   326  00F461  00                 	db	0
   327  00F462  00                 	db	0
   328  00F463  00                 	db	0
   329  00F464  00                 	db	0
   330  00F465  00                 	db	0
   331  00F466  00                 	db	0
   332  00F467  00                 	db	0
   333  00F468  00                 	db	0
   334  00F469  00                 	db	0
   335  00F46A  00                 	db	0
   336  00F46B  00                 	db	0
   337  00F46C  00                 	db	0
   338  00F46D  00                 	db	0
   339  00F46E  00                 	db	0
   340  00F46F  00                 	db	0
   341  00F470  00                 	db	0
   342  00F471  00                 	db	0
   343  00F472  00                 	db	0
   344  00F473  00                 	db	0
   345  00F474  00                 	db	0
   346  00F475  00                 	db	0
   347  00F476  00                 	db	0
   348  00F477  00                 	db	0
   349  00F478  00                 	db	0
   350  00F479  00                 	db	0
   351  00F47A  00                 	db	0
   352  00F47B  00                 	db	0
   353  00F47C  00                 	db	0
   354  00F47D  00                 	db	0
   355  00F47E  00                 	db	0
   356  00F47F  00                 	db	0
   357  00F480  00                 	db	0
   358  00F481  00                 	db	0
   359  00F482  00                 	db	0
   360  00F483  00                 	db	0
   361  00F484  00                 	db	0
   362  00F485  00                 	db	0
   363  00F486  00                 	db	0
   364  00F487  00                 	db	0
   365  00F488  00                 	db	0
   366  00F489  00                 	db	0
   367  00F48A  00                 	db	0
   368  00F48B  00                 	db	0
   369  00F48C  00                 	db	0
   370  00F48D  00                 	db	0
   371  00F48E  00                 	db	0
   372  00F48F  00                 	db	0
   373  00F490  00                 	db	0
   374  00F491  00                 	db	0
   375  00F492  00                 	db	0
   376  00F493  00                 	db	0
   377  00F494  00                 	db	0
   378  00F495  00                 	db	0
   379  00F496  00                 	db	0
   380  00F497  00                 	db	0
   381  00F498  00                 	db	0
   382  00F499  00                 	db	0
   383  00F49A  00                 	db	0
   384  00F49B  00                 	db	0
   385  00F49C  00                 	db	0
   386  00F49D  00                 	db	0
   387  00F49E  00                 	db	0
   388  00F49F  00                 	db	0
   389  00F4A0  00                 	db	0
   390  00F4A1  00                 	db	0
   391  00F4A2  00                 	db	0
   392  00F4A3  00                 	db	0
   393  00F4A4  00                 	db	0
   394  00F4A5  00                 	db	0
   395  00F4A6  00                 	db	0
   396  00F4A7  00                 	db	0
   397  00F4A8  00                 	db	0
   398  00F4A9  00                 	db	0
   399  00F4AA  00                 	db	0
   400  00F4AB                     __end_of_eedata:
   401                           	opt stack 0
   402  00F4AB                     _font13:
   403                           	opt stack 0
   404  00F4AB  0D                 	db	13
   405  00F4AC  10                 	db	16
   406  00F4AD  1B                 	db	27
   407  00F4AE  04                 	db	4
   408  00F4AF  00                 	db	0
   409  00F4B0  00                 	db	0
   410  00F4B1  00                 	db	0
   411  00F4B2  00                 	db	0
   412  00F4B3  00                 	db	0
   413  00F4B4  00                 	db	0
   414  00F4B5  00                 	db	0
   415  00F4B6  00                 	db	0
   416  00F4B7  00                 	db	0
   417  00F4B8  00                 	db	0
   418  00F4B9  00                 	db	0
   419  00F4BA  00                 	db	0
   420  00F4BB  00                 	db	0
   421  00F4BC  00                 	db	0
   422  00F4BD  00                 	db	0
   423  00F4BE  00                 	db	0
   424  00F4BF  00                 	db	0
   425  00F4C0  00                 	db	0
   426  00F4C1  00                 	db	0
   427  00F4C2  00                 	db	0
   428  00F4C3  00                 	db	0
   429  00F4C4  00                 	db	0
   430  00F4C5  00                 	db	0
   431  00F4C6  00                 	db	0
   432  00F4C7  00                 	db	0
   433  00F4C8  00                 	db	0
   434  00F4C9  04                 	db	4
   435  00F4CA  00                 	db	0
   436  00F4CB  00                 	db	0
   437  00F4CC  00                 	db	0
   438  00F4CD  00                 	db	0
   439  00F4CE  60                 	db	96
   440  00F4CF  00                 	db	0
   441  00F4D0  60                 	db	96
   442  00F4D1  00                 	db	0
   443  00F4D2  60                 	db	96
   444  00F4D3  00                 	db	0
   445  00F4D4  60                 	db	96
   446  00F4D5  00                 	db	0
   447  00F4D6  60                 	db	96
   448  00F4D7  00                 	db	0
   449  00F4D8  60                 	db	96
   450  00F4D9  00                 	db	0
   451  00F4DA  60                 	db	96
   452  00F4DB  00                 	db	0
   453  00F4DC  00                 	db	0
   454  00F4DD  00                 	db	0
   455  00F4DE  60                 	db	96
   456  00F4DF  00                 	db	0
   457  00F4E0  00                 	db	0
   458  00F4E1  00                 	db	0
   459  00F4E2  00                 	db	0
   460  00F4E3  00                 	db	0
   461  00F4E4  06                 	db	6
   462  00F4E5  00                 	db	0
   463  00F4E6  00                 	db	0
   464  00F4E7  00                 	db	0
   465  00F4E8  00                 	db	0
   466  00F4E9  6C                 	db	108
   467  00F4EA  00                 	db	0
   468  00F4EB  6C                 	db	108
   469  00F4EC  00                 	db	0
   470  00F4ED  6C                 	db	108
   471  00F4EE  00                 	db	0
   472  00F4EF  00                 	db	0
   473  00F4F0  00                 	db	0
   474  00F4F1  00                 	db	0
   475  00F4F2  00                 	db	0
   476  00F4F3  00                 	db	0
   477  00F4F4  00                 	db	0
   478  00F4F5  00                 	db	0
   479  00F4F6  00                 	db	0
   480  00F4F7  00                 	db	0
   481  00F4F8  00                 	db	0
   482  00F4F9  00                 	db	0
   483  00F4FA  00                 	db	0
   484  00F4FB  00                 	db	0
   485  00F4FC  00                 	db	0
   486  00F4FD  00                 	db	0
   487  00F4FE  00                 	db	0
   488  00F4FF  08                 	db	8
   489  00F500  00                 	db	0
   490  00F501  00                 	db	0
   491  00F502  00                 	db	0
   492  00F503  00                 	db	0
   493  00F504  36                 	db	54
   494  00F505  00                 	db	0
   495  00F506  36                 	db	54
   496  00F507  00                 	db	0
   497  00F508  7F                 	db	127
   498  00F509  00                 	db	0
   499  00F50A  36                 	db	54
   500  00F50B  00                 	db	0
   501  00F50C  36                 	db	54
   502  00F50D  00                 	db	0
   503  00F50E  36                 	db	54
   504  00F50F  00                 	db	0
   505  00F510  7F                 	db	127
   506  00F511  00                 	db	0
   507  00F512  36                 	db	54
   508  00F513  00                 	db	0
   509  00F514  36                 	db	54
   510  00F515  00                 	db	0
   511  00F516  00                 	db	0
   512  00F517  00                 	db	0
   513  00F518  00                 	db	0
   514  00F519  00                 	db	0
   515  00F51A  07                 	db	7
   516  00F51B  00                 	db	0
   517  00F51C  00                 	db	0
   518  00F51D  00                 	db	0
   519  00F51E  00                 	db	0
   520  00F51F  18                 	db	24
   521  00F520  00                 	db	0
   522  00F521  3C                 	db	60
   523  00F522  00                 	db	0
   524  00F523  7E                 	db	126
   525  00F524  00                 	db	0
   526  00F525  78                 	db	120
   527  00F526  00                 	db	0
   528  00F527  38                 	db	56
   529  00F528  00                 	db	0
   530  00F529  1C                 	db	28
   531  00F52A  00                 	db	0
   532  00F52B  1E                 	db	30
   533  00F52C  00                 	db	0
   534  00F52D  7E                 	db	126
   535  00F52E  00                 	db	0
   536  00F52F  3C                 	db	60
   537  00F530  00                 	db	0
   538  00F531  18                 	db	24
   539  00F532  00                 	db	0
   540  00F533  00                 	db	0
   541  00F534  00                 	db	0
   542  00F535  09                 	db	9
   543  00F536  00                 	db	0
   544  00F537  00                 	db	0
   545  00F538  00                 	db	0
   546  00F539  00                 	db	0
   547  00F53A  38                 	db	56
   548  00F53B  00                 	db	0
   549  00F53C  6D                 	db	109
   550  00F53D  80                 	db	128
   551  00F53E  3B                 	db	59
   552  00F53F  00                 	db	0
   553  00F540  06                 	db	6
   554  00F541  00                 	db	0
   555  00F542  0C                 	db	12
   556  00F543  00                 	db	0
   557  00F544  18                 	db	24
   558  00F545  00                 	db	0
   559  00F546  37                 	db	55
   560  00F547  00                 	db	0
   561  00F548  6D                 	db	109
   562  00F549  80                 	db	128
   563  00F54A  07                 	db	7
   564  00F54B  00                 	db	0
   565  00F54C  00                 	db	0
   566  00F54D  00                 	db	0
   567  00F54E  00                 	db	0
   568  00F54F  00                 	db	0
   569  00F550  07                 	db	7
   570  00F551  00                 	db	0
   571  00F552  00                 	db	0
   572  00F553  00                 	db	0
   573  00F554  00                 	db	0
   574  00F555  30                 	db	48
   575  00F556  00                 	db	0
   576  00F557  78                 	db	120
   577  00F558  00                 	db	0
   578  00F559  78                 	db	120
   579  00F55A  00                 	db	0
   580  00F55B  30                 	db	48
   581  00F55C  00                 	db	0
   582  00F55D  30                 	db	48
   583  00F55E  00                 	db	0
   584  00F55F  7E                 	db	126
   585  00F560  00                 	db	0
   586  00F561  6C                 	db	108
   587  00F562  00                 	db	0
   588  00F563  6C                 	db	108
   589  00F564  00                 	db	0
   590  00F565  3E                 	db	62
   591  00F566  00                 	db	0
   592  00F567  00                 	db	0
   593  00F568  00                 	db	0
   594  00F569  00                 	db	0
   595  00F56A  00                 	db	0
   596  00F56B  03                 	db	3
   597  00F56C  00                 	db	0
   598  00F56D  00                 	db	0
   599  00F56E  00                 	db	0
   600  00F56F  00                 	db	0
   601  00F570  60                 	db	96
   602  00F571  00                 	db	0
   603  00F572  60                 	db	96
   604  00F573  00                 	db	0
   605  00F574  60                 	db	96
   606  00F575  00                 	db	0
   607  00F576  00                 	db	0
   608  00F577  00                 	db	0
   609  00F578  00                 	db	0
   610  00F579  00                 	db	0
   611  00F57A  00                 	db	0
   612  00F57B  00                 	db	0
   613  00F57C  00                 	db	0
   614  00F57D  00                 	db	0
   615  00F57E  00                 	db	0
   616  00F57F  00                 	db	0
   617  00F580  00                 	db	0
   618  00F581  00                 	db	0
   619  00F582  00                 	db	0
   620  00F583  00                 	db	0
   621  00F584  00                 	db	0
   622  00F585  00                 	db	0
   623  00F586  04                 	db	4
   624  00F587  00                 	db	0
   625  00F588  00                 	db	0
   626  00F589  00                 	db	0
   627  00F58A  00                 	db	0
   628  00F58B  30                 	db	48
   629  00F58C  00                 	db	0
   630  00F58D  60                 	db	96
   631  00F58E  00                 	db	0
   632  00F58F  60                 	db	96
   633  00F590  00                 	db	0
   634  00F591  60                 	db	96
   635  00F592  00                 	db	0
   636  00F593  60                 	db	96
   637  00F594  00                 	db	0
   638  00F595  60                 	db	96
   639  00F596  00                 	db	0
   640  00F597  60                 	db	96
   641  00F598  00                 	db	0
   642  00F599  60                 	db	96
   643  00F59A  00                 	db	0
   644  00F59B  60                 	db	96
   645  00F59C  00                 	db	0
   646  00F59D  60                 	db	96
   647  00F59E  00                 	db	0
   648  00F59F  30                 	db	48
   649  00F5A0  00                 	db	0
   650  00F5A1  04                 	db	4
   651  00F5A2  00                 	db	0
   652  00F5A3  00                 	db	0
   653  00F5A4  00                 	db	0
   654  00F5A5  00                 	db	0
   655  00F5A6  60                 	db	96
   656  00F5A7  00                 	db	0
   657  00F5A8  30                 	db	48
   658  00F5A9  00                 	db	0
   659  00F5AA  30                 	db	48
   660  00F5AB  00                 	db	0
   661  00F5AC  30                 	db	48
   662  00F5AD  00                 	db	0
   663  00F5AE  30                 	db	48
   664  00F5AF  00                 	db	0
   665  00F5B0  30                 	db	48
   666  00F5B1  00                 	db	0
   667  00F5B2  30                 	db	48
   668  00F5B3  00                 	db	0
   669  00F5B4  30                 	db	48
   670  00F5B5  00                 	db	0
   671  00F5B6  30                 	db	48
   672  00F5B7  00                 	db	0
   673  00F5B8  30                 	db	48
   674  00F5B9  00                 	db	0
   675  00F5BA  60                 	db	96
   676  00F5BB  00                 	db	0
   677  00F5BC  05                 	db	5
   678  00F5BD  00                 	db	0
   679  00F5BE  00                 	db	0
   680  00F5BF  00                 	db	0
   681  00F5C0  00                 	db	0
   682  00F5C1  78                 	db	120
   683  00F5C2  00                 	db	0
   684  00F5C3  30                 	db	48
   685  00F5C4  00                 	db	0
   686  00F5C5  78                 	db	120
   687  00F5C6  00                 	db	0
   688  00F5C7  00                 	db	0
   689  00F5C8  00                 	db	0
   690  00F5C9  00                 	db	0
   691  00F5CA  00                 	db	0
   692  00F5CB  00                 	db	0
   693  00F5CC  00                 	db	0
   694  00F5CD  00                 	db	0
   695  00F5CE  00                 	db	0
   696  00F5CF  00                 	db	0
   697  00F5D0  00                 	db	0
   698  00F5D1  00                 	db	0
   699  00F5D2  00                 	db	0
   700  00F5D3  00                 	db	0
   701  00F5D4  00                 	db	0
   702  00F5D5  00                 	db	0
   703  00F5D6  00                 	db	0
   704  00F5D7  07                 	db	7
   705  00F5D8  00                 	db	0
   706  00F5D9  00                 	db	0
   707  00F5DA  00                 	db	0
   708  00F5DB  00                 	db	0
   709  00F5DC  00                 	db	0
   710  00F5DD  00                 	db	0
   711  00F5DE  00                 	db	0
   712  00F5DF  00                 	db	0
   713  00F5E0  00                 	db	0
   714  00F5E1  00                 	db	0
   715  00F5E2  18                 	db	24
   716  00F5E3  00                 	db	0
   717  00F5E4  18                 	db	24
   718  00F5E5  00                 	db	0
   719  00F5E6  7E                 	db	126
   720  00F5E7  00                 	db	0
   721  00F5E8  18                 	db	24
   722  00F5E9  00                 	db	0
   723  00F5EA  18                 	db	24
   724  00F5EB  00                 	db	0
   725  00F5EC  00                 	db	0
   726  00F5ED  00                 	db	0
   727  00F5EE  00                 	db	0
   728  00F5EF  00                 	db	0
   729  00F5F0  00                 	db	0
   730  00F5F1  00                 	db	0
   731  00F5F2  04                 	db	4
   732  00F5F3  00                 	db	0
   733  00F5F4  00                 	db	0
   734  00F5F5  00                 	db	0
   735  00F5F6  00                 	db	0
   736  00F5F7  00                 	db	0
   737  00F5F8  00                 	db	0
   738  00F5F9  00                 	db	0
   739  00F5FA  00                 	db	0
   740  00F5FB  00                 	db	0
   741  00F5FC  00                 	db	0
   742  00F5FD  00                 	db	0
   743  00F5FE  00                 	db	0
   744  00F5FF  00                 	db	0
   745  00F600  00                 	db	0
   746  00F601  00                 	db	0
   747  00F602  00                 	db	0
   748  00F603  00                 	db	0
   749  00F604  00                 	db	0
   750  00F605  00                 	db	0
   751  00F606  00                 	db	0
   752  00F607  30                 	db	48
   753  00F608  00                 	db	0
   754  00F609  60                 	db	96
   755  00F60A  00                 	db	0
   756  00F60B  00                 	db	0
   757  00F60C  00                 	db	0
   758  00F60D  04                 	db	4
   759  00F60E  00                 	db	0
   760  00F60F  00                 	db	0
   761  00F610  00                 	db	0
   762  00F611  00                 	db	0
   763  00F612  00                 	db	0
   764  00F613  00                 	db	0
   765  00F614  00                 	db	0
   766  00F615  00                 	db	0
   767  00F616  00                 	db	0
   768  00F617  00                 	db	0
   769  00F618  00                 	db	0
   770  00F619  00                 	db	0
   771  00F61A  00                 	db	0
   772  00F61B  00                 	db	0
   773  00F61C  70                 	db	112
   774  00F61D  00                 	db	0
   775  00F61E  00                 	db	0
   776  00F61F  00                 	db	0
   777  00F620  00                 	db	0
   778  00F621  00                 	db	0
   779  00F622  00                 	db	0
   780  00F623  00                 	db	0
   781  00F624  00                 	db	0
   782  00F625  00                 	db	0
   783  00F626  00                 	db	0
   784  00F627  00                 	db	0
   785  00F628  04                 	db	4
   786  00F629  00                 	db	0
   787  00F62A  00                 	db	0
   788  00F62B  00                 	db	0
   789  00F62C  00                 	db	0
   790  00F62D  00                 	db	0
   791  00F62E  00                 	db	0
   792  00F62F  00                 	db	0
   793  00F630  00                 	db	0
   794  00F631  00                 	db	0
   795  00F632  00                 	db	0
   796  00F633  00                 	db	0
   797  00F634  00                 	db	0
   798  00F635  00                 	db	0
   799  00F636  00                 	db	0
   800  00F637  00                 	db	0
   801  00F638  00                 	db	0
   802  00F639  00                 	db	0
   803  00F63A  00                 	db	0
   804  00F63B  00                 	db	0
   805  00F63C  00                 	db	0
   806  00F63D  60                 	db	96
   807  00F63E  00                 	db	0
   808  00F63F  00                 	db	0
   809  00F640  00                 	db	0
   810  00F641  00                 	db	0
   811  00F642  00                 	db	0
   812  00F643  06                 	db	6
   813  00F644  00                 	db	0
   814  00F645  00                 	db	0
   815  00F646  00                 	db	0
   816  00F647  00                 	db	0
   817  00F648  0C                 	db	12
   818  00F649  00                 	db	0
   819  00F64A  0C                 	db	12
   820  00F64B  00                 	db	0
   821  00F64C  0C                 	db	12
   822  00F64D  00                 	db	0
   823  00F64E  18                 	db	24
   824  00F64F  00                 	db	0
   825  00F650  18                 	db	24
   826  00F651  00                 	db	0
   827  00F652  30                 	db	48
   828  00F653  00                 	db	0
   829  00F654  30                 	db	48
   830  00F655  00                 	db	0
   831  00F656  60                 	db	96
   832  00F657  00                 	db	0
   833  00F658  60                 	db	96
   834  00F659  00                 	db	0
   835  00F65A  00                 	db	0
   836  00F65B  00                 	db	0
   837  00F65C  00                 	db	0
   838  00F65D  00                 	db	0
   839  00F65E  07                 	db	7
   840  00F65F  00                 	db	0
   841  00F660  00                 	db	0
   842  00F661  00                 	db	0
   843  00F662  00                 	db	0
   844  00F663  3C                 	db	60
   845  00F664  00                 	db	0
   846  00F665  66                 	db	102
   847  00F666  00                 	db	0
   848  00F667  66                 	db	102
   849  00F668  00                 	db	0
   850  00F669  66                 	db	102
   851  00F66A  00                 	db	0
   852  00F66B  66                 	db	102
   853  00F66C  00                 	db	0
   854  00F66D  66                 	db	102
   855  00F66E  00                 	db	0
   856  00F66F  66                 	db	102
   857  00F670  00                 	db	0
   858  00F671  66                 	db	102
   859  00F672  00                 	db	0
   860  00F673  3C                 	db	60
   861  00F674  00                 	db	0
   862  00F675  00                 	db	0
   863  00F676  00                 	db	0
   864  00F677  00                 	db	0
   865  00F678  00                 	db	0
   866  00F679  07                 	db	7
   867  00F67A  00                 	db	0
   868  00F67B  00                 	db	0
   869  00F67C  00                 	db	0
   870  00F67D  00                 	db	0
   871  00F67E  18                 	db	24
   872  00F67F  00                 	db	0
   873  00F680  78                 	db	120
   874  00F681  00                 	db	0
   875  00F682  18                 	db	24
   876  00F683  00                 	db	0
   877  00F684  18                 	db	24
   878  00F685  00                 	db	0
   879  00F686  18                 	db	24
   880  00F687  00                 	db	0
   881  00F688  18                 	db	24
   882  00F689  00                 	db	0
   883  00F68A  18                 	db	24
   884  00F68B  00                 	db	0
   885  00F68C  18                 	db	24
   886  00F68D  00                 	db	0
   887  00F68E  18                 	db	24
   888  00F68F  00                 	db	0
   889  00F690  00                 	db	0
   890  00F691  00                 	db	0
   891  00F692  00                 	db	0
   892  00F693  00                 	db	0
   893  00F694  07                 	db	7
   894  00F695  00                 	db	0
   895  00F696  00                 	db	0
   896  00F697  00                 	db	0
   897  00F698  00                 	db	0
   898  00F699  3C                 	db	60
   899  00F69A  00                 	db	0
   900  00F69B  66                 	db	102
   901  00F69C  00                 	db	0
   902  00F69D  06                 	db	6
   903  00F69E  00                 	db	0
   904  00F69F  06                 	db	6
   905  00F6A0  00                 	db	0
   906  00F6A1  0C                 	db	12
   907  00F6A2  00                 	db	0
   908  00F6A3  18                 	db	24
   909  00F6A4  00                 	db	0
   910  00F6A5  30                 	db	48
   911  00F6A6  00                 	db	0
   912  00F6A7  60                 	db	96
   913  00F6A8  00                 	db	0
   914  00F6A9  7E                 	db	126
   915  00F6AA  00                 	db	0
   916  00F6AB  00                 	db	0
   917  00F6AC  00                 	db	0
   918  00F6AD  00                 	db	0
   919  00F6AE  00                 	db	0
   920  00F6AF  07                 	db	7
   921  00F6B0  00                 	db	0
   922  00F6B1  00                 	db	0
   923  00F6B2  00                 	db	0
   924  00F6B3  00                 	db	0
   925  00F6B4  3C                 	db	60
   926  00F6B5  00                 	db	0
   927  00F6B6  66                 	db	102
   928  00F6B7  00                 	db	0
   929  00F6B8  06                 	db	6
   930  00F6B9  00                 	db	0
   931  00F6BA  06                 	db	6
   932  00F6BB  00                 	db	0
   933  00F6BC  1C                 	db	28
   934  00F6BD  00                 	db	0
   935  00F6BE  06                 	db	6
   936  00F6BF  00                 	db	0
   937  00F6C0  06                 	db	6
   938  00F6C1  00                 	db	0
   939  00F6C2  66                 	db	102
   940  00F6C3  00                 	db	0
   941  00F6C4  3C                 	db	60
   942  00F6C5  00                 	db	0
   943  00F6C6  00                 	db	0
   944  00F6C7  00                 	db	0
   945  00F6C8  00                 	db	0
   946  00F6C9  00                 	db	0
   947  00F6CA  07                 	db	7
   948  00F6CB  00                 	db	0
   949  00F6CC  00                 	db	0
   950  00F6CD  00                 	db	0
   951  00F6CE  00                 	db	0
   952  00F6CF  0C                 	db	12
   953  00F6D0  00                 	db	0
   954  00F6D1  1C                 	db	28
   955  00F6D2  00                 	db	0
   956  00F6D3  1C                 	db	28
   957  00F6D4  00                 	db	0
   958  00F6D5  3C                 	db	60
   959  00F6D6  00                 	db	0
   960  00F6D7  3C                 	db	60
   961  00F6D8  00                 	db	0
   962  00F6D9  6C                 	db	108
   963  00F6DA  00                 	db	0
   964  00F6DB  7E                 	db	126
   965  00F6DC  00                 	db	0
   966  00F6DD  0C                 	db	12
   967  00F6DE  00                 	db	0
   968  00F6DF  0C                 	db	12
   969  00F6E0  00                 	db	0
   970  00F6E1  00                 	db	0
   971  00F6E2  00                 	db	0
   972  00F6E3  00                 	db	0
   973  00F6E4  00                 	db	0
   974  00F6E5  07                 	db	7
   975  00F6E6  00                 	db	0
   976  00F6E7  00                 	db	0
   977  00F6E8  00                 	db	0
   978  00F6E9  00                 	db	0
   979  00F6EA  7E                 	db	126
   980  00F6EB  00                 	db	0
   981  00F6EC  60                 	db	96
   982  00F6ED  00                 	db	0
   983  00F6EE  60                 	db	96
   984  00F6EF  00                 	db	0
   985  00F6F0  7C                 	db	124
   986  00F6F1  00                 	db	0
   987  00F6F2  66                 	db	102
   988  00F6F3  00                 	db	0
   989  00F6F4  06                 	db	6
   990  00F6F5  00                 	db	0
   991  00F6F6  06                 	db	6
   992  00F6F7  00                 	db	0
   993  00F6F8  66                 	db	102
   994  00F6F9  00                 	db	0
   995  00F6FA  3C                 	db	60
   996  00F6FB  00                 	db	0
   997  00F6FC  00                 	db	0
   998  00F6FD  00                 	db	0
   999  00F6FE  00                 	db	0
  1000  00F6FF  00                 	db	0
  1001  00F700  07                 	db	7
  1002  00F701  00                 	db	0
  1003  00F702  00                 	db	0
  1004  00F703  00                 	db	0
  1005  00F704  00                 	db	0
  1006  00F705  3C                 	db	60
  1007  00F706  00                 	db	0
  1008  00F707  66                 	db	102
  1009  00F708  00                 	db	0
  1010  00F709  60                 	db	96
  1011  00F70A  00                 	db	0
  1012  00F70B  60                 	db	96
  1013  00F70C  00                 	db	0
  1014  00F70D  7C                 	db	124
  1015  00F70E  00                 	db	0
  1016  00F70F  66                 	db	102
  1017  00F710  00                 	db	0
  1018  00F711  66                 	db	102
  1019  00F712  00                 	db	0
  1020  00F713  66                 	db	102
  1021  00F714  00                 	db	0
  1022  00F715  3C                 	db	60
  1023  00F716  00                 	db	0
  1024  00F717  00                 	db	0
  1025  00F718  00                 	db	0
  1026  00F719  00                 	db	0
  1027  00F71A  00                 	db	0
  1028  00F71B  07                 	db	7
  1029  00F71C  00                 	db	0
  1030  00F71D  00                 	db	0
  1031  00F71E  00                 	db	0
  1032  00F71F  00                 	db	0
  1033  00F720  7E                 	db	126
  1034  00F721  00                 	db	0
  1035  00F722  06                 	db	6
  1036  00F723  00                 	db	0
  1037  00F724  0C                 	db	12
  1038  00F725  00                 	db	0
  1039  00F726  0C                 	db	12
  1040  00F727  00                 	db	0
  1041  00F728  18                 	db	24
  1042  00F729  00                 	db	0
  1043  00F72A  18                 	db	24
  1044  00F72B  00                 	db	0
  1045  00F72C  30                 	db	48
  1046  00F72D  00                 	db	0
  1047  00F72E  30                 	db	48
  1048  00F72F  00                 	db	0
  1049  00F730  30                 	db	48
  1050  00F731  00                 	db	0
  1051  00F732  00                 	db	0
  1052  00F733  00                 	db	0
  1053  00F734  00                 	db	0
  1054  00F735  00                 	db	0
  1055  00F736  07                 	db	7
  1056  00F737  00                 	db	0
  1057  00F738  00                 	db	0
  1058  00F739  00                 	db	0
  1059  00F73A  00                 	db	0
  1060  00F73B  3C                 	db	60
  1061  00F73C  00                 	db	0
  1062  00F73D  66                 	db	102
  1063  00F73E  00                 	db	0
  1064  00F73F  66                 	db	102
  1065  00F740  00                 	db	0
  1066  00F741  66                 	db	102
  1067  00F742  00                 	db	0
  1068  00F743  3C                 	db	60
  1069  00F744  00                 	db	0
  1070  00F745  66                 	db	102
  1071  00F746  00                 	db	0
  1072  00F747  66                 	db	102
  1073  00F748  00                 	db	0
  1074  00F749  66                 	db	102
  1075  00F74A  00                 	db	0
  1076  00F74B  3C                 	db	60
  1077  00F74C  00                 	db	0
  1078  00F74D  00                 	db	0
  1079  00F74E  00                 	db	0
  1080  00F74F  00                 	db	0
  1081  00F750  00                 	db	0
  1082  00F751  07                 	db	7
  1083  00F752  00                 	db	0
  1084  00F753  00                 	db	0
  1085  00F754  00                 	db	0
  1086  00F755  00                 	db	0
  1087  00F756  3C                 	db	60
  1088  00F757  00                 	db	0
  1089  00F758  66                 	db	102
  1090  00F759  00                 	db	0
  1091  00F75A  66                 	db	102
  1092  00F75B  00                 	db	0
  1093  00F75C  66                 	db	102
  1094  00F75D  00                 	db	0
  1095  00F75E  3E                 	db	62
  1096  00F75F  00                 	db	0
  1097  00F760  06                 	db	6
  1098  00F761  00                 	db	0
  1099  00F762  06                 	db	6
  1100  00F763  00                 	db	0
  1101  00F764  66                 	db	102
  1102  00F765  00                 	db	0
  1103  00F766  3C                 	db	60
  1104  00F767  00                 	db	0
  1105  00F768  00                 	db	0
  1106  00F769  00                 	db	0
  1107  00F76A  00                 	db	0
  1108  00F76B  00                 	db	0
  1109  00F76C  04                 	db	4
  1110  00F76D  00                 	db	0
  1111  00F76E  00                 	db	0
  1112  00F76F  00                 	db	0
  1113  00F770  00                 	db	0
  1114  00F771  00                 	db	0
  1115  00F772  00                 	db	0
  1116  00F773  00                 	db	0
  1117  00F774  00                 	db	0
  1118  00F775  00                 	db	0
  1119  00F776  00                 	db	0
  1120  00F777  60                 	db	96
  1121  00F778  00                 	db	0
  1122  00F779  00                 	db	0
  1123  00F77A  00                 	db	0
  1124  00F77B  00                 	db	0
  1125  00F77C  00                 	db	0
  1126  00F77D  00                 	db	0
  1127  00F77E  00                 	db	0
  1128  00F77F  00                 	db	0
  1129  00F780  00                 	db	0
  1130  00F781  60                 	db	96
  1131  00F782  00                 	db	0
  1132  00F783  00                 	db	0
  1133  00F784  00                 	db	0
  1134  00F785  00                 	db	0
  1135  00F786  00                 	db	0
  1136  00F787  04                 	db	4
  1137  00F788  00                 	db	0
  1138  00F789  00                 	db	0
  1139  00F78A  00                 	db	0
  1140  00F78B  00                 	db	0
  1141  00F78C  00                 	db	0
  1142  00F78D  00                 	db	0
  1143  00F78E  00                 	db	0
  1144  00F78F  00                 	db	0
  1145  00F790  00                 	db	0
  1146  00F791  00                 	db	0
  1147  00F792  30                 	db	48
  1148  00F793  00                 	db	0
  1149  00F794  00                 	db	0
  1150  00F795  00                 	db	0
  1151  00F796  00                 	db	0
  1152  00F797  00                 	db	0
  1153  00F798  00                 	db	0
  1154  00F799  00                 	db	0
  1155  00F79A  00                 	db	0
  1156  00F79B  00                 	db	0
  1157  00F79C  30                 	db	48
  1158  00F79D  00                 	db	0
  1159  00F79E  60                 	db	96
  1160  00F79F  00                 	db	0
  1161  00F7A0  00                 	db	0
  1162  00F7A1  00                 	db	0
  1163  00F7A2  07                 	db	7
  1164  00F7A3  00                 	db	0
  1165  00F7A4  00                 	db	0
  1166  00F7A5  00                 	db	0
  1167  00F7A6  00                 	db	0
  1168  00F7A7  00                 	db	0
  1169  00F7A8  00                 	db	0
  1170  00F7A9  00                 	db	0
  1171  00F7AA  00                 	db	0
  1172  00F7AB  0C                 	db	12
  1173  00F7AC  00                 	db	0
  1174  00F7AD  18                 	db	24
  1175  00F7AE  00                 	db	0
  1176  00F7AF  30                 	db	48
  1177  00F7B0  00                 	db	0
  1178  00F7B1  60                 	db	96
  1179  00F7B2  00                 	db	0
  1180  00F7B3  30                 	db	48
  1181  00F7B4  00                 	db	0
  1182  00F7B5  18                 	db	24
  1183  00F7B6  00                 	db	0
  1184  00F7B7  0C                 	db	12
  1185  00F7B8  00                 	db	0
  1186  00F7B9  00                 	db	0
  1187  00F7BA  00                 	db	0
  1188  00F7BB  00                 	db	0
  1189  00F7BC  00                 	db	0
  1190  00F7BD  07                 	db	7
  1191  00F7BE  00                 	db	0
  1192  00F7BF  00                 	db	0
  1193  00F7C0  00                 	db	0
  1194  00F7C1  00                 	db	0
  1195  00F7C2  00                 	db	0
  1196  00F7C3  00                 	db	0
  1197  00F7C4  00                 	db	0
  1198  00F7C5  00                 	db	0
  1199  00F7C6  00                 	db	0
  1200  00F7C7  00                 	db	0
  1201  00F7C8  00                 	db	0
  1202  00F7C9  00                 	db	0
  1203  00F7CA  7E                 	db	126
  1204  00F7CB  00                 	db	0
  1205  00F7CC  00                 	db	0
  1206  00F7CD  00                 	db	0
  1207  00F7CE  7E                 	db	126
  1208  00F7CF  00                 	db	0
  1209  00F7D0  00                 	db	0
  1210  00F7D1  00                 	db	0
  1211  00F7D2  00                 	db	0
  1212  00F7D3  00                 	db	0
  1213  00F7D4  00                 	db	0
  1214  00F7D5  00                 	db	0
  1215  00F7D6  00                 	db	0
  1216  00F7D7  00                 	db	0
  1217  00F7D8  07                 	db	7
  1218  00F7D9  00                 	db	0
  1219  00F7DA  00                 	db	0
  1220  00F7DB  00                 	db	0
  1221  00F7DC  00                 	db	0
  1222  00F7DD  00                 	db	0
  1223  00F7DE  00                 	db	0
  1224  00F7DF  00                 	db	0
  1225  00F7E0  00                 	db	0
  1226  00F7E1  60                 	db	96
  1227  00F7E2  00                 	db	0
  1228  00F7E3  30                 	db	48
  1229  00F7E4  00                 	db	0
  1230  00F7E5  18                 	db	24
  1231  00F7E6  00                 	db	0
  1232  00F7E7  0C                 	db	12
  1233  00F7E8  00                 	db	0
  1234  00F7E9  18                 	db	24
  1235  00F7EA  00                 	db	0
  1236  00F7EB  30                 	db	48
  1237  00F7EC  00                 	db	0
  1238  00F7ED  60                 	db	96
  1239  00F7EE  00                 	db	0
  1240  00F7EF  00                 	db	0
  1241  00F7F0  00                 	db	0
  1242  00F7F1  00                 	db	0
  1243  00F7F2  00                 	db	0
  1244  00F7F3  07                 	db	7
  1245  00F7F4  00                 	db	0
  1246  00F7F5  00                 	db	0
  1247  00F7F6  00                 	db	0
  1248  00F7F7  00                 	db	0
  1249  00F7F8  3C                 	db	60
  1250  00F7F9  00                 	db	0
  1251  00F7FA  66                 	db	102
  1252  00F7FB  00                 	db	0
  1253  00F7FC  06                 	db	6
  1254  00F7FD  00                 	db	0
  1255  00F7FE  06                 	db	6
  1256  00F7FF  00                 	db	0
  1257  00F800  0C                 	db	12
  1258  00F801  00                 	db	0
  1259  00F802  18                 	db	24
  1260  00F803  00                 	db	0
  1261  00F804  18                 	db	24
  1262  00F805  00                 	db	0
  1263  00F806  00                 	db	0
  1264  00F807  00                 	db	0
  1265  00F808  18                 	db	24
  1266  00F809  00                 	db	0
  1267  00F80A  00                 	db	0
  1268  00F80B  00                 	db	0
  1269  00F80C  00                 	db	0
  1270  00F80D  00                 	db	0
  1271  00F80E  0C                 	db	12
  1272  00F80F  00                 	db	0
  1273  00F810  00                 	db	0
  1274  00F811  00                 	db	0
  1275  00F812  00                 	db	0
  1276  00F813  0F                 	db	15
  1277  00F814  80                 	db	128
  1278  00F815  38                 	db	56
  1279  00F816  E0                 	db	224
  1280  00F817  30                 	db	48
  1281  00F818  60                 	db	96
  1282  00F819  67                 	db	103
  1283  00F81A  B0                 	db	176
  1284  00F81B  6D                 	db	109
  1285  00F81C  B0                 	db	176
  1286  00F81D  6D                 	db	109
  1287  00F81E  B0                 	db	176
  1288  00F81F  67                 	db	103
  1289  00F820  F0                 	db	240
  1290  00F821  30                 	db	48
  1291  00F822  00                 	db	0
  1292  00F823  38                 	db	56
  1293  00F824  00                 	db	0
  1294  00F825  0F                 	db	15
  1295  00F826  C0                 	db	192
  1296  00F827  00                 	db	0
  1297  00F828  00                 	db	0
  1298  00F829  08                 	db	8
  1299  00F82A  00                 	db	0
  1300  00F82B  00                 	db	0
  1301  00F82C  00                 	db	0
  1302  00F82D  00                 	db	0
  1303  00F82E  18                 	db	24
  1304  00F82F  00                 	db	0
  1305  00F830  18                 	db	24
  1306  00F831  00                 	db	0
  1307  00F832  3C                 	db	60
  1308  00F833  00                 	db	0
  1309  00F834  3C                 	db	60
  1310  00F835  00                 	db	0
  1311  00F836  66                 	db	102
  1312  00F837  00                 	db	0
  1313  00F838  66                 	db	102
  1314  00F839  00                 	db	0
  1315  00F83A  7E                 	db	126
  1316  00F83B  00                 	db	0
  1317  00F83C  C3                 	db	195
  1318  00F83D  00                 	db	0
  1319  00F83E  C3                 	db	195
  1320  00F83F  00                 	db	0
  1321  00F840  00                 	db	0
  1322  00F841  00                 	db	0
  1323  00F842  00                 	db	0
  1324  00F843  00                 	db	0
  1325  00F844  08                 	db	8
  1326  00F845  00                 	db	0
  1327  00F846  00                 	db	0
  1328  00F847  00                 	db	0
  1329  00F848  00                 	db	0
  1330  00F849  7C                 	db	124
  1331  00F84A  00                 	db	0
  1332  00F84B  66                 	db	102
  1333  00F84C  00                 	db	0
  1334  00F84D  66                 	db	102
  1335  00F84E  00                 	db	0
  1336  00F84F  66                 	db	102
  1337  00F850  00                 	db	0
  1338  00F851  7C                 	db	124
  1339  00F852  00                 	db	0
  1340  00F853  66                 	db	102
  1341  00F854  00                 	db	0
  1342  00F855  66                 	db	102
  1343  00F856  00                 	db	0
  1344  00F857  66                 	db	102
  1345  00F858  00                 	db	0
  1346  00F859  7C                 	db	124
  1347  00F85A  00                 	db	0
  1348  00F85B  00                 	db	0
  1349  00F85C  00                 	db	0
  1350  00F85D  00                 	db	0
  1351  00F85E  00                 	db	0
  1352  00F85F  08                 	db	8
  1353  00F860  00                 	db	0
  1354  00F861  00                 	db	0
  1355  00F862  00                 	db	0
  1356  00F863  00                 	db	0
  1357  00F864  3E                 	db	62
  1358  00F865  00                 	db	0
  1359  00F866  63                 	db	99
  1360  00F867  00                 	db	0
  1361  00F868  60                 	db	96
  1362  00F869  00                 	db	0
  1363  00F86A  60                 	db	96
  1364  00F86B  00                 	db	0
  1365  00F86C  60                 	db	96
  1366  00F86D  00                 	db	0
  1367  00F86E  60                 	db	96
  1368  00F86F  00                 	db	0
  1369  00F870  60                 	db	96
  1370  00F871  00                 	db	0
  1371  00F872  63                 	db	99
  1372  00F873  00                 	db	0
  1373  00F874  3E                 	db	62
  1374  00F875  00                 	db	0
  1375  00F876  00                 	db	0
  1376  00F877  00                 	db	0
  1377  00F878  00                 	db	0
  1378  00F879  00                 	db	0
  1379  00F87A  09                 	db	9
  1380  00F87B  00                 	db	0
  1381  00F87C  00                 	db	0
  1382  00F87D  00                 	db	0
  1383  00F87E  00                 	db	0
  1384  00F87F  7C                 	db	124
  1385  00F880  00                 	db	0
  1386  00F881  66                 	db	102
  1387  00F882  00                 	db	0
  1388  00F883  63                 	db	99
  1389  00F884  00                 	db	0
  1390  00F885  63                 	db	99
  1391  00F886  00                 	db	0
  1392  00F887  63                 	db	99
  1393  00F888  00                 	db	0
  1394  00F889  63                 	db	99
  1395  00F88A  00                 	db	0
  1396  00F88B  63                 	db	99
  1397  00F88C  00                 	db	0
  1398  00F88D  66                 	db	102
  1399  00F88E  00                 	db	0
  1400  00F88F  7C                 	db	124
  1401  00F890  00                 	db	0
  1402  00F891  00                 	db	0
  1403  00F892  00                 	db	0
  1404  00F893  00                 	db	0
  1405  00F894  00                 	db	0
  1406  00F895  08                 	db	8
  1407  00F896  00                 	db	0
  1408  00F897  00                 	db	0
  1409  00F898  00                 	db	0
  1410  00F899  00                 	db	0
  1411  00F89A  7E                 	db	126
  1412  00F89B  00                 	db	0
  1413  00F89C  60                 	db	96
  1414  00F89D  00                 	db	0
  1415  00F89E  60                 	db	96
  1416  00F89F  00                 	db	0
  1417  00F8A0  60                 	db	96
  1418  00F8A1  00                 	db	0
  1419  00F8A2  7C                 	db	124
  1420  00F8A3  00                 	db	0
  1421  00F8A4  60                 	db	96
  1422  00F8A5  00                 	db	0
  1423  00F8A6  60                 	db	96
  1424  00F8A7  00                 	db	0
  1425  00F8A8  60                 	db	96
  1426  00F8A9  00                 	db	0
  1427  00F8AA  7E                 	db	126
  1428  00F8AB  00                 	db	0
  1429  00F8AC  00                 	db	0
  1430  00F8AD  00                 	db	0
  1431  00F8AE  00                 	db	0
  1432  00F8AF  00                 	db	0
  1433  00F8B0  07                 	db	7
  1434  00F8B1  00                 	db	0
  1435  00F8B2  00                 	db	0
  1436  00F8B3  00                 	db	0
  1437  00F8B4  00                 	db	0
  1438  00F8B5  7E                 	db	126
  1439  00F8B6  00                 	db	0
  1440  00F8B7  60                 	db	96
  1441  00F8B8  00                 	db	0
  1442  00F8B9  60                 	db	96
  1443  00F8BA  00                 	db	0
  1444  00F8BB  60                 	db	96
  1445  00F8BC  00                 	db	0
  1446  00F8BD  7C                 	db	124
  1447  00F8BE  00                 	db	0
  1448  00F8BF  60                 	db	96
  1449  00F8C0  00                 	db	0
  1450  00F8C1  60                 	db	96
  1451  00F8C2  00                 	db	0
  1452  00F8C3  60                 	db	96
  1453  00F8C4  00                 	db	0
  1454  00F8C5  60                 	db	96
  1455  00F8C6  00                 	db	0
  1456  00F8C7  00                 	db	0
  1457  00F8C8  00                 	db	0
  1458  00F8C9  00                 	db	0
  1459  00F8CA  00                 	db	0
  1460  00F8CB  09                 	db	9
  1461  00F8CC  00                 	db	0
  1462  00F8CD  00                 	db	0
  1463  00F8CE  00                 	db	0
  1464  00F8CF  00                 	db	0
  1465  00F8D0  3E                 	db	62
  1466  00F8D1  00                 	db	0
  1467  00F8D2  63                 	db	99
  1468  00F8D3  00                 	db	0
  1469  00F8D4  60                 	db	96
  1470  00F8D5  00                 	db	0
  1471  00F8D6  60                 	db	96
  1472  00F8D7  00                 	db	0
  1473  00F8D8  6F                 	db	111
  1474  00F8D9  00                 	db	0
  1475  00F8DA  63                 	db	99
  1476  00F8DB  00                 	db	0
  1477  00F8DC  63                 	db	99
  1478  00F8DD  00                 	db	0
  1479  00F8DE  67                 	db	103
  1480  00F8DF  00                 	db	0
  1481  00F8E0  3F                 	db	63
  1482  00F8E1  00                 	db	0
  1483  00F8E2  00                 	db	0
  1484  00F8E3  00                 	db	0
  1485  00F8E4  00                 	db	0
  1486  00F8E5  00                 	db	0
  1487  00F8E6  09                 	db	9
  1488  00F8E7  00                 	db	0
  1489  00F8E8  00                 	db	0
  1490  00F8E9  00                 	db	0
  1491  00F8EA  00                 	db	0
  1492  00F8EB  63                 	db	99
  1493  00F8EC  00                 	db	0
  1494  00F8ED  63                 	db	99
  1495  00F8EE  00                 	db	0
  1496  00F8EF  63                 	db	99
  1497  00F8F0  00                 	db	0
  1498  00F8F1  63                 	db	99
  1499  00F8F2  00                 	db	0
  1500  00F8F3  7F                 	db	127
  1501  00F8F4  00                 	db	0
  1502  00F8F5  63                 	db	99
  1503  00F8F6  00                 	db	0
  1504  00F8F7  63                 	db	99
  1505  00F8F8  00                 	db	0
  1506  00F8F9  63                 	db	99
  1507  00F8FA  00                 	db	0
  1508  00F8FB  63                 	db	99
  1509  00F8FC  00                 	db	0
  1510  00F8FD  00                 	db	0
  1511  00F8FE  00                 	db	0
  1512  00F8FF  00                 	db	0
  1513  00F900  00                 	db	0
  1514  00F901  04                 	db	4
  1515  00F902  00                 	db	0
  1516  00F903  00                 	db	0
  1517  00F904  00                 	db	0
  1518  00F905  00                 	db	0
  1519  00F906  60                 	db	96
  1520  00F907  00                 	db	0
  1521  00F908  60                 	db	96
  1522  00F909  00                 	db	0
  1523  00F90A  60                 	db	96
  1524  00F90B  00                 	db	0
  1525  00F90C  60                 	db	96
  1526  00F90D  00                 	db	0
  1527  00F90E  60                 	db	96
  1528  00F90F  00                 	db	0
  1529  00F910  60                 	db	96
  1530  00F911  00                 	db	0
  1531  00F912  60                 	db	96
  1532  00F913  00                 	db	0
  1533  00F914  60                 	db	96
  1534  00F915  00                 	db	0
  1535  00F916  60                 	db	96
  1536  00F917  00                 	db	0
  1537  00F918  00                 	db	0
  1538  00F919  00                 	db	0
  1539  00F91A  00                 	db	0
  1540  00F91B  00                 	db	0
  1541  00F91C  06                 	db	6
  1542  00F91D  00                 	db	0
  1543  00F91E  00                 	db	0
  1544  00F91F  00                 	db	0
  1545  00F920  00                 	db	0
  1546  00F921  18                 	db	24
  1547  00F922  00                 	db	0
  1548  00F923  18                 	db	24
  1549  00F924  00                 	db	0
  1550  00F925  18                 	db	24
  1551  00F926  00                 	db	0
  1552  00F927  18                 	db	24
  1553  00F928  00                 	db	0
  1554  00F929  18                 	db	24
  1555  00F92A  00                 	db	0
  1556  00F92B  18                 	db	24
  1557  00F92C  00                 	db	0
  1558  00F92D  D8                 	db	216
  1559  00F92E  00                 	db	0
  1560  00F92F  D8                 	db	216
  1561  00F930  00                 	db	0
  1562  00F931  70                 	db	112
  1563  00F932  00                 	db	0
  1564  00F933  00                 	db	0
  1565  00F934  00                 	db	0
  1566  00F935  00                 	db	0
  1567  00F936  00                 	db	0
  1568  00F937  08                 	db	8
  1569  00F938  00                 	db	0
  1570  00F939  00                 	db	0
  1571  00F93A  00                 	db	0
  1572  00F93B  00                 	db	0
  1573  00F93C  66                 	db	102
  1574  00F93D  00                 	db	0
  1575  00F93E  6C                 	db	108
  1576  00F93F  00                 	db	0
  1577  00F940  78                 	db	120
  1578  00F941  00                 	db	0
  1579  00F942  70                 	db	112
  1580  00F943  00                 	db	0
  1581  00F944  70                 	db	112
  1582  00F945  00                 	db	0
  1583  00F946  78                 	db	120
  1584  00F947  00                 	db	0
  1585  00F948  6C                 	db	108
  1586  00F949  00                 	db	0
  1587  00F94A  66                 	db	102
  1588  00F94B  00                 	db	0
  1589  00F94C  63                 	db	99
  1590  00F94D  00                 	db	0
  1591  00F94E  00                 	db	0
  1592  00F94F  00                 	db	0
  1593  00F950  00                 	db	0
  1594  00F951  00                 	db	0
  1595  00F952  07                 	db	7
  1596  00F953  00                 	db	0
  1597  00F954  00                 	db	0
  1598  00F955  00                 	db	0
  1599  00F956  00                 	db	0
  1600  00F957  60                 	db	96
  1601  00F958  00                 	db	0
  1602  00F959  60                 	db	96
  1603  00F95A  00                 	db	0
  1604  00F95B  60                 	db	96
  1605  00F95C  00                 	db	0
  1606  00F95D  60                 	db	96
  1607  00F95E  00                 	db	0
  1608  00F95F  60                 	db	96
  1609  00F960  00                 	db	0
  1610  00F961  60                 	db	96
  1611  00F962  00                 	db	0
  1612  00F963  60                 	db	96
  1613  00F964  00                 	db	0
  1614  00F965  60                 	db	96
  1615  00F966  00                 	db	0
  1616  00F967  7E                 	db	126
  1617  00F968  00                 	db	0
  1618  00F969  00                 	db	0
  1619  00F96A  00                 	db	0
  1620  00F96B  00                 	db	0
  1621  00F96C  00                 	db	0
  1622  00F96D  0A                 	db	10
  1623  00F96E  00                 	db	0
  1624  00F96F  00                 	db	0
  1625  00F970  00                 	db	0
  1626  00F971  00                 	db	0
  1627  00F972  61                 	db	97
  1628  00F973  80                 	db	128
  1629  00F974  61                 	db	97
  1630  00F975  80                 	db	128
  1631  00F976  73                 	db	115
  1632  00F977  80                 	db	128
  1633  00F978  73                 	db	115
  1634  00F979  80                 	db	128
  1635  00F97A  7F                 	db	127
  1636  00F97B  80                 	db	128
  1637  00F97C  7F                 	db	127
  1638  00F97D  80                 	db	128
  1639  00F97E  6D                 	db	109
  1640  00F97F  80                 	db	128
  1641  00F980  6D                 	db	109
  1642  00F981  80                 	db	128
  1643  00F982  61                 	db	97
  1644  00F983  80                 	db	128
  1645  00F984  00                 	db	0
  1646  00F985  00                 	db	0
  1647  00F986  00                 	db	0
  1648  00F987  00                 	db	0
  1649  00F988  09                 	db	9
  1650  00F989  00                 	db	0
  1651  00F98A  00                 	db	0
  1652  00F98B  00                 	db	0
  1653  00F98C  00                 	db	0
  1654  00F98D  63                 	db	99
  1655  00F98E  00                 	db	0
  1656  00F98F  73                 	db	115
  1657  00F990  00                 	db	0
  1658  00F991  73                 	db	115
  1659  00F992  00                 	db	0
  1660  00F993  7B                 	db	123
  1661  00F994  00                 	db	0
  1662  00F995  7B                 	db	123
  1663  00F996  00                 	db	0
  1664  00F997  6F                 	db	111
  1665  00F998  00                 	db	0
  1666  00F999  67                 	db	103
  1667  00F99A  00                 	db	0
  1668  00F99B  67                 	db	103
  1669  00F99C  00                 	db	0
  1670  00F99D  63                 	db	99
  1671  00F99E  00                 	db	0
  1672  00F99F  00                 	db	0
  1673  00F9A0  00                 	db	0
  1674  00F9A1  00                 	db	0
  1675  00F9A2  00                 	db	0
  1676  00F9A3  09                 	db	9
  1677  00F9A4  00                 	db	0
  1678  00F9A5  00                 	db	0
  1679  00F9A6  00                 	db	0
  1680  00F9A7  00                 	db	0
  1681  00F9A8  3E                 	db	62
  1682  00F9A9  00                 	db	0
  1683  00F9AA  63                 	db	99
  1684  00F9AB  00                 	db	0
  1685  00F9AC  63                 	db	99
  1686  00F9AD  00                 	db	0
  1687  00F9AE  63                 	db	99
  1688  00F9AF  00                 	db	0
  1689  00F9B0  63                 	db	99
  1690  00F9B1  00                 	db	0
  1691  00F9B2  63                 	db	99
  1692  00F9B3  00                 	db	0
  1693  00F9B4  63                 	db	99
  1694  00F9B5  00                 	db	0
  1695  00F9B6  63                 	db	99
  1696  00F9B7  00                 	db	0
  1697  00F9B8  3E                 	db	62
  1698  00F9B9  00                 	db	0
  1699  00F9BA  00                 	db	0
  1700  00F9BB  00                 	db	0
  1701  00F9BC  00                 	db	0
  1702  00F9BD  00                 	db	0
  1703  00F9BE  08                 	db	8
  1704  00F9BF  00                 	db	0
  1705  00F9C0  00                 	db	0
  1706  00F9C1  00                 	db	0
  1707  00F9C2  00                 	db	0
  1708  00F9C3  7E                 	db	126
  1709  00F9C4  00                 	db	0
  1710  00F9C5  63                 	db	99
  1711  00F9C6  00                 	db	0
  1712  00F9C7  63                 	db	99
  1713  00F9C8  00                 	db	0
  1714  00F9C9  63                 	db	99
  1715  00F9CA  00                 	db	0
  1716  00F9CB  7E                 	db	126
  1717  00F9CC  00                 	db	0
  1718  00F9CD  60                 	db	96
  1719  00F9CE  00                 	db	0
  1720  00F9CF  60                 	db	96
  1721  00F9D0  00                 	db	0
  1722  00F9D1  60                 	db	96
  1723  00F9D2  00                 	db	0
  1724  00F9D3  60                 	db	96
  1725  00F9D4  00                 	db	0
  1726  00F9D5  00                 	db	0
  1727  00F9D6  00                 	db	0
  1728  00F9D7  00                 	db	0
  1729  00F9D8  00                 	db	0
  1730  00F9D9  09                 	db	9
  1731  00F9DA  00                 	db	0
  1732  00F9DB  00                 	db	0
  1733  00F9DC  00                 	db	0
  1734  00F9DD  00                 	db	0
  1735  00F9DE  3E                 	db	62
  1736  00F9DF  00                 	db	0
  1737  00F9E0  63                 	db	99
  1738  00F9E1  00                 	db	0
  1739  00F9E2  63                 	db	99
  1740  00F9E3  00                 	db	0
  1741  00F9E4  63                 	db	99
  1742  00F9E5  00                 	db	0
  1743  00F9E6  63                 	db	99
  1744  00F9E7  00                 	db	0
  1745  00F9E8  63                 	db	99
  1746  00F9E9  00                 	db	0
  1747  00F9EA  6F                 	db	111
  1748  00F9EB  00                 	db	0
  1749  00F9EC  67                 	db	103
  1750  00F9ED  00                 	db	0
  1751  00F9EE  3E                 	db	62
  1752  00F9EF  00                 	db	0
  1753  00F9F0  03                 	db	3
  1754  00F9F1  00                 	db	0
  1755  00F9F2  00                 	db	0
  1756  00F9F3  00                 	db	0
  1757  00F9F4  09                 	db	9
  1758  00F9F5  00                 	db	0
  1759  00F9F6  00                 	db	0
  1760  00F9F7  00                 	db	0
  1761  00F9F8  00                 	db	0
  1762  00F9F9  7E                 	db	126
  1763  00F9FA  00                 	db	0
  1764  00F9FB  63                 	db	99
  1765  00F9FC  00                 	db	0
  1766  00F9FD  63                 	db	99
  1767  00F9FE  00                 	db	0
  1768  00F9FF  63                 	db	99
  1769  00FA00  00                 	db	0
  1770  00FA01  7E                 	db	126
  1771  00FA02  00                 	db	0
  1772  00FA03  63                 	db	99
  1773  00FA04  00                 	db	0
  1774  00FA05  63                 	db	99
  1775  00FA06  00                 	db	0
  1776  00FA07  63                 	db	99
  1777  00FA08  00                 	db	0
  1778  00FA09  63                 	db	99
  1779  00FA0A  00                 	db	0
  1780  00FA0B  00                 	db	0
  1781  00FA0C  00                 	db	0
  1782  00FA0D  00                 	db	0
  1783  00FA0E  00                 	db	0
  1784  00FA0F  08                 	db	8
  1785  00FA10  00                 	db	0
  1786  00FA11  00                 	db	0
  1787  00FA12  00                 	db	0
  1788  00FA13  00                 	db	0
  1789  00FA14  3C                 	db	60
  1790  00FA15  00                 	db	0
  1791  00FA16  66                 	db	102
  1792  00FA17  00                 	db	0
  1793  00FA18  60                 	db	96
  1794  00FA19  00                 	db	0
  1795  00FA1A  60                 	db	96
  1796  00FA1B  00                 	db	0
  1797  00FA1C  3C                 	db	60
  1798  00FA1D  00                 	db	0
  1799  00FA1E  06                 	db	6
  1800  00FA1F  00                 	db	0
  1801  00FA20  06                 	db	6
  1802  00FA21  00                 	db	0
  1803  00FA22  66                 	db	102
  1804  00FA23  00                 	db	0
  1805  00FA24  3C                 	db	60
  1806  00FA25  00                 	db	0
  1807  00FA26  00                 	db	0
  1808  00FA27  00                 	db	0
  1809  00FA28  00                 	db	0
  1810  00FA29  00                 	db	0
  1811  00FA2A  08                 	db	8
  1812  00FA2B  00                 	db	0
  1813  00FA2C  00                 	db	0
  1814  00FA2D  00                 	db	0
  1815  00FA2E  00                 	db	0
  1816  00FA2F  7E                 	db	126
  1817  00FA30  00                 	db	0
  1818  00FA31  18                 	db	24
  1819  00FA32  00                 	db	0
  1820  00FA33  18                 	db	24
  1821  00FA34  00                 	db	0
  1822  00FA35  18                 	db	24
  1823  00FA36  00                 	db	0
  1824  00FA37  18                 	db	24
  1825  00FA38  00                 	db	0
  1826  00FA39  18                 	db	24
  1827  00FA3A  00                 	db	0
  1828  00FA3B  18                 	db	24
  1829  00FA3C  00                 	db	0
  1830  00FA3D  18                 	db	24
  1831  00FA3E  00                 	db	0
  1832  00FA3F  18                 	db	24
  1833  00FA40  00                 	db	0
  1834  00FA41  00                 	db	0
  1835  00FA42  00                 	db	0
  1836  00FA43  00                 	db	0
  1837  00FA44  00                 	db	0
  1838  00FA45  09                 	db	9
  1839  00FA46  00                 	db	0
  1840  00FA47  00                 	db	0
  1841  00FA48  00                 	db	0
  1842  00FA49  00                 	db	0
  1843  00FA4A  63                 	db	99
  1844  00FA4B  00                 	db	0
  1845  00FA4C  63                 	db	99
  1846  00FA4D  00                 	db	0
  1847  00FA4E  63                 	db	99
  1848  00FA4F  00                 	db	0
  1849  00FA50  63                 	db	99
  1850  00FA51  00                 	db	0
  1851  00FA52  63                 	db	99
  1852  00FA53  00                 	db	0
  1853  00FA54  63                 	db	99
  1854  00FA55  00                 	db	0
  1855  00FA56  63                 	db	99
  1856  00FA57  00                 	db	0
  1857  00FA58  63                 	db	99
  1858  00FA59  00                 	db	0
  1859  00FA5A  3E                 	db	62
  1860  00FA5B  00                 	db	0
  1861  00FA5C  00                 	db	0
  1862  00FA5D  00                 	db	0
  1863  00FA5E  00                 	db	0
  1864  00FA5F  00                 	db	0
  1865  00FA60  08                 	db	8
  1866  00FA61  00                 	db	0
  1867  00FA62  00                 	db	0
  1868  00FA63  00                 	db	0
  1869  00FA64  00                 	db	0
  1870  00FA65  C3                 	db	195
  1871  00FA66  00                 	db	0
  1872  00FA67  C3                 	db	195
  1873  00FA68  00                 	db	0
  1874  00FA69  66                 	db	102
  1875  00FA6A  00                 	db	0
  1876  00FA6B  66                 	db	102
  1877  00FA6C  00                 	db	0
  1878  00FA6D  66                 	db	102
  1879  00FA6E  00                 	db	0
  1880  00FA6F  3C                 	db	60
  1881  00FA70  00                 	db	0
  1882  00FA71  3C                 	db	60
  1883  00FA72  00                 	db	0
  1884  00FA73  18                 	db	24
  1885  00FA74  00                 	db	0
  1886  00FA75  18                 	db	24
  1887  00FA76  00                 	db	0
  1888  00FA77  00                 	db	0
  1889  00FA78  00                 	db	0
  1890  00FA79  00                 	db	0
  1891  00FA7A  00                 	db	0
  1892  00FA7B  0C                 	db	12
  1893  00FA7C  00                 	db	0
  1894  00FA7D  00                 	db	0
  1895  00FA7E  00                 	db	0
  1896  00FA7F  00                 	db	0
  1897  00FA80  C0                 	db	192
  1898  00FA81  30                 	db	48
  1899  00FA82  C0                 	db	192
  1900  00FA83  30                 	db	48
  1901  00FA84  66                 	db	102
  1902  00FA85  60                 	db	96
  1903  00FA86  66                 	db	102
  1904  00FA87  60                 	db	96
  1905  00FA88  66                 	db	102
  1906  00FA89  60                 	db	96
  1907  00FA8A  3F                 	db	63
  1908  00FA8B  C0                 	db	192
  1909  00FA8C  3F                 	db	63
  1910  00FA8D  C0                 	db	192
  1911  00FA8E  19                 	db	25
  1912  00FA8F  80                 	db	128
  1913  00FA90  19                 	db	25
  1914  00FA91  80                 	db	128
  1915  00FA92  00                 	db	0
  1916  00FA93  00                 	db	0
  1917  00FA94  00                 	db	0
  1918  00FA95  00                 	db	0
  1919  00FA96  08                 	db	8
  1920  00FA97  00                 	db	0
  1921  00FA98  00                 	db	0
  1922  00FA99  00                 	db	0
  1923  00FA9A  00                 	db	0
  1924  00FA9B  C3                 	db	195
  1925  00FA9C  00                 	db	0
  1926  00FA9D  C3                 	db	195
  1927  00FA9E  00                 	db	0
  1928  00FA9F  66                 	db	102
  1929  00FAA0  00                 	db	0
  1930  00FAA1  3C                 	db	60
  1931  00FAA2  00                 	db	0
  1932  00FAA3  18                 	db	24
  1933  00FAA4  00                 	db	0
  1934  00FAA5  3C                 	db	60
  1935  00FAA6  00                 	db	0
  1936  00FAA7  66                 	db	102
  1937  00FAA8  00                 	db	0
  1938  00FAA9  C3                 	db	195
  1939  00FAAA  00                 	db	0
  1940  00FAAB  C3                 	db	195
  1941  00FAAC  00                 	db	0
  1942  00FAAD  00                 	db	0
  1943  00FAAE  00                 	db	0
  1944  00FAAF  00                 	db	0
  1945  00FAB0  00                 	db	0
  1946  00FAB1  08                 	db	8
  1947  00FAB2  00                 	db	0
  1948  00FAB3  00                 	db	0
  1949  00FAB4  00                 	db	0
  1950  00FAB5  00                 	db	0
  1951  00FAB6  C3                 	db	195
  1952  00FAB7  00                 	db	0
  1953  00FAB8  C3                 	db	195
  1954  00FAB9  00                 	db	0
  1955  00FABA  66                 	db	102
  1956  00FABB  00                 	db	0
  1957  00FABC  3C                 	db	60
  1958  00FABD  00                 	db	0
  1959  00FABE  18                 	db	24
  1960  00FABF  00                 	db	0
  1961  00FAC0  18                 	db	24
  1962  00FAC1  00                 	db	0
  1963  00FAC2  18                 	db	24
  1964  00FAC3  00                 	db	0
  1965  00FAC4  18                 	db	24
  1966  00FAC5  00                 	db	0
  1967  00FAC6  18                 	db	24
  1968  00FAC7  00                 	db	0
  1969  00FAC8  00                 	db	0
  1970  00FAC9  00                 	db	0
  1971  00FACA  00                 	db	0
  1972  00FACB  00                 	db	0
  1973  00FACC  08                 	db	8
  1974  00FACD  00                 	db	0
  1975  00FACE  00                 	db	0
  1976  00FACF  00                 	db	0
  1977  00FAD0  00                 	db	0
  1978  00FAD1  FF                 	db	255
  1979  00FAD2  00                 	db	0
  1980  00FAD3  03                 	db	3
  1981  00FAD4  00                 	db	0
  1982  00FAD5  06                 	db	6
  1983  00FAD6  00                 	db	0
  1984  00FAD7  0C                 	db	12
  1985  00FAD8  00                 	db	0
  1986  00FAD9  18                 	db	24
  1987  00FADA  00                 	db	0
  1988  00FADB  30                 	db	48
  1989  00FADC  00                 	db	0
  1990  00FADD  60                 	db	96
  1991  00FADE  00                 	db	0
  1992  00FADF  C0                 	db	192
  1993  00FAE0  00                 	db	0
  1994  00FAE1  FF                 	db	255
  1995  00FAE2  00                 	db	0
  1996  00FAE3  00                 	db	0
  1997  00FAE4  00                 	db	0
  1998  00FAE5  00                 	db	0
  1999  00FAE6  00                 	db	0
  2000  00FAE7  04                 	db	4
  2001  00FAE8  00                 	db	0
  2002  00FAE9  00                 	db	0
  2003  00FAEA  00                 	db	0
  2004  00FAEB  00                 	db	0
  2005  00FAEC  70                 	db	112
  2006  00FAED  00                 	db	0
  2007  00FAEE  60                 	db	96
  2008  00FAEF  00                 	db	0
  2009  00FAF0  60                 	db	96
  2010  00FAF1  00                 	db	0
  2011  00FAF2  60                 	db	96
  2012  00FAF3  00                 	db	0
  2013  00FAF4  60                 	db	96
  2014  00FAF5  00                 	db	0
  2015  00FAF6  60                 	db	96
  2016  00FAF7  00                 	db	0
  2017  00FAF8  60                 	db	96
  2018  00FAF9  00                 	db	0
  2019  00FAFA  60                 	db	96
  2020  00FAFB  00                 	db	0
  2021  00FAFC  60                 	db	96
  2022  00FAFD  00                 	db	0
  2023  00FAFE  60                 	db	96
  2024  00FAFF  00                 	db	0
  2025  00FB00  70                 	db	112
  2026  00FB01  00                 	db	0
  2027  00FB02  06                 	db	6
  2028  00FB03  00                 	db	0
  2029  00FB04  00                 	db	0
  2030  00FB05  00                 	db	0
  2031  00FB06  00                 	db	0
  2032  00FB07  60                 	db	96
  2033  00FB08  00                 	db	0
  2034  00FB09  60                 	db	96
  2035  00FB0A  00                 	db	0
  2036  00FB0B  60                 	db	96
  2037  00FB0C  00                 	db	0
  2038  00FB0D  30                 	db	48
  2039  00FB0E  00                 	db	0
  2040  00FB0F  30                 	db	48
  2041  00FB10  00                 	db	0
  2042  00FB11  18                 	db	24
  2043  00FB12  00                 	db	0
  2044  00FB13  18                 	db	24
  2045  00FB14  00                 	db	0
  2046  00FB15  0C                 	db	12
  2047  00FB16  00                 	db	0
  2048  00FB17  0C                 	db	12
  2049  00FB18  00                 	db	0
  2050  00FB19  00                 	db	0
  2051  00FB1A  00                 	db	0
  2052  00FB1B  00                 	db	0
  2053  00FB1C  00                 	db	0
  2054  00FB1D  04                 	db	4
  2055  00FB1E  00                 	db	0
  2056  00FB1F  00                 	db	0
  2057  00FB20  00                 	db	0
  2058  00FB21  00                 	db	0
  2059  00FB22  70                 	db	112
  2060  00FB23  00                 	db	0
  2061  00FB24  30                 	db	48
  2062  00FB25  00                 	db	0
  2063  00FB26  30                 	db	48
  2064  00FB27  00                 	db	0
  2065  00FB28  30                 	db	48
  2066  00FB29  00                 	db	0
  2067  00FB2A  30                 	db	48
  2068  00FB2B  00                 	db	0
  2069  00FB2C  30                 	db	48
  2070  00FB2D  00                 	db	0
  2071  00FB2E  30                 	db	48
  2072  00FB2F  00                 	db	0
  2073  00FB30  30                 	db	48
  2074  00FB31  00                 	db	0
  2075  00FB32  30                 	db	48
  2076  00FB33  00                 	db	0
  2077  00FB34  30                 	db	48
  2078  00FB35  00                 	db	0
  2079  00FB36  70                 	db	112
  2080  00FB37  00                 	db	0
  2081  00FB38  07                 	db	7
  2082  00FB39  00                 	db	0
  2083  00FB3A  00                 	db	0
  2084  00FB3B  18                 	db	24
  2085  00FB3C  00                 	db	0
  2086  00FB3D  3C                 	db	60
  2087  00FB3E  00                 	db	0
  2088  00FB3F  66                 	db	102
  2089  00FB40  00                 	db	0
  2090  00FB41  00                 	db	0
  2091  00FB42  00                 	db	0
  2092  00FB43  00                 	db	0
  2093  00FB44  00                 	db	0
  2094  00FB45  00                 	db	0
  2095  00FB46  00                 	db	0
  2096  00FB47  00                 	db	0
  2097  00FB48  00                 	db	0
  2098  00FB49  00                 	db	0
  2099  00FB4A  00                 	db	0
  2100  00FB4B  00                 	db	0
  2101  00FB4C  00                 	db	0
  2102  00FB4D  00                 	db	0
  2103  00FB4E  00                 	db	0
  2104  00FB4F  00                 	db	0
  2105  00FB50  00                 	db	0
  2106  00FB51  00                 	db	0
  2107  00FB52  00                 	db	0
  2108  00FB53  07                 	db	7
  2109  00FB54  00                 	db	0
  2110  00FB55  00                 	db	0
  2111  00FB56  00                 	db	0
  2112  00FB57  00                 	db	0
  2113  00FB58  00                 	db	0
  2114  00FB59  00                 	db	0
  2115  00FB5A  00                 	db	0
  2116  00FB5B  00                 	db	0
  2117  00FB5C  00                 	db	0
  2118  00FB5D  00                 	db	0
  2119  00FB5E  00                 	db	0
  2120  00FB5F  00                 	db	0
  2121  00FB60  00                 	db	0
  2122  00FB61  00                 	db	0
  2123  00FB62  00                 	db	0
  2124  00FB63  00                 	db	0
  2125  00FB64  00                 	db	0
  2126  00FB65  00                 	db	0
  2127  00FB66  00                 	db	0
  2128  00FB67  00                 	db	0
  2129  00FB68  00                 	db	0
  2130  00FB69  00                 	db	0
  2131  00FB6A  00                 	db	0
  2132  00FB6B  00                 	db	0
  2133  00FB6C  FE                 	db	254
  2134  00FB6D  00                 	db	0
  2135  00FB6E  04                 	db	4
  2136  00FB6F  00                 	db	0
  2137  00FB70  00                 	db	0
  2138  00FB71  00                 	db	0
  2139  00FB72  00                 	db	0
  2140  00FB73  60                 	db	96
  2141  00FB74  00                 	db	0
  2142  00FB75  30                 	db	48
  2143  00FB76  00                 	db	0
  2144  00FB77  00                 	db	0
  2145  00FB78  00                 	db	0
  2146  00FB79  00                 	db	0
  2147  00FB7A  00                 	db	0
  2148  00FB7B  00                 	db	0
  2149  00FB7C  00                 	db	0
  2150  00FB7D  00                 	db	0
  2151  00FB7E  00                 	db	0
  2152  00FB7F  00                 	db	0
  2153  00FB80  00                 	db	0
  2154  00FB81  00                 	db	0
  2155  00FB82  00                 	db	0
  2156  00FB83  00                 	db	0
  2157  00FB84  00                 	db	0
  2158  00FB85  00                 	db	0
  2159  00FB86  00                 	db	0
  2160  00FB87  00                 	db	0
  2161  00FB88  00                 	db	0
  2162  00FB89  07                 	db	7
  2163  00FB8A  00                 	db	0
  2164  00FB8B  00                 	db	0
  2165  00FB8C  00                 	db	0
  2166  00FB8D  00                 	db	0
  2167  00FB8E  00                 	db	0
  2168  00FB8F  00                 	db	0
  2169  00FB90  00                 	db	0
  2170  00FB91  00                 	db	0
  2171  00FB92  00                 	db	0
  2172  00FB93  00                 	db	0
  2173  00FB94  3C                 	db	60
  2174  00FB95  00                 	db	0
  2175  00FB96  06                 	db	6
  2176  00FB97  00                 	db	0
  2177  00FB98  3E                 	db	62
  2178  00FB99  00                 	db	0
  2179  00FB9A  66                 	db	102
  2180  00FB9B  00                 	db	0
  2181  00FB9C  66                 	db	102
  2182  00FB9D  00                 	db	0
  2183  00FB9E  3E                 	db	62
  2184  00FB9F  00                 	db	0
  2185  00FBA0  00                 	db	0
  2186  00FBA1  00                 	db	0
  2187  00FBA2  00                 	db	0
  2188  00FBA3  00                 	db	0
  2189  00FBA4  07                 	db	7
  2190  00FBA5  00                 	db	0
  2191  00FBA6  00                 	db	0
  2192  00FBA7  00                 	db	0
  2193  00FBA8  00                 	db	0
  2194  00FBA9  60                 	db	96
  2195  00FBAA  00                 	db	0
  2196  00FBAB  60                 	db	96
  2197  00FBAC  00                 	db	0
  2198  00FBAD  60                 	db	96
  2199  00FBAE  00                 	db	0
  2200  00FBAF  7C                 	db	124
  2201  00FBB0  00                 	db	0
  2202  00FBB1  66                 	db	102
  2203  00FBB2  00                 	db	0
  2204  00FBB3  66                 	db	102
  2205  00FBB4  00                 	db	0
  2206  00FBB5  66                 	db	102
  2207  00FBB6  00                 	db	0
  2208  00FBB7  66                 	db	102
  2209  00FBB8  00                 	db	0
  2210  00FBB9  7C                 	db	124
  2211  00FBBA  00                 	db	0
  2212  00FBBB  00                 	db	0
  2213  00FBBC  00                 	db	0
  2214  00FBBD  00                 	db	0
  2215  00FBBE  00                 	db	0
  2216  00FBBF  07                 	db	7
  2217  00FBC0  00                 	db	0
  2218  00FBC1  00                 	db	0
  2219  00FBC2  00                 	db	0
  2220  00FBC3  00                 	db	0
  2221  00FBC4  00                 	db	0
  2222  00FBC5  00                 	db	0
  2223  00FBC6  00                 	db	0
  2224  00FBC7  00                 	db	0
  2225  00FBC8  00                 	db	0
  2226  00FBC9  00                 	db	0
  2227  00FBCA  3C                 	db	60
  2228  00FBCB  00                 	db	0
  2229  00FBCC  66                 	db	102
  2230  00FBCD  00                 	db	0
  2231  00FBCE  60                 	db	96
  2232  00FBCF  00                 	db	0
  2233  00FBD0  60                 	db	96
  2234  00FBD1  00                 	db	0
  2235  00FBD2  66                 	db	102
  2236  00FBD3  00                 	db	0
  2237  00FBD4  3C                 	db	60
  2238  00FBD5  00                 	db	0
  2239  00FBD6  00                 	db	0
  2240  00FBD7  00                 	db	0
  2241  00FBD8  00                 	db	0
  2242  00FBD9  00                 	db	0
  2243  00FBDA  07                 	db	7
  2244  00FBDB  00                 	db	0
  2245  00FBDC  00                 	db	0
  2246  00FBDD  00                 	db	0
  2247  00FBDE  00                 	db	0
  2248  00FBDF  06                 	db	6
  2249  00FBE0  00                 	db	0
  2250  00FBE1  06                 	db	6
  2251  00FBE2  00                 	db	0
  2252  00FBE3  06                 	db	6
  2253  00FBE4  00                 	db	0
  2254  00FBE5  3E                 	db	62
  2255  00FBE6  00                 	db	0
  2256  00FBE7  66                 	db	102
  2257  00FBE8  00                 	db	0
  2258  00FBE9  66                 	db	102
  2259  00FBEA  00                 	db	0
  2260  00FBEB  66                 	db	102
  2261  00FBEC  00                 	db	0
  2262  00FBED  66                 	db	102
  2263  00FBEE  00                 	db	0
  2264  00FBEF  3E                 	db	62
  2265  00FBF0  00                 	db	0
  2266  00FBF1  00                 	db	0
  2267  00FBF2  00                 	db	0
  2268  00FBF3  00                 	db	0
  2269  00FBF4  00                 	db	0
  2270  00FBF5  07                 	db	7
  2271  00FBF6  00                 	db	0
  2272  00FBF7  00                 	db	0
  2273  00FBF8  00                 	db	0
  2274  00FBF9  00                 	db	0
  2275  00FBFA  00                 	db	0
  2276  00FBFB  00                 	db	0
  2277  00FBFC  00                 	db	0
  2278  00FBFD  00                 	db	0
  2279  00FBFE  00                 	db	0
  2280  00FBFF  00                 	db	0
  2281  00FC00  3C                 	db	60
  2282  00FC01  00                 	db	0
  2283  00FC02  66                 	db	102
  2284  00FC03  00                 	db	0
  2285  00FC04  7E                 	db	126
  2286  00FC05  00                 	db	0
  2287  00FC06  60                 	db	96
  2288  00FC07  00                 	db	0
  2289  00FC08  66                 	db	102
  2290  00FC09  00                 	db	0
  2291  00FC0A  3C                 	db	60
  2292  00FC0B  00                 	db	0
  2293  00FC0C  00                 	db	0
  2294  00FC0D  00                 	db	0
  2295  00FC0E  00                 	db	0
  2296  00FC0F  00                 	db	0
  2297  00FC10  04                 	db	4
  2298  00FC11  00                 	db	0
  2299  00FC12  00                 	db	0
  2300  00FC13  00                 	db	0
  2301  00FC14  00                 	db	0
  2302  00FC15  30                 	db	48
  2303  00FC16  00                 	db	0
  2304  00FC17  60                 	db	96
  2305  00FC18  00                 	db	0
  2306  00FC19  60                 	db	96
  2307  00FC1A  00                 	db	0
  2308  00FC1B  70                 	db	112
  2309  00FC1C  00                 	db	0
  2310  00FC1D  60                 	db	96
  2311  00FC1E  00                 	db	0
  2312  00FC1F  60                 	db	96
  2313  00FC20  00                 	db	0
  2314  00FC21  60                 	db	96
  2315  00FC22  00                 	db	0
  2316  00FC23  60                 	db	96
  2317  00FC24  00                 	db	0
  2318  00FC25  60                 	db	96
  2319  00FC26  00                 	db	0
  2320  00FC27  00                 	db	0
  2321  00FC28  00                 	db	0
  2322  00FC29  00                 	db	0
  2323  00FC2A  00                 	db	0
  2324  00FC2B  07                 	db	7
  2325  00FC2C  00                 	db	0
  2326  00FC2D  00                 	db	0
  2327  00FC2E  00                 	db	0
  2328  00FC2F  00                 	db	0
  2329  00FC30  00                 	db	0
  2330  00FC31  00                 	db	0
  2331  00FC32  00                 	db	0
  2332  00FC33  00                 	db	0
  2333  00FC34  00                 	db	0
  2334  00FC35  00                 	db	0
  2335  00FC36  3E                 	db	62
  2336  00FC37  00                 	db	0
  2337  00FC38  66                 	db	102
  2338  00FC39  00                 	db	0
  2339  00FC3A  66                 	db	102
  2340  00FC3B  00                 	db	0
  2341  00FC3C  66                 	db	102
  2342  00FC3D  00                 	db	0
  2343  00FC3E  66                 	db	102
  2344  00FC3F  00                 	db	0
  2345  00FC40  3E                 	db	62
  2346  00FC41  00                 	db	0
  2347  00FC42  06                 	db	6
  2348  00FC43  00                 	db	0
  2349  00FC44  7C                 	db	124
  2350  00FC45  00                 	db	0
  2351  00FC46  07                 	db	7
  2352  00FC47  00                 	db	0
  2353  00FC48  00                 	db	0
  2354  00FC49  00                 	db	0
  2355  00FC4A  00                 	db	0
  2356  00FC4B  60                 	db	96
  2357  00FC4C  00                 	db	0
  2358  00FC4D  60                 	db	96
  2359  00FC4E  00                 	db	0
  2360  00FC4F  60                 	db	96
  2361  00FC50  00                 	db	0
  2362  00FC51  7C                 	db	124
  2363  00FC52  00                 	db	0
  2364  00FC53  76                 	db	118
  2365  00FC54  00                 	db	0
  2366  00FC55  66                 	db	102
  2367  00FC56  00                 	db	0
  2368  00FC57  66                 	db	102
  2369  00FC58  00                 	db	0
  2370  00FC59  66                 	db	102
  2371  00FC5A  00                 	db	0
  2372  00FC5B  66                 	db	102
  2373  00FC5C  00                 	db	0
  2374  00FC5D  00                 	db	0
  2375  00FC5E  00                 	db	0
  2376  00FC5F  00                 	db	0
  2377  00FC60  00                 	db	0
  2378  00FC61  03                 	db	3
  2379  00FC62  00                 	db	0
  2380  00FC63  00                 	db	0
  2381  00FC64  00                 	db	0
  2382  00FC65  00                 	db	0
  2383  00FC66  60                 	db	96
  2384  00FC67  00                 	db	0
  2385  00FC68  00                 	db	0
  2386  00FC69  00                 	db	0
  2387  00FC6A  00                 	db	0
  2388  00FC6B  00                 	db	0
  2389  00FC6C  60                 	db	96
  2390  00FC6D  00                 	db	0
  2391  00FC6E  60                 	db	96
  2392  00FC6F  00                 	db	0
  2393  00FC70  60                 	db	96
  2394  00FC71  00                 	db	0
  2395  00FC72  60                 	db	96
  2396  00FC73  00                 	db	0
  2397  00FC74  60                 	db	96
  2398  00FC75  00                 	db	0
  2399  00FC76  60                 	db	96
  2400  00FC77  00                 	db	0
  2401  00FC78  00                 	db	0
  2402  00FC79  00                 	db	0
  2403  00FC7A  00                 	db	0
  2404  00FC7B  00                 	db	0
  2405  00FC7C  03                 	db	3
  2406  00FC7D  00                 	db	0
  2407  00FC7E  00                 	db	0
  2408  00FC7F  00                 	db	0
  2409  00FC80  00                 	db	0
  2410  00FC81  60                 	db	96
  2411  00FC82  00                 	db	0
  2412  00FC83  00                 	db	0
  2413  00FC84  00                 	db	0
  2414  00FC85  00                 	db	0
  2415  00FC86  00                 	db	0
  2416  00FC87  60                 	db	96
  2417  00FC88  00                 	db	0
  2418  00FC89  60                 	db	96
  2419  00FC8A  00                 	db	0
  2420  00FC8B  60                 	db	96
  2421  00FC8C  00                 	db	0
  2422  00FC8D  60                 	db	96
  2423  00FC8E  00                 	db	0
  2424  00FC8F  60                 	db	96
  2425  00FC90  00                 	db	0
  2426  00FC91  60                 	db	96
  2427  00FC92  00                 	db	0
  2428  00FC93  60                 	db	96
  2429  00FC94  00                 	db	0
  2430  00FC95  60                 	db	96
  2431  00FC96  00                 	db	0
  2432  00FC97  07                 	db	7
  2433  00FC98  00                 	db	0
  2434  00FC99  00                 	db	0
  2435  00FC9A  00                 	db	0
  2436  00FC9B  00                 	db	0
  2437  00FC9C  60                 	db	96
  2438  00FC9D  00                 	db	0
  2439  00FC9E  60                 	db	96
  2440  00FC9F  00                 	db	0
  2441  00FCA0  60                 	db	96
  2442  00FCA1  00                 	db	0
  2443  00FCA2  6C                 	db	108
  2444  00FCA3  00                 	db	0
  2445  00FCA4  78                 	db	120
  2446  00FCA5  00                 	db	0
  2447  00FCA6  70                 	db	112
  2448  00FCA7  00                 	db	0
  2449  00FCA8  78                 	db	120
  2450  00FCA9  00                 	db	0
  2451  00FCAA  6C                 	db	108
  2452  00FCAB  00                 	db	0
  2453  00FCAC  66                 	db	102
  2454  00FCAD  00                 	db	0
  2455  00FCAE  00                 	db	0
  2456  00FCAF  00                 	db	0
  2457  00FCB0  00                 	db	0
  2458  00FCB1  00                 	db	0
  2459  00FCB2  03                 	db	3
  2460  00FCB3  00                 	db	0
  2461  00FCB4  00                 	db	0
  2462  00FCB5  00                 	db	0
  2463  00FCB6  00                 	db	0
  2464  00FCB7  60                 	db	96
  2465  00FCB8  00                 	db	0
  2466  00FCB9  60                 	db	96
  2467  00FCBA  00                 	db	0
  2468  00FCBB  60                 	db	96
  2469  00FCBC  00                 	db	0
  2470  00FCBD  60                 	db	96
  2471  00FCBE  00                 	db	0
  2472  00FCBF  60                 	db	96
  2473  00FCC0  00                 	db	0
  2474  00FCC1  60                 	db	96
  2475  00FCC2  00                 	db	0
  2476  00FCC3  60                 	db	96
  2477  00FCC4  00                 	db	0
  2478  00FCC5  60                 	db	96
  2479  00FCC6  00                 	db	0
  2480  00FCC7  60                 	db	96
  2481  00FCC8  00                 	db	0
  2482  00FCC9  00                 	db	0
  2483  00FCCA  00                 	db	0
  2484  00FCCB  00                 	db	0
  2485  00FCCC  00                 	db	0
  2486  00FCCD  09                 	db	9
  2487  00FCCE  00                 	db	0
  2488  00FCCF  00                 	db	0
  2489  00FCD0  00                 	db	0
  2490  00FCD1  00                 	db	0
  2491  00FCD2  00                 	db	0
  2492  00FCD3  00                 	db	0
  2493  00FCD4  00                 	db	0
  2494  00FCD5  00                 	db	0
  2495  00FCD6  00                 	db	0
  2496  00FCD7  00                 	db	0
  2497  00FCD8  7F                 	db	127
  2498  00FCD9  00                 	db	0
  2499  00FCDA  6D                 	db	109
  2500  00FCDB  80                 	db	128
  2501  00FCDC  6D                 	db	109
  2502  00FCDD  80                 	db	128
  2503  00FCDE  6D                 	db	109
  2504  00FCDF  80                 	db	128
  2505  00FCE0  6D                 	db	109
  2506  00FCE1  80                 	db	128
  2507  00FCE2  6D                 	db	109
  2508  00FCE3  80                 	db	128
  2509  00FCE4  00                 	db	0
  2510  00FCE5  00                 	db	0
  2511  00FCE6  00                 	db	0
  2512  00FCE7  00                 	db	0
  2513  00FCE8  07                 	db	7
  2514  00FCE9  00                 	db	0
  2515  00FCEA  00                 	db	0
  2516  00FCEB  00                 	db	0
  2517  00FCEC  00                 	db	0
  2518  00FCED  00                 	db	0
  2519  00FCEE  00                 	db	0
  2520  00FCEF  00                 	db	0
  2521  00FCF0  00                 	db	0
  2522  00FCF1  00                 	db	0
  2523  00FCF2  00                 	db	0
  2524  00FCF3  7C                 	db	124
  2525  00FCF4  00                 	db	0
  2526  00FCF5  76                 	db	118
  2527  00FCF6  00                 	db	0
  2528  00FCF7  66                 	db	102
  2529  00FCF8  00                 	db	0
  2530  00FCF9  66                 	db	102
  2531  00FCFA  00                 	db	0
  2532  00FCFB  66                 	db	102
  2533  00FCFC  00                 	db	0
  2534  00FCFD  66                 	db	102
  2535  00FCFE  00                 	db	0
  2536  00FCFF  00                 	db	0
  2537  00FD00  00                 	db	0
  2538  00FD01  00                 	db	0
  2539  00FD02  00                 	db	0
  2540  00FD03  07                 	db	7
  2541  00FD04  00                 	db	0
  2542  00FD05  00                 	db	0
  2543  00FD06  00                 	db	0
  2544  00FD07  00                 	db	0
  2545  00FD08  00                 	db	0
  2546  00FD09  00                 	db	0
  2547  00FD0A  00                 	db	0
  2548  00FD0B  00                 	db	0
  2549  00FD0C  00                 	db	0
  2550  00FD0D  00                 	db	0
  2551  00FD0E  3C                 	db	60
  2552  00FD0F  00                 	db	0
  2553  00FD10  66                 	db	102
  2554  00FD11  00                 	db	0
  2555  00FD12  66                 	db	102
  2556  00FD13  00                 	db	0
  2557  00FD14  66                 	db	102
  2558  00FD15  00                 	db	0
  2559  00FD16  66                 	db	102
  2560  00FD17  00                 	db	0
  2561  00FD18  3C                 	db	60
  2562  00FD19  00                 	db	0
  2563  00FD1A  00                 	db	0
  2564  00FD1B  00                 	db	0
  2565  00FD1C  00                 	db	0
  2566  00FD1D  00                 	db	0
  2567  00FD1E  07                 	db	7
  2568  00FD1F  00                 	db	0
  2569  00FD20  00                 	db	0
  2570  00FD21  00                 	db	0
  2571  00FD22  00                 	db	0
  2572  00FD23  00                 	db	0
  2573  00FD24  00                 	db	0
  2574  00FD25  00                 	db	0
  2575  00FD26  00                 	db	0
  2576  00FD27  00                 	db	0
  2577  00FD28  00                 	db	0
  2578  00FD29  7C                 	db	124
  2579  00FD2A  00                 	db	0
  2580  00FD2B  66                 	db	102
  2581  00FD2C  00                 	db	0
  2582  00FD2D  66                 	db	102
  2583  00FD2E  00                 	db	0
  2584  00FD2F  66                 	db	102
  2585  00FD30  00                 	db	0
  2586  00FD31  66                 	db	102
  2587  00FD32  00                 	db	0
  2588  00FD33  7C                 	db	124
  2589  00FD34  00                 	db	0
  2590  00FD35  60                 	db	96
  2591  00FD36  00                 	db	0
  2592  00FD37  60                 	db	96
  2593  00FD38  00                 	db	0
  2594  00FD39  07                 	db	7
  2595  00FD3A  00                 	db	0
  2596  00FD3B  00                 	db	0
  2597  00FD3C  00                 	db	0
  2598  00FD3D  00                 	db	0
  2599  00FD3E  00                 	db	0
  2600  00FD3F  00                 	db	0
  2601  00FD40  00                 	db	0
  2602  00FD41  00                 	db	0
  2603  00FD42  00                 	db	0
  2604  00FD43  00                 	db	0
  2605  00FD44  3E                 	db	62
  2606  00FD45  00                 	db	0
  2607  00FD46  66                 	db	102
  2608  00FD47  00                 	db	0
  2609  00FD48  66                 	db	102
  2610  00FD49  00                 	db	0
  2611  00FD4A  66                 	db	102
  2612  00FD4B  00                 	db	0
  2613  00FD4C  66                 	db	102
  2614  00FD4D  00                 	db	0
  2615  00FD4E  3E                 	db	62
  2616  00FD4F  00                 	db	0
  2617  00FD50  06                 	db	6
  2618  00FD51  00                 	db	0
  2619  00FD52  06                 	db	6
  2620  00FD53  00                 	db	0
  2621  00FD54  04                 	db	4
  2622  00FD55  00                 	db	0
  2623  00FD56  00                 	db	0
  2624  00FD57  00                 	db	0
  2625  00FD58  00                 	db	0
  2626  00FD59  00                 	db	0
  2627  00FD5A  00                 	db	0
  2628  00FD5B  00                 	db	0
  2629  00FD5C  00                 	db	0
  2630  00FD5D  00                 	db	0
  2631  00FD5E  00                 	db	0
  2632  00FD5F  70                 	db	112
  2633  00FD60  00                 	db	0
  2634  00FD61  60                 	db	96
  2635  00FD62  00                 	db	0
  2636  00FD63  60                 	db	96
  2637  00FD64  00                 	db	0
  2638  00FD65  60                 	db	96
  2639  00FD66  00                 	db	0
  2640  00FD67  60                 	db	96
  2641  00FD68  00                 	db	0
  2642  00FD69  60                 	db	96
  2643  00FD6A  00                 	db	0
  2644  00FD6B  00                 	db	0
  2645  00FD6C  00                 	db	0
  2646  00FD6D  00                 	db	0
  2647  00FD6E  00                 	db	0
  2648  00FD6F  06                 	db	6
  2649  00FD70  00                 	db	0
  2650  00FD71  00                 	db	0
  2651  00FD72  00                 	db	0
  2652  00FD73  00                 	db	0
  2653  00FD74  00                 	db	0
  2654  00FD75  00                 	db	0
  2655  00FD76  00                 	db	0
  2656  00FD77  00                 	db	0
  2657  00FD78  00                 	db	0
  2658  00FD79  00                 	db	0
  2659  00FD7A  38                 	db	56
  2660  00FD7B  00                 	db	0
  2661  00FD7C  6C                 	db	108
  2662  00FD7D  00                 	db	0
  2663  00FD7E  30                 	db	48
  2664  00FD7F  00                 	db	0
  2665  00FD80  18                 	db	24
  2666  00FD81  00                 	db	0
  2667  00FD82  6C                 	db	108
  2668  00FD83  00                 	db	0
  2669  00FD84  38                 	db	56
  2670  00FD85  00                 	db	0
  2671  00FD86  00                 	db	0
  2672  00FD87  00                 	db	0
  2673  00FD88  00                 	db	0
  2674  00FD89  00                 	db	0
  2675  00FD8A  04                 	db	4
  2676  00FD8B  00                 	db	0
  2677  00FD8C  00                 	db	0
  2678  00FD8D  00                 	db	0
  2679  00FD8E  00                 	db	0
  2680  00FD8F  00                 	db	0
  2681  00FD90  00                 	db	0
  2682  00FD91  60                 	db	96
  2683  00FD92  00                 	db	0
  2684  00FD93  60                 	db	96
  2685  00FD94  00                 	db	0
  2686  00FD95  70                 	db	112
  2687  00FD96  00                 	db	0
  2688  00FD97  60                 	db	96
  2689  00FD98  00                 	db	0
  2690  00FD99  60                 	db	96
  2691  00FD9A  00                 	db	0
  2692  00FD9B  60                 	db	96
  2693  00FD9C  00                 	db	0
  2694  00FD9D  60                 	db	96
  2695  00FD9E  00                 	db	0
  2696  00FD9F  30                 	db	48
  2697  00FDA0  00                 	db	0
  2698  00FDA1  00                 	db	0
  2699  00FDA2  00                 	db	0
  2700  00FDA3  00                 	db	0
  2701  00FDA4  00                 	db	0
  2702  00FDA5  07                 	db	7
  2703  00FDA6  00                 	db	0
  2704  00FDA7  00                 	db	0
  2705  00FDA8  00                 	db	0
  2706  00FDA9  00                 	db	0
  2707  00FDAA  00                 	db	0
  2708  00FDAB  00                 	db	0
  2709  00FDAC  00                 	db	0
  2710  00FDAD  00                 	db	0
  2711  00FDAE  00                 	db	0
  2712  00FDAF  00                 	db	0
  2713  00FDB0  66                 	db	102
  2714  00FDB1  00                 	db	0
  2715  00FDB2  66                 	db	102
  2716  00FDB3  00                 	db	0
  2717  00FDB4  66                 	db	102
  2718  00FDB5  00                 	db	0
  2719  00FDB6  66                 	db	102
  2720  00FDB7  00                 	db	0
  2721  00FDB8  6E                 	db	110
  2722  00FDB9  00                 	db	0
  2723  00FDBA  3E                 	db	62
  2724  00FDBB  00                 	db	0
  2725  00FDBC  00                 	db	0
  2726  00FDBD  00                 	db	0
  2727  00FDBE  00                 	db	0
  2728  00FDBF  00                 	db	0
  2729  00FDC0  07                 	db	7
  2730  00FDC1  00                 	db	0
  2731  00FDC2  00                 	db	0
  2732  00FDC3  00                 	db	0
  2733  00FDC4  00                 	db	0
  2734  00FDC5  00                 	db	0
  2735  00FDC6  00                 	db	0
  2736  00FDC7  00                 	db	0
  2737  00FDC8  00                 	db	0
  2738  00FDC9  00                 	db	0
  2739  00FDCA  00                 	db	0
  2740  00FDCB  66                 	db	102
  2741  00FDCC  00                 	db	0
  2742  00FDCD  66                 	db	102
  2743  00FDCE  00                 	db	0
  2744  00FDCF  3C                 	db	60
  2745  00FDD0  00                 	db	0
  2746  00FDD1  3C                 	db	60
  2747  00FDD2  00                 	db	0
  2748  00FDD3  18                 	db	24
  2749  00FDD4  00                 	db	0
  2750  00FDD5  18                 	db	24
  2751  00FDD6  00                 	db	0
  2752  00FDD7  00                 	db	0
  2753  00FDD8  00                 	db	0
  2754  00FDD9  00                 	db	0
  2755  00FDDA  00                 	db	0
  2756  00FDDB  09                 	db	9
  2757  00FDDC  00                 	db	0
  2758  00FDDD  00                 	db	0
  2759  00FDDE  00                 	db	0
  2760  00FDDF  00                 	db	0
  2761  00FDE0  00                 	db	0
  2762  00FDE1  00                 	db	0
  2763  00FDE2  00                 	db	0
  2764  00FDE3  00                 	db	0
  2765  00FDE4  00                 	db	0
  2766  00FDE5  00                 	db	0
  2767  00FDE6  6D                 	db	109
  2768  00FDE7  80                 	db	128
  2769  00FDE8  6D                 	db	109
  2770  00FDE9  80                 	db	128
  2771  00FDEA  7F                 	db	127
  2772  00FDEB  80                 	db	128
  2773  00FDEC  7F                 	db	127
  2774  00FDED  80                 	db	128
  2775  00FDEE  33                 	db	51
  2776  00FDEF  00                 	db	0
  2777  00FDF0  33                 	db	51
  2778  00FDF1  00                 	db	0
  2779  00FDF2  00                 	db	0
  2780  00FDF3  00                 	db	0
  2781  00FDF4  00                 	db	0
  2782  00FDF5  00                 	db	0
  2783  00FDF6  06                 	db	6
  2784  00FDF7  00                 	db	0
  2785  00FDF8  00                 	db	0
  2786  00FDF9  00                 	db	0
  2787  00FDFA  00                 	db	0
  2788  00FDFB  00                 	db	0
  2789  00FDFC  00                 	db	0
  2790  00FDFD  00                 	db	0
  2791  00FDFE  00                 	db	0
  2792  00FDFF  00                 	db	0
  2793  00FE00  00                 	db	0
  2794  00FE01  6C                 	db	108
  2795  00FE02  00                 	db	0
  2796  00FE03  6C                 	db	108
  2797  00FE04  00                 	db	0
  2798  00FE05  38                 	db	56
  2799  00FE06  00                 	db	0
  2800  00FE07  38                 	db	56
  2801  00FE08  00                 	db	0
  2802  00FE09  6C                 	db	108
  2803  00FE0A  00                 	db	0
  2804  00FE0B  6C                 	db	108
  2805  00FE0C  00                 	db	0
  2806  00FE0D  00                 	db	0
  2807  00FE0E  00                 	db	0
  2808  00FE0F  00                 	db	0
  2809  00FE10  00                 	db	0
  2810  00FE11  06                 	db	6
  2811  00FE12  00                 	db	0
  2812  00FE13  00                 	db	0
  2813  00FE14  00                 	db	0
  2814  00FE15  00                 	db	0
  2815  00FE16  00                 	db	0
  2816  00FE17  00                 	db	0
  2817  00FE18  00                 	db	0
  2818  00FE19  00                 	db	0
  2819  00FE1A  00                 	db	0
  2820  00FE1B  00                 	db	0
  2821  00FE1C  6C                 	db	108
  2822  00FE1D  00                 	db	0
  2823  00FE1E  6C                 	db	108
  2824  00FE1F  00                 	db	0
  2825  00FE20  6C                 	db	108
  2826  00FE21  00                 	db	0
  2827  00FE22  6C                 	db	108
  2828  00FE23  00                 	db	0
  2829  00FE24  38                 	db	56
  2830  00FE25  00                 	db	0
  2831  00FE26  30                 	db	48
  2832  00FE27  00                 	db	0
  2833  00FE28  30                 	db	48
  2834  00FE29  00                 	db	0
  2835  00FE2A  E0                 	db	224
  2836  00FE2B  00                 	db	0
  2837  00FE2C  06                 	db	6
  2838  00FE2D  00                 	db	0
  2839  00FE2E  00                 	db	0
  2840  00FE2F  00                 	db	0
  2841  00FE30  00                 	db	0
  2842  00FE31  00                 	db	0
  2843  00FE32  00                 	db	0
  2844  00FE33  00                 	db	0
  2845  00FE34  00                 	db	0
  2846  00FE35  00                 	db	0
  2847  00FE36  00                 	db	0
  2848  00FE37  7C                 	db	124
  2849  00FE38  00                 	db	0
  2850  00FE39  0C                 	db	12
  2851  00FE3A  00                 	db	0
  2852  00FE3B  18                 	db	24
  2853  00FE3C  00                 	db	0
  2854  00FE3D  30                 	db	48
  2855  00FE3E  00                 	db	0
  2856  00FE3F  60                 	db	96
  2857  00FE40  00                 	db	0
  2858  00FE41  7C                 	db	124
  2859  00FE42  00                 	db	0
  2860  00FE43  00                 	db	0
  2861  00FE44  00                 	db	0
  2862  00FE45  00                 	db	0
  2863  00FE46  00                 	db	0
  2864  00FE47  05                 	db	5
  2865  00FE48  00                 	db	0
  2866  00FE49  00                 	db	0
  2867  00FE4A  18                 	db	24
  2868  00FE4B  00                 	db	0
  2869  00FE4C  30                 	db	48
  2870  00FE4D  00                 	db	0
  2871  00FE4E  30                 	db	48
  2872  00FE4F  00                 	db	0
  2873  00FE50  30                 	db	48
  2874  00FE51  00                 	db	0
  2875  00FE52  30                 	db	48
  2876  00FE53  00                 	db	0
  2877  00FE54  60                 	db	96
  2878  00FE55  00                 	db	0
  2879  00FE56  30                 	db	48
  2880  00FE57  00                 	db	0
  2881  00FE58  30                 	db	48
  2882  00FE59  00                 	db	0
  2883  00FE5A  30                 	db	48
  2884  00FE5B  00                 	db	0
  2885  00FE5C  30                 	db	48
  2886  00FE5D  00                 	db	0
  2887  00FE5E  18                 	db	24
  2888  00FE5F  00                 	db	0
  2889  00FE60  00                 	db	0
  2890  00FE61  00                 	db	0
  2891  00FE62  03                 	db	3
  2892  00FE63  00                 	db	0
  2893  00FE64  00                 	db	0
  2894  00FE65  00                 	db	0
  2895  00FE66  00                 	db	0
  2896  00FE67  60                 	db	96
  2897  00FE68  00                 	db	0
  2898  00FE69  60                 	db	96
  2899  00FE6A  00                 	db	0
  2900  00FE6B  60                 	db	96
  2901  00FE6C  00                 	db	0
  2902  00FE6D  60                 	db	96
  2903  00FE6E  00                 	db	0
  2904  00FE6F  60                 	db	96
  2905  00FE70  00                 	db	0
  2906  00FE71  60                 	db	96
  2907  00FE72  00                 	db	0
  2908  00FE73  60                 	db	96
  2909  00FE74  00                 	db	0
  2910  00FE75  60                 	db	96
  2911  00FE76  00                 	db	0
  2912  00FE77  60                 	db	96
  2913  00FE78  00                 	db	0
  2914  00FE79  60                 	db	96
  2915  00FE7A  00                 	db	0
  2916  00FE7B  00                 	db	0
  2917  00FE7C  00                 	db	0
  2918  00FE7D  05                 	db	5
  2919  00FE7E  00                 	db	0
  2920  00FE7F  00                 	db	0
  2921  00FE80  60                 	db	96
  2922  00FE81  00                 	db	0
  2923  00FE82  30                 	db	48
  2924  00FE83  00                 	db	0
  2925  00FE84  30                 	db	48
  2926  00FE85  00                 	db	0
  2927  00FE86  30                 	db	48
  2928  00FE87  00                 	db	0
  2929  00FE88  30                 	db	48
  2930  00FE89  00                 	db	0
  2931  00FE8A  18                 	db	24
  2932  00FE8B  00                 	db	0
  2933  00FE8C  30                 	db	48
  2934  00FE8D  00                 	db	0
  2935  00FE8E  30                 	db	48
  2936  00FE8F  00                 	db	0
  2937  00FE90  30                 	db	48
  2938  00FE91  00                 	db	0
  2939  00FE92  30                 	db	48
  2940  00FE93  00                 	db	0
  2941  00FE94  60                 	db	96
  2942  00FE95  00                 	db	0
  2943  00FE96  00                 	db	0
  2944  00FE97  00                 	db	0
  2945  00FE98  08                 	db	8
  2946  00FE99  00                 	db	0
  2947  00FE9A  00                 	db	0
  2948  00FE9B  00                 	db	0
  2949  00FE9C  00                 	db	0
  2950  00FE9D  00                 	db	0
  2951  00FE9E  00                 	db	0
  2952  00FE9F  3B                 	db	59
  2953  00FEA0  00                 	db	0
  2954  00FEA1  6E                 	db	110
  2955  00FEA2  00                 	db	0
  2956  00FEA3  00                 	db	0
  2957  00FEA4  00                 	db	0
  2958  00FEA5  00                 	db	0
  2959  00FEA6  00                 	db	0
  2960  00FEA7  00                 	db	0
  2961  00FEA8  00                 	db	0
  2962  00FEA9  00                 	db	0
  2963  00FEAA  00                 	db	0
  2964  00FEAB  00                 	db	0
  2965  00FEAC  00                 	db	0
  2966  00FEAD  00                 	db	0
  2967  00FEAE  00                 	db	0
  2968  00FEAF  00                 	db	0
  2969  00FEB0  00                 	db	0
  2970  00FEB1  00                 	db	0
  2971  00FEB2  00                 	db	0
  2972  00FEB3  04                 	db	4
  2973  00FEB4  00                 	db	0
  2974  00FEB5  00                 	db	0
  2975  00FEB6  00                 	db	0
  2976  00FEB7  00                 	db	0
  2977  00FEB8  00                 	db	0
  2978  00FEB9  00                 	db	0
  2979  00FEBA  F0                 	db	240
  2980  00FEBB  00                 	db	0
  2981  00FEBC  F0                 	db	240
  2982  00FEBD  00                 	db	0
  2983  00FEBE  F0                 	db	240
  2984  00FEBF  00                 	db	0
  2985  00FEC0  F0                 	db	240
  2986  00FEC1  00                 	db	0
  2987  00FEC2  F0                 	db	240
  2988  00FEC3  00                 	db	0
  2989  00FEC4  F0                 	db	240
  2990  00FEC5  00                 	db	0
  2991  00FEC6  F0                 	db	240
  2992  00FEC7  00                 	db	0
  2993  00FEC8  F0                 	db	240
  2994  00FEC9  00                 	db	0
  2995  00FECA  00                 	db	0
  2996  00FECB  00                 	db	0
  2997  00FECC  00                 	db	0
  2998  00FECD  00                 	db	0
  2999  00FECE  0A                 	db	10
  3000  00FECF  00                 	db	0
  3001  00FED0  00                 	db	0
  3002  00FED1  00                 	db	0
  3003  00FED2  00                 	db	0
  3004  00FED3  FF                 	db	255
  3005  00FED4  00                 	db	0
  3006  00FED5  18                 	db	24
  3007  00FED6  00                 	db	0
  3008  00FED7  18                 	db	24
  3009  00FED8  00                 	db	0
  3010  00FED9  18                 	db	24
  3011  00FEDA  00                 	db	0
  3012  00FEDB  1F                 	db	31
  3013  00FEDC  00                 	db	0
  3014  00FEDD  19                 	db	25
  3015  00FEDE  80                 	db	128
  3016  00FEDF  19                 	db	25
  3017  00FEE0  80                 	db	128
  3018  00FEE1  1F                 	db	31
  3019  00FEE2  80                 	db	128
  3020  00FEE3  1F                 	db	31
  3021  00FEE4  00                 	db	0
  3022  00FEE5  00                 	db	0
  3023  00FEE6  00                 	db	0
  3024  00FEE7  00                 	db	0
  3025  00FEE8  00                 	db	0
  3026  00FEE9  07                 	db	7
  3027  00FEEA  0C                 	db	12
  3028  00FEEB  00                 	db	0
  3029  00FEEC  18                 	db	24
  3030  00FEED  00                 	db	0
  3031  00FEEE  7E                 	db	126
  3032  00FEEF  00                 	db	0
  3033  00FEF0  60                 	db	96
  3034  00FEF1  00                 	db	0
  3035  00FEF2  60                 	db	96
  3036  00FEF3  00                 	db	0
  3037  00FEF4  60                 	db	96
  3038  00FEF5  00                 	db	0
  3039  00FEF6  60                 	db	96
  3040  00FEF7  00                 	db	0
  3041  00FEF8  60                 	db	96
  3042  00FEF9  00                 	db	0
  3043  00FEFA  60                 	db	96
  3044  00FEFB  00                 	db	0
  3045  00FEFC  60                 	db	96
  3046  00FEFD  00                 	db	0
  3047  00FEFE  60                 	db	96
  3048  00FEFF  00                 	db	0
  3049  00FF00  00                 	db	0
  3050  00FF01  00                 	db	0
  3051  00FF02  00                 	db	0
  3052  00FF03  00                 	db	0
  3053  00FF04  04                 	db	4
  3054  00FF05  00                 	db	0
  3055  00FF06  00                 	db	0
  3056  00FF07  00                 	db	0
  3057  00FF08  00                 	db	0
  3058  00FF09  00                 	db	0
  3059  00FF0A  00                 	db	0
  3060  00FF0B  00                 	db	0
  3061  00FF0C  00                 	db	0
  3062  00FF0D  00                 	db	0
  3063  00FF0E  00                 	db	0
  3064  00FF0F  00                 	db	0
  3065  00FF10  00                 	db	0
  3066  00FF11  00                 	db	0
  3067  00FF12  00                 	db	0
  3068  00FF13  00                 	db	0
  3069  00FF14  00                 	db	0
  3070  00FF15  00                 	db	0
  3071  00FF16  00                 	db	0
  3072  00FF17  00                 	db	0
  3073  00FF18  00                 	db	0
  3074  00FF19  30                 	db	48
  3075  00FF1A  00                 	db	0
  3076  00FF1B  60                 	db	96
  3077  00FF1C  00                 	db	0
  3078  00FF1D  00                 	db	0
  3079  00FF1E  00                 	db	0
  3080  00FF1F  06                 	db	6
  3081  00FF20  00                 	db	0
  3082  00FF21  00                 	db	0
  3083  00FF22  00                 	db	0
  3084  00FF23  00                 	db	0
  3085  00FF24  0C                 	db	12
  3086  00FF25  00                 	db	0
  3087  00FF26  18                 	db	24
  3088  00FF27  00                 	db	0
  3089  00FF28  00                 	db	0
  3090  00FF29  00                 	db	0
  3091  00FF2A  7C                 	db	124
  3092  00FF2B  00                 	db	0
  3093  00FF2C  60                 	db	96
  3094  00FF2D  00                 	db	0
  3095  00FF2E  60                 	db	96
  3096  00FF2F  00                 	db	0
  3097  00FF30  60                 	db	96
  3098  00FF31  00                 	db	0
  3099  00FF32  60                 	db	96
  3100  00FF33  00                 	db	0
  3101  00FF34  60                 	db	96
  3102  00FF35  00                 	db	0
  3103  00FF36  00                 	db	0
  3104  00FF37  00                 	db	0
  3105  00FF38  00                 	db	0
  3106  00FF39  00                 	db	0
  3107  00FF3A  0E                 	db	14
  3108  00FF3B  02                 	db	2
  3109  00FF3C  00                 	db	0
  3110  00FF3D  0A                 	db	10
  3111  00FF3E  80                 	db	128
  3112  00FF3F  07                 	db	7
  3113  00FF40  00                 	db	0
  3114  00FF41  52                 	db	82
  3115  00FF42  50                 	db	80
  3116  00FF43  32                 	db	50
  3117  00FF44  60                 	db	96
  3118  00FF45  6F                 	db	111
  3119  00FF46  B0                 	db	176
  3120  00FF47  07                 	db	7
  3121  00FF48  00                 	db	0
  3122  00FF49  6F                 	db	111
  3123  00FF4A  B0                 	db	176
  3124  00FF4B  32                 	db	50
  3125  00FF4C  60                 	db	96
  3126  00FF4D  52                 	db	82
  3127  00FF4E  50                 	db	80
  3128  00FF4F  07                 	db	7
  3129  00FF50  00                 	db	0
  3130  00FF51  0A                 	db	10
  3131  00FF52  80                 	db	128
  3132  00FF53  02                 	db	2
  3133  00FF54  00                 	db	0
  3134  00FF55  0E                 	db	14
  3135  00FF56  03                 	db	3
  3136  00FF57  80                 	db	128
  3137  00FF58  07                 	db	7
  3138  00FF59  80                 	db	128
  3139  00FF5A  07                 	db	7
  3140  00FF5B  80                 	db	128
  3141  00FF5C  07                 	db	7
  3142  00FF5D  80                 	db	128
  3143  00FF5E  07                 	db	7
  3144  00FF5F  80                 	db	128
  3145  00FF60  07                 	db	7
  3146  00FF61  00                 	db	0
  3147  00FF62  0F                 	db	15
  3148  00FF63  80                 	db	128
  3149  00FF64  7D                 	db	125
  3150  00FF65  E0                 	db	224
  3151  00FF66  FF                 	db	255
  3152  00FF67  F0                 	db	240
  3153  00FF68  F7                 	db	247
  3154  00FF69  78                 	db	120
  3155  00FF6A  E0                 	db	224
  3156  00FF6B  7C                 	db	124
  3157  00FF6C  C0                 	db	192
  3158  00FF6D  3C                 	db	60
  3159  00FF6E  00                 	db	0
  3160  00FF6F  1C                 	db	28
  3161  00FF70  0D                 	db	13
  3162  00FF71  07                 	db	7
  3163  00FF72  00                 	db	0
  3164  00FF73  07                 	db	7
  3165  00FF74  00                 	db	0
  3166  00FF75  07                 	db	7
  3167  00FF76  00                 	db	0
  3168  00FF77  07                 	db	7
  3169  00FF78  00                 	db	0
  3170  00FF79  07                 	db	7
  3171  00FF7A  00                 	db	0
  3172  00FF7B  07                 	db	7
  3173  00FF7C  00                 	db	0
  3174  00FF7D  07                 	db	7
  3175  00FF7E  00                 	db	0
  3176  00FF7F  07                 	db	7
  3177  00FF80  00                 	db	0
  3178  00FF81  3F                 	db	63
  3179  00FF82  E0                 	db	224
  3180  00FF83  1F                 	db	31
  3181  00FF84  C0                 	db	192
  3182  00FF85  0F                 	db	15
  3183  00FF86  80                 	db	128
  3184  00FF87  07                 	db	7
  3185  00FF88  00                 	db	0
  3186  00FF89  02                 	db	2
  3187  00FF8A  00                 	db	0
  3188  00FF8B  0D                 	db	13
  3189  00FF8C  02                 	db	2
  3190  00FF8D  00                 	db	0
  3191  00FF8E  07                 	db	7
  3192  00FF8F  00                 	db	0
  3193  00FF90  0F                 	db	15
  3194  00FF91  80                 	db	128
  3195  00FF92  1F                 	db	31
  3196  00FF93  C0                 	db	192
  3197  00FF94  3F                 	db	63
  3198  00FF95  E0                 	db	224
  3199  00FF96  07                 	db	7
  3200  00FF97  00                 	db	0
  3201  00FF98  07                 	db	7
  3202  00FF99  00                 	db	0
  3203  00FF9A  07                 	db	7
  3204  00FF9B  00                 	db	0
  3205  00FF9C  07                 	db	7
  3206  00FF9D  00                 	db	0
  3207  00FF9E  07                 	db	7
  3208  00FF9F  00                 	db	0
  3209  00FFA0  07                 	db	7
  3210  00FFA1  00                 	db	0
  3211  00FFA2  07                 	db	7
  3212  00FFA3  00                 	db	0
  3213  00FFA4  07                 	db	7
  3214  00FFA5  00                 	db	0
  3215  00FFA6  10                 	db	16
  3216  00FFA7  3C                 	db	60
  3217  00FFA8  3C                 	db	60
  3218  00FFA9  24                 	db	36
  3219  00FFAA  24                 	db	36
  3220  00FFAB  FF                 	db	255
  3221  00FFAC  FF                 	db	255
  3222  00FFAD  80                 	db	128
  3223  00FFAE  01                 	db	1
  3224  00FFAF  88                 	db	136
  3225  00FFB0  01                 	db	1
  3226  00FFB1  9C                 	db	156
  3227  00FFB2  39                 	db	57
  3228  00FFB3  88                 	db	136
  3229  00FFB4  01                 	db	1
  3230  00FFB5  80                 	db	128
  3231  00FFB6  01                 	db	1
  3232  00FFB7  80                 	db	128
  3233  00FFB8  01                 	db	1
  3234  00FFB9  80                 	db	128
  3235  00FFBA  01                 	db	1
  3236  00FFBB  FF                 	db	255
  3237  00FFBC  FF                 	db	255
  3238  00FFBD  FF                 	db	255
  3239  00FFBE  FF                 	db	255
  3240  00FFBF  FF                 	db	255
  3241  00FFC0  FF                 	db	255
  3242  00FFC1  0D                 	db	13
  3243  00FFC2  00                 	db	0
  3244  00FFC3  00                 	db	0
  3245  00FFC4  02                 	db	2
  3246  00FFC5  00                 	db	0
  3247  00FFC6  07                 	db	7
  3248  00FFC7  00                 	db	0
  3249  00FFC8  07                 	db	7
  3250  00FFC9  00                 	db	0
  3251  00FFCA  07                 	db	7
  3252  00FFCB  00                 	db	0
  3253  00FFCC  0A                 	db	10
  3254  00FFCD  80                 	db	128
  3255  00FFCE  12                 	db	18
  3256  00FFCF  40                 	db	64
  3257  00FFD0  17                 	db	23
  3258  00FFD1  40                 	db	64
  3259  00FFD2  10                 	db	16
  3260  00FFD3  40                 	db	64
  3261  00FFD4  48                 	db	72
  3262  00FFD5  90                 	db	144
  3263  00FFD6  07                 	db	7
  3264  00FFD7  00                 	db	0
  3265  00FFD8  10                 	db	16
  3266  00FFD9  40                 	db	64
  3267  00FFDA  02                 	db	2
  3268  00FFDB  00                 	db	0
  3269  00FFDC  10                 	db	16
  3270  00FFDD  00                 	db	0
  3271  00FFDE  00                 	db	0
  3272  00FFDF  00                 	db	0
  3273  00FFE0  00                 	db	0
  3274  00FFE1  00                 	db	0
  3275  00FFE2  00                 	db	0
  3276  00FFE3  3F                 	db	63
  3277  00FFE4  FC                 	db	252
  3278  00FFE5  20                 	db	32
  3279  00FFE6  04                 	db	4
  3280  00FFE7  20                 	db	32
  3281  00FFE8  04                 	db	4
  3282  00FFE9  FF                 	db	255
  3283  00FFEA  FF                 	db	255
  3284  00FFEB  20                 	db	32
  3285  00FFEC  04                 	db	4
  3286  00FFED  20                 	db	32
  3287  00FFEE  04                 	db	4
  3288  00FFEF  3F                 	db	63
  3289  00FFF0  FC                 	db	252
  3290  00FFF1  00                 	db	0
  3291  00FFF2  00                 	db	0
  3292  00FFF3  00                 	db	0
  3293  00FFF4  00                 	db	0
  3294  00FFF5  00                 	db	0
  3295  00FFF6  00                 	db	0
  3296  00FFF7                     __end_of_font13:
  3297                           	opt stack 0
  3298  0000                     _ADCON0	set	4034
  3299  0000                     _ADCON0bits	set	4034
  3300  0000                     _ADCON1	set	4033
  3301  0000                     _ADCON2	set	4032
  3302  0000                     _ADCON2bits	set	4032
  3303  0000                     _ADRESH	set	4036
  3304  0000                     _ADRESL	set	4035
  3305  0000                     _ANSELA	set	3896
  3306  0000                     _ANSELB	set	3897
  3307  0000                     _ANSELC	set	3898
  3308  0000                     _ANSELD	set	3899
  3309  0000                     _ANSELE	set	3900
  3310  0000                     _CCP4CONbits	set	3927
  3311  0000                     _CCPR1L	set	4030
  3312  0000                     _CCPR2L	set	3943
  3313  0000                     _CCPR4L	set	3928
  3314  0000                     _EEADR	set	4009
  3315  0000                     _EEADRH	set	4010
  3316  0000                     _EECON1bits	set	4006
  3317  0000                     _EECON2	set	4007
  3318  0000                     _EEDATA	set	4008
  3319  0000                     _INTCONbits	set	4082
  3320  0000                     _IPR1bits	set	3999
  3321  0000                     _IPR5bits	set	3967
  3322  0000                     _LATAbits	set	3977
  3323  0000                     _LATB	set	3978
  3324  0000                     _LATCbits	set	3979
  3325  0000                     _LATD	set	3980
  3326  0000                     _OSCCON	set	4051
  3327  0000                     _OSCTUNEbits	set	3995
  3328  0000                     _PIE1bits	set	3997
  3329  0000                     _PIE5bits	set	3965
  3330  0000                     _PIR1bits	set	3998
  3331  0000                     _PIR5bits	set	3966
  3332  0000                     _PORTB	set	3969
  3333  0000                     _PORTD	set	3971
  3334  0000                     _PR2	set	4027
  3335  0000                     _PR4	set	3922
  3336  0000                     _RCONbits	set	4048
  3337  0000                     _RCREG	set	4014
  3338  0000                     _SPBRG	set	4015
  3339  0000                     _T2CONbits	set	4026
  3340  0000                     _T4CONbits	set	3921
  3341  0000                     _TMR2	set	4028
  3342  0000                     _TMR4	set	3923
  3343  0000                     _TRISAbits	set	3986
  3344  0000                     _TRISB	set	3987
  3345  0000                     _TRISCbits	set	3988
  3346  0000                     _TRISD	set	3989
  3347  0000                     _TRISEbits	set	3990
  3348  0000                     _TXREG	set	4013
  3349  0000                     _BRG161	set	32195
  3350  0000                     _BRGH1	set	32098
  3351  0000                     _CREN1	set	32092
  3352  0000                     _DC1B0	set	32236
  3353  0000                     _DC1B1	set	32237
  3354  0000                     _DC2B0	set	31540
  3355  0000                     _DC2B1	set	31541
  3356  0000                     _FERR1	set	32090
  3357  0000                     _GIE	set	32663
  3358  0000                     _LATC0	set	31832
  3359  0000                     _LATC2	set	31834
  3360  0000                     _LATC3	set	31835
  3361  0000                     _LATE0	set	31848
  3362  0000                     _LATE1	set	31849
  3363  0000                     _LATE2	set	31850
  3364  0000                     _OERR1	set	32089
  3365  0000                     _RCIE	set	31981
  3366  0000                     _RCIF	set	31989
  3367  0000                     _RCIP	set	31997
  3368  0000                     _RX91	set	32094
  3369  0000                     _SPEN1	set	32095
  3370  0000                     _SREN1	set	32093
  3371  0000                     _SWDTEN	set	32392
  3372  0000                     _SYNC1	set	32100
  3373  0000                     _TRMT1	set	32097
  3374  0000                     _TX91	set	32102
  3375  0000                     _TXEN1	set	32101
  3376  0000                     _TXIE	set	31980
  3377  0000                     _LATA	set	3977
  3378  0000                     _LATE	set	3981
  3379  0000                     _TRISA	set	3986
  3380  0000                     _TRISE	set	3990
  3381  00FFF7                     __stringdata:
  3382                           	opt stack 0
  3383  00FFF7                     STR_1:
  3384                           
  3385                           ; BSR set to: 0
  3386  00FFF7  55                 	db	85	;'U'
  3387  00FFF8  52                 	db	82	;'R'
  3388  00FFF9  41                 	db	65	;'A'
  3389  00FFFA  21                 	db	33
  3390  00FFFB  21                 	db	33
  3391  00FFFC  21                 	db	33
  3392  00FFFD  21                 	db	33
  3393  00FFFE  00                 	db	0
  3394  00FFFF                     __end_of__stringdata:
  3395                           	opt stack 0
  3396                           
  3397                           ; #config settings
  3398  00FFFF  00                 	db	0	; dummy byte at the end
  3399  0000                     tblptrh	equ	0xFF7
  3400                           tblptrl	equ	0xFF6
  3401                           tablat	equ	0xFF5
  3402                           prodh	equ	0xFF4
  3403                           prodl	equ	0xFF3
  3404                           intcon	equ	0xFF2
  3405                           wreg	equ	0xFE8
  3406                           indf1	equ	0xFE7
  3407                           postinc1	equ	0xFE6
  3408                           postdec1	equ	0xFE5
  3409                           fsr1h	equ	0xFE2
  3410                           fsr1l	equ	0xFE1
  3411                           indf2	equ	0xFDF
  3412                           postinc2	equ	0xFDE
  3413                           postdec2	equ	0xFDD
  3414                           fsr2h	equ	0xFDA
  3415                           fsr2l	equ	0xFD9
  3416                           status	equ	0xFD8
  3417                           
  3418                           	psect	cinit
  3419  0013C4                     __pcinit:
  3420                           	opt stack 0
  3421  0013C4                     start_initialization:
  3422                           	opt stack 0
  3423  0013C4                     __initialization:
  3424                           	opt stack 0
  3425                           
  3426                           ; Clear objects allocated to BANK3 (256 bytes)
  3427  0013C4  EE03  F000         	lfsr	0,__pbssBANK3
  3428  0013C8  EE11 F000          	lfsr	1,256
  3429  0013CC                     clear_0:
  3430  0013CC  6AEE               	clrf	postinc0,c
  3431  0013CE  50E5               	movf	postdec1,w,c
  3432  0013D0  50E1               	movf	fsr1l,w,c
  3433  0013D2  E1FC               	bnz	clear_0
  3434  0013D4  50E2               	movf	fsr1h,w,c
  3435  0013D6  E1FA               	bnz	clear_0
  3436                           
  3437                           ; Clear objects allocated to BANK2 (192 bytes)
  3438  0013D8  EE02  F000         	lfsr	0,__pbssBANK2
  3439  0013DC  0EC0               	movlw	192
  3440  0013DE                     clear_1:
  3441  0013DE  6AEE               	clrf	postinc0,c
  3442  0013E0  06E8               	decf	wreg,f,c
  3443  0013E2  E1FD               	bnz	clear_1
  3444                           
  3445                           ; Clear objects allocated to BANK1 (208 bytes)
  3446  0013E4  EE01  F000         	lfsr	0,__pbssBANK1
  3447  0013E8  0ED0               	movlw	208
  3448  0013EA                     clear_2:
  3449  0013EA  6AEE               	clrf	postinc0,c
  3450  0013EC  06E8               	decf	wreg,f,c
  3451  0013EE  E1FD               	bnz	clear_2
  3452                           
  3453                           ; Clear objects allocated to BANK0 (74 bytes)
  3454  0013F0  EE00  F060         	lfsr	0,__pbssBANK0
  3455  0013F4  0E4A               	movlw	74
  3456  0013F6                     clear_3:
  3457  0013F6  6AEE               	clrf	postinc0,c
  3458  0013F8  06E8               	decf	wreg,f,c
  3459  0013FA  E1FD               	bnz	clear_3
  3460                           
  3461                           ; Clear objects allocated to COMRAM (28 bytes)
  3462  0013FC  EE00  F024         	lfsr	0,__pbssCOMRAM
  3463  001400  0E1C               	movlw	28
  3464  001402                     clear_4:
  3465  001402  6AEE               	clrf	postinc0,c
  3466  001404  06E8               	decf	wreg,f,c
  3467  001406  E1FD               	bnz	clear_4
  3468  001408                     end_of_initialization:
  3469                           	opt stack 0
  3470  001408                     __end_of__initialization:
  3471                           	opt stack 0
  3472  001408  0E00               	movlw	low (__Lmediumconst shr (0+16))
  3473  00140A  6EF8               	movwf	tblptru,c
  3474  00140C  0100               	movlb	0
  3475  00140E  EF55  F007         	goto	_main	;jump to C main() function
  3476                           tblptru	equ	0xFF8
  3477                           tblptrh	equ	0xFF7
  3478                           tblptrl	equ	0xFF6
  3479                           tablat	equ	0xFF5
  3480                           prodh	equ	0xFF4
  3481                           prodl	equ	0xFF3
  3482                           intcon	equ	0xFF2
  3483                           postinc0	equ	0xFEE
  3484                           wreg	equ	0xFE8
  3485                           indf1	equ	0xFE7
  3486                           postinc1	equ	0xFE6
  3487                           postdec1	equ	0xFE5
  3488                           fsr1h	equ	0xFE2
  3489                           fsr1l	equ	0xFE1
  3490                           indf2	equ	0xFDF
  3491                           postinc2	equ	0xFDE
  3492                           postdec2	equ	0xFDD
  3493                           fsr2h	equ	0xFDA
  3494                           fsr2l	equ	0xFD9
  3495                           status	equ	0xFD8
  3496                           
  3497                           	psect	bssCOMRAM
  3498  000024                     __pbssCOMRAM:
  3499                           	opt stack 0
  3500  000024                     _e:
  3501                           	opt stack 0
  3502  000024                     	ds	4
  3503  000028                     _f:
  3504                           	opt stack 0
  3505  000028                     	ds	4
  3506  00002C                     _k:
  3507                           	opt stack 0
  3508  00002C                     	ds	4
  3509  000030                     _l:
  3510                           	opt stack 0
  3511  000030                     	ds	4
  3512  000034                     _c:
  3513                           	opt stack 0
  3514  000034                     	ds	2
  3515  000036                     _d:
  3516                           	opt stack 0
  3517  000036                     	ds	2
  3518  000038                     _j_rx:
  3519                           	opt stack 0
  3520  000038                     	ds	2
  3521  00003A                     _a:
  3522                           	opt stack 0
  3523  00003A                     	ds	1
  3524  00003B                     _b:
  3525                           	opt stack 0
  3526  00003B                     	ds	1
  3527  00003C                     _beep_count:
  3528                           	opt stack 0
  3529  00003C                     	ds	1
  3530  00003D                     _curr_task:
  3531                           	opt stack 0
  3532  00003D                     	ds	1
  3533  00003E                     _dummy:
  3534                           	opt stack 0
  3535  00003E                     	ds	1
  3536  00003F                     _timeout_error:
  3537                           	opt stack 0
  3538  00003F                     	ds	1
  3539                           tblptru	equ	0xFF8
  3540                           tblptrh	equ	0xFF7
  3541                           tblptrl	equ	0xFF6
  3542                           tablat	equ	0xFF5
  3543                           prodh	equ	0xFF4
  3544                           prodl	equ	0xFF3
  3545                           intcon	equ	0xFF2
  3546                           postinc0	equ	0xFEE
  3547                           wreg	equ	0xFE8
  3548                           indf1	equ	0xFE7
  3549                           postinc1	equ	0xFE6
  3550                           postdec1	equ	0xFE5
  3551                           fsr1h	equ	0xFE2
  3552                           fsr1l	equ	0xFE1
  3553                           indf2	equ	0xFDF
  3554                           postinc2	equ	0xFDE
  3555                           postdec2	equ	0xFDD
  3556                           fsr2h	equ	0xFDA
  3557                           fsr2l	equ	0xFD9
  3558                           status	equ	0xFD8
  3559                           
  3560                           	psect	bssBANK0
  3561  000060                     __pbssBANK0:
  3562                           	opt stack 0
  3563  000060                     _Messages:
  3564                           	opt stack 0
  3565  000060                     	ds	10
  3566  00006A                     _BSem:
  3567                           	opt stack 0
  3568  00006A                     	ds	4
  3569  00006E                     __sys_tick:
  3570                           	opt stack 0
  3571  00006E                     	ds	2
  3572  000070                     _beep_timer:
  3573                           	opt stack 0
  3574  000070                     	ds	2
  3575  000072                     _sys_tick:
  3576                           	opt stack 0
  3577  000072                     	ds	2
  3578  000074                     HI_ISR@beep:
  3579                           	opt stack 0
  3580  000074                     	ds	1
  3581  000075                     MTouchAcquisition@startSensorNumber:
  3582                           	opt stack 0
  3583  000075                     	ds	1
  3584  000076                     _BroadcastMessages:
  3585                           	opt stack 0
  3586  000076                     	ds	1
  3587  000077                     _delayus_variable:
  3588                           	opt stack 0
  3589  000077                     	ds	1
  3590  000078                     _lb_napr:
  3591                           	opt stack 0
  3592  000078                     	ds	27
  3593  000093                     _str:
  3594                           	opt stack 0
  3595  000093                     	ds	20
  3596  0000A7                     _pos:
  3597                           	opt stack 0
  3598  0000A7                     	ds	3
  3599                           tblptru	equ	0xFF8
  3600                           tblptrh	equ	0xFF7
  3601                           tblptrl	equ	0xFF6
  3602                           tablat	equ	0xFF5
  3603                           prodh	equ	0xFF4
  3604                           prodl	equ	0xFF3
  3605                           intcon	equ	0xFF2
  3606                           postinc0	equ	0xFEE
  3607                           wreg	equ	0xFE8
  3608                           indf1	equ	0xFE7
  3609                           postinc1	equ	0xFE6
  3610                           postdec1	equ	0xFE5
  3611                           fsr1h	equ	0xFE2
  3612                           fsr1l	equ	0xFE1
  3613                           indf2	equ	0xFDF
  3614                           postinc2	equ	0xFDE
  3615                           postdec2	equ	0xFDD
  3616                           fsr2h	equ	0xFDA
  3617                           fsr2l	equ	0xFD9
  3618                           status	equ	0xFD8
  3619                           
  3620                           	psect	bssBANK1
  3621  000100                     __pbssBANK1:
  3622                           	opt stack 0
  3623  000100                     _RxTxBuff:
  3624                           	opt stack 0
  3625  000100                     	ds	128
  3626  000180                     _buttons:
  3627                           	opt stack 0
  3628  000180                     	ds	80
  3629                           tblptru	equ	0xFF8
  3630                           tblptrh	equ	0xFF7
  3631                           tblptrl	equ	0xFF6
  3632                           tablat	equ	0xFF5
  3633                           prodh	equ	0xFF4
  3634                           prodl	equ	0xFF3
  3635                           intcon	equ	0xFF2
  3636                           postinc0	equ	0xFEE
  3637                           wreg	equ	0xFE8
  3638                           indf1	equ	0xFE7
  3639                           postinc1	equ	0xFE6
  3640                           postdec1	equ	0xFE5
  3641                           fsr1h	equ	0xFE2
  3642                           fsr1l	equ	0xFE1
  3643                           indf2	equ	0xFDF
  3644                           postinc2	equ	0xFDE
  3645                           postdec2	equ	0xFDD
  3646                           fsr2h	equ	0xFDA
  3647                           fsr2l	equ	0xFD9
  3648                           status	equ	0xFD8
  3649                           
  3650                           	psect	bssBANK2
  3651  000200                     __pbssBANK2:
  3652                           	opt stack 0
  3653  000200                     _sensors:
  3654                           	opt stack 0
  3655  000200                     	ds	192
  3656                           tblptru	equ	0xFF8
  3657                           tblptrh	equ	0xFF7
  3658                           tblptrl	equ	0xFF6
  3659                           tablat	equ	0xFF5
  3660                           prodh	equ	0xFF4
  3661                           prodl	equ	0xFF3
  3662                           intcon	equ	0xFF2
  3663                           postinc0	equ	0xFEE
  3664                           wreg	equ	0xFE8
  3665                           indf1	equ	0xFE7
  3666                           postinc1	equ	0xFE6
  3667                           postdec1	equ	0xFE5
  3668                           fsr1h	equ	0xFE2
  3669                           fsr1l	equ	0xFE1
  3670                           indf2	equ	0xFDF
  3671                           postinc2	equ	0xFDE
  3672                           postdec2	equ	0xFDD
  3673                           fsr2h	equ	0xFDA
  3674                           fsr2l	equ	0xFD9
  3675                           status	equ	0xFD8
  3676                           
  3677                           	psect	bssBANK3
  3678  000300                     __pbssBANK3:
  3679                           	opt stack 0
  3680  000300                     _RxBuff:
  3681                           	opt stack 0
  3682  000300                     	ds	256
  3683                           tblptru	equ	0xFF8
  3684                           tblptrh	equ	0xFF7
  3685                           tblptrl	equ	0xFF6
  3686                           tablat	equ	0xFF5
  3687                           prodh	equ	0xFF4
  3688                           prodl	equ	0xFF3
  3689                           intcon	equ	0xFF2
  3690                           postinc0	equ	0xFEE
  3691                           wreg	equ	0xFE8
  3692                           indf1	equ	0xFE7
  3693                           postinc1	equ	0xFE6
  3694                           postdec1	equ	0xFE5
  3695                           fsr1h	equ	0xFE2
  3696                           fsr1l	equ	0xFE1
  3697                           indf2	equ	0xFDF
  3698                           postinc2	equ	0xFDE
  3699                           postdec2	equ	0xFDD
  3700                           fsr2h	equ	0xFDA
  3701                           fsr2l	equ	0xFD9
  3702                           status	equ	0xFD8
  3703                           
  3704                           	psect	cstackBANK1
  3705  0001D0                     __pcstackBANK1:
  3706                           	opt stack 0
  3707  0001D0                     ks0108Fill@mode:
  3708                           	opt stack 0
  3709  0001D0                     ks0108ReadData@incXAdd:
  3710                           	opt stack 0
  3711  0001D0                     MTouchSetSensor@tris:
  3712                           	opt stack 0
  3713                           
  3714                           ; 2 bytes @ 0x0
  3715  0001D0                     	ds	1
  3716  0001D1                     ks0108Fill@j:
  3717                           	opt stack 0
  3718  0001D1                     ks0108ReadData@data:
  3719                           	opt stack 0
  3720                           
  3721                           ; 1 bytes @ 0x1
  3722  0001D1                     	ds	1
  3723  0001D2                     ks0108Fill@i:
  3724                           	opt stack 0
  3725  0001D2                     ks0108ReadData@i:
  3726                           	opt stack 0
  3727  0001D2                     MTouchSetSensor@lat:
  3728                           	opt stack 0
  3729                           
  3730                           ; 2 bytes @ 0x2
  3731  0001D2                     	ds	1
  3732  0001D3                     ??_ks0108SetDot:
  3733  0001D3                     ??_ks0108ClearDot:
  3734                           
  3735                           ; 0 bytes @ 0x3
  3736  0001D3                     	ds	1
  3737  0001D4                     MTouchSetSensor@ioBitNumber:
  3738                           	opt stack 0
  3739                           
  3740                           ; 1 bytes @ 0x4
  3741  0001D4                     	ds	1
  3742  0001D5                     MTouchSetSensor@channelNumber:
  3743                           	opt stack 0
  3744  0001D5                     ks0108SetDot@x:
  3745                           	opt stack 0
  3746  0001D5                     ks0108ClearDot@x:
  3747                           	opt stack 0
  3748                           
  3749                           ; 1 bytes @ 0x5
  3750  0001D5                     	ds	1
  3751  0001D6                     ks0108SetDot@data:
  3752                           	opt stack 0
  3753  0001D6                     ks0108ClearDot@data:
  3754                           	opt stack 0
  3755  0001D6                     MTouchSetSensor@threshold:
  3756                           	opt stack 0
  3757                           
  3758                           ; 2 bytes @ 0x6
  3759  0001D6                     	ds	1
  3760  0001D7                     ks0108PutChar@p_font:
  3761                           	opt stack 0
  3762                           
  3763                           ; 2 bytes @ 0x7
  3764  0001D7                     	ds	1
  3765  0001D8                     MTouchSetSensor@oversampling:
  3766                           	opt stack 0
  3767                           
  3768                           ; 2 bytes @ 0x8
  3769  0001D8                     	ds	1
  3770  0001D9                     ks0108PutChar@mode:
  3771                           	opt stack 0
  3772                           
  3773                           ; 1 bytes @ 0x9
  3774  0001D9                     	ds	1
  3775  0001DA                     ??_ks0108PutChar:
  3776  0001DA                     MTouchSetSensor@chargeDelay:
  3777                           	opt stack 0
  3778                           
  3779                           ; 1 bytes @ 0xA
  3780  0001DA                     	ds	1
  3781  0001DB                     InitializeSystem@pll_startup_counter:
  3782                           	opt stack 0
  3783                           
  3784                           ; 2 bytes @ 0xB
  3785  0001DB                     	ds	1
  3786  0001DC                     ks0108PutChar@s:
  3787                           	opt stack 0
  3788                           
  3789                           ; 1 bytes @ 0xC
  3790  0001DC                     	ds	1
  3791  0001DD                     ks0108PutChar@_fontHeight:
  3792                           	opt stack 0
  3793                           
  3794                           ; 1 bytes @ 0xD
  3795  0001DD                     	ds	1
  3796  0001DE                     ks0108PutChar@_fontWidth:
  3797                           	opt stack 0
  3798                           
  3799                           ; 1 bytes @ 0xE
  3800  0001DE                     	ds	1
  3801  0001DF                     ks0108PutChar@pChImage:
  3802                           	opt stack 0
  3803                           
  3804                           ; 2 bytes @ 0xF
  3805  0001DF                     	ds	2
  3806  0001E1                     ks0108PutChar@xCnt:
  3807                           	opt stack 0
  3808                           
  3809                           ; 1 bytes @ 0x11
  3810  0001E1                     	ds	1
  3811  0001E2                     ks0108PutChar@yCnt:
  3812                           	opt stack 0
  3813                           
  3814                           ; 1 bytes @ 0x12
  3815  0001E2                     	ds	1
  3816  0001E3                     ks0108PutChar@temp:
  3817                           	opt stack 0
  3818                           
  3819                           ; 1 bytes @ 0x13
  3820  0001E3                     	ds	1
  3821  0001E4                     ks0108PutChar@x_:
  3822                           	opt stack 0
  3823                           
  3824                           ; 1 bytes @ 0x14
  3825  0001E4                     	ds	1
  3826  0001E5                     ks0108PutChar@y_:
  3827                           	opt stack 0
  3828                           
  3829                           ; 1 bytes @ 0x15
  3830  0001E5                     	ds	1
  3831  0001E6                     ks0108PutChar@chWidth:
  3832                           	opt stack 0
  3833                           
  3834                           ; 1 bytes @ 0x16
  3835  0001E6                     	ds	1
  3836  0001E7                     ks0108PutChar@y:
  3837                           	opt stack 0
  3838                           
  3839                           ; 1 bytes @ 0x17
  3840  0001E7                     	ds	1
  3841  0001E8                     ks0108PutChar@x:
  3842                           	opt stack 0
  3843                           
  3844                           ; 1 bytes @ 0x18
  3845  0001E8                     	ds	1
  3846  0001E9                     ks0108PutChar@mask:
  3847                           	opt stack 0
  3848                           
  3849                           ; 1 bytes @ 0x19
  3850  0001E9                     	ds	1
  3851  0001EA                     ks0108PutChar@base:
  3852                           	opt stack 0
  3853                           
  3854                           ; 2 bytes @ 0x1A
  3855  0001EA                     	ds	2
  3856  0001EC                     LabelSetTxt@temp:
  3857                           	opt stack 0
  3858                           
  3859                           ; 1 bytes @ 0x1C
  3860  0001EC                     	ds	1
  3861  0001ED                     LabelSetTxt@i:
  3862                           	opt stack 0
  3863                           
  3864                           ; 1 bytes @ 0x1D
  3865  0001ED                     	ds	1
  3866  0001EE                     LabelSetTxt@lb:
  3867                           	opt stack 0
  3868                           
  3869                           ; 1 bytes @ 0x1E
  3870  0001EE                     	ds	1
  3871  0001EF                     LabelCreate@x:
  3872                           	opt stack 0
  3873                           
  3874                           ; 1 bytes @ 0x1F
  3875  0001EF                     	ds	1
  3876  0001F0                     LabelCreate@y:
  3877                           	opt stack 0
  3878                           
  3879                           ; 1 bytes @ 0x20
  3880  0001F0                     	ds	1
  3881  0001F1                     LabelCreate@font:
  3882                           	opt stack 0
  3883                           
  3884                           ; 2 bytes @ 0x21
  3885  0001F1                     	ds	2
  3886  0001F3                     LabelCreate@ln:
  3887                           	opt stack 0
  3888                           
  3889                           ; 1 bytes @ 0x23
  3890  0001F3                     	ds	1
  3891  0001F4                     LabelCreate@i:
  3892                           	opt stack 0
  3893                           
  3894                           ; 1 bytes @ 0x24
  3895  0001F4                     	ds	1
  3896  0001F5                     LabelCreate@lb:
  3897                           	opt stack 0
  3898                           
  3899                           ; 1 bytes @ 0x25
  3900  0001F5                     	ds	1
  3901                           tblptru	equ	0xFF8
  3902                           tblptrh	equ	0xFF7
  3903                           tblptrl	equ	0xFF6
  3904                           tablat	equ	0xFF5
  3905                           prodh	equ	0xFF4
  3906                           prodl	equ	0xFF3
  3907                           intcon	equ	0xFF2
  3908                           postinc0	equ	0xFEE
  3909                           wreg	equ	0xFE8
  3910                           indf1	equ	0xFE7
  3911                           postinc1	equ	0xFE6
  3912                           postdec1	equ	0xFE5
  3913                           fsr1h	equ	0xFE2
  3914                           fsr1l	equ	0xFE1
  3915                           indf2	equ	0xFDF
  3916                           postinc2	equ	0xFDE
  3917                           postdec2	equ	0xFDD
  3918                           fsr2h	equ	0xFDA
  3919                           fsr2l	equ	0xFD9
  3920                           status	equ	0xFD8
  3921                           
  3922                           	psect	cstackBANK0
  3923  0000AA                     __pcstackBANK0:
  3924                           	opt stack 0
  3925  0000AA                     ?_MTouchAcquisitionCVD:
  3926                           	opt stack 0
  3927  0000AA                     MTouchAcquisitionCVD@pCurrentSensor:
  3928                           	opt stack 0
  3929  0000AA                     MTouchUpdateSensorAverage@pSensor:
  3930                           	opt stack 0
  3931                           
  3932                           ; 2 bytes @ 0x0
  3933  0000AA                     	ds	2
  3934  0000AC                     MTouchAcquisitionCVD@pPreviousSensor:
  3935                           	opt stack 0
  3936  0000AC                     MTouchUpdateSensorAverage@rate:
  3937                           	opt stack 0
  3938                           
  3939                           ; 2 bytes @ 0x2
  3940  0000AC                     	ds	2
  3941  0000AE                     ??_MTouchUpdateSensorAverage:
  3942  0000AE                     ??_MTouchAcquisitionCVD:
  3943                           
  3944                           ; 0 bytes @ 0x4
  3945  0000AE                     	ds	2
  3946  0000B0                     MTouchAcquisitionCVD@result:
  3947                           	opt stack 0
  3948                           
  3949                           ; 2 bytes @ 0x6
  3950  0000B0                     	ds	2
  3951  0000B2                     MTouchAcquisitionCVD@prevTris:
  3952                           	opt stack 0
  3953                           
  3954                           ; 2 bytes @ 0x8
  3955  0000B2                     	ds	1
  3956  0000B3                     MTouchSensorDecode@pSensor:
  3957                           	opt stack 0
  3958                           
  3959                           ; 2 bytes @ 0x9
  3960  0000B3                     	ds	1
  3961  0000B4                     MTouchAcquisitionCVD@prevChannelNumber:
  3962                           	opt stack 0
  3963                           
  3964                           ; 1 bytes @ 0xA
  3965  0000B4                     	ds	1
  3966  0000B5                     ??_MTouchSensorDecode:
  3967  0000B5                     MTouchAcquisitionCVD@curChannelNumber:
  3968                           	opt stack 0
  3969                           
  3970                           ; 1 bytes @ 0xB
  3971  0000B5                     	ds	1
  3972  0000B6                     MTouchAcquisitionCVD@prevLat:
  3973                           	opt stack 0
  3974                           
  3975                           ; 2 bytes @ 0xC
  3976  0000B6                     	ds	2
  3977  0000B8                     MTouchAcquisitionCVD@curLat:
  3978                           	opt stack 0
  3979                           
  3980                           ; 2 bytes @ 0xE
  3981  0000B8                     	ds	1
  3982  0000B9                     MTouchSensorDecode@delta:
  3983                           	opt stack 0
  3984                           
  3985                           ; 2 bytes @ 0xF
  3986  0000B9                     	ds	1
  3987  0000BA                     MTouchAcquisitionCVD@prevIOMask:
  3988                           	opt stack 0
  3989                           
  3990                           ; 1 bytes @ 0x10
  3991  0000BA                     	ds	1
  3992  0000BB                     MTouchAcquisitionCVD@curTris:
  3993                           	opt stack 0
  3994                           
  3995                           ; 2 bytes @ 0x11
  3996  0000BB                     	ds	2
  3997  0000BD                     MTouchAcquisitionCVD@curIOMask:
  3998                           	opt stack 0
  3999                           
  4000                           ; 1 bytes @ 0x13
  4001  0000BD                     	ds	1
  4002  0000BE                     ??_MTouchAcquisition:
  4003                           
  4004                           ; 0 bytes @ 0x14
  4005  0000BE                     	ds	3
  4006  0000C1                     MTouchAcquisition@data:
  4007                           	opt stack 0
  4008                           
  4009                           ; 2 bytes @ 0x17
  4010  0000C1                     	ds	2
  4011  0000C3                     MTouchAcquisition@pLastSensor:
  4012                           	opt stack 0
  4013                           
  4014                           ; 2 bytes @ 0x19
  4015  0000C3                     	ds	2
  4016  0000C5                     MTouchAcquisition@pPreviousSensor:
  4017                           	opt stack 0
  4018                           
  4019                           ; 2 bytes @ 0x1B
  4020  0000C5                     	ds	2
  4021  0000C7                     MTouchAcquisition@i:
  4022                           	opt stack 0
  4023                           
  4024                           ; 1 bytes @ 0x1D
  4025  0000C7                     	ds	1
  4026  0000C8                     MTouchAcquisition@pCurrentSensor:
  4027                           	opt stack 0
  4028                           
  4029                           ; 2 bytes @ 0x1E
  4030  0000C8                     	ds	2
  4031  0000CA                     ??_HI_ISR:
  4032                           
  4033                           ; 0 bytes @ 0x20
  4034  0000CA                     	ds	7
  4035  0000D1                     ??_MTouchSetSensor:
  4036  0000D1                     ?_sprintf:
  4037                           	opt stack 0
  4038  0000D1                     ?___wmul:
  4039                           	opt stack 0
  4040  0000D1                     MTouchSetButton@sensorNumber:
  4041                           	opt stack 0
  4042  0000D1                     Beep@ms10:
  4043                           	opt stack 0
  4044  0000D1                     InitMessages@i:
  4045                           	opt stack 0
  4046  0000D1                     ProcessMessages@i:
  4047                           	opt stack 0
  4048  0000D1                     ks0108WriteCommand@chip:
  4049                           	opt stack 0
  4050  0000D1                     DelayMs@cnt:
  4051                           	opt stack 0
  4052  0000D1                     sprintf@f:
  4053                           	opt stack 0
  4054  0000D1                     ___wmul@multiplier:
  4055                           	opt stack 0
  4056                           
  4057                           ; 2 bytes @ 0x27
  4058  0000D1                     	ds	1
  4059  0000D2                     MTouchSetButton@decode:
  4060                           	opt stack 0
  4061  0000D2                     ks0108WriteCommand@cmd:
  4062                           	opt stack 0
  4063  0000D2                     DelayMs@i:
  4064                           	opt stack 0
  4065                           
  4066                           ; 1 bytes @ 0x28
  4067  0000D2                     	ds	1
  4068  0000D3                     ??_MTouchSetButton:
  4069  0000D3                     MTouchSetSensor@sensorNumber:
  4070                           	opt stack 0
  4071  0000D3                     ks0108GotoXY@y:
  4072                           	opt stack 0
  4073  0000D3                     ks0108WriteData@data:
  4074                           	opt stack 0
  4075  0000D3                     sprintf@c:
  4076                           	opt stack 0
  4077  0000D3                     ___wmul@multiplicand:
  4078                           	opt stack 0
  4079                           
  4080                           ; 2 bytes @ 0x29
  4081  0000D3                     	ds	1
  4082  0000D4                     ks0108GotoXY@chip:
  4083                           	opt stack 0
  4084  0000D4                     sprintf@sp:
  4085                           	opt stack 0
  4086  0000D4                     MTouchSetSensor@pSensor:
  4087                           	opt stack 0
  4088                           
  4089                           ; 2 bytes @ 0x2A
  4090  0000D4                     	ds	1
  4091  0000D5                     MTouchSetButton@buttonNumber:
  4092                           	opt stack 0
  4093  0000D5                     ks0108GotoXY@cmd:
  4094                           	opt stack 0
  4095  0000D5                     ___wmul@product:
  4096                           	opt stack 0
  4097                           
  4098                           ; 2 bytes @ 0x2B
  4099  0000D5                     	ds	1
  4100  0000D6                     ks0108GotoXY@x:
  4101                           	opt stack 0
  4102  0000D6                     MTouchSetButton@pButton:
  4103                           	opt stack 0
  4104                           
  4105                           ; 2 bytes @ 0x2C
  4106  0000D6                     	ds	1
  4107  0000D7                     ks0108SetDot@y:
  4108                           	opt stack 0
  4109  0000D7                     ks0108ClearDot@y:
  4110                           	opt stack 0
  4111                           
  4112                           ; 1 bytes @ 0x2D
  4113  0000D7                     	ds	1
  4114  0000D8                     LabelSetTxt@str:
  4115                           	opt stack 0
  4116                           
  4117                           ; 1 bytes @ 0x2E
  4118  0000D8                     	ds	1
  4119  0000D9                     tblptru	equ	0xFF8
  4120                           tblptrh	equ	0xFF7
  4121                           tblptrl	equ	0xFF6
  4122                           tablat	equ	0xFF5
  4123                           prodh	equ	0xFF4
  4124                           prodl	equ	0xFF3
  4125                           intcon	equ	0xFF2
  4126                           postinc0	equ	0xFEE
  4127                           wreg	equ	0xFE8
  4128                           indf1	equ	0xFE7
  4129                           postinc1	equ	0xFE6
  4130                           postdec1	equ	0xFE5
  4131                           fsr1h	equ	0xFE2
  4132                           fsr1l	equ	0xFE1
  4133                           indf2	equ	0xFDF
  4134                           postinc2	equ	0xFDE
  4135                           postdec2	equ	0xFDD
  4136                           fsr2h	equ	0xFDA
  4137                           fsr2l	equ	0xFD9
  4138                           status	equ	0xFD8
  4139                           
  4140                           ; 0 bytes @ 0x2F
  4141                           
  4142                           	psect	cstackCOMRAM
  4143  000001                     __pcstackCOMRAM:
  4144                           	opt stack 0
  4145  000001                     putbyte@byte:
  4146                           	opt stack 0
  4147  000001                     crc_mb_init@code:
  4148                           	opt stack 0
  4149  000001                     crc_mb_calc@next:
  4150                           	opt stack 0
  4151  000001                     SendMessage@Msg:
  4152                           	opt stack 0
  4153  000001                     BSemOn@Sem:
  4154                           	opt stack 0
  4155  000001                     timed_getc@timeout:
  4156                           	opt stack 0
  4157  000001                     Read_b_eep@badd:
  4158                           	opt stack 0
  4159  000001                     Write_b_eep@badd:
  4160                           	opt stack 0
  4161                           
  4162                           ; 2 bytes @ 0x0
  4163  000001                     	ds	1
  4164  000002                     ??_crc_mb_calc:
  4165                           
  4166                           ; 0 bytes @ 0x1
  4167  000002                     	ds	1
  4168  000003                     ??_Read_b_eep:
  4169  000003                     Write_b_eep@bdat:
  4170                           	opt stack 0
  4171                           
  4172                           ; 1 bytes @ 0x2
  4173  000003                     	ds	1
  4174  000004                     ??_Write_b_eep:
  4175                           
  4176                           ; 0 bytes @ 0x3
  4177  000004                     	ds	2
  4178  000006                     crc_mb_calc@flag:
  4179                           	opt stack 0
  4180  000006                     read___ee@adr:
  4181                           	opt stack 0
  4182                           
  4183                           ; 2 bytes @ 0x5
  4184  000006                     	ds	1
  4185  000007                     crc_mb_calc@i:
  4186                           	opt stack 0
  4187  000007                     Write_b_eep@GIE_BIT_VAL:
  4188                           	opt stack 0
  4189                           
  4190                           ; 1 bytes @ 0x6
  4191  000007                     	ds	1
  4192  000008                     read___ee@var:
  4193                           	opt stack 0
  4194  000008                     crc_mb_calc@code:
  4195                           	opt stack 0
  4196  000008                     write___ee@adr:
  4197                           	opt stack 0
  4198                           
  4199                           ; 2 bytes @ 0x7
  4200  000008                     	ds	1
  4201  000009                     read___ee@byte:
  4202                           	opt stack 0
  4203  000009                     crc_mb@buffer:
  4204                           	opt stack 0
  4205  000009                     crc_mb_check@buffer:
  4206                           	opt stack 0
  4207                           
  4208                           ; 2 bytes @ 0x8
  4209  000009                     	ds	1
  4210  00000A                     write___ee@var:
  4211                           	opt stack 0
  4212                           
  4213                           ; 1 bytes @ 0x9
  4214  00000A                     	ds	1
  4215  00000B                     write___ee@byte:
  4216                           	opt stack 0
  4217  00000B                     crc_mb@count:
  4218                           	opt stack 0
  4219  00000B                     crc_mb_check@cnt:
  4220                           	opt stack 0
  4221                           
  4222                           ; 1 bytes @ 0xA
  4223  00000B                     	ds	1
  4224  00000C                     ??_crc_mb_check:
  4225  00000C                     ??_crc_mb:
  4226  00000C                     set_ee_default@c:
  4227                           	opt stack 0
  4228                           
  4229                           ; 1 bytes @ 0xB
  4230  00000C                     	ds	1
  4231  00000D                     set_ee_default@c1:
  4232                           	opt stack 0
  4233                           
  4234                           ; 1 bytes @ 0xC
  4235  00000D                     	ds	1
  4236  00000E                     set_ee_default@i:
  4237                           	opt stack 0
  4238                           
  4239                           ; 2 bytes @ 0xD
  4240  00000E                     	ds	1
  4241  00000F                     crc_mb@i:
  4242                           	opt stack 0
  4243                           
  4244                           ; 1 bytes @ 0xE
  4245  00000F                     	ds	1
  4246  000010                     crc_mb_check@i:
  4247                           	opt stack 0
  4248  000010                     crc_mb@CRC:
  4249                           	opt stack 0
  4250                           
  4251                           ; 2 bytes @ 0xF
  4252  000010                     	ds	1
  4253  000011                     crc_mb_check@crc:
  4254                           	opt stack 0
  4255                           
  4256                           ; 2 bytes @ 0x10
  4257  000011                     	ds	2
  4258  000013                     ??_LO_ISR:
  4259                           
  4260                           ; 0 bytes @ 0x12
  4261  000013                     	ds	14
  4262  000021                     LO_ISR@lcAdr:
  4263                           	opt stack 0
  4264                           
  4265                           ; 1 bytes @ 0x20
  4266  000021                     	ds	1
  4267  000022                     LO_ISR@lcData:
  4268                           	opt stack 0
  4269                           
  4270                           ; 1 bytes @ 0x21
  4271  000022                     	ds	1
  4272  000023                     LO_ISR@i:
  4273                           	opt stack 0
  4274                           
  4275                           ; 1 bytes @ 0x22
  4276  000023                     	ds	1
  4277                           tblptru	equ	0xFF8
  4278                           tblptrh	equ	0xFF7
  4279                           tblptrl	equ	0xFF6
  4280                           tablat	equ	0xFF5
  4281                           prodh	equ	0xFF4
  4282                           prodl	equ	0xFF3
  4283                           intcon	equ	0xFF2
  4284                           postinc0	equ	0xFEE
  4285                           wreg	equ	0xFE8
  4286                           indf1	equ	0xFE7
  4287                           postinc1	equ	0xFE6
  4288                           postdec1	equ	0xFE5
  4289                           fsr1h	equ	0xFE2
  4290                           fsr1l	equ	0xFE1
  4291                           indf2	equ	0xFDF
  4292                           postinc2	equ	0xFDE
  4293                           postdec2	equ	0xFDD
  4294                           fsr2h	equ	0xFDA
  4295                           fsr2l	equ	0xFD9
  4296                           status	equ	0xFD8
  4297                           
  4298 ;;
  4299 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4300 ;;
  4301 ;; *************** function _main *****************
  4302 ;; Defined at:
  4303 ;;		line 41 in file "../Main.c"
  4304 ;; Parameters:    Size  Location     Type
  4305 ;;		None
  4306 ;; Auto vars:     Size  Location     Type
  4307 ;;		None
  4308 ;; Return value:  Size  Location     Type
  4309 ;;		None               void
  4310 ;; Registers used:
  4311 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4312 ;; Tracked objects:
  4313 ;;		On entry : 0/0
  4314 ;;		On exit  : F/0
  4315 ;;		Unchanged: 0/0
  4316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4320 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4321 ;;Total ram usage:        0 bytes
  4322 ;; Hardware stack levels required when called:   16
  4323 ;; This function calls:
  4324 ;;		_Beep
  4325 ;;		_InitMessages
  4326 ;;		_InitializeSystem
  4327 ;;		_LabelCreate
  4328 ;;		_LabelSetTxt
  4329 ;;		_ProcessMessages
  4330 ;;		_ks0108GotoXY
  4331 ;;		_ks0108Init
  4332 ;;		_ks0108PutChar
  4333 ;;		_sprintf
  4334 ;;		_tsk_display
  4335 ;;		_tsk_process
  4336 ;; This function is called by:
  4337 ;;		Startup code after reset
  4338 ;; This function uses a non-reentrant model
  4339 ;;
  4340                           
  4341                           	psect	text0
  4342  000EAA                     __ptext0:
  4343                           	opt stack 0
  4344  000EAA                     _main:
  4345                           	opt stack 15
  4346                           
  4347                           ;Main.c: 43: __nop();
  4348                           
  4349                           ; BSR set to: 0
  4350                           ;incstack = 0
  4351  000EAA  F000               	nop	
  4352                           
  4353                           ;Main.c: 44: InitMessages();
  4354  000EAC  EC9B  F00A         	call	_InitMessages	;wreg free
  4355                           
  4356                           ; BSR set to: 0
  4357                           ;Main.c: 45: InitializeSystem();
  4358  000EB0  ECD8  F003         	call	_InitializeSystem	;wreg free
  4359                           
  4360                           ; BSR set to: 0
  4361                           ;Main.c: 48: ks0108Init();
  4362  000EB4  EC30  F00A         	call	_ks0108Init	;wreg free
  4363                           
  4364                           ; BSR set to: 1
  4365                           ;Main.c: 49: LabelCreate(&lb_napr, 0, 30, font13, 10);
  4366  000EB8  6BEF               	clrf	LabelCreate@x& (0+255),b
  4367  000EBA  0E1E               	movlw	30
  4368  000EBC  6FF0               	movwf	LabelCreate@y& (0+255),b
  4369  000EBE  0EF4               	movlw	high _font13
  4370  000EC0  6FF2               	movwf	(LabelCreate@font+1)& (0+255),b
  4371  000EC2  0EAB               	movlw	low _font13
  4372  000EC4  6FF1               	movwf	LabelCreate@font& (0+255),b
  4373  000EC6  0E0A               	movlw	10
  4374  000EC8  6FF3               	movwf	LabelCreate@ln& (0+255),b
  4375  000ECA  0100               	movlb	0	; () banked
  4376  000ECC  0E78               	movlw	_lb_napr& (0+255)
  4377  000ECE  EC65  F008         	call	_LabelCreate
  4378                           
  4379                           ; BSR set to: 1
  4380                           ;Main.c: 50: sprintf(str, "URA!!!!");
  4381  000ED2  0EFF               	movlw	high STR_1
  4382  000ED4  0100               	movlb	0	; () banked
  4383  000ED6  6FD2               	movwf	(sprintf@f+1)& (0+255),b
  4384  000ED8  0EF7               	movlw	low STR_1
  4385  000EDA  6FD1               	movwf	sprintf@f& (0+255),b
  4386  000EDC  0E93               	movlw	_str& (0+255)
  4387  000EDE  ECBA  F00A         	call	_sprintf
  4388                           
  4389                           ; BSR set to: 0
  4390                           ;Main.c: 51: LabelSetTxt(&lb_napr, str);
  4391  000EE2  0E93               	movlw	low _str
  4392  000EE4  6FD8               	movwf	LabelSetTxt@str& (0+255),b
  4393  000EE6  0E78               	movlw	_lb_napr& (0+255)
  4394  000EE8  EC93  F006         	call	_LabelSetTxt
  4395                           
  4396                           ; BSR set to: 1
  4397                           ;Main.c: 55: ks0108GotoXY(40, 50);
  4398  000EEC  0E32               	movlw	50
  4399  000EEE  0100               	movlb	0	; () banked
  4400  000EF0  6FD3               	movwf	ks0108GotoXY@y& (0+255),b
  4401  000EF2  0E28               	movlw	40
  4402  000EF4  ECD5  F008         	call	_ks0108GotoXY
  4403                           
  4404                           ;Main.c: 56: ks0108PutChar(0x89, &font13, 1);
  4405  000EF8  D824               	call	PL40	;call to abstracted procedure
  4406  000EFA  0E89               	movlw	137
  4407  000EFC  EC09  F006         	call	_ks0108PutChar
  4408                           
  4409                           ; BSR set to: 1
  4410                           ;Main.c: 58: ks0108GotoXY(34, 50);
  4411  000F00  0E32               	movlw	50
  4412  000F02  0100               	movlb	0	; () banked
  4413  000F04  6FD3               	movwf	ks0108GotoXY@y& (0+255),b
  4414  000F06  0E22               	movlw	34
  4415  000F08  ECD5  F008         	call	_ks0108GotoXY
  4416                           
  4417                           ;Main.c: 59: ks0108PutChar(0x8a, &font13, 1);
  4418  000F0C  D81A               	call	PL40	;call to abstracted procedure
  4419  000F0E  0E8A               	movlw	138
  4420  000F10  EC09  F006         	call	_ks0108PutChar
  4421                           
  4422                           ; BSR set to: 1
  4423                           ;Main.c: 62: __nop();
  4424  000F14  F000               	nop	
  4425                           
  4426                           ;Main.c: 63: __nop();
  4427  000F16  F000               	nop	
  4428                           
  4429                           ;Main.c: 66: INTCONbits.GIE = 1;
  4430  000F18  8EF2               	bsf	intcon,7,c	;volatile
  4431                           
  4432                           ;Main.c: 68: Beep(10);
  4433  000F1A  0E0A               	movlw	10
  4434  000F1C  ECA9  F00B         	call	_Beep
  4435  000F20                     l5193:
  4436                           
  4437                           ; BSR set to: 0
  4438                           ;Main.c: 74: tsk_display();
  4439  000F20  ECDE  F00B         	call	_tsk_display	;wreg free
  4440                           
  4441                           ;Main.c: 75: tsk_process();
  4442  000F24  ECDD  F00B         	call	_tsk_process	;wreg free
  4443                           
  4444                           ;Main.c: 80: __nop();
  4445  000F28  F000               	nop	
  4446                           
  4447                           ;Main.c: 81: __nop();
  4448  000F2A  F000               	nop	
  4449                           
  4450                           ;Main.c: 84: if((FERR1) || (OERR1)) {
  4451  000F2C  B4AB               	btfsc	4011,2,c	;volatile
  4452  000F2E  D002               	goto	l555
  4453  000F30  A2AB               	btfss	4011,1,c	;volatile
  4454  000F32  D003               	goto	l553
  4455  000F34                     l555:
  4456                           
  4457                           ;Main.c: 85: CREN1 = 0;
  4458  000F34  98AB               	bcf	4011,4,c	;volatile
  4459                           
  4460                           ;Main.c: 86: __nop();
  4461  000F36  F000               	nop	
  4462                           
  4463                           ;Main.c: 87: CREN1 = 1;
  4464  000F38  88AB               	bsf	4011,4,c	;volatile
  4465  000F3A                     l553:
  4466                           
  4467                           ;Main.c: 88: }
  4468                           ;Main.c: 90: if(SWDTEN == 0) {
  4469  000F3A  0004               	clrwdt		;# 
  4470                           
  4471                           ;Main.c: 96: ProcessMessages();
  4472  000F3C  ECEF  F007         	call	_ProcessMessages	;wreg free
  4473  000F40  D7EF               	goto	l5193
  4474  000F42                     __end_of_main:
  4475                           	opt stack 0
  4476  000F42                     PL40:
  4477                           	opt stack 15
  4478  000F42  0EF4               	movlw	high _font13
  4479  000F44  0101               	movlb	1	; () banked
  4480  000F46  6FD8               	movwf	(ks0108PutChar@p_font+1)& (0+255),b
  4481  000F48  0EAB               	movlw	low _font13
  4482  000F4A  6FD7               	movwf	ks0108PutChar@p_font& (0+255),b
  4483  000F4C  0E01               	movlw	1
  4484  000F4E  6FD9               	movwf	ks0108PutChar@mode& (0+255),b
  4485  000F50  0C01               	retlw	1
  4486  000F52                     __end_ofPL40:
  4487                           	opt stack 0
  4488                           tblptru	equ	0xFF8
  4489                           tblptrh	equ	0xFF7
  4490                           tblptrl	equ	0xFF6
  4491                           tablat	equ	0xFF5
  4492                           prodh	equ	0xFF4
  4493                           prodl	equ	0xFF3
  4494                           intcon	equ	0xFF2
  4495                           postinc0	equ	0xFEE
  4496                           wreg	equ	0xFE8
  4497                           indf1	equ	0xFE7
  4498                           postinc1	equ	0xFE6
  4499                           postdec1	equ	0xFE5
  4500                           fsr1h	equ	0xFE2
  4501                           fsr1l	equ	0xFE1
  4502                           indf2	equ	0xFDF
  4503                           postinc2	equ	0xFDE
  4504                           postdec2	equ	0xFDD
  4505                           fsr2h	equ	0xFDA
  4506                           fsr2l	equ	0xFD9
  4507                           status	equ	0xFD8
  4508                           
  4509 ;; *************** function _tsk_process *****************
  4510 ;; Defined at:
  4511 ;;		line 102 in file "../Main.c"
  4512 ;; Parameters:    Size  Location     Type
  4513 ;;		None
  4514 ;; Auto vars:     Size  Location     Type
  4515 ;;		None
  4516 ;; Return value:  Size  Location     Type
  4517 ;;		None               void
  4518 ;; Registers used:
  4519 ;;		None
  4520 ;; Tracked objects:
  4521 ;;		On entry : 0/0
  4522 ;;		On exit  : 0/0
  4523 ;;		Unchanged: 0/0
  4524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4528 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4529 ;;Total ram usage:        0 bytes
  4530 ;; Hardware stack levels used:    1
  4531 ;; Hardware stack levels required when called:    8
  4532 ;; This function calls:
  4533 ;;		Nothing
  4534 ;; This function is called by:
  4535 ;;		_main
  4536 ;; This function uses a non-reentrant model
  4537 ;;
  4538                           
  4539                           	psect	text1
  4540  0017BA                     __ptext1:
  4541                           	opt stack 0
  4542  0017BA                     _tsk_process:
  4543                           	opt stack 22
  4544                           
  4545                           ; BSR set to: 0
  4546                           ;incstack = 0
  4547  0017BA  0012               	return	
  4548  0017BC                     __end_of_tsk_process:
  4549                           	opt stack 0
  4550                           tblptru	equ	0xFF8
  4551                           tblptrh	equ	0xFF7
  4552                           tblptrl	equ	0xFF6
  4553                           tablat	equ	0xFF5
  4554                           prodh	equ	0xFF4
  4555                           prodl	equ	0xFF3
  4556                           intcon	equ	0xFF2
  4557                           postinc0	equ	0xFEE
  4558                           wreg	equ	0xFE8
  4559                           indf1	equ	0xFE7
  4560                           postinc1	equ	0xFE6
  4561                           postdec1	equ	0xFE5
  4562                           fsr1h	equ	0xFE2
  4563                           fsr1l	equ	0xFE1
  4564                           indf2	equ	0xFDF
  4565                           postinc2	equ	0xFDE
  4566                           postdec2	equ	0xFDD
  4567                           fsr2h	equ	0xFDA
  4568                           fsr2l	equ	0xFD9
  4569                           status	equ	0xFD8
  4570                           
  4571 ;; *************** function _tsk_display *****************
  4572 ;; Defined at:
  4573 ;;		line 108 in file "../Main.c"
  4574 ;; Parameters:    Size  Location     Type
  4575 ;;		None
  4576 ;; Auto vars:     Size  Location     Type
  4577 ;;		None
  4578 ;; Return value:  Size  Location     Type
  4579 ;;		None               void
  4580 ;; Registers used:
  4581 ;;		None
  4582 ;; Tracked objects:
  4583 ;;		On entry : 0/0
  4584 ;;		On exit  : 0/0
  4585 ;;		Unchanged: 0/0
  4586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4590 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4591 ;;Total ram usage:        0 bytes
  4592 ;; Hardware stack levels used:    1
  4593 ;; Hardware stack levels required when called:    8
  4594 ;; This function calls:
  4595 ;;		Nothing
  4596 ;; This function is called by:
  4597 ;;		_main
  4598 ;; This function uses a non-reentrant model
  4599 ;;
  4600                           
  4601                           	psect	text2
  4602  0017BC                     __ptext2:
  4603                           	opt stack 0
  4604  0017BC                     _tsk_display:
  4605                           	opt stack 22
  4606                           
  4607                           ;incstack = 0
  4608  0017BC  0012               	return	
  4609  0017BE                     __end_of_tsk_display:
  4610                           	opt stack 0
  4611                           tblptru	equ	0xFF8
  4612                           tblptrh	equ	0xFF7
  4613                           tblptrl	equ	0xFF6
  4614                           tablat	equ	0xFF5
  4615                           prodh	equ	0xFF4
  4616                           prodl	equ	0xFF3
  4617                           intcon	equ	0xFF2
  4618                           postinc0	equ	0xFEE
  4619                           wreg	equ	0xFE8
  4620                           indf1	equ	0xFE7
  4621                           postinc1	equ	0xFE6
  4622                           postdec1	equ	0xFE5
  4623                           fsr1h	equ	0xFE2
  4624                           fsr1l	equ	0xFE1
  4625                           indf2	equ	0xFDF
  4626                           postinc2	equ	0xFDE
  4627                           postdec2	equ	0xFDD
  4628                           fsr2h	equ	0xFDA
  4629                           fsr2l	equ	0xFD9
  4630                           status	equ	0xFD8
  4631                           
  4632 ;; *************** function _sprintf *****************
  4633 ;; Defined at:
  4634 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  4635 ;; Parameters:    Size  Location     Type
  4636 ;;  sp              1    wreg     PTR unsigned char 
  4637 ;;		 -> str(20), 
  4638 ;;  f               2   39[BANK0 ] PTR const unsigned char 
  4639 ;;		 -> STR_1(8), 
  4640 ;; Auto vars:     Size  Location     Type
  4641 ;;  sp              1   42[BANK0 ] PTR unsigned char 
  4642 ;;		 -> str(20), 
  4643 ;;  _val            5    0        struct .
  4644 ;;  c               1   41[BANK0 ] char 
  4645 ;;  flag            1    0        unsigned char 
  4646 ;;  prec            1    0        char 
  4647 ;;  ap              1    0        PTR void [1]
  4648 ;;		 -> ?_sprintf(2), 
  4649 ;; Return value:  Size  Location     Type
  4650 ;;                  2   39[BANK0 ] int 
  4651 ;; Registers used:
  4652 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4653 ;; Tracked objects:
  4654 ;;		On entry : F/0
  4655 ;;		On exit  : F/0
  4656 ;;		Unchanged: 0/0
  4657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4658 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4659 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4661 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4662 ;;Total ram usage:        4 bytes
  4663 ;; Hardware stack levels used:    1
  4664 ;; Hardware stack levels required when called:    8
  4665 ;; This function calls:
  4666 ;;		Nothing
  4667 ;; This function is called by:
  4668 ;;		_main
  4669 ;; This function uses a non-reentrant model
  4670 ;;
  4671                           
  4672                           	psect	text3
  4673  001574                     __ptext3:
  4674                           	opt stack 0
  4675  001574                     _sprintf:
  4676                           	opt stack 22
  4677                           
  4678                           ;incstack = 0
  4679                           ;sprintf@sp stored from wreg
  4680  001574  6FD4               	movwf	sprintf@sp& (0+255),b
  4681                           
  4682                           ; BSR set to: 0
  4683                           ;doprnt.c: 545: while(c = *f++) {
  4684  001576  D006               	goto	l4061
  4685  001578                     l4057:
  4686                           
  4687                           ; BSR set to: 0
  4688                           ;doprnt.c: 549: {
  4689                           ;doprnt.c: 550: ((*sp++ = (c)));
  4690  001578  51D4               	movf	sprintf@sp& (0+255),w,b
  4691  00157A  6ED9               	movwf	fsr2l,c
  4692  00157C  6ADA               	clrf	fsr2h,c
  4693  00157E  C0D3  FFDF         	movff	sprintf@c,indf2
  4694                           
  4695                           ; BSR set to: 0
  4696  001582  2BD4               	incf	sprintf@sp& (0+255),f,b
  4697  001584                     l4061:
  4698                           
  4699                           ; BSR set to: 0
  4700  001584  C0D1  FFF6         	movff	sprintf@f,tblptrl
  4701  001588  C0D2  FFF7         	movff	sprintf@f+1,tblptrh
  4702  00158C  4BD1               	infsnz	sprintf@f& (0+255),f,b
  4703  00158E  2BD2               	incf	(sprintf@f+1)& (0+255),f,b
  4704  001590                     	if	0	;tblptru may be non-zero
  4705  001590                     	endif
  4706  001590                     	if	0	;tblptru may be non-zero
  4707  001590                     	endif
  4708  001590  0008               	tblrd		*
  4709  001592  CFF5 F0D3          	movff	tablat,sprintf@c
  4710  001596  0100               	movlb	0	; () banked
  4711  001598  67D3               	tstfsz	sprintf@c& (0+255),b
  4712  00159A  D7EE               	goto	l4057
  4713                           
  4714                           ; BSR set to: 0
  4715                           ;doprnt.c: 1478: }
  4716                           ;doprnt.c: 1542: }
  4717                           ;doprnt.c: 1547: *sp = 0;
  4718  00159C  51D4               	movf	sprintf@sp& (0+255),w,b
  4719  00159E  6ED9               	movwf	fsr2l,c
  4720  0015A0  6ADA               	clrf	fsr2h,c
  4721  0015A2  0E00               	movlw	0
  4722  0015A4  6EDF               	movwf	indf2,c
  4723                           
  4724                           ; BSR set to: 0
  4725  0015A6  0C00               	retlw	0
  4726  0015A8                     __end_of_sprintf:
  4727                           	opt stack 0
  4728                           tblptru	equ	0xFF8
  4729                           tblptrh	equ	0xFF7
  4730                           tblptrl	equ	0xFF6
  4731                           tablat	equ	0xFF5
  4732                           prodh	equ	0xFF4
  4733                           prodl	equ	0xFF3
  4734                           intcon	equ	0xFF2
  4735                           postinc0	equ	0xFEE
  4736                           wreg	equ	0xFE8
  4737                           indf1	equ	0xFE7
  4738                           postinc1	equ	0xFE6
  4739                           postdec1	equ	0xFE5
  4740                           fsr1h	equ	0xFE2
  4741                           fsr1l	equ	0xFE1
  4742                           indf2	equ	0xFDF
  4743                           postinc2	equ	0xFDE
  4744                           postdec2	equ	0xFDD
  4745                           fsr2h	equ	0xFDA
  4746                           fsr2l	equ	0xFD9
  4747                           status	equ	0xFD8
  4748                           
  4749 ;; *************** function _ks0108Init *****************
  4750 ;; Defined at:
  4751 ;;		line 118 in file "../lib/ks0108.c"
  4752 ;; Parameters:    Size  Location     Type
  4753 ;;		None
  4754 ;; Auto vars:     Size  Location     Type
  4755 ;;		None
  4756 ;; Return value:  Size  Location     Type
  4757 ;;		None               void
  4758 ;; Registers used:
  4759 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4760 ;; Tracked objects:
  4761 ;;		On entry : F/0
  4762 ;;		On exit  : F/1
  4763 ;;		Unchanged: 0/0
  4764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4768 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4769 ;;Total ram usage:        0 bytes
  4770 ;; Hardware stack levels used:    1
  4771 ;; Hardware stack levels required when called:   12
  4772 ;; This function calls:
  4773 ;;		_DelayMs
  4774 ;;		_ks0108Fill
  4775 ;;		_ks0108WriteCommand
  4776 ;; This function is called by:
  4777 ;;		_main
  4778 ;; This function uses a non-reentrant model
  4779 ;;
  4780                           
  4781                           	psect	text4
  4782  001460                     __ptext4:
  4783                           	opt stack 0
  4784  001460                     _ks0108Init:
  4785                           	opt stack 18
  4786                           
  4787                           ; BSR set to: 0
  4788                           ;ks0108.c: 122: TRISCbits.TRISC3 = 0;
  4789                           
  4790                           ; BSR set to: 0
  4791                           ;incstack = 0
  4792  001460  9694               	bcf	3988,3,c	;volatile
  4793                           
  4794                           ;ks0108.c: 123: TRISCbits.TRISC2 = 0;
  4795  001462  9494               	bcf	3988,2,c	;volatile
  4796                           
  4797                           ;ks0108.c: 124: TRISCbits.TRISC0 = 0;
  4798  001464  9094               	bcf	3988,0,c	;volatile
  4799                           
  4800                           ;ks0108.c: 126: TRISEbits.TRISE0 = 0;
  4801  001466  9096               	bcf	3990,0,c	;volatile
  4802                           
  4803                           ;ks0108.c: 127: TRISEbits.TRISE1 = 0;
  4804  001468  9296               	bcf	3990,1,c	;volatile
  4805                           
  4806                           ;ks0108.c: 128: TRISEbits.TRISE2 = 0;
  4807  00146A  9496               	bcf	3990,2,c	;volatile
  4808                           
  4809                           ;ks0108.c: 130: LATC0 = 1;
  4810  00146C  808B               	bsf	3979,0,c	;volatile
  4811                           
  4812                           ; BSR set to: 0
  4813                           ;ks0108.c: 132: DelayMs(1);
  4814  00146E  0E01               	movlw	1
  4815  001470  EC1A  F00B         	call	_DelayMs
  4816                           
  4817                           ; BSR set to: 0
  4818                           ;ks0108.c: 134: pos.x = 0;
  4819  001474  6BA7               	clrf	_pos& (0+255),b
  4820                           
  4821                           ; BSR set to: 0
  4822                           ;ks0108.c: 135: pos.y = 0;
  4823  001476  6BA8               	clrf	(_pos+1)& (0+255),b
  4824                           
  4825                           ; BSR set to: 0
  4826                           ;ks0108.c: 136: pos.page = 0;
  4827  001478  6BA9               	clrf	(_pos+2)& (0+255),b
  4828                           
  4829                           ; BSR set to: 0
  4830                           ;ks0108.c: 139: ks0108WriteCommand(0x3F, 0x00);
  4831  00147A  6BD1               	clrf	ks0108WriteCommand@chip& (0+255),b
  4832  00147C  0E3F               	movlw	63
  4833  00147E  EC2F  F00B         	call	_ks0108WriteCommand
  4834                           
  4835                           ;ks0108.c: 140: ks0108WriteCommand(0x3F, 0x01);
  4836  001482  0E01               	movlw	1
  4837  001484  0100               	movlb	0	; () banked
  4838  001486  6FD1               	movwf	ks0108WriteCommand@chip& (0+255),b
  4839  001488  0E3F               	movlw	63
  4840  00148A  EC2F  F00B         	call	_ks0108WriteCommand
  4841                           
  4842                           ;ks0108.c: 142: ks0108WriteCommand(0xC0, 0x00);
  4843  00148E  0100               	movlb	0	; () banked
  4844  001490  6BD1               	clrf	ks0108WriteCommand@chip& (0+255),b
  4845  001492  0EC0               	movlw	192
  4846  001494  EC2F  F00B         	call	_ks0108WriteCommand
  4847                           
  4848                           ;ks0108.c: 143: ks0108WriteCommand(0xC0, 0x01);
  4849  001498  0E01               	movlw	1
  4850  00149A  0100               	movlb	0	; () banked
  4851  00149C  6FD1               	movwf	ks0108WriteCommand@chip& (0+255),b
  4852  00149E  0EC0               	movlw	192
  4853  0014A0  EC2F  F00B         	call	_ks0108WriteCommand
  4854                           
  4855                           ;ks0108.c: 144: ks0108Fill(0x00);
  4856  0014A4  0E00               	movlw	0
  4857  0014A6  EFD4  F00A         	goto	_ks0108Fill
  4858  0014AA                     __end_of_ks0108Init:
  4859                           	opt stack 0
  4860                           tblptru	equ	0xFF8
  4861                           tblptrh	equ	0xFF7
  4862                           tblptrl	equ	0xFF6
  4863                           tablat	equ	0xFF5
  4864                           prodh	equ	0xFF4
  4865                           prodl	equ	0xFF3
  4866                           intcon	equ	0xFF2
  4867                           postinc0	equ	0xFEE
  4868                           wreg	equ	0xFE8
  4869                           indf1	equ	0xFE7
  4870                           postinc1	equ	0xFE6
  4871                           postdec1	equ	0xFE5
  4872                           fsr1h	equ	0xFE2
  4873                           fsr1l	equ	0xFE1
  4874                           indf2	equ	0xFDF
  4875                           postinc2	equ	0xFDE
  4876                           postdec2	equ	0xFDD
  4877                           fsr2h	equ	0xFDA
  4878                           fsr2l	equ	0xFD9
  4879                           status	equ	0xFD8
  4880                           
  4881 ;; *************** function _ks0108Fill *****************
  4882 ;; Defined at:
  4883 ;;		line 28 in file "../lib/ks0108.c"
  4884 ;; Parameters:    Size  Location     Type
  4885 ;;  mode            1    wreg     unsigned char 
  4886 ;; Auto vars:     Size  Location     Type
  4887 ;;  mode            1    0[BANK1 ] unsigned char 
  4888 ;;  i               1    2[BANK1 ] unsigned char 
  4889 ;;  j               1    1[BANK1 ] unsigned char 
  4890 ;; Return value:  Size  Location     Type
  4891 ;;		None               void
  4892 ;; Registers used:
  4893 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4894 ;; Tracked objects:
  4895 ;;		On entry : 0/0
  4896 ;;		On exit  : F/1
  4897 ;;		Unchanged: 0/0
  4898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4900 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4902 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4903 ;;Total ram usage:        3 bytes
  4904 ;; Hardware stack levels used:    1
  4905 ;; Hardware stack levels required when called:   11
  4906 ;; This function calls:
  4907 ;;		_ks0108GotoXY
  4908 ;;		_ks0108WriteData
  4909 ;; This function is called by:
  4910 ;;		_ks0108Init
  4911 ;; This function uses a non-reentrant model
  4912 ;;
  4913                           
  4914                           	psect	text5
  4915  0015A8                     __ptext5:
  4916                           	opt stack 0
  4917  0015A8                     _ks0108Fill:
  4918                           	opt stack 18
  4919                           
  4920                           ; BSR set to: 1
  4921                           ;incstack = 0
  4922                           ;ks0108Fill@mode stored from wreg
  4923  0015A8  0101               	movlb	1	; () banked
  4924  0015AA  6FD0               	movwf	ks0108Fill@mode& (0+255),b
  4925                           
  4926                           ; BSR set to: 1
  4927                           ;ks0108.c: 29: uint8_t i, j;
  4928                           ;ks0108.c: 31: for(i = 0; i < 8; i++) {
  4929  0015AC  6BD2               	clrf	ks0108Fill@i& (0+255),b
  4930  0015AE                     l4951:
  4931                           
  4932                           ; BSR set to: 1
  4933                           ;ks0108.c: 32: ks0108GotoXY(0, i * 8);
  4934  0015AE  51D2               	movf	ks0108Fill@i& (0+255),w,b
  4935  0015B0  0D08               	mullw	8
  4936  0015B2  CFF3 F0D3          	movff	prodl,ks0108GotoXY@y
  4937  0015B6  0E00               	movlw	0
  4938  0015B8  ECD5  F008         	call	_ks0108GotoXY
  4939                           
  4940                           ;ks0108.c: 33: for(j = 0; j < 128; j++)
  4941  0015BC  0101               	movlb	1	; () banked
  4942  0015BE  6BD1               	clrf	ks0108Fill@j& (0+255),b
  4943  0015C0                     l4959:
  4944                           
  4945                           ; BSR set to: 1
  4946                           ;ks0108.c: 34: ks0108WriteData(mode);
  4947  0015C0  51D0               	movf	ks0108Fill@mode& (0+255),w,b
  4948  0015C2  EC55  F00A         	call	_ks0108WriteData
  4949                           
  4950                           ; BSR set to: 0
  4951  0015C6  0101               	movlb	1	; () banked
  4952  0015C8  2BD1               	incf	ks0108Fill@j& (0+255),f,b
  4953                           
  4954                           ; BSR set to: 1
  4955  0015CA  0E7F               	movlw	127
  4956  0015CC  65D1               	cpfsgt	ks0108Fill@j& (0+255),b
  4957  0015CE  D7F8               	goto	l4959
  4958                           
  4959                           ; BSR set to: 1
  4960  0015D0  2BD2               	incf	ks0108Fill@i& (0+255),f,b
  4961                           
  4962                           ; BSR set to: 1
  4963  0015D2  0E07               	movlw	7
  4964  0015D4  65D2               	cpfsgt	ks0108Fill@i& (0+255),b
  4965  0015D6  D7EB               	goto	l4951
  4966  0015D8  0C07               	retlw	7
  4967  0015DA                     __end_of_ks0108Fill:
  4968                           	opt stack 0
  4969                           tblptru	equ	0xFF8
  4970                           tblptrh	equ	0xFF7
  4971                           tblptrl	equ	0xFF6
  4972                           tablat	equ	0xFF5
  4973                           prodh	equ	0xFF4
  4974                           prodl	equ	0xFF3
  4975                           intcon	equ	0xFF2
  4976                           postinc0	equ	0xFEE
  4977                           wreg	equ	0xFE8
  4978                           indf1	equ	0xFE7
  4979                           postinc1	equ	0xFE6
  4980                           postdec1	equ	0xFE5
  4981                           fsr1h	equ	0xFE2
  4982                           fsr1l	equ	0xFE1
  4983                           indf2	equ	0xFDF
  4984                           postinc2	equ	0xFDE
  4985                           postdec2	equ	0xFDD
  4986                           fsr2h	equ	0xFDA
  4987                           fsr2l	equ	0xFD9
  4988                           status	equ	0xFD8
  4989                           
  4990 ;; *************** function _DelayMs *****************
  4991 ;; Defined at:
  4992 ;;		line 41 in file "../lib/delay.c"
  4993 ;; Parameters:    Size  Location     Type
  4994 ;;  cnt             1    wreg     unsigned char 
  4995 ;; Auto vars:     Size  Location     Type
  4996 ;;  cnt             1   39[BANK0 ] unsigned char 
  4997 ;;  i               1   40[BANK0 ] unsigned char 
  4998 ;; Return value:  Size  Location     Type
  4999 ;;		None               void
  5000 ;; Registers used:
  5001 ;;		wreg, status,2
  5002 ;; Tracked objects:
  5003 ;;		On entry : F/0
  5004 ;;		On exit  : F/0
  5005 ;;		Unchanged: 0/0
  5006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5008 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5010 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5011 ;;Total ram usage:        2 bytes
  5012 ;; Hardware stack levels used:    1
  5013 ;; Hardware stack levels required when called:    8
  5014 ;; This function calls:
  5015 ;;		Nothing
  5016 ;; This function is called by:
  5017 ;;		_ks0108Init
  5018 ;; This function uses a non-reentrant model
  5019 ;;
  5020                           
  5021                           	psect	text6
  5022  001634                     __ptext6:
  5023                           	opt stack 0
  5024  001634                     _DelayMs:
  5025                           	opt stack 21
  5026                           
  5027                           ; BSR set to: 1
  5028                           ;incstack = 0
  5029                           ;DelayMs@cnt stored from wreg
  5030  001634  6FD1               	movwf	DelayMs@cnt& (0+255),b
  5031  001636                     l1054:
  5032                           
  5033                           ; BSR set to: 0
  5034                           ;delay.c: 45: i = 4;
  5035                           
  5036                           ; BSR set to: 0
  5037  001636  0E04               	movlw	4
  5038  001638  6FD2               	movwf	DelayMs@i& (0+255),b
  5039  00163A                     l1055:
  5040                           
  5041                           ; BSR set to: 0
  5042                           ;delay.c: 47: { delayus_variable=(unsigned char)(250/1); asm("movlb (_delayus_variable) 
      +                          >> 8"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); } asm("decfsz (_dela
      +                          yus_variable)&0ffh,f"); asm("goto $ - 12");;
  5043  00163A  0EFA               	movlw	250
  5044  00163C  6F77               	movwf	_delayus_variable& (0+255),b
  5045  00163E  0100               	movlb	_delayus_variable shr (0+8)	;# 
  5046  001640  F000               	nop		;# 
  5047  001642  F000               	nop		;# 
  5048  001644  F000               	nop		;# 
  5049  001646  F000               	nop		;# 
  5050  001648  F000               	nop		;# 
  5051  00164A  2F77               	decfsz	_delayus_variable& (0+255),f,b	;# 
  5052  00164C  EF20  F00B         	goto	($+-12)	;# 
  5053                           
  5054                           ;delay.c: 48: __nop();
  5055  001650  F000               	nop	
  5056                           
  5057                           ;delay.c: 49: } while(--i);
  5058  001652  0100               	movlb	0	; () banked
  5059  001654  2FD2               	decfsz	DelayMs@i& (0+255),f,b
  5060  001656  D7F1               	goto	l1055
  5061                           
  5062                           ; BSR set to: 0
  5063                           ;delay.c: 50: } while(--cnt);
  5064  001658  2FD1               	decfsz	DelayMs@cnt& (0+255),f,b
  5065  00165A  D7ED               	goto	l1054
  5066                           
  5067                           ; BSR set to: 0
  5068  00165C  0CFA               	retlw	250
  5069  00165E                     __end_of_DelayMs:
  5070                           	opt stack 0
  5071                           tblptru	equ	0xFF8
  5072                           tblptrh	equ	0xFF7
  5073                           tblptrl	equ	0xFF6
  5074                           tablat	equ	0xFF5
  5075                           prodh	equ	0xFF4
  5076                           prodl	equ	0xFF3
  5077                           intcon	equ	0xFF2
  5078                           postinc0	equ	0xFEE
  5079                           wreg	equ	0xFE8
  5080                           indf1	equ	0xFE7
  5081                           postinc1	equ	0xFE6
  5082                           postdec1	equ	0xFE5
  5083                           fsr1h	equ	0xFE2
  5084                           fsr1l	equ	0xFE1
  5085                           indf2	equ	0xFDF
  5086                           postinc2	equ	0xFDE
  5087                           postdec2	equ	0xFDD
  5088                           fsr2h	equ	0xFDA
  5089                           fsr2l	equ	0xFD9
  5090                           status	equ	0xFD8
  5091                           
  5092 ;; *************** function _ProcessMessages *****************
  5093 ;; Defined at:
  5094 ;;		line 110 in file "../lib/messages.c"
  5095 ;; Parameters:    Size  Location     Type
  5096 ;;		None
  5097 ;; Auto vars:     Size  Location     Type
  5098 ;;  i               1   39[BANK0 ] unsigned char 
  5099 ;; Return value:  Size  Location     Type
  5100 ;;		None               void
  5101 ;; Registers used:
  5102 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5103 ;; Tracked objects:
  5104 ;;		On entry : 0/0
  5105 ;;		On exit  : F/0
  5106 ;;		Unchanged: 0/0
  5107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5109 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5111 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5112 ;;Total ram usage:        1 bytes
  5113 ;; Hardware stack levels used:    1
  5114 ;; Hardware stack levels required when called:    8
  5115 ;; This function calls:
  5116 ;;		Nothing
  5117 ;; This function is called by:
  5118 ;;		_main
  5119 ;; This function uses a non-reentrant model
  5120 ;;
  5121                           
  5122                           	psect	text7
  5123  000FDE                     __ptext7:
  5124                           	opt stack 0
  5125  000FDE                     _ProcessMessages:
  5126                           	opt stack 22
  5127                           
  5128                           ;messages.c: 111: char i;
  5129                           ;messages.c: 112: for(i = 0; i < (10); i++){
  5130                           
  5131                           ; BSR set to: 0
  5132                           ;incstack = 0
  5133  000FDE  0100               	movlb	0	; () banked
  5134  000FE0  6BD1               	clrf	ProcessMessages@i& (0+255),b
  5135  000FE2                     l4073:
  5136                           
  5137                           ; BSR set to: 0
  5138                           ;messages.c: 113: if(Messages[i] == MSG_PHASE_READY) Messages[i] = MSG_PHASE_NONE;
  5139  000FE2  51D1               	movf	ProcessMessages@i& (0+255),w,b
  5140  000FE4  0F60               	addlw	low _Messages	;volatile
  5141  000FE6  6ED9               	movwf	fsr2l,c
  5142  000FE8  6ADA               	clrf	fsr2h,c
  5143  000FEA  0E02               	movlw	2
  5144  000FEC  62DF               	cpfseq	indf2,c
  5145  000FEE  D005               	goto	l844
  5146                           
  5147                           ; BSR set to: 0
  5148  000FF0  51D1               	movf	ProcessMessages@i& (0+255),w,b
  5149  000FF2  0F60               	addlw	low _Messages	;volatile
  5150  000FF4  6ED9               	movwf	fsr2l,c
  5151  000FF6  6ADA               	clrf	fsr2h,c
  5152  000FF8  6ADF               	clrf	indf2,c
  5153  000FFA                     l844:
  5154                           
  5155                           ; BSR set to: 0
  5156                           ;messages.c: 114: if(Messages[i] == MSG_PHASE_PREPARE) Messages[i] = MSG_PHASE_READY;
  5157  000FFA  51D1               	movf	ProcessMessages@i& (0+255),w,b
  5158  000FFC  0F60               	addlw	low _Messages	;volatile
  5159  000FFE  6ED9               	movwf	fsr2l,c
  5160  001000  6ADA               	clrf	fsr2h,c
  5161  001002  0E01               	movlw	1
  5162  001004  62DF               	cpfseq	indf2,c
  5163  001006  D003               	goto	l4079
  5164                           
  5165                           ; BSR set to: 0
  5166  001008  51D1               	movf	ProcessMessages@i& (0+255),w,b
  5167  00100A  0F60               	addlw	low _Messages	;volatile
  5168  00100C  D820               	call	PL52	;call to abstracted procedure
  5169  00100E                     l4079:
  5170                           
  5171                           ; BSR set to: 0
  5172  00100E  2BD1               	incf	ProcessMessages@i& (0+255),f,b
  5173                           
  5174                           ; BSR set to: 0
  5175  001010  0E09               	movlw	9
  5176  001012  65D1               	cpfsgt	ProcessMessages@i& (0+255),b
  5177  001014  D7E6               	goto	l4073
  5178                           
  5179                           ; BSR set to: 0
  5180                           ;messages.c: 115: }
  5181                           ;messages.c: 118: for(i = 0; i < 1; i++) {
  5182  001016  6BD1               	clrf	ProcessMessages@i& (0+255),b
  5183  001018                     l4087:
  5184                           
  5185                           ; BSR set to: 0
  5186                           ;messages.c: 119: if(BroadcastMessages[i] == MSG_PHASE_READY) BroadcastMessages[i] = MSG
      +                          _PHASE_NONE;
  5187  001018  51D1               	movf	ProcessMessages@i& (0+255),w,b
  5188  00101A  0F76               	addlw	low _BroadcastMessages	;volatile
  5189  00101C  6ED9               	movwf	fsr2l,c
  5190  00101E  6ADA               	clrf	fsr2h,c
  5191  001020  0E02               	movlw	2
  5192  001022  62DF               	cpfseq	indf2,c
  5193  001024  D005               	goto	l848
  5194                           
  5195                           ; BSR set to: 0
  5196  001026  51D1               	movf	ProcessMessages@i& (0+255),w,b
  5197  001028  0F76               	addlw	low _BroadcastMessages	;volatile
  5198  00102A  6ED9               	movwf	fsr2l,c
  5199  00102C  6ADA               	clrf	fsr2h,c
  5200  00102E  6ADF               	clrf	indf2,c
  5201  001030                     l848:
  5202                           
  5203                           ; BSR set to: 0
  5204                           ;messages.c: 120: if(BroadcastMessages[i] == MSG_PHASE_PREPARE) BroadcastMessages[i] = M
      +                          SG_PHASE_READY;
  5205  001030  51D1               	movf	ProcessMessages@i& (0+255),w,b
  5206  001032  0F76               	addlw	low _BroadcastMessages	;volatile
  5207  001034  6ED9               	movwf	fsr2l,c
  5208  001036  6ADA               	clrf	fsr2h,c
  5209  001038  0E01               	movlw	1
  5210  00103A  62DF               	cpfseq	indf2,c
  5211  00103C  D003               	goto	l4093
  5212                           
  5213                           ; BSR set to: 0
  5214  00103E  51D1               	movf	ProcessMessages@i& (0+255),w,b
  5215  001040  0F76               	addlw	low _BroadcastMessages	;volatile
  5216  001042  D805               	call	PL52	;call to abstracted procedure
  5217  001044                     l4093:
  5218                           
  5219                           ; BSR set to: 0
  5220  001044  2BD1               	incf	ProcessMessages@i& (0+255),f,b
  5221                           
  5222                           ; BSR set to: 0
  5223  001046  51D1               	movf	ProcessMessages@i& (0+255),w,b
  5224  001048  A4D8               	btfss	status,2,c
  5225  00104A  0012               	return	
  5226  00104C  D7E5               	goto	l4087
  5227  00104E                     __end_of_ProcessMessages:
  5228                           	opt stack 0
  5229  00104E                     PL52:
  5230                           	opt stack 22
  5231  00104E  6ED9               	movwf	fsr2l,c
  5232  001050  6ADA               	clrf	fsr2h,c
  5233  001052  0E02               	movlw	2
  5234  001054  6EDF               	movwf	indf2,c
  5235  001056  0C02               	retlw	2
  5236  001058                     __end_ofPL52:
  5237                           	opt stack 0
  5238                           tblptru	equ	0xFF8
  5239                           tblptrh	equ	0xFF7
  5240                           tblptrl	equ	0xFF6
  5241                           tablat	equ	0xFF5
  5242                           prodh	equ	0xFF4
  5243                           prodl	equ	0xFF3
  5244                           intcon	equ	0xFF2
  5245                           postinc0	equ	0xFEE
  5246                           wreg	equ	0xFE8
  5247                           indf1	equ	0xFE7
  5248                           postinc1	equ	0xFE6
  5249                           postdec1	equ	0xFE5
  5250                           fsr1h	equ	0xFE2
  5251                           fsr1l	equ	0xFE1
  5252                           indf2	equ	0xFDF
  5253                           postinc2	equ	0xFDE
  5254                           postdec2	equ	0xFDD
  5255                           fsr2h	equ	0xFDA
  5256                           fsr2l	equ	0xFD9
  5257                           status	equ	0xFD8
  5258                           
  5259 ;; *************** function _LabelCreate *****************
  5260 ;; Defined at:
  5261 ;;		line 407 in file "../lib/ks0108.c"
  5262 ;; Parameters:    Size  Location     Type
  5263 ;;  lb              1    wreg     PTR struct .
  5264 ;;		 -> lb_napr(27), 
  5265 ;;  x               1   31[BANK1 ] unsigned char 
  5266 ;;  y               1   32[BANK1 ] unsigned char 
  5267 ;;  font            2   33[BANK1 ] PTR const unsigned char 
  5268 ;;		 -> font13(2892), 
  5269 ;;  ln              1   35[BANK1 ] unsigned char 
  5270 ;; Auto vars:     Size  Location     Type
  5271 ;;  lb              1   37[BANK1 ] PTR struct .
  5272 ;;		 -> lb_napr(27), 
  5273 ;;  i               1   36[BANK1 ] unsigned char 
  5274 ;; Return value:  Size  Location     Type
  5275 ;;		None               void
  5276 ;; Registers used:
  5277 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5278 ;; Tracked objects:
  5279 ;;		On entry : F/0
  5280 ;;		On exit  : F/1
  5281 ;;		Unchanged: 0/0
  5282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5283 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5284 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5286 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5287 ;;Total ram usage:        7 bytes
  5288 ;; Hardware stack levels used:    1
  5289 ;; Hardware stack levels required when called:   15
  5290 ;; This function calls:
  5291 ;;		_LabelSetTxt
  5292 ;; This function is called by:
  5293 ;;		_main
  5294 ;; This function uses a non-reentrant model
  5295 ;;
  5296                           
  5297                           	psect	text8
  5298  0010CA                     __ptext8:
  5299                           	opt stack 0
  5300  0010CA                     _LabelCreate:
  5301                           	opt stack 15
  5302                           
  5303                           ; BSR set to: 0
  5304                           ;incstack = 0
  5305                           ;LabelCreate@lb stored from wreg
  5306  0010CA  0101               	movlb	1	; () banked
  5307  0010CC  6FF5               	movwf	LabelCreate@lb& (0+255),b
  5308                           
  5309                           ; BSR set to: 1
  5310                           ;ks0108.c: 409: BYTE i;
  5311                           ;ks0108.c: 410: lb -> size = ln;
  5312  0010CE  51F5               	movf	LabelCreate@lb& (0+255),w,b
  5313  0010D0  6ED9               	movwf	fsr2l,c
  5314  0010D2  6ADA               	clrf	fsr2h,c
  5315  0010D4  0E02               	movlw	2
  5316  0010D6  26D9               	addwf	fsr2l,f,c
  5317  0010D8  C1F3  FFDF         	movff	LabelCreate@ln,indf2
  5318                           
  5319                           ;ks0108.c: 411: lb -> p_font = font;
  5320  0010DC  51F5               	movf	LabelCreate@lb& (0+255),w,b
  5321  0010DE  6ED9               	movwf	fsr2l,c
  5322  0010E0  6ADA               	clrf	fsr2h,c
  5323  0010E2  0E03               	movlw	3
  5324  0010E4  26D9               	addwf	fsr2l,f,c
  5325  0010E6  C1F1  FFDE         	movff	LabelCreate@font,postinc2
  5326  0010EA  C1F2  FFDD         	movff	LabelCreate@font+1,postdec2
  5327                           
  5328                           ; BSR set to: 1
  5329                           ;ks0108.c: 412: lb -> x = x;
  5330  0010EE  51F5               	movf	LabelCreate@lb& (0+255),w,b
  5331  0010F0  6ED9               	movwf	fsr2l,c
  5332  0010F2  6ADA               	clrf	fsr2h,c
  5333  0010F4  C1EF  FFDF         	movff	LabelCreate@x,indf2
  5334                           
  5335                           ; BSR set to: 1
  5336                           ;ks0108.c: 413: lb -> y = y;
  5337  0010F8  51F5               	movf	LabelCreate@lb& (0+255),w,b
  5338  0010FA  6ED9               	movwf	fsr2l,c
  5339  0010FC  6ADA               	clrf	fsr2h,c
  5340  0010FE  2AD9               	incf	fsr2l,f,c
  5341  001100  C1F0  FFDF         	movff	LabelCreate@y,indf2
  5342                           
  5343                           ; BSR set to: 1
  5344                           ;ks0108.c: 417: for(i = 0; i < lb -> size; i++) lb -> str[i] = ' ';
  5345  001104  6BF4               	clrf	LabelCreate@i& (0+255),b
  5346  001106  D009               	goto	l5133
  5347  001108                     l5129:
  5348                           
  5349                           ; BSR set to: 1
  5350  001108  51F5               	movf	LabelCreate@lb& (0+255),w,b
  5351  00110A  25F4               	addwf	LabelCreate@i& (0+255),w,b
  5352  00110C  6ED9               	movwf	fsr2l,c
  5353  00110E  6ADA               	clrf	fsr2h,c
  5354  001110  0E05               	movlw	5
  5355  001112  26D9               	addwf	fsr2l,f,c
  5356  001114  0E20               	movlw	32
  5357  001116  6EDF               	movwf	indf2,c
  5358                           
  5359                           ; BSR set to: 1
  5360  001118  2BF4               	incf	LabelCreate@i& (0+255),f,b
  5361  00111A                     l5133:
  5362                           
  5363                           ; BSR set to: 1
  5364  00111A  51F5               	movf	LabelCreate@lb& (0+255),w,b
  5365  00111C  6ED9               	movwf	fsr2l,c
  5366  00111E  6ADA               	clrf	fsr2h,c
  5367  001120  0E02               	movlw	2
  5368  001122  26D9               	addwf	fsr2l,f,c
  5369  001124  50DF               	movf	indf2,w,c
  5370  001126  5DF4               	subwf	LabelCreate@i& (0+255),w,b
  5371  001128  E3EF               	bnc	l5129
  5372                           
  5373                           ; BSR set to: 1
  5374                           ;ks0108.c: 419: LabelSetTxt(lb, lb -> str);
  5375  00112A  51F5               	movf	LabelCreate@lb& (0+255),w,b
  5376  00112C  0F05               	addlw	5
  5377  00112E  0100               	movlb	0	; () banked
  5378  001130  6FD8               	movwf	LabelSetTxt@str& (0+255),b
  5379  001132  0101               	movlb	1	; () banked
  5380  001134  51F5               	movf	LabelCreate@lb& (0+255),w,b
  5381  001136  EF93  F006         	goto	_LabelSetTxt
  5382  00113A                     __end_of_LabelCreate:
  5383                           	opt stack 0
  5384                           tblptru	equ	0xFF8
  5385                           tblptrh	equ	0xFF7
  5386                           tblptrl	equ	0xFF6
  5387                           tablat	equ	0xFF5
  5388                           prodh	equ	0xFF4
  5389                           prodl	equ	0xFF3
  5390                           intcon	equ	0xFF2
  5391                           postinc0	equ	0xFEE
  5392                           wreg	equ	0xFE8
  5393                           indf1	equ	0xFE7
  5394                           postinc1	equ	0xFE6
  5395                           postdec1	equ	0xFE5
  5396                           fsr1h	equ	0xFE2
  5397                           fsr1l	equ	0xFE1
  5398                           indf2	equ	0xFDF
  5399                           postinc2	equ	0xFDE
  5400                           postdec2	equ	0xFDD
  5401                           fsr2h	equ	0xFDA
  5402                           fsr2l	equ	0xFD9
  5403                           status	equ	0xFD8
  5404                           
  5405 ;; *************** function _LabelSetTxt *****************
  5406 ;; Defined at:
  5407 ;;		line 424 in file "../lib/ks0108.c"
  5408 ;; Parameters:    Size  Location     Type
  5409 ;;  lb              1    wreg     PTR struct .
  5410 ;;		 -> lb_napr(27), 
  5411 ;;  str             1   46[BANK0 ] PTR unsigned char 
  5412 ;;		 -> str(20), lb_napr(27), 
  5413 ;; Auto vars:     Size  Location     Type
  5414 ;;  lb              1   30[BANK1 ] PTR struct .
  5415 ;;		 -> lb_napr(27), 
  5416 ;;  i               1   29[BANK1 ] unsigned char 
  5417 ;;  temp            1   28[BANK1 ] unsigned char 
  5418 ;;  SymbWidth       1    0        unsigned char 
  5419 ;; Return value:  Size  Location     Type
  5420 ;;		None               void
  5421 ;; Registers used:
  5422 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5423 ;; Tracked objects:
  5424 ;;		On entry : E/0
  5425 ;;		On exit  : F/1
  5426 ;;		Unchanged: 0/0
  5427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5428 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5429 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5431 ;;      Totals:         0       1       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5432 ;;Total ram usage:        4 bytes
  5433 ;; Hardware stack levels used:    1
  5434 ;; Hardware stack levels required when called:   14
  5435 ;; This function calls:
  5436 ;;		_ks0108GotoXY
  5437 ;;		_ks0108PutChar
  5438 ;; This function is called by:
  5439 ;;		_main
  5440 ;;		_LabelCreate
  5441 ;; This function uses a non-reentrant model
  5442 ;;
  5443                           
  5444                           	psect	text9
  5445  000D26                     __ptext9:
  5446                           	opt stack 0
  5447  000D26                     _LabelSetTxt:
  5448                           	opt stack 16
  5449                           
  5450                           ; BSR set to: 1
  5451                           ;incstack = 0
  5452                           ;LabelSetTxt@lb stored from wreg
  5453  000D26  0101               	movlb	1	; () banked
  5454  000D28  6FEE               	movwf	LabelSetTxt@lb& (0+255),b
  5455                           
  5456                           ; BSR set to: 1
  5457                           ;ks0108.c: 426: BYTE i, SymbWidth, temp = 0;
  5458  000D2A  6BEC               	clrf	LabelSetTxt@temp& (0+255),b
  5459                           
  5460                           ; BSR set to: 1
  5461                           ;ks0108.c: 429: ks0108GotoXY(lb -> x, lb -> y);
  5462  000D2C  D843               	call	PL18	;call to abstracted procedure
  5463  000D2E  ECD5  F008         	call	_ks0108GotoXY
  5464                           
  5465                           ;ks0108.c: 430: for(i = 0; i < lb -> size; i++) {
  5466  000D32  0101               	movlb	1	; () banked
  5467  000D34  6BED               	clrf	LabelSetTxt@i& (0+255),b
  5468  000D36  D007               	goto	l4923
  5469  000D38                     l4919:
  5470                           
  5471                           ; BSR set to: 1
  5472                           ;ks0108.c: 431: SymbWidth = ks0108PutChar(lb -> str[i], lb -> p_font, 0);
  5473  000D38  D84A               	call	PL30	;call to abstracted procedure
  5474  000D3A  6BD9               	clrf	ks0108PutChar@mode& (0+255),b
  5475  000D3C  51EE               	movf	LabelSetTxt@lb& (0+255),w,b
  5476  000D3E  D859               	call	PL48	;call to abstracted procedure
  5477  000D40  EC09  F006         	call	_ks0108PutChar
  5478                           
  5479                           ; BSR set to: 1
  5480  000D44  2BED               	incf	LabelSetTxt@i& (0+255),f,b
  5481  000D46                     l4923:
  5482                           
  5483                           ; BSR set to: 1
  5484  000D46  D84D               	call	PL44	;call to abstracted procedure
  5485  000D48  E3F7               	bnc	l4919
  5486                           
  5487                           ; BSR set to: 1
  5488                           ;ks0108.c: 432: }
  5489                           ;ks0108.c: 434: ks0108GotoXY(lb -> x, lb -> y);
  5490  000D4A  D834               	call	PL18	;call to abstracted procedure
  5491  000D4C  ECD5  F008         	call	_ks0108GotoXY
  5492                           
  5493                           ;ks0108.c: 435: for(i = 0; i < lb -> size; i++) {
  5494  000D50  0101               	movlb	1	; () banked
  5495  000D52  6BED               	clrf	LabelSetTxt@i& (0+255),b
  5496  000D54  D02B               	goto	l4943
  5497  000D56                     l4929:
  5498                           
  5499                           ; BSR set to: 1
  5500                           ;ks0108.c: 436: if(str[i] == 0) temp = 1;
  5501  000D56  0100               	movlb	0	; () banked
  5502  000D58  51D8               	movf	LabelSetTxt@str& (0+255),w,b
  5503  000D5A  0101               	movlb	1	; () banked
  5504  000D5C  25ED               	addwf	LabelSetTxt@i& (0+255),w,b
  5505  000D5E  6ED9               	movwf	fsr2l,c
  5506  000D60  6ADA               	clrf	fsr2h,c
  5507  000D62  50DF               	movf	indf2,w,c
  5508  000D64  E102               	bnz	l4933
  5509                           
  5510                           ; BSR set to: 1
  5511  000D66  0E01               	movlw	1
  5512  000D68  6FEC               	movwf	LabelSetTxt@temp& (0+255),b
  5513  000D6A                     l4933:
  5514                           
  5515                           ; BSR set to: 1
  5516                           ;ks0108.c: 437: if(temp == 0)
  5517  000D6A  67EC               	tstfsz	LabelSetTxt@temp& (0+255),b
  5518  000D6C  D00F               	goto	l4937
  5519                           
  5520                           ; BSR set to: 1
  5521                           ;ks0108.c: 438: lb -> str[i] = str[i];
  5522  000D6E  0100               	movlb	0	; () banked
  5523  000D70  51D8               	movf	LabelSetTxt@str& (0+255),w,b
  5524  000D72  0101               	movlb	1	; () banked
  5525  000D74  25ED               	addwf	LabelSetTxt@i& (0+255),w,b
  5526  000D76  6ED9               	movwf	fsr2l,c
  5527  000D78  6ADA               	clrf	fsr2h,c
  5528  000D7A  51EE               	movf	LabelSetTxt@lb& (0+255),w,b
  5529  000D7C  25ED               	addwf	LabelSetTxt@i& (0+255),w,b
  5530  000D7E  6EE1               	movwf	fsr1l,c
  5531  000D80  6AE2               	clrf	fsr1h,c
  5532  000D82  0E05               	movlw	5
  5533  000D84  26E1               	addwf	fsr1l,f,c
  5534  000D86  CFDF FFE7          	movff	indf2,indf1
  5535  000D8A  D008               	goto	l4939
  5536  000D8C                     l4937:
  5537                           
  5538                           ; BSR set to: 1
  5539                           ;ks0108.c: 439: else
  5540                           ;ks0108.c: 440: lb -> str[i] = ' ';
  5541  000D8C  51EE               	movf	LabelSetTxt@lb& (0+255),w,b
  5542  000D8E  25ED               	addwf	LabelSetTxt@i& (0+255),w,b
  5543  000D90  6ED9               	movwf	fsr2l,c
  5544  000D92  6ADA               	clrf	fsr2h,c
  5545  000D94  0E05               	movlw	5
  5546  000D96  26D9               	addwf	fsr2l,f,c
  5547  000D98  0E20               	movlw	32
  5548  000D9A  6EDF               	movwf	indf2,c
  5549  000D9C                     l4939:
  5550                           
  5551                           ; BSR set to: 1
  5552                           ;ks0108.c: 442: ks0108PutChar(lb -> str[i], lb -> p_font, 1);
  5553  000D9C  D818               	call	PL30	;call to abstracted procedure
  5554  000D9E  0E01               	movlw	1
  5555  000DA0  6FD9               	movwf	ks0108PutChar@mode& (0+255),b
  5556  000DA2  51EE               	movf	LabelSetTxt@lb& (0+255),w,b
  5557  000DA4  D826               	call	PL48	;call to abstracted procedure
  5558  000DA6  EC09  F006         	call	_ks0108PutChar
  5559                           
  5560                           ; BSR set to: 1
  5561  000DAA  2BED               	incf	LabelSetTxt@i& (0+255),f,b
  5562  000DAC                     l4943:
  5563                           
  5564                           ; BSR set to: 1
  5565  000DAC  D81A               	call	PL44	;call to abstracted procedure
  5566  000DAE  B0D8               	btfsc	status,0,c
  5567  000DB0  0012               	return	
  5568  000DB2  D7D1               	goto	l4929
  5569  000DB4                     __end_of_LabelSetTxt:
  5570                           	opt stack 0
  5571  000DB4                     PL18:
  5572                           	opt stack 16
  5573  000DB4  51EE               	movf	LabelSetTxt@lb& (0+255),w,b
  5574  000DB6  6ED9               	movwf	fsr2l,c
  5575  000DB8  6ADA               	clrf	fsr2h,c
  5576  000DBA  2AD9               	incf	fsr2l,f,c
  5577  000DBC  50DF               	movf	indf2,w,c
  5578  000DBE  0100               	movlb	0	; () banked
  5579  000DC0  6FD3               	movwf	ks0108GotoXY@y& (0+255),b
  5580  000DC2  0101               	movlb	1	; () banked
  5581  000DC4  51EE               	movf	LabelSetTxt@lb& (0+255),w,b
  5582  000DC6  6ED9               	movwf	fsr2l,c
  5583  000DC8  6ADA               	clrf	fsr2h,c
  5584  000DCA  50DF               	movf	indf2,w,c
  5585  000DCC  0012               	return	
  5586  000DCE                     __end_ofPL18:
  5587                           	opt stack 0
  5588  000DCE                     PL30:
  5589                           	opt stack 16
  5590  000DCE  51EE               	movf	LabelSetTxt@lb& (0+255),w,b
  5591  000DD0  6ED9               	movwf	fsr2l,c
  5592  000DD2  6ADA               	clrf	fsr2h,c
  5593  000DD4  0E03               	movlw	3
  5594  000DD6  26D9               	addwf	fsr2l,f,c
  5595  000DD8  CFDE F1D7          	movff	postinc2,ks0108PutChar@p_font
  5596  000DDC  CFDD F1D8          	movff	postdec2,ks0108PutChar@p_font+1
  5597  000DE0  0C03               	retlw	3
  5598  000DE2                     __end_ofPL30:
  5599                           	opt stack 0
  5600  000DE2                     PL44:
  5601                           	opt stack 16
  5602  000DE2  51EE               	movf	LabelSetTxt@lb& (0+255),w,b
  5603  000DE4  6ED9               	movwf	fsr2l,c
  5604  000DE6  6ADA               	clrf	fsr2h,c
  5605  000DE8  0E02               	movlw	2
  5606  000DEA  26D9               	addwf	fsr2l,f,c
  5607  000DEC  50DF               	movf	indf2,w,c
  5608  000DEE  5DED               	subwf	LabelSetTxt@i& (0+255),w,b
  5609  000DF0  0012               	return	
  5610  000DF2                     __end_ofPL44:
  5611                           	opt stack 0
  5612  000DF2                     PL48:
  5613                           	opt stack 16
  5614  000DF2  25ED               	addwf	LabelSetTxt@i& (0+255),w,b
  5615  000DF4  6ED9               	movwf	fsr2l,c
  5616  000DF6  6ADA               	clrf	fsr2h,c
  5617  000DF8  0E05               	movlw	5
  5618  000DFA  26D9               	addwf	fsr2l,f,c
  5619  000DFC  50DF               	movf	indf2,w,c
  5620  000DFE  0012               	return	
  5621  000E00                     __end_ofPL48:
  5622                           	opt stack 0
  5623                           tblptru	equ	0xFF8
  5624                           tblptrh	equ	0xFF7
  5625                           tblptrl	equ	0xFF6
  5626                           tablat	equ	0xFF5
  5627                           prodh	equ	0xFF4
  5628                           prodl	equ	0xFF3
  5629                           intcon	equ	0xFF2
  5630                           postinc0	equ	0xFEE
  5631                           wreg	equ	0xFE8
  5632                           indf1	equ	0xFE7
  5633                           postinc1	equ	0xFE6
  5634                           postdec1	equ	0xFE5
  5635                           fsr1h	equ	0xFE2
  5636                           fsr1l	equ	0xFE1
  5637                           indf2	equ	0xFDF
  5638                           postinc2	equ	0xFDE
  5639                           postdec2	equ	0xFDD
  5640                           fsr2h	equ	0xFDA
  5641                           fsr2l	equ	0xFD9
  5642                           status	equ	0xFD8
  5643                           
  5644 ;; *************** function _ks0108PutChar *****************
  5645 ;; Defined at:
  5646 ;;		line 281 in file "../lib/ks0108.c"
  5647 ;; Parameters:    Size  Location     Type
  5648 ;;  s               1    wreg     unsigned char 
  5649 ;;  p_font          2    7[BANK1 ] PTR const unsigned char 
  5650 ;;		 -> font13(2892), 
  5651 ;;  mode            1    9[BANK1 ] unsigned char 
  5652 ;; Auto vars:     Size  Location     Type
  5653 ;;  s               1   12[BANK1 ] unsigned char 
  5654 ;;  base            2   26[BANK1 ] unsigned short 
  5655 ;;  pChImage        2   15[BANK1 ] PTR const unsigned char 
  5656 ;;		 -> font13(2892), 
  5657 ;;  mask            1   25[BANK1 ] unsigned char 
  5658 ;;  x               1   24[BANK1 ] unsigned char 
  5659 ;;  y               1   23[BANK1 ] unsigned char 
  5660 ;;  chWidth         1   22[BANK1 ] unsigned char 
  5661 ;;  y_              1   21[BANK1 ] unsigned char 
  5662 ;;  x_              1   20[BANK1 ] unsigned char 
  5663 ;;  temp            1   19[BANK1 ] unsigned char 
  5664 ;;  yCnt            1   18[BANK1 ] unsigned char 
  5665 ;;  xCnt            1   17[BANK1 ] unsigned char 
  5666 ;;  _fontWidth      1   14[BANK1 ] unsigned char 
  5667 ;;  _fontHeight     1   13[BANK1 ] unsigned char 
  5668 ;; Return value:  Size  Location     Type
  5669 ;;                  1    wreg      unsigned char 
  5670 ;; Registers used:
  5671 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5672 ;; Tracked objects:
  5673 ;;		On entry : F/1
  5674 ;;		On exit  : F/1
  5675 ;;		Unchanged: 0/0
  5676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5677 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5678 ;;      Locals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5679 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5680 ;;      Totals:         0       0      21       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5681 ;;Total ram usage:       21 bytes
  5682 ;; Hardware stack levels used:    1
  5683 ;; Hardware stack levels required when called:   13
  5684 ;; This function calls:
  5685 ;;		___wmul
  5686 ;;		_ks0108ClearDot
  5687 ;;		_ks0108SetDot
  5688 ;; This function is called by:
  5689 ;;		_main
  5690 ;;		_LabelSetTxt
  5691 ;; This function uses a non-reentrant model
  5692 ;;
  5693                           
  5694                           	psect	text10
  5695  000C12                     __ptext10:
  5696                           	opt stack 0
  5697  000C12                     _ks0108PutChar:
  5698                           	opt stack 17
  5699                           
  5700                           ; BSR set to: 1
  5701                           ;incstack = 0
  5702                           ;ks0108PutChar@s stored from wreg
  5703  000C12  6FDC               	movwf	ks0108PutChar@s& (0+255),b
  5704                           
  5705                           ; BSR set to: 1
  5706                           ;ks0108.c: 286: BYTE temp = 0, mask, _fontHeight, _fontWidth;
  5707  000C14  6BE3               	clrf	ks0108PutChar@temp& (0+255),b
  5708                           
  5709                           ; BSR set to: 1
  5710                           ;ks0108.c: 287: const char *pChImage;
  5711                           ;ks0108.c: 289: _fontHeight = p_font[0];
  5712  000C16  C1D7  FFF6         	movff	ks0108PutChar@p_font,tblptrl
  5713  000C1A  C1D8  FFF7         	movff	ks0108PutChar@p_font+1,tblptrh
  5714  000C1E                     	if	0	;tblptru may be non-zero
  5715  000C1E                     	endif
  5716  000C1E                     	if	0	;tblptru may be non-zero
  5717  000C1E                     	endif
  5718  000C1E  0008               	tblrd		*
  5719  000C20  CFF5 F1DD          	movff	tablat,ks0108PutChar@_fontHeight
  5720                           
  5721                           ; BSR set to: 1
  5722                           ;ks0108.c: 290: _fontWidth = p_font[1];
  5723  000C24  29D7               	incf	ks0108PutChar@p_font& (0+255),w,b
  5724  000C26  D86C               	call	PL28	;call to abstracted procedure
  5725  000C28  CFF5 F1DE          	movff	tablat,ks0108PutChar@_fontWidth
  5726                           
  5727                           ;ks0108.c: 292: base = s - 32;
  5728  000C2C  0EE0               	movlw	224
  5729  000C2E  25DC               	addwf	ks0108PutChar@s& (0+255),w,b
  5730  000C30  6FEA               	movwf	ks0108PutChar@base& (0+255),b
  5731  000C32  6BEB               	clrf	(ks0108PutChar@base+1)& (0+255),b
  5732  000C34  0EFF               	movlw	255
  5733  000C36  23EB               	addwfc	(ks0108PutChar@base+1)& (0+255),f,b
  5734                           
  5735                           ; BSR set to: 1
  5736                           ;ks0108.c: 293: base *= p_font[2];
  5737  000C38  C1EA  F0D1         	movff	ks0108PutChar@base,___wmul@multiplier
  5738  000C3C  C1EB  F0D2         	movff	ks0108PutChar@base+1,___wmul@multiplier+1
  5739  000C40  0E02               	movlw	2
  5740  000C42  25D7               	addwf	ks0108PutChar@p_font& (0+255),w,b
  5741  000C44  D85D               	call	PL28	;call to abstracted procedure
  5742  000C46  50F5               	movf	tablat,w,c
  5743  000C48  0100               	movlb	0	; () banked
  5744  000C4A  6FD3               	movwf	___wmul@multiplicand& (0+255),b
  5745  000C4C  6BD4               	clrf	(___wmul@multiplicand+1)& (0+255),b
  5746  000C4E  EC42  F00B         	call	___wmul	;wreg free
  5747  000C52  C0D1  F1EA         	movff	?___wmul,ks0108PutChar@base
  5748  000C56  C0D2  F1EB         	movff	?___wmul+1,ks0108PutChar@base+1
  5749                           
  5750                           ; BSR set to: 0
  5751                           ;ks0108.c: 294: base += 3;
  5752  000C5A  0E03               	movlw	3
  5753  000C5C  0101               	movlb	1	; () banked
  5754  000C5E  27EA               	addwf	ks0108PutChar@base& (0+255),f,b
  5755  000C60  0E00               	movlw	0
  5756  000C62  23EB               	addwfc	(ks0108PutChar@base+1)& (0+255),f,b
  5757                           
  5758                           ; BSR set to: 1
  5759                           ;ks0108.c: 299: chWidth = p_font[base];
  5760  000C64  D857               	call	PL34	;call to abstracted procedure
  5761  000C66  C1DA  FFF6         	movff	??_ks0108PutChar,tblptrl
  5762  000C6A  C1DB  FFF7         	movff	??_ks0108PutChar+1,tblptrh
  5763  000C6E                     	if	0	;tblptru may be non-zero
  5764  000C6E                     	endif
  5765  000C6E                     	if	0	;tblptru may be non-zero
  5766  000C6E                     	endif
  5767  000C6E  0008               	tblrd		*
  5768  000C70  CFF5 F1E6          	movff	tablat,ks0108PutChar@chWidth
  5769                           
  5770                           ; BSR set to: 1
  5771                           ;ks0108.c: 300: pChImage = &p_font[base + 1];
  5772  000C74  D84F               	call	PL34	;call to abstracted procedure
  5773  000C76  29DA               	incf	??_ks0108PutChar& (0+255),w,b
  5774  000C78  6FDF               	movwf	ks0108PutChar@pChImage& (0+255),b
  5775  000C7A  0E00               	movlw	0
  5776  000C7C  21DB               	addwfc	(??_ks0108PutChar+1)& (0+255),w,b
  5777  000C7E  6FE0               	movwf	(ks0108PutChar@pChImage+1)& (0+255),b
  5778                           
  5779                           ; BSR set to: 1
  5780                           ;ks0108.c: 302: y_ = pos.y;
  5781  000C80  C0A8  F1E5         	movff	_pos+1,ks0108PutChar@y_
  5782                           
  5783                           ; BSR set to: 1
  5784                           ;ks0108.c: 303: x_ = pos.x;
  5785  000C84  C0A7  F1E4         	movff	_pos,ks0108PutChar@x_
  5786                           
  5787                           ; BSR set to: 1
  5788                           ;ks0108.c: 305: y = y_;
  5789  000C88  C1E5  F1E7         	movff	ks0108PutChar@y_,ks0108PutChar@y
  5790                           
  5791                           ; BSR set to: 1
  5792                           ;ks0108.c: 307: for(yCnt = 0; yCnt < _fontHeight; yCnt++) {
  5793  000C8C  6BE2               	clrf	ks0108PutChar@yCnt& (0+255),b
  5794  000C8E  D02C               	goto	l4589
  5795  000C90                     l976:
  5796                           
  5797                           ; BSR set to: 1
  5798                           ;ks0108.c: 308: x = x_;
  5799  000C90  C1E4  F1E8         	movff	ks0108PutChar@x_,ks0108PutChar@x
  5800                           
  5801                           ;ks0108.c: 309: mask = 0;
  5802  000C94  6BE9               	clrf	ks0108PutChar@mask& (0+255),b
  5803                           
  5804                           ;ks0108.c: 310: for(xCnt = 0; xCnt < _fontWidth; xCnt++) {
  5805  000C96  6BE1               	clrf	ks0108PutChar@xCnt& (0+255),b
  5806  000C98  D022               	goto	l977
  5807  000C9A                     l978:
  5808                           
  5809                           ; BSR set to: 1
  5810                           ;ks0108.c: 311: if(mask == 0) {
  5811  000C9A  67E9               	tstfsz	ks0108PutChar@mask& (0+255),b
  5812  000C9C  D00B               	goto	l4573
  5813                           
  5814                           ; BSR set to: 1
  5815                           ;ks0108.c: 312: temp = *pChImage++;
  5816  000C9E  C1DF  FFF6         	movff	ks0108PutChar@pChImage,tblptrl
  5817  000CA2  C1E0  FFF7         	movff	ks0108PutChar@pChImage+1,tblptrh
  5818  000CA6                     	if	0	;tblptru may be non-zero
  5819  000CA6                     	endif
  5820  000CA6                     	if	0	;tblptru may be non-zero
  5821  000CA6                     	endif
  5822  000CA6  0008               	tblrd		*
  5823  000CA8  CFF5 F1E3          	movff	tablat,ks0108PutChar@temp
  5824                           
  5825                           ; BSR set to: 1
  5826  000CAC  4BDF               	infsnz	ks0108PutChar@pChImage& (0+255),f,b
  5827  000CAE  2BE0               	incf	(ks0108PutChar@pChImage+1)& (0+255),f,b
  5828                           
  5829                           ; BSR set to: 1
  5830                           ;ks0108.c: 313: mask = 0x80;
  5831  000CB0  0E80               	movlw	128
  5832  000CB2  6FE9               	movwf	ks0108PutChar@mask& (0+255),b
  5833  000CB4                     l4573:
  5834                           
  5835                           ; BSR set to: 1
  5836                           ;ks0108.c: 314: }
  5837                           ;ks0108.c: 316: if(temp & mask) {
  5838  000CB4  51E3               	movf	ks0108PutChar@temp& (0+255),w,b
  5839  000CB6  15E9               	andwf	ks0108PutChar@mask& (0+255),w,b
  5840  000CB8  E00D               	bz	l4581
  5841                           
  5842                           ; BSR set to: 1
  5843                           ;ks0108.c: 317: if(mode)
  5844  000CBA  51D9               	movf	ks0108PutChar@mode& (0+255),w,b
  5845  000CBC  E006               	bz	l4579
  5846                           
  5847                           ; BSR set to: 1
  5848                           ;ks0108.c: 318: ks0108SetDot(x, y);
  5849  000CBE  C1E7  F0D7         	movff	ks0108PutChar@y,ks0108SetDot@y
  5850  000CC2  51E8               	movf	ks0108PutChar@x& (0+255),w,b
  5851  000CC4  EC09  F00A         	call	_ks0108SetDot
  5852  000CC8  D005               	goto	l4581
  5853  000CCA                     l4579:
  5854                           
  5855                           ; BSR set to: 1
  5856                           ;ks0108.c: 319: else
  5857                           ;ks0108.c: 320: ks0108ClearDot(x, y);
  5858  000CCA  C1E7  F0D7         	movff	ks0108PutChar@y,ks0108ClearDot@y
  5859  000CCE  51E8               	movf	ks0108PutChar@x& (0+255),w,b
  5860  000CD0  EC35  F009         	call	_ks0108ClearDot
  5861  000CD4                     l4581:
  5862                           
  5863                           ;ks0108.c: 323: }
  5864                           ;ks0108.c: 325: x++;
  5865  000CD4  0101               	movlb	1	; () banked
  5866  000CD6  2BE8               	incf	ks0108PutChar@x& (0+255),f,b
  5867                           
  5868                           ; BSR set to: 1
  5869                           ;ks0108.c: 326: mask >>= 1;
  5870  000CD8  90D8               	bcf	status,0,c
  5871  000CDA  33E9               	rrcf	ks0108PutChar@mask& (0+255),f,b
  5872                           
  5873                           ; BSR set to: 1
  5874  000CDC  2BE1               	incf	ks0108PutChar@xCnt& (0+255),f,b
  5875  000CDE                     l977:
  5876                           
  5877                           ; BSR set to: 1
  5878  000CDE  51DE               	movf	ks0108PutChar@_fontWidth& (0+255),w,b
  5879  000CE0  5DE1               	subwf	ks0108PutChar@xCnt& (0+255),w,b
  5880  000CE2  E3DB               	bnc	l978
  5881                           
  5882                           ; BSR set to: 1
  5883                           ;ks0108.c: 327: }
  5884                           ;ks0108.c: 328: y++;
  5885  000CE4  2BE7               	incf	ks0108PutChar@y& (0+255),f,b
  5886  000CE6  2BE2               	incf	ks0108PutChar@yCnt& (0+255),f,b
  5887  000CE8                     l4589:
  5888                           
  5889                           ; BSR set to: 1
  5890  000CE8  51DD               	movf	ks0108PutChar@_fontHeight& (0+255),w,b
  5891  000CEA  5DE2               	subwf	ks0108PutChar@yCnt& (0+255),w,b
  5892  000CEC  E3D1               	bnc	l976
  5893                           
  5894                           ; BSR set to: 1
  5895                           ;ks0108.c: 329: }
  5896                           ;ks0108.c: 332: pos.x = x_ + chWidth;
  5897  000CEE  51E4               	movf	ks0108PutChar@x_& (0+255),w,b
  5898  000CF0  25E6               	addwf	ks0108PutChar@chWidth& (0+255),w,b
  5899  000CF2  0100               	movlb	0	; () banked
  5900  000CF4  6FA7               	movwf	_pos& (0+255),b
  5901                           
  5902                           ; BSR set to: 0
  5903                           ;ks0108.c: 333: pos.y = y_;
  5904  000CF6  C1E5  F0A8         	movff	ks0108PutChar@y_,_pos+1
  5905                           
  5906                           ; BSR set to: 0
  5907                           ;ks0108.c: 335: return chWidth;
  5908  000CFA  0101               	movlb	1	; () banked
  5909  000CFC  51E6               	movf	ks0108PutChar@chWidth& (0+255),w,b
  5910                           
  5911                           ; BSR set to: 1
  5912  000CFE  0012               	return	
  5913  000D00                     __end_of_ks0108PutChar:
  5914                           	opt stack 0
  5915  000D00                     PL28:
  5916                           	opt stack 17
  5917  000D00  6FDA               	movwf	??_ks0108PutChar& (0+255),b
  5918  000D02  0E00               	movlw	0
  5919  000D04  21D8               	addwfc	(ks0108PutChar@p_font+1)& (0+255),w,b
  5920  000D06  6FDB               	movwf	(??_ks0108PutChar+1)& (0+255),b
  5921  000D08  C1DA  FFF6         	movff	??_ks0108PutChar,tblptrl
  5922  000D0C  C1DB  FFF7         	movff	??_ks0108PutChar+1,tblptrh
  5923  000D10                     	if	0	;tblptru may be non-zero
  5924  000D10                     	endif
  5925  000D10                     	if	0	;tblptru may be non-zero
  5926  000D10                     	endif
  5927  000D10  0008               	tblrd		*
  5928  000D12  0012               	return	
  5929  000D14                     __end_ofPL28:
  5930                           	opt stack 0
  5931  000D14                     PL34:
  5932                           	opt stack 17
  5933  000D14  C1D7  F1DA         	movff	ks0108PutChar@p_font,??_ks0108PutChar
  5934  000D18  C1D8  F1DB         	movff	ks0108PutChar@p_font+1,??_ks0108PutChar+1
  5935  000D1C  51EA               	movf	ks0108PutChar@base& (0+255),w,b
  5936  000D1E  27DA               	addwf	??_ks0108PutChar& (0+255),f,b
  5937  000D20  51EB               	movf	(ks0108PutChar@base+1)& (0+255),w,b
  5938  000D22  23DB               	addwfc	(??_ks0108PutChar+1)& (0+255),f,b
  5939  000D24  0012               	return	
  5940  000D26                     __end_ofPL34:
  5941                           	opt stack 0
  5942                           tblptru	equ	0xFF8
  5943                           tblptrh	equ	0xFF7
  5944                           tblptrl	equ	0xFF6
  5945                           tablat	equ	0xFF5
  5946                           prodh	equ	0xFF4
  5947                           prodl	equ	0xFF3
  5948                           intcon	equ	0xFF2
  5949                           postinc0	equ	0xFEE
  5950                           wreg	equ	0xFE8
  5951                           indf1	equ	0xFE7
  5952                           postinc1	equ	0xFE6
  5953                           postdec1	equ	0xFE5
  5954                           fsr1h	equ	0xFE2
  5955                           fsr1l	equ	0xFE1
  5956                           indf2	equ	0xFDF
  5957                           postinc2	equ	0xFDE
  5958                           postdec2	equ	0xFDD
  5959                           fsr2h	equ	0xFDA
  5960                           fsr2l	equ	0xFD9
  5961                           status	equ	0xFD8
  5962                           
  5963 ;; *************** function _ks0108SetDot *****************
  5964 ;; Defined at:
  5965 ;;		line 83 in file "../lib/ks0108.c"
  5966 ;; Parameters:    Size  Location     Type
  5967 ;;  x               1    wreg     unsigned char 
  5968 ;;  y               1   45[BANK0 ] unsigned char 
  5969 ;; Auto vars:     Size  Location     Type
  5970 ;;  x               1    5[BANK1 ] unsigned char 
  5971 ;;  data            1    6[BANK1 ] unsigned char 
  5972 ;; Return value:  Size  Location     Type
  5973 ;;		None               void
  5974 ;; Registers used:
  5975 ;;		wreg, status,2, status,0, cstack
  5976 ;; Tracked objects:
  5977 ;;		On entry : F/1
  5978 ;;		On exit  : E/0
  5979 ;;		Unchanged: 0/0
  5980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5981 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5982 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5983 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5984 ;;      Totals:         0       1       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5985 ;;Total ram usage:        5 bytes
  5986 ;; Hardware stack levels used:    1
  5987 ;; Hardware stack levels required when called:   12
  5988 ;; This function calls:
  5989 ;;		_ks0108GotoXY
  5990 ;;		_ks0108ReadData
  5991 ;;		_ks0108WriteData
  5992 ;; This function is called by:
  5993 ;;		_ks0108PutChar
  5994 ;; This function uses a non-reentrant model
  5995 ;;
  5996                           
  5997                           	psect	text11
  5998  001412                     __ptext11:
  5999                           	opt stack 0
  6000  001412                     _ks0108SetDot:
  6001                           	opt stack 17
  6002                           
  6003                           ; BSR set to: 1
  6004                           ;incstack = 0
  6005                           ;ks0108SetDot@x stored from wreg
  6006  001412  6FD5               	movwf	ks0108SetDot@x& (0+255),b
  6007                           
  6008                           ; BSR set to: 1
  6009                           ;ks0108.c: 84: uint8_t data;
  6010                           ;ks0108.c: 86: ks0108GotoXY(x, y);
  6011  001414  C0D7  F0D3         	movff	ks0108SetDot@y,ks0108GotoXY@y
  6012  001418  51D5               	movf	ks0108SetDot@x& (0+255),w,b
  6013  00141A  ECD5  F008         	call	_ks0108GotoXY
  6014                           
  6015                           ;ks0108.c: 87: data = ks0108ReadData(1);
  6016  00141E  0E01               	movlw	1
  6017  001420  EC9D  F008         	call	_ks0108ReadData
  6018  001424  6FD6               	movwf	ks0108SetDot@data& (0+255),b
  6019                           
  6020                           ;ks0108.c: 88: data = ks0108ReadData(1);
  6021  001426  0E01               	movlw	1
  6022  001428  EC9D  F008         	call	_ks0108ReadData
  6023  00142C  6FD6               	movwf	ks0108SetDot@data& (0+255),b
  6024                           
  6025                           ; BSR set to: 1
  6026                           ;ks0108.c: 90: if(!(data & (0x01 << (y % 8)))) {
  6027  00142E  C0D7  F1D3         	movff	ks0108SetDot@y,??_ks0108SetDot
  6028  001432  D80A               	call	PL24	;call to abstracted procedure
  6029  001434  15D6               	andwf	ks0108SetDot@data& (0+255),w,b
  6030  001436  A4D8               	btfss	status,2,c
  6031  001438  0012               	return	
  6032                           
  6033                           ; BSR set to: 1
  6034                           ;ks0108.c: 92: data |= 0x01 << (y % 8);
  6035  00143A  C0D7  F1D3         	movff	ks0108SetDot@y,??_ks0108SetDot
  6036  00143E  D804               	call	PL24	;call to abstracted procedure
  6037  001440  13D6               	iorwf	ks0108SetDot@data& (0+255),f,b
  6038                           
  6039                           ; BSR set to: 1
  6040                           ;ks0108.c: 94: ks0108WriteData(data);
  6041  001442  51D6               	movf	ks0108SetDot@data& (0+255),w,b
  6042  001444  EF55  F00A         	goto	_ks0108WriteData
  6043  001448                     __end_of_ks0108SetDot:
  6044                           	opt stack 0
  6045  001448                     PL24:
  6046                           	opt stack 17
  6047  001448  0E07               	movlw	7
  6048  00144A  17D3               	andwf	??_ks0108SetDot& (0+255),f,b
  6049  00144C  0E01               	movlw	1
  6050  00144E  6FD4               	movwf	(??_ks0108SetDot+1)& (0+255),b
  6051  001450  2BD3               	incf	??_ks0108SetDot& (0+255),f,b
  6052  001452  D002               	goto	u3234
  6053  001454                     u3235:
  6054  001454  90D8               	bcf	status,0,c
  6055  001456  37D4               	rlcf	(??_ks0108SetDot+1)& (0+255),f,b
  6056  001458                     u3234:
  6057  001458  2FD3               	decfsz	??_ks0108SetDot& (0+255),f,b
  6058  00145A  D7FC               	goto	u3235
  6059  00145C  51D4               	movf	(??_ks0108SetDot+1)& (0+255),w,b
  6060  00145E  0012               	return	
  6061  001460                     __end_ofPL24:
  6062                           	opt stack 0
  6063                           tblptru	equ	0xFF8
  6064                           tblptrh	equ	0xFF7
  6065                           tblptrl	equ	0xFF6
  6066                           tablat	equ	0xFF5
  6067                           prodh	equ	0xFF4
  6068                           prodl	equ	0xFF3
  6069                           intcon	equ	0xFF2
  6070                           postinc0	equ	0xFEE
  6071                           wreg	equ	0xFE8
  6072                           indf1	equ	0xFE7
  6073                           postinc1	equ	0xFE6
  6074                           postdec1	equ	0xFE5
  6075                           fsr1h	equ	0xFE2
  6076                           fsr1l	equ	0xFE1
  6077                           indf2	equ	0xFDF
  6078                           postinc2	equ	0xFDE
  6079                           postdec2	equ	0xFDD
  6080                           fsr2h	equ	0xFDA
  6081                           fsr2l	equ	0xFD9
  6082                           status	equ	0xFD8
  6083                           
  6084 ;; *************** function _ks0108ClearDot *****************
  6085 ;; Defined at:
  6086 ;;		line 100 in file "../lib/ks0108.c"
  6087 ;; Parameters:    Size  Location     Type
  6088 ;;  x               1    wreg     unsigned char 
  6089 ;;  y               1   45[BANK0 ] unsigned char 
  6090 ;; Auto vars:     Size  Location     Type
  6091 ;;  x               1    5[BANK1 ] unsigned char 
  6092 ;;  data            1    6[BANK1 ] unsigned char 
  6093 ;; Return value:  Size  Location     Type
  6094 ;;		None               void
  6095 ;; Registers used:
  6096 ;;		wreg, status,2, status,0, cstack
  6097 ;; Tracked objects:
  6098 ;;		On entry : F/1
  6099 ;;		On exit  : E/0
  6100 ;;		Unchanged: 0/0
  6101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6102 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6103 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6104 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6105 ;;      Totals:         0       1       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6106 ;;Total ram usage:        5 bytes
  6107 ;; Hardware stack levels used:    1
  6108 ;; Hardware stack levels required when called:   12
  6109 ;; This function calls:
  6110 ;;		_ks0108GotoXY
  6111 ;;		_ks0108ReadData
  6112 ;;		_ks0108WriteData
  6113 ;; This function is called by:
  6114 ;;		_ks0108PutChar
  6115 ;; This function uses a non-reentrant model
  6116 ;;
  6117                           
  6118                           	psect	text12
  6119  00126A                     __ptext12:
  6120                           	opt stack 0
  6121  00126A                     _ks0108ClearDot:
  6122                           	opt stack 17
  6123                           
  6124                           ;incstack = 0
  6125                           ;ks0108ClearDot@x stored from wreg
  6126  00126A  6FD5               	movwf	ks0108ClearDot@x& (0+255),b
  6127                           
  6128                           ; BSR set to: 1
  6129                           ;ks0108.c: 101: uint8_t data;
  6130                           ;ks0108.c: 103: ks0108GotoXY(x, y);
  6131  00126C  C0D7  F0D3         	movff	ks0108ClearDot@y,ks0108GotoXY@y
  6132  001270  51D5               	movf	ks0108ClearDot@x& (0+255),w,b
  6133  001272  ECD5  F008         	call	_ks0108GotoXY
  6134                           
  6135                           ;ks0108.c: 104: data = ks0108ReadData(1);
  6136  001276  0E01               	movlw	1
  6137  001278  EC9D  F008         	call	_ks0108ReadData
  6138  00127C  6FD6               	movwf	ks0108ClearDot@data& (0+255),b
  6139                           
  6140                           ;ks0108.c: 105: data = ks0108ReadData(1);
  6141  00127E  0E01               	movlw	1
  6142  001280  EC9D  F008         	call	_ks0108ReadData
  6143  001284  6FD6               	movwf	ks0108ClearDot@data& (0+255),b
  6144                           
  6145                           ; BSR set to: 1
  6146                           ;ks0108.c: 107: if((data & (0x01 << (y % 8)))) {
  6147  001286  C0D7  F1D3         	movff	ks0108ClearDot@y,??_ks0108ClearDot
  6148  00128A  D816               	call	PL50	;call to abstracted procedure
  6149  00128C  D002               	goto	u3264
  6150  00128E                     u3265:
  6151  00128E  90D8               	bcf	status,0,c
  6152  001290  37D4               	rlcf	(??_ks0108ClearDot+1)& (0+255),f,b
  6153  001292                     u3264:
  6154  001292  2FD3               	decfsz	??_ks0108ClearDot& (0+255),f,b
  6155  001294  D7FC               	goto	u3265
  6156  001296  51D4               	movf	(??_ks0108ClearDot+1)& (0+255),w,b
  6157  001298  15D6               	andwf	ks0108ClearDot@data& (0+255),w,b
  6158  00129A  B4D8               	btfsc	status,2,c
  6159  00129C  0012               	return	
  6160                           
  6161                           ; BSR set to: 1
  6162                           ;ks0108.c: 109: data &= ~(0x01 << (y % 8));
  6163  00129E  C0D7  F1D3         	movff	ks0108ClearDot@y,??_ks0108ClearDot
  6164  0012A2  D80A               	call	PL50	;call to abstracted procedure
  6165  0012A4  D002               	goto	u3284
  6166  0012A6                     u3285:
  6167  0012A6  90D8               	bcf	status,0,c
  6168  0012A8  37D4               	rlcf	(??_ks0108ClearDot+1)& (0+255),f,b
  6169  0012AA                     u3284:
  6170  0012AA  2FD3               	decfsz	??_ks0108ClearDot& (0+255),f,b
  6171  0012AC  D7FC               	goto	u3285
  6172  0012AE  1DD4               	comf	(??_ks0108ClearDot+1)& (0+255),w,b
  6173  0012B0  17D6               	andwf	ks0108ClearDot@data& (0+255),f,b
  6174                           
  6175                           ; BSR set to: 1
  6176                           ;ks0108.c: 111: ks0108WriteData(data);
  6177  0012B2  51D6               	movf	ks0108ClearDot@data& (0+255),w,b
  6178  0012B4  EF55  F00A         	goto	_ks0108WriteData
  6179  0012B8                     __end_of_ks0108ClearDot:
  6180                           	opt stack 0
  6181  0012B8                     PL50:
  6182                           	opt stack 17
  6183  0012B8  0E07               	movlw	7
  6184  0012BA  17D3               	andwf	??_ks0108ClearDot& (0+255),f,b
  6185  0012BC  0E01               	movlw	1
  6186  0012BE  6FD4               	movwf	(??_ks0108ClearDot+1)& (0+255),b
  6187  0012C0  2BD3               	incf	??_ks0108ClearDot& (0+255),f,b
  6188  0012C2  0C01               	retlw	1
  6189  0012C4                     __end_ofPL50:
  6190                           	opt stack 0
  6191                           tblptru	equ	0xFF8
  6192                           tblptrh	equ	0xFF7
  6193                           tblptrl	equ	0xFF6
  6194                           tablat	equ	0xFF5
  6195                           prodh	equ	0xFF4
  6196                           prodl	equ	0xFF3
  6197                           intcon	equ	0xFF2
  6198                           postinc0	equ	0xFEE
  6199                           wreg	equ	0xFE8
  6200                           indf1	equ	0xFE7
  6201                           postinc1	equ	0xFE6
  6202                           postdec1	equ	0xFE5
  6203                           fsr1h	equ	0xFE2
  6204                           fsr1l	equ	0xFE1
  6205                           indf2	equ	0xFDF
  6206                           postinc2	equ	0xFDE
  6207                           postdec2	equ	0xFDD
  6208                           fsr2h	equ	0xFDA
  6209                           fsr2l	equ	0xFD9
  6210                           status	equ	0xFD8
  6211                           
  6212 ;; *************** function _ks0108WriteData *****************
  6213 ;; Defined at:
  6214 ;;		line 235 in file "../lib/ks0108.c"
  6215 ;; Parameters:    Size  Location     Type
  6216 ;;  data            1    wreg     unsigned char 
  6217 ;; Auto vars:     Size  Location     Type
  6218 ;;  data            1   41[BANK0 ] unsigned char 
  6219 ;; Return value:  Size  Location     Type
  6220 ;;		None               void
  6221 ;; Registers used:
  6222 ;;		wreg, status,2, status,0, cstack
  6223 ;; Tracked objects:
  6224 ;;		On entry : F/1
  6225 ;;		On exit  : F/0
  6226 ;;		Unchanged: 0/0
  6227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6229 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6231 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6232 ;;Total ram usage:        1 bytes
  6233 ;; Hardware stack levels used:    1
  6234 ;; Hardware stack levels required when called:   10
  6235 ;; This function calls:
  6236 ;;		_ks0108Enable
  6237 ;;		_ks0108WriteCommand
  6238 ;; This function is called by:
  6239 ;;		_ks0108Fill
  6240 ;;		_ks0108SetDot
  6241 ;;		_ks0108ClearDot
  6242 ;; This function uses a non-reentrant model
  6243 ;;
  6244                           
  6245                           	psect	text13
  6246  0014AA                     __ptext13:
  6247                           	opt stack 0
  6248  0014AA                     _ks0108WriteData:
  6249                           	opt stack 18
  6250                           
  6251                           ;incstack = 0
  6252                           ;ks0108WriteData@data stored from wreg
  6253  0014AA  0100               	movlb	0	; () banked
  6254  0014AC  6FD3               	movwf	ks0108WriteData@data& (0+255),b
  6255                           
  6256                           ; BSR set to: 0
  6257                           ;ks0108.c: 237: if(pos.x >= 128)
  6258  0014AE  0E7F               	movlw	127
  6259  0014B0  65A7               	cpfsgt	_pos& (0+255),b
  6260  0014B2  D001               	goto	l4451
  6261  0014B4  0C7F               	retlw	127
  6262  0014B6                     l4451:
  6263                           
  6264                           ; BSR set to: 0
  6265                           ;ks0108.c: 240: if(pos.x < 64) {
  6266  0014B6  0E40               	movlw	64
  6267  0014B8  5DA7               	subwf	_pos& (0+255),w,b
  6268  0014BA  E203               	bc	l4455
  6269                           
  6270                           ; BSR set to: 0
  6271                           ;ks0108.c: 241: LATC3 = 1;
  6272  0014BC  868B               	bsf	3979,3,c	;volatile
  6273                           
  6274                           ;ks0108.c: 242: LATC2 = 0;
  6275  0014BE  948B               	bcf	3979,2,c	;volatile
  6276                           
  6277                           ;ks0108.c: 243: } else if(pos.x >= 64) {
  6278  0014C0  D005               	goto	l4459
  6279  0014C2                     l4455:
  6280                           
  6281                           ; BSR set to: 0
  6282  0014C2  0E3F               	movlw	63
  6283  0014C4  65A7               	cpfsgt	_pos& (0+255),b
  6284  0014C6  D002               	goto	l4459
  6285                           
  6286                           ; BSR set to: 0
  6287                           ;ks0108.c: 244: LATC3 = 0;
  6288  0014C8  968B               	bcf	3979,3,c	;volatile
  6289                           
  6290                           ;ks0108.c: 245: LATC2 = 1;
  6291  0014CA  848B               	bsf	3979,2,c	;volatile
  6292  0014CC                     l4459:
  6293                           
  6294                           ; BSR set to: 0
  6295                           ;ks0108.c: 246: }
  6296                           ;ks0108.c: 248: if(pos.x == 64) {
  6297  0014CC  51A7               	movf	_pos& (0+255),w,b
  6298  0014CE  0A40               	xorlw	64
  6299  0014D0  E105               	bnz	l4463
  6300                           
  6301                           ; BSR set to: 0
  6302                           ;ks0108.c: 249: ks0108WriteCommand(0x40, 0x01);
  6303  0014D2  0E01               	movlw	1
  6304  0014D4  6FD1               	movwf	ks0108WriteCommand@chip& (0+255),b
  6305  0014D6  0E40               	movlw	64
  6306  0014D8  EC2F  F00B         	call	_ks0108WriteCommand
  6307  0014DC                     l4463:
  6308                           
  6309                           ;ks0108.c: 253: }
  6310                           ;ks0108.c: 256: LATE1 = 0;
  6311  0014DC  928D               	bcf	3981,1,c	;volatile
  6312                           
  6313                           ;ks0108.c: 257: LATE2 = 1;
  6314  0014DE  848D               	bsf	3981,2,c	;volatile
  6315                           
  6316                           ;ks0108.c: 259: TRISD = 0x00;
  6317  0014E0  6A95               	clrf	3989,c	;volatile
  6318                           
  6319                           ;ks0108.c: 266: LATD = data;
  6320  0014E2  C0D3  FF8C         	movff	ks0108WriteData@data,3980	;volatile
  6321                           
  6322                           ;ks0108.c: 268: ks0108Enable();
  6323  0014E6  ECED  F00A         	call	_ks0108Enable	;wreg free
  6324                           
  6325                           ;ks0108.c: 275: pos.x++;
  6326  0014EA  0100               	movlb	0	; () banked
  6327  0014EC  2BA7               	incf	_pos& (0+255),f,b
  6328                           
  6329                           ; BSR set to: 0
  6330                           ;ks0108.c: 277: LATD = 0;
  6331  0014EE  6A8C               	clrf	3980,c	;volatile
  6332                           
  6333                           ; BSR set to: 0
  6334  0014F0  0012               	return	
  6335  0014F2                     __end_of_ks0108WriteData:
  6336                           	opt stack 0
  6337                           tblptru	equ	0xFF8
  6338                           tblptrh	equ	0xFF7
  6339                           tblptrl	equ	0xFF6
  6340                           tablat	equ	0xFF5
  6341                           prodh	equ	0xFF4
  6342                           prodl	equ	0xFF3
  6343                           intcon	equ	0xFF2
  6344                           postinc0	equ	0xFEE
  6345                           wreg	equ	0xFE8
  6346                           indf1	equ	0xFE7
  6347                           postinc1	equ	0xFE6
  6348                           postdec1	equ	0xFE5
  6349                           fsr1h	equ	0xFE2
  6350                           fsr1l	equ	0xFE1
  6351                           indf2	equ	0xFDF
  6352                           postinc2	equ	0xFDE
  6353                           postdec2	equ	0xFDD
  6354                           fsr2h	equ	0xFDA
  6355                           fsr2l	equ	0xFD9
  6356                           status	equ	0xFD8
  6357                           
  6358 ;; *************** function _ks0108ReadData *****************
  6359 ;; Defined at:
  6360 ;;		line 158 in file "../lib/ks0108.c"
  6361 ;; Parameters:    Size  Location     Type
  6362 ;;  incXAdd         1    wreg     unsigned char 
  6363 ;; Auto vars:     Size  Location     Type
  6364 ;;  incXAdd         1    0[BANK1 ] unsigned char 
  6365 ;;  i               1    2[BANK1 ] volatile unsigned char 
  6366 ;;  data            1    1[BANK1 ] unsigned char 
  6367 ;; Return value:  Size  Location     Type
  6368 ;;                  1    wreg      unsigned char 
  6369 ;; Registers used:
  6370 ;;		wreg, status,2, status,0, cstack
  6371 ;; Tracked objects:
  6372 ;;		On entry : 0/1
  6373 ;;		On exit  : F/1
  6374 ;;		Unchanged: 0/0
  6375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6377 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6379 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6380 ;;Total ram usage:        3 bytes
  6381 ;; Hardware stack levels used:    1
  6382 ;; Hardware stack levels required when called:   11
  6383 ;; This function calls:
  6384 ;;		_ks0108GotoXY
  6385 ;; This function is called by:
  6386 ;;		_ks0108SetDot
  6387 ;;		_ks0108ClearDot
  6388 ;; This function uses a non-reentrant model
  6389 ;;
  6390                           
  6391                           	psect	text14
  6392  00113A                     __ptext14:
  6393                           	opt stack 0
  6394  00113A                     _ks0108ReadData:
  6395                           	opt stack 17
  6396                           
  6397                           ; BSR set to: 0
  6398                           ;incstack = 0
  6399                           ;ks0108ReadData@incXAdd stored from wreg
  6400  00113A  0101               	movlb	1	; () banked
  6401  00113C  6FD0               	movwf	ks0108ReadData@incXAdd& (0+255),b
  6402                           
  6403                           ; BSR set to: 1
  6404                           ;ks0108.c: 159: uint8_t data;
  6405                           ;ks0108.c: 160: volatile uint8_t i;
  6406                           ;ks0108.c: 166: LATD = 0x00;
  6407  00113E  6A8C               	clrf	3980,c	;volatile
  6408                           
  6409                           ;ks0108.c: 167: TRISD = 0xff;
  6410  001140  6895               	setf	3989,c	;volatile
  6411                           
  6412                           ; BSR set to: 1
  6413                           ;ks0108.c: 169: if(pos.x < 64) {
  6414  001142  0E40               	movlw	64
  6415  001144  0100               	movlb	0	; () banked
  6416  001146  5DA7               	subwf	_pos& (0+255),w,b
  6417  001148  E203               	bc	l4483
  6418                           
  6419                           ; BSR set to: 0
  6420                           ;ks0108.c: 170: LATC3 = 1;
  6421  00114A  868B               	bsf	3979,3,c	;volatile
  6422                           
  6423                           ;ks0108.c: 171: LATC2 = 0;
  6424  00114C  948B               	bcf	3979,2,c	;volatile
  6425                           
  6426                           ;ks0108.c: 172: } else if(pos.x >= 64) {
  6427  00114E  D005               	goto	l948
  6428  001150                     l4483:
  6429                           
  6430                           ; BSR set to: 0
  6431  001150  0E3F               	movlw	63
  6432  001152  65A7               	cpfsgt	_pos& (0+255),b
  6433  001154  D002               	goto	l948
  6434                           
  6435                           ; BSR set to: 0
  6436                           ;ks0108.c: 173: LATC3 = 0;
  6437  001156  968B               	bcf	3979,3,c	;volatile
  6438                           
  6439                           ;ks0108.c: 174: LATC2 = 1;
  6440  001158  848B               	bsf	3979,2,c	;volatile
  6441  00115A                     l948:
  6442                           
  6443                           ; BSR set to: 0
  6444                           ;ks0108.c: 175: }
  6445                           ;ks0108.c: 177: LATE1 = 1;
  6446  00115A  828D               	bsf	3981,1,c	;volatile
  6447                           
  6448                           ;ks0108.c: 178: LATE2 = 1;
  6449  00115C  848D               	bsf	3981,2,c	;volatile
  6450                           
  6451                           ;ks0108.c: 180: for(i = 0; i < 8; i++);
  6452  00115E  0101               	movlb	1	; () banked
  6453  001160  6BD2               	clrf	ks0108ReadData@i& (0+255),b	;volatile
  6454  001162  D001               	goto	L1
  6455  001164                     l4491:
  6456                           
  6457                           ; BSR set to: 1
  6458  001164  2BD2               	incf	ks0108ReadData@i& (0+255),f,b	;volatile
  6459  001166                     L1:
  6460                           
  6461                           ; BSR set to: 1
  6462  001166  0E07               	movlw	7
  6463  001168  65D2               	cpfsgt	ks0108ReadData@i& (0+255),b	;volatile
  6464  00116A  D7FC               	goto	l4491
  6465                           
  6466                           ; BSR set to: 1
  6467                           ;ks0108.c: 182: LATE0 = 1;
  6468  00116C  808D               	bsf	3981,0,c	;volatile
  6469                           
  6470                           ;ks0108.c: 184: for(i = 0; i < 8; i++);
  6471  00116E  6BD2               	clrf	ks0108ReadData@i& (0+255),b	;volatile
  6472  001170  D001               	goto	L2
  6473  001172                     l4499:
  6474                           
  6475                           ; BSR set to: 1
  6476  001172  2BD2               	incf	ks0108ReadData@i& (0+255),f,b	;volatile
  6477  001174                     L2:
  6478                           
  6479                           ; BSR set to: 1
  6480  001174  0E07               	movlw	7
  6481  001176  65D2               	cpfsgt	ks0108ReadData@i& (0+255),b	;volatile
  6482  001178  D7FC               	goto	l4499
  6483                           
  6484                           ; BSR set to: 1
  6485                           ;ks0108.c: 186: data = PORTD;
  6486  00117A  CF83 F1D1          	movff	3971,ks0108ReadData@data	;volatile
  6487                           
  6488                           ;ks0108.c: 191: LATE0 = 0;
  6489  00117E  908D               	bcf	3981,0,c	;volatile
  6490                           
  6491                           ;ks0108.c: 193: for(i = 0; i < 8; i++);
  6492  001180  6BD2               	clrf	ks0108ReadData@i& (0+255),b	;volatile
  6493  001182  D001               	goto	L3
  6494  001184                     l4507:
  6495                           
  6496                           ; BSR set to: 1
  6497  001184  2BD2               	incf	ks0108ReadData@i& (0+255),f,b	;volatile
  6498  001186                     L3:
  6499                           
  6500                           ; BSR set to: 1
  6501  001186  0E07               	movlw	7
  6502  001188  65D2               	cpfsgt	ks0108ReadData@i& (0+255),b	;volatile
  6503  00118A  D7FC               	goto	l4507
  6504                           
  6505                           ; BSR set to: 1
  6506                           ;ks0108.c: 202: TRISD = 0x00;
  6507  00118C  6A95               	clrf	3989,c	;volatile
  6508                           
  6509                           ;ks0108.c: 205: if(incXAdd == 0)
  6510  00118E  67D0               	tstfsz	ks0108ReadData@incXAdd& (0+255),b
  6511  001190  D003               	goto	l4513
  6512                           
  6513                           ; BSR set to: 1
  6514                           ;ks0108.c: 206: pos.x++;
  6515  001192  0100               	movlb	0	; () banked
  6516  001194  2BA7               	incf	_pos& (0+255),f,b
  6517  001196  D006               	goto	l4515
  6518  001198                     l4513:
  6519                           
  6520                           ; BSR set to: 1
  6521                           ;ks0108.c: 207: else
  6522                           ;ks0108.c: 208: ks0108GotoXY(pos.x, pos.y);
  6523  001198  C0A8  F0D3         	movff	_pos+1,ks0108GotoXY@y
  6524  00119C  0100               	movlb	0	; () banked
  6525  00119E  51A7               	movf	_pos& (0+255),w,b
  6526  0011A0  ECD5  F008         	call	_ks0108GotoXY
  6527  0011A4                     l4515:
  6528                           
  6529                           ;ks0108.c: 211: return data;
  6530  0011A4  0101               	movlb	1	; () banked
  6531  0011A6  51D1               	movf	ks0108ReadData@data& (0+255),w,b
  6532                           
  6533                           ; BSR set to: 1
  6534  0011A8  0012               	return	
  6535  0011AA                     __end_of_ks0108ReadData:
  6536                           	opt stack 0
  6537                           tblptru	equ	0xFF8
  6538                           tblptrh	equ	0xFF7
  6539                           tblptrl	equ	0xFF6
  6540                           tablat	equ	0xFF5
  6541                           prodh	equ	0xFF4
  6542                           prodl	equ	0xFF3
  6543                           intcon	equ	0xFF2
  6544                           postinc0	equ	0xFEE
  6545                           wreg	equ	0xFE8
  6546                           indf1	equ	0xFE7
  6547                           postinc1	equ	0xFE6
  6548                           postdec1	equ	0xFE5
  6549                           fsr1h	equ	0xFE2
  6550                           fsr1l	equ	0xFE1
  6551                           indf2	equ	0xFDF
  6552                           postinc2	equ	0xFDE
  6553                           postdec2	equ	0xFDD
  6554                           fsr2h	equ	0xFDA
  6555                           fsr2l	equ	0xFD9
  6556                           status	equ	0xFD8
  6557                           
  6558 ;; *************** function _ks0108GotoXY *****************
  6559 ;; Defined at:
  6560 ;;		line 50 in file "../lib/ks0108.c"
  6561 ;; Parameters:    Size  Location     Type
  6562 ;;  x               1    wreg     unsigned char 
  6563 ;;  y               1   41[BANK0 ] unsigned char 
  6564 ;; Auto vars:     Size  Location     Type
  6565 ;;  x               1   44[BANK0 ] unsigned char 
  6566 ;;  cmd             1   43[BANK0 ] unsigned char 
  6567 ;;  chip            1   42[BANK0 ] unsigned char 
  6568 ;; Return value:  Size  Location     Type
  6569 ;;		None               void
  6570 ;; Registers used:
  6571 ;;		wreg, status,2, status,0, cstack
  6572 ;; Tracked objects:
  6573 ;;		On entry : E/0
  6574 ;;		On exit  : 0/0
  6575 ;;		Unchanged: 0/0
  6576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6577 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6578 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6580 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6581 ;;Total ram usage:        4 bytes
  6582 ;; Hardware stack levels used:    1
  6583 ;; Hardware stack levels required when called:   10
  6584 ;; This function calls:
  6585 ;;		_ks0108WriteCommand
  6586 ;; This function is called by:
  6587 ;;		_main
  6588 ;;		_ks0108Fill
  6589 ;;		_ks0108SetDot
  6590 ;;		_ks0108ClearDot
  6591 ;;		_ks0108ReadData
  6592 ;;		_LabelSetTxt
  6593 ;; This function uses a non-reentrant model
  6594 ;;
  6595                           
  6596                           	psect	text15
  6597  0011AA                     __ptext15:
  6598                           	opt stack 0
  6599  0011AA                     _ks0108GotoXY:
  6600                           	opt stack 17
  6601                           
  6602                           ; BSR set to: 1
  6603                           ;incstack = 0
  6604                           ;ks0108GotoXY@x stored from wreg
  6605  0011AA  0100               	movlb	0	; () banked
  6606  0011AC  6FD6               	movwf	ks0108GotoXY@x& (0+255),b
  6607                           
  6608                           ; BSR set to: 0
  6609                           ;ks0108.c: 51: uint8_t chip = 0x00, cmd;
  6610  0011AE  6BD4               	clrf	ks0108GotoXY@chip& (0+255),b
  6611                           
  6612                           ; BSR set to: 0
  6613                           ;ks0108.c: 53: if(x > 127) x = 0;
  6614  0011B0  0E7F               	movlw	127
  6615  0011B2  65D6               	cpfsgt	ks0108GotoXY@x& (0+255),b
  6616  0011B4  D001               	goto	l4425
  6617                           
  6618                           ; BSR set to: 0
  6619  0011B6  6BD6               	clrf	ks0108GotoXY@x& (0+255),b
  6620  0011B8                     l4425:
  6621                           
  6622                           ; BSR set to: 0
  6623                           ;ks0108.c: 54: if(y > 63) y = 0;
  6624  0011B8  0E3F               	movlw	63
  6625  0011BA  65D3               	cpfsgt	ks0108GotoXY@y& (0+255),b
  6626  0011BC  D001               	goto	l929
  6627                           
  6628                           ; BSR set to: 0
  6629  0011BE  6BD3               	clrf	ks0108GotoXY@y& (0+255),b
  6630  0011C0                     l929:
  6631                           
  6632                           ; BSR set to: 0
  6633                           ;ks0108.c: 56: pos.x = x;
  6634  0011C0  C0D6  F0A7         	movff	ks0108GotoXY@x,_pos
  6635                           
  6636                           ;ks0108.c: 57: pos.y = y;
  6637  0011C4  C0D3  F0A8         	movff	ks0108GotoXY@y,_pos+1
  6638                           
  6639                           ; BSR set to: 0
  6640                           ;ks0108.c: 58: pos.page = y >> 3;
  6641  0011C8  39D3               	swapf	ks0108GotoXY@y& (0+255),w,b
  6642  0011CA  46E8               	rlncf	wreg,f,c
  6643  0011CC  0B1F               	andlw	31
  6644  0011CE  6FA9               	movwf	(_pos+2)& (0+255),b
  6645                           
  6646                           ; BSR set to: 0
  6647                           ;ks0108.c: 60: if(x >= 64) {
  6648  0011D0  0E3F               	movlw	63
  6649  0011D2  65D6               	cpfsgt	ks0108GotoXY@x& (0+255),b
  6650  0011D4  D004               	goto	l4437
  6651                           
  6652                           ; BSR set to: 0
  6653                           ;ks0108.c: 61: x -= 64;
  6654  0011D6  0E40               	movlw	64
  6655  0011D8  5FD6               	subwf	ks0108GotoXY@x& (0+255),f,b
  6656                           
  6657                           ; BSR set to: 0
  6658                           ;ks0108.c: 62: chip = 0x01;
  6659  0011DA  0E01               	movlw	1
  6660  0011DC  6FD4               	movwf	ks0108GotoXY@chip& (0+255),b
  6661  0011DE                     l4437:
  6662                           
  6663                           ; BSR set to: 0
  6664                           ;ks0108.c: 63: }
  6665                           ;ks0108.c: 70: cmd = 0x40 | x;
  6666  0011DE  51D6               	movf	ks0108GotoXY@x& (0+255),w,b
  6667  0011E0  0940               	iorlw	64
  6668  0011E2  6FD5               	movwf	ks0108GotoXY@cmd& (0+255),b
  6669                           
  6670                           ; BSR set to: 0
  6671                           ;ks0108.c: 71: ks0108WriteCommand(cmd, chip);
  6672  0011E4  C0D4  F0D1         	movff	ks0108GotoXY@chip,ks0108WriteCommand@chip
  6673  0011E8  51D5               	movf	ks0108GotoXY@cmd& (0+255),w,b
  6674  0011EA  EC2F  F00B         	call	_ks0108WriteCommand
  6675                           
  6676                           ;ks0108.c: 73: cmd = 0xB8 | pos.page;
  6677  0011EE  0100               	movlb	0	; () banked
  6678  0011F0  51A9               	movf	(_pos+2)& (0+255),w,b
  6679  0011F2  09B8               	iorlw	184
  6680  0011F4  6FD5               	movwf	ks0108GotoXY@cmd& (0+255),b
  6681                           
  6682                           ; BSR set to: 0
  6683                           ;ks0108.c: 75: ks0108WriteCommand(cmd, 0x00);
  6684  0011F6  6BD1               	clrf	ks0108WriteCommand@chip& (0+255),b
  6685  0011F8  51D5               	movf	ks0108GotoXY@cmd& (0+255),w,b
  6686  0011FA  EC2F  F00B         	call	_ks0108WriteCommand
  6687                           
  6688                           ;ks0108.c: 76: ks0108WriteCommand(cmd, 0x01);
  6689  0011FE  0E01               	movlw	1
  6690  001200  0100               	movlb	0	; () banked
  6691  001202  6FD1               	movwf	ks0108WriteCommand@chip& (0+255),b
  6692  001204  51D5               	movf	ks0108GotoXY@cmd& (0+255),w,b
  6693  001206  EF2F  F00B         	goto	_ks0108WriteCommand
  6694  00120A                     __end_of_ks0108GotoXY:
  6695                           	opt stack 0
  6696                           tblptru	equ	0xFF8
  6697                           tblptrh	equ	0xFF7
  6698                           tblptrl	equ	0xFF6
  6699                           tablat	equ	0xFF5
  6700                           prodh	equ	0xFF4
  6701                           prodl	equ	0xFF3
  6702                           intcon	equ	0xFF2
  6703                           postinc0	equ	0xFEE
  6704                           wreg	equ	0xFE8
  6705                           indf1	equ	0xFE7
  6706                           postinc1	equ	0xFE6
  6707                           postdec1	equ	0xFE5
  6708                           fsr1h	equ	0xFE2
  6709                           fsr1l	equ	0xFE1
  6710                           indf2	equ	0xFDF
  6711                           postinc2	equ	0xFDE
  6712                           postdec2	equ	0xFDD
  6713                           fsr2h	equ	0xFDA
  6714                           fsr2l	equ	0xFD9
  6715                           status	equ	0xFD8
  6716                           
  6717 ;; *************** function _ks0108WriteCommand *****************
  6718 ;; Defined at:
  6719 ;;		line 215 in file "../lib/ks0108.c"
  6720 ;; Parameters:    Size  Location     Type
  6721 ;;  cmd             1    wreg     unsigned char 
  6722 ;;  chip            1   39[BANK0 ] unsigned char 
  6723 ;; Auto vars:     Size  Location     Type
  6724 ;;  cmd             1   40[BANK0 ] unsigned char 
  6725 ;; Return value:  Size  Location     Type
  6726 ;;		None               void
  6727 ;; Registers used:
  6728 ;;		wreg, status,2, status,0, cstack
  6729 ;; Tracked objects:
  6730 ;;		On entry : F/0
  6731 ;;		On exit  : 0/0
  6732 ;;		Unchanged: 0/0
  6733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6734 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6735 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6737 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6738 ;;Total ram usage:        2 bytes
  6739 ;; Hardware stack levels used:    1
  6740 ;; Hardware stack levels required when called:    9
  6741 ;; This function calls:
  6742 ;;		_ks0108Enable
  6743 ;; This function is called by:
  6744 ;;		_ks0108GotoXY
  6745 ;;		_ks0108Init
  6746 ;;		_ks0108WriteData
  6747 ;; This function uses a non-reentrant model
  6748 ;;
  6749                           
  6750                           	psect	text16
  6751  00165E                     __ptext16:
  6752                           	opt stack 0
  6753  00165E                     _ks0108WriteCommand:
  6754                           	opt stack 18
  6755                           
  6756                           ;incstack = 0
  6757                           ;ks0108WriteCommand@cmd stored from wreg
  6758  00165E  6FD2               	movwf	ks0108WriteCommand@cmd& (0+255),b
  6759                           
  6760                           ; BSR set to: 0
  6761                           ;ks0108.c: 217: if(chip == 0x00) {
  6762  001660  67D1               	tstfsz	ks0108WriteCommand@chip& (0+255),b
  6763  001662  D003               	goto	l4411
  6764                           
  6765                           ; BSR set to: 0
  6766                           ;ks0108.c: 218: LATC3 = 1;
  6767  001664  868B               	bsf	3979,3,c	;volatile
  6768                           
  6769                           ;ks0108.c: 219: LATC2 = 0;
  6770  001666  948B               	bcf	3979,2,c	;volatile
  6771                           
  6772                           ;ks0108.c: 220: } else if(chip == 0x01) {
  6773  001668  D004               	goto	l962
  6774  00166A                     l4411:
  6775                           
  6776                           ; BSR set to: 0
  6777  00166A  05D1               	decf	ks0108WriteCommand@chip& (0+255),w,b
  6778  00166C  E102               	bnz	l962
  6779                           
  6780                           ; BSR set to: 0
  6781                           ;ks0108.c: 221: LATC3 = 0;
  6782  00166E  968B               	bcf	3979,3,c	;volatile
  6783                           
  6784                           ;ks0108.c: 222: LATC2 = 1;
  6785  001670  848B               	bsf	3979,2,c	;volatile
  6786  001672                     l962:
  6787                           
  6788                           ; BSR set to: 0
  6789                           ;ks0108.c: 223: }
  6790                           ;ks0108.c: 225: LATE1 = 0;
  6791  001672  928D               	bcf	3981,1,c	;volatile
  6792                           
  6793                           ;ks0108.c: 226: LATE2 = 0;
  6794  001674  948D               	bcf	3981,2,c	;volatile
  6795                           
  6796                           ;ks0108.c: 228: TRISD = 0x00;
  6797  001676  6A95               	clrf	3989,c	;volatile
  6798                           
  6799                           ;ks0108.c: 229: LATD = cmd;
  6800  001678  C0D2  FF8C         	movff	ks0108WriteCommand@cmd,3980	;volatile
  6801                           
  6802                           ; BSR set to: 0
  6803                           ;ks0108.c: 230: ks0108Enable();
  6804  00167C  ECED  F00A         	call	_ks0108Enable	;wreg free
  6805                           
  6806                           ;ks0108.c: 231: LATD = 0x00;
  6807  001680  6A8C               	clrf	3980,c	;volatile
  6808  001682  0012               	return	
  6809  001684                     __end_of_ks0108WriteCommand:
  6810                           	opt stack 0
  6811                           tblptru	equ	0xFF8
  6812                           tblptrh	equ	0xFF7
  6813                           tblptrl	equ	0xFF6
  6814                           tablat	equ	0xFF5
  6815                           prodh	equ	0xFF4
  6816                           prodl	equ	0xFF3
  6817                           intcon	equ	0xFF2
  6818                           postinc0	equ	0xFEE
  6819                           wreg	equ	0xFE8
  6820                           indf1	equ	0xFE7
  6821                           postinc1	equ	0xFE6
  6822                           postdec1	equ	0xFE5
  6823                           fsr1h	equ	0xFE2
  6824                           fsr1l	equ	0xFE1
  6825                           indf2	equ	0xFDF
  6826                           postinc2	equ	0xFDE
  6827                           postdec2	equ	0xFDD
  6828                           fsr2h	equ	0xFDA
  6829                           fsr2l	equ	0xFD9
  6830                           status	equ	0xFD8
  6831                           
  6832 ;; *************** function _ks0108Enable *****************
  6833 ;; Defined at:
  6834 ;;		line 19 in file "../lib/ks0108.c"
  6835 ;; Parameters:    Size  Location     Type
  6836 ;;		None
  6837 ;; Auto vars:     Size  Location     Type
  6838 ;;		None
  6839 ;; Return value:  Size  Location     Type
  6840 ;;		None               void
  6841 ;; Registers used:
  6842 ;;		wreg, status,2
  6843 ;; Tracked objects:
  6844 ;;		On entry : 0/0
  6845 ;;		On exit  : 0/0
  6846 ;;		Unchanged: 0/0
  6847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6851 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6852 ;;Total ram usage:        0 bytes
  6853 ;; Hardware stack levels used:    1
  6854 ;; Hardware stack levels required when called:    8
  6855 ;; This function calls:
  6856 ;;		Nothing
  6857 ;; This function is called by:
  6858 ;;		_ks0108WriteCommand
  6859 ;;		_ks0108WriteData
  6860 ;; This function uses a non-reentrant model
  6861 ;;
  6862                           
  6863                           	psect	text17
  6864  0015DA                     __ptext17:
  6865                           	opt stack 0
  6866  0015DA                     _ks0108Enable:
  6867                           	opt stack 18
  6868                           
  6869                           ;ks0108.c: 20: { delayus_variable=(unsigned char)(5/1); asm("movlb (_delayus_variable) >
      +                          > 8"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); } asm("decfsz (_delay
      +                          us_variable)&0ffh,f"); asm("goto $ - 12");;
  6870                           
  6871                           ;incstack = 0
  6872  0015DA  0E05               	movlw	5
  6873  0015DC  0100               	movlb	0	; () banked
  6874  0015DE  6F77               	movwf	_delayus_variable& (0+255),b
  6875  0015E0  0100               	movlb	_delayus_variable shr (0+8)	;# 
  6876  0015E2  F000               	nop		;# 
  6877  0015E4  F000               	nop		;# 
  6878  0015E6  F000               	nop		;# 
  6879  0015E8  F000               	nop		;# 
  6880  0015EA  F000               	nop		;# 
  6881  0015EC  2F77               	decfsz	_delayus_variable& (0+255),f,b	;# 
  6882  0015EE  EFF1  F00A         	goto	($+-12)	;# 
  6883                           
  6884                           ;ks0108.c: 21: LATE0 = 1;
  6885  0015F2  808D               	bsf	3981,0,c	;volatile
  6886                           
  6887                           ;ks0108.c: 22: { delayus_variable=(unsigned char)(5/1); asm("movlb (_delayus_variable) >
      +                          > 8"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); asm("nop"); } asm("decfsz (_delay
      +                          us_variable)&0ffh,f"); asm("goto $ - 12");;
  6888  0015F4  F000               	nop		;# 
  6889  0015F6  F000               	nop		;# 
  6890  0015F8  F000               	nop		;# 
  6891  0015FA  F000               	nop		;# 
  6892  0015FC  F000               	nop		;# 
  6893  0015FE  2F77               	decfsz	_delayus_variable& (0+255),f,b	;# 
  6894  001600  EFFA  F00A         	goto	($+-12)	;# 
  6895                           
  6896                           ;ks0108.c: 23: LATE0 = 0;
  6897  001604  908D               	bcf	3981,0,c	;volatile
  6898  001606  0C05               	retlw	5
  6899  001608                     __end_of_ks0108Enable:
  6900                           	opt stack 0
  6901                           tblptru	equ	0xFF8
  6902                           tblptrh	equ	0xFF7
  6903                           tblptrl	equ	0xFF6
  6904                           tablat	equ	0xFF5
  6905                           prodh	equ	0xFF4
  6906                           prodl	equ	0xFF3
  6907                           intcon	equ	0xFF2
  6908                           postinc0	equ	0xFEE
  6909                           wreg	equ	0xFE8
  6910                           indf1	equ	0xFE7
  6911                           postinc1	equ	0xFE6
  6912                           postdec1	equ	0xFE5
  6913                           fsr1h	equ	0xFE2
  6914                           fsr1l	equ	0xFE1
  6915                           indf2	equ	0xFDF
  6916                           postinc2	equ	0xFDE
  6917                           postdec2	equ	0xFDD
  6918                           fsr2h	equ	0xFDA
  6919                           fsr2l	equ	0xFD9
  6920                           status	equ	0xFD8
  6921                           
  6922 ;; *************** function ___wmul *****************
  6923 ;; Defined at:
  6924 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  6925 ;; Parameters:    Size  Location     Type
  6926 ;;  multiplier      2   39[BANK0 ] unsigned int 
  6927 ;;  multiplicand    2   41[BANK0 ] unsigned int 
  6928 ;; Auto vars:     Size  Location     Type
  6929 ;;  product         2   43[BANK0 ] unsigned int 
  6930 ;; Return value:  Size  Location     Type
  6931 ;;                  2   39[BANK0 ] unsigned int 
  6932 ;; Registers used:
  6933 ;;		wreg, status,2, status,0, prodl, prodh
  6934 ;; Tracked objects:
  6935 ;;		On entry : F/0
  6936 ;;		On exit  : F/0
  6937 ;;		Unchanged: 0/0
  6938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6939 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6940 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6942 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6943 ;;Total ram usage:        6 bytes
  6944 ;; Hardware stack levels used:    1
  6945 ;; Hardware stack levels required when called:    8
  6946 ;; This function calls:
  6947 ;;		Nothing
  6948 ;; This function is called by:
  6949 ;;		_ks0108PutChar
  6950 ;; This function uses a non-reentrant model
  6951 ;;
  6952                           
  6953                           	psect	text18
  6954  001684                     __ptext18:
  6955                           	opt stack 0
  6956  001684                     ___wmul:
  6957                           	opt stack 21
  6958                           
  6959                           ; BSR set to: 0
  6960                           
  6961                           ;incstack = 0
  6962  001684  51D1               	movf	___wmul@multiplier& (0+255),w,b
  6963  001686  03D3               	mulwf	___wmul@multiplicand& (0+255),b
  6964  001688  CFF3 F0D5          	movff	prodl,___wmul@product
  6965  00168C  CFF4 F0D6          	movff	prodh,___wmul@product+1
  6966  001690  51D1               	movf	___wmul@multiplier& (0+255),w,b
  6967  001692  03D4               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  6968  001694  50F3               	movf	prodl,w,c
  6969  001696  27D6               	addwf	(___wmul@product+1)& (0+255),f,b
  6970  001698  51D2               	movf	(___wmul@multiplier+1)& (0+255),w,b
  6971  00169A  03D3               	mulwf	___wmul@multiplicand& (0+255),b
  6972  00169C  50F3               	movf	prodl,w,c
  6973  00169E  27D6               	addwf	(___wmul@product+1)& (0+255),f,b
  6974                           
  6975                           ; BSR set to: 0
  6976  0016A0  C0D5  F0D1         	movff	___wmul@product,?___wmul
  6977  0016A4  C0D6  F0D2         	movff	___wmul@product+1,?___wmul+1
  6978                           
  6979                           ; BSR set to: 0
  6980  0016A8  0012               	return	
  6981  0016AA                     __end_of___wmul:
  6982                           	opt stack 0
  6983                           tblptru	equ	0xFF8
  6984                           tblptrh	equ	0xFF7
  6985                           tblptrl	equ	0xFF6
  6986                           tablat	equ	0xFF5
  6987                           prodh	equ	0xFF4
  6988                           prodl	equ	0xFF3
  6989                           intcon	equ	0xFF2
  6990                           postinc0	equ	0xFEE
  6991                           wreg	equ	0xFE8
  6992                           indf1	equ	0xFE7
  6993                           postinc1	equ	0xFE6
  6994                           postdec1	equ	0xFE5
  6995                           fsr1h	equ	0xFE2
  6996                           fsr1l	equ	0xFE1
  6997                           indf2	equ	0xFDF
  6998                           postinc2	equ	0xFDE
  6999                           postdec2	equ	0xFDD
  7000                           fsr2h	equ	0xFDA
  7001                           fsr2l	equ	0xFD9
  7002                           status	equ	0xFD8
  7003                           
  7004 ;; *************** function _InitializeSystem *****************
  7005 ;; Defined at:
  7006 ;;		line 24 in file "../misc.c"
  7007 ;; Parameters:    Size  Location     Type
  7008 ;;		None
  7009 ;; Auto vars:     Size  Location     Type
  7010 ;;  pll_startup_    2   11[BANK1 ] unsigned int 
  7011 ;; Return value:  Size  Location     Type
  7012 ;;		None               void
  7013 ;; Registers used:
  7014 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7015 ;; Tracked objects:
  7016 ;;		On entry : F/0
  7017 ;;		On exit  : F/0
  7018 ;;		Unchanged: 0/0
  7019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7021 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7023 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7024 ;;Total ram usage:        2 bytes
  7025 ;; Hardware stack levels used:    1
  7026 ;; Hardware stack levels required when called:    9
  7027 ;; This function calls:
  7028 ;;		_MTouchInit
  7029 ;;		_MTouchSetButton
  7030 ;;		_MTouchSetSensor
  7031 ;;		_uart16_init
  7032 ;; This function is called by:
  7033 ;;		_main
  7034 ;; This function uses a non-reentrant model
  7035 ;;
  7036                           
  7037                           	psect	text19
  7038  0007B0                     __ptext19:
  7039                           	opt stack 0
  7040  0007B0                     _InitializeSystem:
  7041                           	opt stack 21
  7042                           
  7043                           ; BSR set to: 0
  7044                           ;misc.c: 36: unsigned int pll_startup_counter = 600;
  7045                           
  7046                           ; BSR set to: 0
  7047                           ;incstack = 0
  7048  0007B0  0E02               	movlw	2
  7049  0007B2  0101               	movlb	1	; () banked
  7050  0007B4  6FDC               	movwf	(InitializeSystem@pll_startup_counter+1)& (0+255),b
  7051  0007B6  0E58               	movlw	88
  7052  0007B8  6FDB               	movwf	InitializeSystem@pll_startup_counter& (0+255),b
  7053                           
  7054                           ;misc.c: 38: OSCCON = 0b01110000;
  7055  0007BA  0E70               	movlw	112
  7056  0007BC  6ED3               	movwf	4051,c	;volatile
  7057                           
  7058                           ; BSR set to: 1
  7059                           ;misc.c: 39: OSCTUNEbits.PLLEN = 1;
  7060  0007BE  8C9B               	bsf	3995,6,c	;volatile
  7061  0007C0                     l5019:
  7062                           
  7063                           ; BSR set to: 1
  7064  0007C0  07DB               	decf	InitializeSystem@pll_startup_counter& (0+255),f,b
  7065  0007C2  A0D8               	btfss	status,0,c
  7066  0007C4  07DC               	decf	(InitializeSystem@pll_startup_counter+1)& (0+255),f,b
  7067  0007C6  0101               	movlb	1	; () banked
  7068  0007C8  29DB               	incf	InitializeSystem@pll_startup_counter& (0+255),w,b
  7069  0007CA  B4D8               	btfsc	status,2,c
  7070  0007CC  29DC               	incf	(InitializeSystem@pll_startup_counter+1)& (0+255),w,b
  7071  0007CE  E1F8               	bnz	l5019
  7072                           
  7073                           ; BSR set to: 1
  7074                           ;misc.c: 44: RCONbits.IPEN = 1;
  7075  0007D0  8ED0               	bsf	4048,7,c	;volatile
  7076                           
  7077                           ; BSR set to: 1
  7078                           ;misc.c: 47: T2CONbits.T2CKPS = 3;
  7079  0007D2  0E03               	movlw	3
  7080  0007D4  12BA               	iorwf	4026,f,c	;volatile
  7081                           
  7082                           ;misc.c: 48: PR2 = 200;
  7083  0007D6  0EC8               	movlw	200
  7084  0007D8  6EBB               	movwf	4027,c	;volatile
  7085                           
  7086                           ;misc.c: 49: T2CONbits.T2OUTPS = 3;
  7087  0007DA  50BA               	movf	4026,w,c	;volatile
  7088  0007DC  0B87               	andlw	-121
  7089  0007DE  0918               	iorlw	24
  7090  0007E0  6EBA               	movwf	4026,c	;volatile
  7091                           
  7092                           ; BSR set to: 1
  7093                           ;misc.c: 50: T2CONbits.TMR2ON = 1;
  7094  0007E2  84BA               	bsf	4026,2,c	;volatile
  7095                           
  7096                           ; BSR set to: 1
  7097                           ;misc.c: 51: IPR1bits.TMR2IP = 1;
  7098  0007E4  829F               	bsf	3999,1,c	;volatile
  7099                           
  7100                           ; BSR set to: 1
  7101                           ;misc.c: 52: PIR1bits.TMR2IF = 0;
  7102  0007E6  929E               	bcf	3998,1,c	;volatile
  7103                           
  7104                           ; BSR set to: 1
  7105                           ;misc.c: 53: PIE1bits.TMR2IE = 1;
  7106  0007E8  829D               	bsf	3997,1,c	;volatile
  7107                           
  7108                           ;misc.c: 56: T4CONbits.T4CKPS = 3;
  7109  0007EA  0E03               	movlw	3
  7110  0007EC  010F               	movlb	15	; () banked
  7111  0007EE  1351               	iorwf	81,f,b	;volatile
  7112                           
  7113                           ;misc.c: 57: PR4 = 100;
  7114  0007F0  0E64               	movlw	100
  7115  0007F2  6F52               	movwf	82,b	;volatile
  7116                           
  7117                           ; BSR set to: 15
  7118                           ;misc.c: 58: T4CONbits.T4OUTPS = 0;
  7119  0007F4  9751               	bcf	81,3,b	;volatile
  7120  0007F6  9951               	bcf	81,4,b	;volatile
  7121  0007F8  9B51               	bcf	81,5,b	;volatile
  7122  0007FA  9D51               	bcf	81,6,b	;volatile
  7123                           
  7124                           ; BSR set to: 15
  7125                           ;misc.c: 59: T4CONbits.TMR4ON = 1;
  7126  0007FC  8551               	bsf	81,2,b	;volatile
  7127                           
  7128                           ; BSR set to: 15
  7129                           ;misc.c: 60: IPR5bits.TMR4IP = 1;
  7130  0007FE  807F               	bsf	3967,0,c	;volatile
  7131                           
  7132                           ; BSR set to: 15
  7133                           ;misc.c: 61: PIR5bits.TMR4IF = 0;
  7134  000800  907E               	bcf	3966,0,c	;volatile
  7135                           
  7136                           ; BSR set to: 15
  7137                           ;misc.c: 62: PIE5bits.TMR4IE = 1;
  7138  000802  807D               	bsf	3965,0,c	;volatile
  7139                           
  7140                           ; BSR set to: 15
  7141                           ;misc.c: 70: MTouchInit();
  7142  000804  EC9B  F00B         	call	_MTouchInit	;wreg free
  7143                           
  7144                           ; BSR set to: 15
  7145                           ;misc.c: 72: ANSELA = 0b00000000;
  7146  000808  6B38               	clrf	56,b	;volatile
  7147                           
  7148                           ; BSR set to: 15
  7149                           ;misc.c: 73: ANSELB = 0b00000000;
  7150  00080A  6B39               	clrf	57,b	;volatile
  7151                           
  7152                           ; BSR set to: 15
  7153                           ;misc.c: 74: ANSELC = 0b00000000;
  7154  00080C  6B3A               	clrf	58,b	;volatile
  7155                           
  7156                           ; BSR set to: 15
  7157                           ;misc.c: 75: ANSELD = 0b00000000;
  7158  00080E  6B3B               	clrf	59,b	;volatile
  7159                           
  7160                           ; BSR set to: 15
  7161                           ;misc.c: 76: ANSELE = 0b00000000;
  7162  000810  6B3C               	clrf	60,b	;volatile
  7163                           
  7164                           ; BSR set to: 15
  7165                           ;misc.c: 80: MTouchSetSensor(0, &TRISA, &LATA, 0, 0, -1, -1, -1);
  7166  000812  D883               	call	PL2	;call to abstracted procedure
  7167  000814  6BD4               	clrf	MTouchSetSensor@ioBitNumber& (0+255),b
  7168  000816  6BD5               	clrf	MTouchSetSensor@channelNumber& (0+255),b
  7169  000818  69D7               	setf	(MTouchSetSensor@threshold+1)& (0+255),b
  7170  00081A  69D6               	setf	MTouchSetSensor@threshold& (0+255),b
  7171  00081C  69D9               	setf	(MTouchSetSensor@oversampling+1)& (0+255),b
  7172  00081E  69D8               	setf	MTouchSetSensor@oversampling& (0+255),b
  7173  000820  69DA               	setf	MTouchSetSensor@chargeDelay& (0+255),b
  7174  000822  0E00               	movlw	0
  7175  000824  EC9E  F004         	call	_MTouchSetSensor
  7176                           
  7177                           ; BSR set to: 0
  7178                           ;misc.c: 81: MTouchSetSensor(1, &TRISA, &LATA, 1, 1, -1, -1, -1);
  7179  000828  D878               	call	PL2	;call to abstracted procedure
  7180  00082A  0E01               	movlw	1
  7181  00082C  6FD4               	movwf	MTouchSetSensor@ioBitNumber& (0+255),b
  7182  00082E  D87F               	call	PL12	;call to abstracted procedure
  7183  000830  0E01               	movlw	1
  7184  000832  EC9E  F004         	call	_MTouchSetSensor
  7185                           
  7186                           ; BSR set to: 0
  7187                           ;misc.c: 82: MTouchSetSensor(2, &TRISA, &LATA, 2, 2, -1, -1, -1);
  7188  000836  D871               	call	PL2	;call to abstracted procedure
  7189  000838  0E02               	movlw	2
  7190  00083A  6FD4               	movwf	MTouchSetSensor@ioBitNumber& (0+255),b
  7191  00083C  D878               	call	PL12	;call to abstracted procedure
  7192  00083E  0E02               	movlw	2
  7193  000840  EC9E  F004         	call	_MTouchSetSensor
  7194                           
  7195                           ; BSR set to: 0
  7196                           ;misc.c: 83: MTouchSetSensor(3, &TRISA, &LATA, 3, 3, -1, -1, -1);
  7197  000844  D86A               	call	PL2	;call to abstracted procedure
  7198  000846  0E03               	movlw	3
  7199  000848  6FD4               	movwf	MTouchSetSensor@ioBitNumber& (0+255),b
  7200  00084A  D871               	call	PL12	;call to abstracted procedure
  7201  00084C  0E03               	movlw	3
  7202  00084E  EC9E  F004         	call	_MTouchSetSensor
  7203                           
  7204                           ; BSR set to: 0
  7205                           ;misc.c: 84: MTouchSetSensor(4, &TRISA, &LATA, 5, 4, -1, -1, -1);
  7206  000852  D863               	call	PL2	;call to abstracted procedure
  7207  000854  0E05               	movlw	5
  7208  000856  6FD4               	movwf	MTouchSetSensor@ioBitNumber& (0+255),b
  7209  000858  0E04               	movlw	4
  7210  00085A  D869               	call	PL12	;call to abstracted procedure
  7211  00085C  0E04               	movlw	4
  7212  00085E  EC9E  F004         	call	_MTouchSetSensor
  7213                           
  7214                           ; BSR set to: 0
  7215                           ;misc.c: 85: MTouchSetSensor(5, &TRISE, &LATE, 0, 5, -1, -1, -1);
  7216  000862  0E0F               	movlw	15	;volatile
  7217  000864  0101               	movlb	1	; () banked
  7218  000866  6FD1               	movwf	(MTouchSetSensor@tris+1)& (0+255),b
  7219  000868  0E96               	movlw	150	;volatile
  7220  00086A  6FD0               	movwf	MTouchSetSensor@tris& (0+255),b
  7221  00086C  0E0F               	movlw	15	;volatile
  7222  00086E  6FD3               	movwf	(MTouchSetSensor@lat+1)& (0+255),b
  7223  000870  0E8D               	movlw	141	;volatile
  7224  000872  6FD2               	movwf	MTouchSetSensor@lat& (0+255),b
  7225  000874  6BD4               	clrf	MTouchSetSensor@ioBitNumber& (0+255),b
  7226  000876  0E05               	movlw	5
  7227  000878  D85A               	call	PL12	;call to abstracted procedure
  7228  00087A  0E05               	movlw	5
  7229  00087C  EC9E  F004         	call	_MTouchSetSensor
  7230                           
  7231                           ; BSR set to: 0
  7232                           ;misc.c: 119: MTouchSetButton(KEY_M, 0, DECODE_ONE_EVENT);
  7233  000880  6BD1               	clrf	MTouchSetButton@sensorNumber& (0+255),b
  7234  000882  0E10               	movlw	16
  7235  000884  6FD2               	movwf	MTouchSetButton@decode& (0+255),b
  7236  000886  0E02               	movlw	2
  7237  000888  ECA9  F007         	call	_MTouchSetButton
  7238                           
  7239                           ; BSR set to: 0
  7240                           ;misc.c: 120: MTouchSetButton(KEY_T1, 1, DECODE_ONE_EVENT);
  7241  00088C  0E01               	movlw	1
  7242  00088E  6FD1               	movwf	MTouchSetButton@sensorNumber& (0+255),b
  7243  000890  0E10               	movlw	16
  7244  000892  6FD2               	movwf	MTouchSetButton@decode& (0+255),b
  7245  000894  0E04               	movlw	4
  7246  000896  ECA9  F007         	call	_MTouchSetButton
  7247                           
  7248                           ; BSR set to: 0
  7249                           ;misc.c: 121: MTouchSetButton(KEY_MENU, 2, DECODE_ONE_EVENT);
  7250  00089A  0E02               	movlw	2
  7251  00089C  6FD1               	movwf	MTouchSetButton@sensorNumber& (0+255),b
  7252  00089E  0E10               	movlw	16
  7253  0008A0  6FD2               	movwf	MTouchSetButton@decode& (0+255),b
  7254  0008A2  0E00               	movlw	0
  7255  0008A4  ECA9  F007         	call	_MTouchSetButton
  7256                           
  7257                           ; BSR set to: 0
  7258                           ;misc.c: 122: MTouchSetButton(KEY_T2, 3, DECODE_ONE_EVENT);
  7259  0008A8  0E03               	movlw	3
  7260  0008AA  6FD1               	movwf	MTouchSetButton@sensorNumber& (0+255),b
  7261  0008AC  0E10               	movlw	16
  7262  0008AE  6FD2               	movwf	MTouchSetButton@decode& (0+255),b
  7263  0008B0  0E05               	movlw	5
  7264  0008B2  ECA9  F007         	call	_MTouchSetButton
  7265                           
  7266                           ; BSR set to: 0
  7267                           ;misc.c: 123: MTouchSetButton(KEY_START, 4, DECODE_ONE_EVENT);
  7268  0008B6  0E04               	movlw	4
  7269  0008B8  6FD1               	movwf	MTouchSetButton@sensorNumber& (0+255),b
  7270  0008BA  0E10               	movlw	16
  7271  0008BC  6FD2               	movwf	MTouchSetButton@decode& (0+255),b
  7272  0008BE  0E01               	movlw	1
  7273  0008C0  ECA9  F007         	call	_MTouchSetButton
  7274                           
  7275                           ; BSR set to: 0
  7276                           ;misc.c: 124: MTouchSetButton(KEY_P, 5, DECODE_ONE_EVENT);
  7277  0008C4  0E05               	movlw	5
  7278  0008C6  6FD1               	movwf	MTouchSetButton@sensorNumber& (0+255),b
  7279  0008C8  0E10               	movlw	16
  7280  0008CA  6FD2               	movwf	MTouchSetButton@decode& (0+255),b
  7281  0008CC  0E03               	movlw	3
  7282  0008CE  ECA9  F007         	call	_MTouchSetButton
  7283                           
  7284                           ; BSR set to: 0
  7285                           ;misc.c: 126: MTouchSetButton(KEY_MM, 0, DECODE_PRESS_REPEAT | DECODE_ONE_EVENT);
  7286  0008D2  6BD1               	clrf	MTouchSetButton@sensorNumber& (0+255),b
  7287  0008D4  0E18               	movlw	24
  7288  0008D6  6FD2               	movwf	MTouchSetButton@decode& (0+255),b
  7289  0008D8  0E06               	movlw	6
  7290  0008DA  ECA9  F007         	call	_MTouchSetButton
  7291                           
  7292                           ; BSR set to: 0
  7293                           ;misc.c: 127: MTouchSetButton(KEY_PP, 5, DECODE_PRESS_REPEAT | DECODE_ONE_EVENT);
  7294  0008DE  0E05               	movlw	5
  7295  0008E0  6FD1               	movwf	MTouchSetButton@sensorNumber& (0+255),b
  7296  0008E2  0E18               	movlw	24
  7297  0008E4  6FD2               	movwf	MTouchSetButton@decode& (0+255),b
  7298  0008E6  0E07               	movlw	7
  7299  0008E8  ECA9  F007         	call	_MTouchSetButton
  7300                           
  7301                           ; BSR set to: 0
  7302                           ;misc.c: 129: MTouchSetButton(KEY_TT1, 1, DECODE_PRESS_REPEAT);
  7303  0008EC  0E01               	movlw	1
  7304  0008EE  6FD1               	movwf	MTouchSetButton@sensorNumber& (0+255),b
  7305  0008F0  0E08               	movlw	8
  7306  0008F2  6FD2               	movwf	MTouchSetButton@decode& (0+255),b
  7307  0008F4  ECA9  F007         	call	_MTouchSetButton
  7308                           
  7309                           ; BSR set to: 0
  7310                           ;misc.c: 130: MTouchSetButton(KEY_TT2, 3, DECODE_PRESS_REPEAT);
  7311  0008F8  0E03               	movlw	3
  7312  0008FA  6FD1               	movwf	MTouchSetButton@sensorNumber& (0+255),b
  7313  0008FC  0E08               	movlw	8
  7314  0008FE  6FD2               	movwf	MTouchSetButton@decode& (0+255),b
  7315  000900  0E09               	movlw	9
  7316  000902  ECA9  F007         	call	_MTouchSetButton
  7317                           
  7318                           ; BSR set to: 0
  7319                           ;misc.c: 132: uart16_init();
  7320  000906  EC8C  F00B         	call	_uart16_init	;wreg free
  7321                           
  7322                           ; BSR set to: 0
  7323                           ;misc.c: 133: TRISCbits.TRISC6 = 0;
  7324  00090A  9C94               	bcf	3988,6,c	;volatile
  7325                           
  7326                           ; BSR set to: 0
  7327                           ;misc.c: 134: TRISCbits.TRISC7 = 1;
  7328  00090C  8E94               	bsf	3988,7,c	;volatile
  7329                           
  7330                           ; BSR set to: 0
  7331                           ;misc.c: 135: RCIP = 0;
  7332  00090E  9A9F               	bcf	3999,5,c	;volatile
  7333                           
  7334                           ; BSR set to: 0
  7335                           ;misc.c: 136: RCIE = 1;
  7336  000910  8A9D               	bsf	3997,5,c	;volatile
  7337                           
  7338                           ; BSR set to: 0
  7339                           ;misc.c: 139: TRISCbits.TRISC4 = 0;
  7340  000912  9894               	bcf	3988,4,c	;volatile
  7341                           
  7342                           ; BSR set to: 0
  7343                           ;misc.c: 140: LATCbits.LATC4 = 1;
  7344  000914  888B               	bsf	3979,4,c	;volatile
  7345                           
  7346                           ; BSR set to: 0
  7347                           ;misc.c: 143: INTCONbits.PEIE = 1;
  7348  000916  8CF2               	bsf	intcon,6,c	;volatile
  7349                           
  7350                           ; BSR set to: 0
  7351  000918  0012               	return	
  7352  00091A                     __end_of_InitializeSystem:
  7353                           	opt stack 0
  7354  00091A                     PL2:
  7355                           	opt stack 21
  7356  00091A  0E0F               	movlw	15	;volatile
  7357  00091C  0101               	movlb	1	; () banked
  7358  00091E  6FD1               	movwf	(MTouchSetSensor@tris+1)& (0+255),b
  7359  000920  0E92               	movlw	146	;volatile
  7360  000922  6FD0               	movwf	MTouchSetSensor@tris& (0+255),b
  7361  000924  0E0F               	movlw	15	;volatile
  7362  000926  6FD3               	movwf	(MTouchSetSensor@lat+1)& (0+255),b
  7363  000928  0E89               	movlw	137	;volatile
  7364  00092A  6FD2               	movwf	MTouchSetSensor@lat& (0+255),b
  7365  00092C  0C89               	retlw	137
  7366  00092E                     __end_ofPL2:
  7367                           	opt stack 0
  7368  00092E                     PL12:
  7369                           	opt stack 21
  7370  00092E  6FD5               	movwf	MTouchSetSensor@channelNumber& (0+255),b
  7371  000930  69D7               	setf	(MTouchSetSensor@threshold+1)& (0+255),b
  7372  000932  69D6               	setf	MTouchSetSensor@threshold& (0+255),b
  7373  000934  69D9               	setf	(MTouchSetSensor@oversampling+1)& (0+255),b
  7374  000936  69D8               	setf	MTouchSetSensor@oversampling& (0+255),b
  7375  000938  69DA               	setf	MTouchSetSensor@chargeDelay& (0+255),b
  7376  00093A  0012               	return	
  7377  00093C                     __end_ofPL12:
  7378                           	opt stack 0
  7379                           tblptru	equ	0xFF8
  7380                           tblptrh	equ	0xFF7
  7381                           tblptrl	equ	0xFF6
  7382                           tablat	equ	0xFF5
  7383                           prodh	equ	0xFF4
  7384                           prodl	equ	0xFF3
  7385                           intcon	equ	0xFF2
  7386                           postinc0	equ	0xFEE
  7387                           wreg	equ	0xFE8
  7388                           indf1	equ	0xFE7
  7389                           postinc1	equ	0xFE6
  7390                           postdec1	equ	0xFE5
  7391                           fsr1h	equ	0xFE2
  7392                           fsr1l	equ	0xFE1
  7393                           indf2	equ	0xFDF
  7394                           postinc2	equ	0xFDE
  7395                           postdec2	equ	0xFDD
  7396                           fsr2h	equ	0xFDA
  7397                           fsr2l	equ	0xFD9
  7398                           status	equ	0xFD8
  7399                           
  7400 ;; *************** function _uart16_init *****************
  7401 ;; Defined at:
  7402 ;;		line 27 in file "../lib/usart.c"
  7403 ;; Parameters:    Size  Location     Type
  7404 ;;		None
  7405 ;; Auto vars:     Size  Location     Type
  7406 ;;		None
  7407 ;; Return value:  Size  Location     Type
  7408 ;;		None               void
  7409 ;; Registers used:
  7410 ;;		wreg, status,2
  7411 ;; Tracked objects:
  7412 ;;		On entry : F/0
  7413 ;;		On exit  : F/0
  7414 ;;		Unchanged: F/0
  7415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7419 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7420 ;;Total ram usage:        0 bytes
  7421 ;; Hardware stack levels used:    1
  7422 ;; Hardware stack levels required when called:    8
  7423 ;; This function calls:
  7424 ;;		Nothing
  7425 ;; This function is called by:
  7426 ;;		_InitializeSystem
  7427 ;; This function uses a non-reentrant model
  7428 ;;
  7429                           
  7430                           	psect	text20
  7431  001718                     __ptext20:
  7432                           	opt stack 0
  7433  001718                     _uart16_init:
  7434                           	opt stack 21
  7435                           
  7436                           ; BSR set to: 0
  7437                           ;usart.c: 29: SPBRG = ((64000000ul)/(16UL * 19200))-1;
  7438                           
  7439                           ; BSR set to: 0
  7440                           ;incstack = 0
  7441  001718  0ECF               	movlw	207
  7442  00171A  6EAF               	movwf	4015,c	;volatile
  7443                           
  7444                           ; BSR set to: 0
  7445                           ;usart.c: 30: BRGH1 = 1;
  7446  00171C  84AC               	bsf	4012,2,c	;volatile
  7447                           
  7448                           ; BSR set to: 0
  7449                           ;usart.c: 34: BRG161 = 0;
  7450  00171E  96B8               	bcf	4024,3,c	;volatile
  7451                           
  7452                           ; BSR set to: 0
  7453                           ;usart.c: 37: SYNC1 = 0;
  7454  001720  98AC               	bcf	4012,4,c	;volatile
  7455                           
  7456                           ; BSR set to: 0
  7457                           ;usart.c: 38: SPEN1 = 1;
  7458  001722  8EAB               	bsf	4011,7,c	;volatile
  7459                           
  7460                           ; BSR set to: 0
  7461                           ;usart.c: 39: CREN1 = 1;
  7462  001724  88AB               	bsf	4011,4,c	;volatile
  7463                           
  7464                           ; BSR set to: 0
  7465                           ;usart.c: 40: SREN1 = 0;
  7466  001726  9AAB               	bcf	4011,5,c	;volatile
  7467                           
  7468                           ; BSR set to: 0
  7469                           ;usart.c: 41: TXIE = 0;
  7470  001728  989D               	bcf	3997,4,c	;volatile
  7471                           
  7472                           ; BSR set to: 0
  7473                           ;usart.c: 42: RCIE = 0;
  7474  00172A  9A9D               	bcf	3997,5,c	;volatile
  7475                           
  7476                           ; BSR set to: 0
  7477                           ;usart.c: 43: TX91 = 0;
  7478  00172C  9CAC               	bcf	4012,6,c	;volatile
  7479                           
  7480                           ; BSR set to: 0
  7481                           ;usart.c: 44: RX91 = 0;
  7482  00172E  9CAB               	bcf	4011,6,c	;volatile
  7483                           
  7484                           ; BSR set to: 0
  7485                           ;usart.c: 45: TXEN1 = 0;
  7486  001730  9AAC               	bcf	4012,5,c	;volatile
  7487                           
  7488                           ; BSR set to: 0
  7489                           ;usart.c: 46: TXEN1 = 1;
  7490  001732  8AAC               	bsf	4012,5,c	;volatile
  7491                           
  7492                           ; BSR set to: 0
  7493  001734  0CCF               	retlw	207
  7494  001736                     __end_of_uart16_init:
  7495                           	opt stack 0
  7496                           tblptru	equ	0xFF8
  7497                           tblptrh	equ	0xFF7
  7498                           tblptrl	equ	0xFF6
  7499                           tablat	equ	0xFF5
  7500                           prodh	equ	0xFF4
  7501                           prodl	equ	0xFF3
  7502                           intcon	equ	0xFF2
  7503                           postinc0	equ	0xFEE
  7504                           wreg	equ	0xFE8
  7505                           indf1	equ	0xFE7
  7506                           postinc1	equ	0xFE6
  7507                           postdec1	equ	0xFE5
  7508                           fsr1h	equ	0xFE2
  7509                           fsr1l	equ	0xFE1
  7510                           indf2	equ	0xFDF
  7511                           postinc2	equ	0xFDE
  7512                           postdec2	equ	0xFDD
  7513                           fsr2h	equ	0xFDA
  7514                           fsr2l	equ	0xFD9
  7515                           status	equ	0xFD8
  7516                           
  7517 ;; *************** function _MTouchSetSensor *****************
  7518 ;; Defined at:
  7519 ;;		line 78 in file "../lib/mTouchCap/mTouchSensor.c"
  7520 ;; Parameters:    Size  Location     Type
  7521 ;;  sensorNumber    1    wreg     unsigned char 
  7522 ;;  tris            2    0[BANK1 ] PTR volatile unsigned ch
  7523 ;;		 -> TRISE(1), TRISA(1), 
  7524 ;;  lat             2    2[BANK1 ] PTR volatile unsigned ch
  7525 ;;		 -> LATE(1), LATA(1), 
  7526 ;;  ioBitNumber     1    4[BANK1 ] unsigned char 
  7527 ;;  channelNumbe    1    5[BANK1 ] unsigned char 
  7528 ;;  threshold       2    6[BANK1 ] short 
  7529 ;;  oversampling    2    8[BANK1 ] short 
  7530 ;;  chargeDelay     1   10[BANK1 ] char 
  7531 ;; Auto vars:     Size  Location     Type
  7532 ;;  sensorNumber    1   41[BANK0 ] unsigned char 
  7533 ;;  pSensor         2   42[BANK0 ] PTR struct tag_SENSOR
  7534 ;;		 -> sensors(192), 
  7535 ;; Return value:  Size  Location     Type
  7536 ;;		None               void
  7537 ;; Registers used:
  7538 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7539 ;; Tracked objects:
  7540 ;;		On entry : F/1
  7541 ;;		On exit  : F/0
  7542 ;;		Unchanged: 0/0
  7543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7544 ;;      Params:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7545 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7546 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7547 ;;      Totals:         0       5      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7548 ;;Total ram usage:       16 bytes
  7549 ;; Hardware stack levels used:    1
  7550 ;; Hardware stack levels required when called:    8
  7551 ;; This function calls:
  7552 ;;		Nothing
  7553 ;; This function is called by:
  7554 ;;		_InitializeSystem
  7555 ;; This function uses a non-reentrant model
  7556 ;;
  7557                           
  7558                           	psect	text21
  7559  00093C                     __ptext21:
  7560                           	opt stack 0
  7561  00093C                     _MTouchSetSensor:
  7562                           	opt stack 21
  7563                           
  7564                           ; BSR set to: 0
  7565                           ;incstack = 0
  7566                           ;MTouchSetSensor@sensorNumber stored from wreg
  7567  00093C  0100               	movlb	0	; () banked
  7568  00093E  6FD3               	movwf	MTouchSetSensor@sensorNumber& (0+255),b
  7569                           
  7570                           ; BSR set to: 0
  7571                           ;mTouchSensor.c: 81: SENSOR* pSensor;
  7572                           ;mTouchSensor.c: 83: pSensor = (SENSOR*)sensors + sensorNumber;
  7573  000940  51D3               	movf	MTouchSetSensor@sensorNumber& (0+255),w,b
  7574  000942  0D20               	mullw	32
  7575  000944  0E00               	movlw	low _sensors	;volatile
  7576  000946  24F3               	addwf	prodl,w,c
  7577  000948  6FD4               	movwf	MTouchSetSensor@pSensor& (0+255),b
  7578  00094A  0E02               	movlw	high _sensors	;volatile
  7579  00094C  20F4               	addwfc	prodh,w,c
  7580  00094E  6FD5               	movwf	(MTouchSetSensor@pSensor+1)& (0+255),b
  7581                           
  7582                           ; BSR set to: 0
  7583                           ;mTouchSensor.c: 85: if(threshold > 0)
  7584  000950  0101               	movlb	1	; () banked
  7585  000952  51D7               	movf	(MTouchSetSensor@threshold+1)& (0+255),w,b
  7586  000954  0A80               	xorlw	128
  7587  000956  0F80               	addlw	-128
  7588  000958  0E01               	movlw	1
  7589  00095A  B4D8               	btfsc	status,2,c
  7590  00095C  5DD6               	subwf	MTouchSetSensor@threshold& (0+255),w,b
  7591  00095E  E319               	bnc	l4825
  7592                           
  7593                           ; BSR set to: 1
  7594                           ;mTouchSensor.c: 86: {
  7595                           ;mTouchSensor.c: 87: pSensor->pressThreshold = threshold;
  7596  000960  D8A6               	call	PL42	;call to abstracted procedure
  7597  000962  0101               	movlb	1	; () banked
  7598  000964  C1D6  FFDE         	movff	MTouchSetSensor@threshold,postinc2
  7599  000968  C1D7  FFDD         	movff	MTouchSetSensor@threshold+1,postdec2
  7600                           
  7601                           ;mTouchSensor.c: 88: pSensor->releaseThreshold = threshold>>1;
  7602  00096C  35D7               	rlcf	(MTouchSetSensor@threshold+1)& (0+255),w,b
  7603  00096E  31D7               	rrcf	(MTouchSetSensor@threshold+1)& (0+255),w,b
  7604  000970  0100               	movlb	0	; () banked
  7605  000972  6FD2               	movwf	(??_MTouchSetSensor+1)& (0+255),b
  7606  000974  0101               	movlb	1	; () banked
  7607  000976  31D6               	rrcf	MTouchSetSensor@threshold& (0+255),w,b
  7608  000978  0100               	movlb	0	; () banked
  7609  00097A  6FD1               	movwf	??_MTouchSetSensor& (0+255),b
  7610  00097C  EE20 F014          	lfsr	2,20
  7611  000980  51D4               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  7612  000982  26D9               	addwf	fsr2l,f,c
  7613  000984  51D5               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  7614  000986  22DA               	addwfc	fsr2h,f,c
  7615  000988  C0D1  FFDE         	movff	??_MTouchSetSensor,postinc2
  7616  00098C  C0D2  FFDD         	movff	??_MTouchSetSensor+1,postdec2
  7617                           
  7618                           ;mTouchSensor.c: 89: }else{
  7619  000990  D00D               	goto	l78
  7620  000992                     l4825:
  7621                           
  7622                           ; BSR set to: 1
  7623                           ;mTouchSensor.c: 90: pSensor->pressThreshold = 150;
  7624  000992  D88D               	call	PL42	;call to abstracted procedure
  7625  000994  0E96               	movlw	150
  7626  000996  6EDE               	movwf	postinc2,c
  7627  000998  6ADD               	clrf	postdec2,c
  7628                           
  7629                           ;mTouchSensor.c: 91: pSensor->releaseThreshold = 150>>1;
  7630  00099A  EE20 F014          	lfsr	2,20
  7631  00099E  51D4               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  7632  0009A0  26D9               	addwf	fsr2l,f,c
  7633  0009A2  51D5               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  7634  0009A4  22DA               	addwfc	fsr2h,f,c
  7635  0009A6  0E4B               	movlw	75
  7636  0009A8  6EDE               	movwf	postinc2,c
  7637  0009AA  6ADD               	clrf	postdec2,c
  7638  0009AC                     l78:
  7639                           
  7640                           ; BSR set to: 0
  7641                           ;mTouchSensor.c: 92: }
  7642                           ;mTouchSensor.c: 93: pSensor->trisReg = tris;
  7643  0009AC  EE20 F008          	lfsr	2,8
  7644  0009B0  51D4               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  7645  0009B2  26D9               	addwf	fsr2l,f,c
  7646  0009B4  51D5               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  7647  0009B6  22DA               	addwfc	fsr2h,f,c
  7648  0009B8  C1D0  FFDE         	movff	MTouchSetSensor@tris,postinc2
  7649  0009BC  C1D1  FFDD         	movff	MTouchSetSensor@tris+1,postdec2
  7650                           
  7651                           ;mTouchSensor.c: 94: pSensor->latReg = lat;
  7652  0009C0  0100               	movlb	0	; () banked
  7653  0009C2  EE20 F00A          	lfsr	2,10
  7654  0009C6  51D4               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  7655  0009C8  26D9               	addwf	fsr2l,f,c
  7656  0009CA  51D5               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  7657  0009CC  22DA               	addwfc	fsr2h,f,c
  7658  0009CE  C1D2  FFDE         	movff	MTouchSetSensor@lat,postinc2
  7659  0009D2  C1D3  FFDD         	movff	MTouchSetSensor@lat+1,postdec2
  7660                           
  7661                           ;mTouchSensor.c: 95: pSensor->ioMask = 1<<ioBitNumber;
  7662  0009D6  EE20 F01D          	lfsr	2,29
  7663  0009DA  51D4               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  7664  0009DC  26D9               	addwf	fsr2l,f,c
  7665  0009DE  51D5               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  7666  0009E0  22DA               	addwfc	fsr2h,f,c
  7667  0009E2  C1D4  F0D1         	movff	MTouchSetSensor@ioBitNumber,??_MTouchSetSensor
  7668  0009E6  0E01               	movlw	1
  7669  0009E8  6FD2               	movwf	(??_MTouchSetSensor+1)& (0+255),b
  7670  0009EA  2BD1               	incf	??_MTouchSetSensor& (0+255),f,b
  7671  0009EC  D002               	goto	u3404
  7672  0009EE                     u3405:
  7673  0009EE  90D8               	bcf	status,0,c
  7674  0009F0  37D2               	rlcf	(??_MTouchSetSensor+1)& (0+255),f,b
  7675  0009F2                     u3404:
  7676  0009F2  2FD1               	decfsz	??_MTouchSetSensor& (0+255),f,b
  7677  0009F4  D7FC               	goto	u3405
  7678  0009F6  51D2               	movf	(??_MTouchSetSensor+1)& (0+255),w,b
  7679  0009F8  6EDF               	movwf	indf2,c
  7680                           
  7681                           ;mTouchSensor.c: 96: pSensor->channelNumber = channelNumber;
  7682  0009FA  EE20 F01E          	lfsr	2,30
  7683  0009FE  51D4               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  7684  000A00  26D9               	addwf	fsr2l,f,c
  7685  000A02  51D5               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  7686  000A04  22DA               	addwfc	fsr2h,f,c
  7687  000A06  C1D5  FFDF         	movff	MTouchSetSensor@channelNumber,indf2
  7688                           
  7689                           ;mTouchSensor.c: 97: pSensor->state = SENSOR_INITIALIZING;
  7690  000A0A  0100               	movlb	0	; () banked
  7691  000A0C  EE20 F01C          	lfsr	2,28
  7692  000A10  51D4               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  7693  000A12  26D9               	addwf	fsr2l,f,c
  7694  000A14  51D5               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  7695  000A16  22DA               	addwfc	fsr2h,f,c
  7696  000A18  6ADF               	clrf	indf2,c
  7697                           
  7698                           ;mTouchSensor.c: 98: pSensor->debounceCount = 8 + 50;
  7699  000A1A  EE20 F01A          	lfsr	2,26
  7700  000A1E  51D4               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  7701  000A20  26D9               	addwf	fsr2l,f,c
  7702  000A22  51D5               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  7703  000A24  22DA               	addwfc	fsr2h,f,c
  7704  000A26  0E3A               	movlw	58
  7705  000A28  6EDE               	movwf	postinc2,c
  7706  000A2A  6ADD               	clrf	postdec2,c
  7707                           
  7708                           ; BSR set to: 0
  7709                           ;mTouchSensor.c: 101: if(oversampling > 0)
  7710  000A2C  0101               	movlb	1	; () banked
  7711  000A2E  51D9               	movf	(MTouchSetSensor@oversampling+1)& (0+255),w,b
  7712  000A30  0A80               	xorlw	128
  7713  000A32  0F80               	addlw	-128
  7714  000A34  0E01               	movlw	1
  7715  000A36  B4D8               	btfsc	status,2,c
  7716  000A38  5DD8               	subwf	MTouchSetSensor@oversampling& (0+255),w,b
  7717  000A3A  E306               	bnc	l4831
  7718                           
  7719                           ; BSR set to: 1
  7720                           ;mTouchSensor.c: 102: {
  7721                           ;mTouchSensor.c: 103: pSensor->samplesNumber = oversampling;
  7722  000A3C  D830               	call	PL20	;call to abstracted procedure
  7723  000A3E  C1D8  FFDE         	movff	MTouchSetSensor@oversampling,postinc2
  7724  000A42  C1D9  FFDD         	movff	MTouchSetSensor@oversampling+1,postdec2
  7725                           
  7726                           ;mTouchSensor.c: 104: }else{
  7727  000A46  D004               	goto	l4833
  7728  000A48                     l4831:
  7729                           
  7730                           ; BSR set to: 1
  7731                           ;mTouchSensor.c: 105: pSensor->samplesNumber = 32;
  7732  000A48  D82A               	call	PL20	;call to abstracted procedure
  7733  000A4A  0E20               	movlw	32
  7734  000A4C  6EDE               	movwf	postinc2,c
  7735  000A4E  6ADD               	clrf	postdec2,c
  7736  000A50                     l4833:
  7737                           
  7738                           ;mTouchSensor.c: 106: }
  7739                           ;mTouchSensor.c: 108: pSensor->sampleCounter = pSensor->samplesNumber;
  7740  000A50  D826               	call	PL20	;call to abstracted procedure
  7741  000A52  EE10 F00E          	lfsr	1,14
  7742  000A56  51D4               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  7743  000A58  26E1               	addwf	fsr1l,f,c
  7744  000A5A  51D5               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  7745  000A5C  22E2               	addwfc	fsr1h,f,c
  7746  000A5E  CFDE FFE6          	movff	postinc2,postinc1
  7747  000A62  CFDD FFE5          	movff	postdec2,postdec1
  7748                           
  7749                           ; BSR set to: 0
  7750                           ;mTouchSensor.c: 119: pSensor->delta = 0;
  7751  000A66  EE20 F018          	lfsr	2,24
  7752  000A6A  51D4               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  7753  000A6C  26D9               	addwf	fsr2l,f,c
  7754  000A6E  51D5               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  7755  000A70  22DA               	addwfc	fsr2h,f,c
  7756  000A72  6ADE               	clrf	postinc2,c
  7757  000A74  6ADD               	clrf	postdec2,c
  7758                           
  7759                           ; BSR set to: 0
  7760                           ;mTouchSensor.c: 120: pSensor->oversampleFilterData = 0;
  7761  000A76  EE20 F004          	lfsr	2,4
  7762  000A7A  51D4               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  7763  000A7C  26D9               	addwf	fsr2l,f,c
  7764  000A7E  51D5               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  7765  000A80  22DA               	addwfc	fsr2h,f,c
  7766  000A82  6ADE               	clrf	postinc2,c
  7767  000A84  6ADE               	clrf	postinc2,c
  7768  000A86  6ADE               	clrf	postinc2,c
  7769  000A88  6ADD               	clrf	postdec2,c
  7770                           
  7771                           ; BSR set to: 0
  7772                           ;mTouchSensor.c: 121: pSensor->decimateFilterData = 0;
  7773  000A8A  EE20 F00C          	lfsr	2,12
  7774  000A8E  51D4               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  7775  000A90  26D9               	addwf	fsr2l,f,c
  7776  000A92  51D5               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  7777  000A94  22DA               	addwfc	fsr2h,f,c
  7778  000A96  0E00               	movlw	0
  7779  000A98  6EDE               	movwf	postinc2,c
  7780  000A9A  6EDD               	movwf	postdec2,c
  7781                           
  7782                           ; BSR set to: 0
  7783  000A9C  0C00               	retlw	0
  7784  000A9E                     __end_of_MTouchSetSensor:
  7785                           	opt stack 0
  7786  000A9E                     PL20:
  7787                           	opt stack 21
  7788  000A9E  0100               	movlb	0	; () banked
  7789  000AA0  EE20 F010          	lfsr	2,16
  7790  000AA4  51D4               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  7791  000AA6  26D9               	addwf	fsr2l,f,c
  7792  000AA8  51D5               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  7793  000AAA  22DA               	addwfc	fsr2h,f,c
  7794  000AAC  0012               	return	
  7795  000AAE                     __end_ofPL20:
  7796                           	opt stack 0
  7797  000AAE                     PL42:
  7798                           	opt stack 21
  7799  000AAE  0100               	movlb	0	; () banked
  7800  000AB0  EE20 F012          	lfsr	2,18
  7801  000AB4  51D4               	movf	MTouchSetSensor@pSensor& (0+255),w,b
  7802  000AB6  26D9               	addwf	fsr2l,f,c
  7803  000AB8  51D5               	movf	(MTouchSetSensor@pSensor+1)& (0+255),w,b
  7804  000ABA  22DA               	addwfc	fsr2h,f,c
  7805  000ABC  0012               	return	
  7806  000ABE                     __end_ofPL42:
  7807                           	opt stack 0
  7808                           tblptru	equ	0xFF8
  7809                           tblptrh	equ	0xFF7
  7810                           tblptrl	equ	0xFF6
  7811                           tablat	equ	0xFF5
  7812                           prodh	equ	0xFF4
  7813                           prodl	equ	0xFF3
  7814                           intcon	equ	0xFF2
  7815                           postinc0	equ	0xFEE
  7816                           wreg	equ	0xFE8
  7817                           indf1	equ	0xFE7
  7818                           postinc1	equ	0xFE6
  7819                           postdec1	equ	0xFE5
  7820                           fsr1h	equ	0xFE2
  7821                           fsr1l	equ	0xFE1
  7822                           indf2	equ	0xFDF
  7823                           postinc2	equ	0xFDE
  7824                           postdec2	equ	0xFDD
  7825                           fsr2h	equ	0xFDA
  7826                           fsr2l	equ	0xFD9
  7827                           status	equ	0xFD8
  7828                           
  7829 ;; *************** function _MTouchSetButton *****************
  7830 ;; Defined at:
  7831 ;;		line 68 in file "../lib/mTouchCap/mTouchButton.c"
  7832 ;; Parameters:    Size  Location     Type
  7833 ;;  buttonNumber    1    wreg     unsigned char 
  7834 ;;  sensorNumber    1   39[BANK0 ] unsigned char 
  7835 ;;  decode          1   40[BANK0 ] unsigned char 
  7836 ;; Auto vars:     Size  Location     Type
  7837 ;;  buttonNumber    1   43[BANK0 ] unsigned char 
  7838 ;;  pButton         2   44[BANK0 ] PTR struct tag_MTOUCHBUT
  7839 ;;		 -> buttons(80), 
  7840 ;; Return value:  Size  Location     Type
  7841 ;;		None               void
  7842 ;; Registers used:
  7843 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7844 ;; Tracked objects:
  7845 ;;		On entry : F/0
  7846 ;;		On exit  : F/0
  7847 ;;		Unchanged: 0/0
  7848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7849 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7850 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7851 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7852 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7853 ;;Total ram usage:        7 bytes
  7854 ;; Hardware stack levels used:    1
  7855 ;; Hardware stack levels required when called:    8
  7856 ;; This function calls:
  7857 ;;		Nothing
  7858 ;; This function is called by:
  7859 ;;		_InitializeSystem
  7860 ;; This function uses a non-reentrant model
  7861 ;;
  7862                           
  7863                           	psect	text22
  7864  000F52                     __ptext22:
  7865                           	opt stack 0
  7866  000F52                     _MTouchSetButton:
  7867                           	opt stack 21
  7868                           
  7869                           ; BSR set to: 0
  7870                           ;incstack = 0
  7871                           ;MTouchSetButton@buttonNumber stored from wreg
  7872  000F52  6FD5               	movwf	MTouchSetButton@buttonNumber& (0+255),b
  7873                           
  7874                           ; BSR set to: 0
  7875                           ;mTouchButton.c: 69: MTOUCHBUTTON* pButton;
  7876                           ;mTouchButton.c: 71: pButton = (MTOUCHBUTTON*)buttons + buttonNumber;
  7877  000F54  51D5               	movf	MTouchSetButton@buttonNumber& (0+255),w,b
  7878  000F56  0D08               	mullw	8
  7879  000F58  0E80               	movlw	low _buttons
  7880  000F5A  24F3               	addwf	prodl,w,c
  7881  000F5C  0100               	movlb	0	; () banked
  7882  000F5E  6FD6               	movwf	MTouchSetButton@pButton& (0+255),b
  7883  000F60  0E01               	movlw	high _buttons
  7884  000F62  20F4               	addwfc	prodh,w,c
  7885  000F64  6FD7               	movwf	(MTouchSetButton@pButton+1)& (0+255),b
  7886                           
  7887                           ; BSR set to: 0
  7888                           ;mTouchButton.c: 73: pButton->state = CONTROL_RELEASED | CONTROL_IDLE;
  7889  000F66  C0D6  FFD9         	movff	MTouchSetButton@pButton,fsr2l
  7890  000F6A  C0D7  FFDA         	movff	MTouchSetButton@pButton+1,fsr2h
  7891  000F6E  0E82               	movlw	130
  7892  000F70  6EDF               	movwf	indf2,c
  7893                           
  7894                           ; BSR set to: 0
  7895                           ;mTouchButton.c: 74: pButton->curState = CONTROL_RELEASED;
  7896  000F72  EE20 F001          	lfsr	2,1
  7897  000F76  51D6               	movf	MTouchSetButton@pButton& (0+255),w,b
  7898  000F78  26D9               	addwf	fsr2l,f,c
  7899  000F7A  51D7               	movf	(MTouchSetButton@pButton+1)& (0+255),w,b
  7900  000F7C  22DA               	addwfc	fsr2h,f,c
  7901  000F7E  0E02               	movlw	2
  7902  000F80  6EDF               	movwf	indf2,c
  7903                           
  7904                           ; BSR set to: 0
  7905                           ;mTouchButton.c: 75: pButton->decode = decode;
  7906  000F82  EE20 F002          	lfsr	2,2
  7907  000F86  51D6               	movf	MTouchSetButton@pButton& (0+255),w,b
  7908  000F88  26D9               	addwf	fsr2l,f,c
  7909  000F8A  51D7               	movf	(MTouchSetButton@pButton+1)& (0+255),w,b
  7910  000F8C  22DA               	addwfc	fsr2h,f,c
  7911  000F8E  C0D2  FFDF         	movff	MTouchSetButton@decode,indf2
  7912                           
  7913                           ; BSR set to: 0
  7914                           ;mTouchButton.c: 76: pButton->pSensor = (SENSOR*)sensors + sensorNumber;
  7915  000F92  51D1               	movf	MTouchSetButton@sensorNumber& (0+255),w,b
  7916  000F94  0D20               	mullw	32
  7917  000F96  0E00               	movlw	low _sensors	;volatile
  7918  000F98  6FD3               	movwf	??_MTouchSetButton& (0+255),b
  7919  000F9A  0E02               	movlw	high _sensors	;volatile
  7920  000F9C  6FD4               	movwf	(??_MTouchSetButton+1)& (0+255),b
  7921  000F9E  50F3               	movf	prodl,w,c
  7922  000FA0  27D3               	addwf	??_MTouchSetButton& (0+255),f,b
  7923  000FA2  50F4               	movf	prodh,w,c
  7924  000FA4  23D4               	addwfc	(??_MTouchSetButton+1)& (0+255),f,b
  7925  000FA6  EE20 F004          	lfsr	2,4
  7926  000FAA  51D6               	movf	MTouchSetButton@pButton& (0+255),w,b
  7927  000FAC  26D9               	addwf	fsr2l,f,c
  7928  000FAE  51D7               	movf	(MTouchSetButton@pButton+1)& (0+255),w,b
  7929  000FB0  22DA               	addwfc	fsr2h,f,c
  7930  000FB2  C0D3  FFDE         	movff	??_MTouchSetButton,postinc2
  7931  000FB6  C0D4  FFDD         	movff	??_MTouchSetButton+1,postdec2
  7932                           
  7933                           ; BSR set to: 0
  7934                           ;mTouchButton.c: 77: pButton->pressCounter = 6400;
  7935  000FBA  EE20 F006          	lfsr	2,6
  7936  000FBE  51D6               	movf	MTouchSetButton@pButton& (0+255),w,b
  7937  000FC0  26D9               	addwf	fsr2l,f,c
  7938  000FC2  51D7               	movf	(MTouchSetButton@pButton+1)& (0+255),w,b
  7939  000FC4  22DA               	addwfc	fsr2h,f,c
  7940  000FC6  6ADE               	clrf	postinc2,c
  7941  000FC8  0E19               	movlw	25
  7942  000FCA  6EDD               	movwf	postdec2,c
  7943                           
  7944                           ; BSR set to: 0
  7945                           ;mTouchButton.c: 78: pButton->prevSensorState = SENSOR_RELEASED;
  7946  000FCC  EE20 F003          	lfsr	2,3
  7947  000FD0  51D6               	movf	MTouchSetButton@pButton& (0+255),w,b
  7948  000FD2  26D9               	addwf	fsr2l,f,c
  7949  000FD4  51D7               	movf	(MTouchSetButton@pButton+1)& (0+255),w,b
  7950  000FD6  22DA               	addwfc	fsr2h,f,c
  7951  000FD8  0E01               	movlw	1
  7952  000FDA  6EDF               	movwf	indf2,c
  7953                           
  7954                           ; BSR set to: 0
  7955  000FDC  0C01               	retlw	1
  7956  000FDE                     __end_of_MTouchSetButton:
  7957                           	opt stack 0
  7958                           tblptru	equ	0xFF8
  7959                           tblptrh	equ	0xFF7
  7960                           tblptrl	equ	0xFF6
  7961                           tablat	equ	0xFF5
  7962                           prodh	equ	0xFF4
  7963                           prodl	equ	0xFF3
  7964                           intcon	equ	0xFF2
  7965                           postinc0	equ	0xFEE
  7966                           wreg	equ	0xFE8
  7967                           indf1	equ	0xFE7
  7968                           postinc1	equ	0xFE6
  7969                           postdec1	equ	0xFE5
  7970                           fsr1h	equ	0xFE2
  7971                           fsr1l	equ	0xFE1
  7972                           indf2	equ	0xFDF
  7973                           postinc2	equ	0xFDE
  7974                           postdec2	equ	0xFDD
  7975                           fsr2h	equ	0xFDA
  7976                           fsr2l	equ	0xFD9
  7977                           status	equ	0xFD8
  7978                           
  7979 ;; *************** function _MTouchInit *****************
  7980 ;; Defined at:
  7981 ;;		line 125 in file "../lib/mTouchCap/mTouchSensor.c"
  7982 ;; Parameters:    Size  Location     Type
  7983 ;;		None
  7984 ;; Auto vars:     Size  Location     Type
  7985 ;;		None
  7986 ;; Return value:  Size  Location     Type
  7987 ;;		None               void
  7988 ;; Registers used:
  7989 ;;		wreg, status,2
  7990 ;; Tracked objects:
  7991 ;;		On entry : F/F
  7992 ;;		On exit  : F/F
  7993 ;;		Unchanged: E/0
  7994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7998 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7999 ;;Total ram usage:        0 bytes
  8000 ;; Hardware stack levels used:    1
  8001 ;; Hardware stack levels required when called:    8
  8002 ;; This function calls:
  8003 ;;		Nothing
  8004 ;; This function is called by:
  8005 ;;		_InitializeSystem
  8006 ;; This function uses a non-reentrant model
  8007 ;;
  8008                           
  8009                           	psect	text23
  8010  001736                     __ptext23:
  8011                           	opt stack 0
  8012  001736                     _MTouchInit:
  8013                           	opt stack 21
  8014                           
  8015                           ; BSR set to: 15
  8016                           ;mTouchSensor.c: 128: {ADCON0=0; ADCON1=0; ADCON2=0; ADCON2bits.ADFM=1; ADCON2bits.ACQT=
      +                          1; ADCON2bits.ADCS = 1; ADCON0bits.ADON = 1;};
  8017                           
  8018                           ; BSR set to: 0
  8019                           ;incstack = 0
  8020  001736  6AC2               	clrf	4034,c	;volatile
  8021  001738  6AC1               	clrf	4033,c	;volatile
  8022  00173A  6AC0               	clrf	4032,c	;volatile
  8023  00173C  8EC0               	bsf	4032,7,c	;volatile
  8024                           
  8025                           ; BSR set to: 15
  8026  00173E  50C0               	movf	4032,w,c	;volatile
  8027  001740  0BC7               	andlw	-57
  8028  001742  0908               	iorlw	8
  8029  001744  6EC0               	movwf	4032,c	;volatile
  8030  001746  50C0               	movf	4032,w,c	;volatile
  8031  001748  0BF8               	andlw	-8
  8032  00174A  0901               	iorlw	1
  8033  00174C  6EC0               	movwf	4032,c	;volatile
  8034                           
  8035                           ; BSR set to: 15
  8036  00174E  80C2               	bsf	4034,0,c	;volatile
  8037                           
  8038                           ; BSR set to: 15
  8039  001750  0012               	return	
  8040  001752                     __end_of_MTouchInit:
  8041                           	opt stack 0
  8042                           tblptru	equ	0xFF8
  8043                           tblptrh	equ	0xFF7
  8044                           tblptrl	equ	0xFF6
  8045                           tablat	equ	0xFF5
  8046                           prodh	equ	0xFF4
  8047                           prodl	equ	0xFF3
  8048                           intcon	equ	0xFF2
  8049                           postinc0	equ	0xFEE
  8050                           wreg	equ	0xFE8
  8051                           indf1	equ	0xFE7
  8052                           postinc1	equ	0xFE6
  8053                           postdec1	equ	0xFE5
  8054                           fsr1h	equ	0xFE2
  8055                           fsr1l	equ	0xFE1
  8056                           indf2	equ	0xFDF
  8057                           postinc2	equ	0xFDE
  8058                           postdec2	equ	0xFDD
  8059                           fsr2h	equ	0xFDA
  8060                           fsr2l	equ	0xFD9
  8061                           status	equ	0xFD8
  8062                           
  8063 ;; *************** function _InitMessages *****************
  8064 ;; Defined at:
  8065 ;;		line 20 in file "../lib/messages.c"
  8066 ;; Parameters:    Size  Location     Type
  8067 ;;		None
  8068 ;; Auto vars:     Size  Location     Type
  8069 ;;  i               1   39[BANK0 ] unsigned char 
  8070 ;; Return value:  Size  Location     Type
  8071 ;;		None               void
  8072 ;; Registers used:
  8073 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8074 ;; Tracked objects:
  8075 ;;		On entry : 0/0
  8076 ;;		On exit  : F/0
  8077 ;;		Unchanged: 0/0
  8078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8080 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8082 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8083 ;;Total ram usage:        1 bytes
  8084 ;; Hardware stack levels used:    1
  8085 ;; Hardware stack levels required when called:    8
  8086 ;; This function calls:
  8087 ;;		Nothing
  8088 ;; This function is called by:
  8089 ;;		_main
  8090 ;; This function uses a non-reentrant model
  8091 ;;
  8092                           
  8093                           	psect	text24
  8094  001536                     __ptext24:
  8095                           	opt stack 0
  8096  001536                     _InitMessages:
  8097                           	opt stack 22
  8098                           
  8099                           ;messages.c: 21: char i;
  8100                           ;messages.c: 23: for(i = 0; i < (10); i++){
  8101                           
  8102                           ; BSR set to: 15
  8103                           ;incstack = 0
  8104  001536  0100               	movlb	0	; () banked
  8105  001538  6BD1               	clrf	InitMessages@i& (0+255),b
  8106  00153A                     l3907:
  8107                           
  8108                           ; BSR set to: 0
  8109                           ;messages.c: 24: Messages[i] = MSG_PHASE_NONE;
  8110  00153A  51D1               	movf	InitMessages@i& (0+255),w,b
  8111  00153C  0F60               	addlw	low _Messages	;volatile
  8112  00153E  6ED9               	movwf	fsr2l,c
  8113  001540  6ADA               	clrf	fsr2h,c
  8114  001542  6ADF               	clrf	indf2,c
  8115                           
  8116                           ; BSR set to: 0
  8117  001544  2BD1               	incf	InitMessages@i& (0+255),f,b
  8118                           
  8119                           ; BSR set to: 0
  8120  001546  0E09               	movlw	9
  8121  001548  65D1               	cpfsgt	InitMessages@i& (0+255),b
  8122  00154A  D7F7               	goto	l3907
  8123                           
  8124                           ; BSR set to: 0
  8125                           ;messages.c: 28: }
  8126                           ;messages.c: 31: for(i = 0; i < 1; i++)
  8127  00154C  6BD1               	clrf	InitMessages@i& (0+255),b
  8128  00154E                     l3917:
  8129                           
  8130                           ; BSR set to: 0
  8131                           ;messages.c: 32: BroadcastMessages[i] = MSG_PHASE_NONE;
  8132  00154E  51D1               	movf	InitMessages@i& (0+255),w,b
  8133  001550  0F76               	addlw	low _BroadcastMessages	;volatile
  8134  001552  6ED9               	movwf	fsr2l,c
  8135  001554  6ADA               	clrf	fsr2h,c
  8136  001556  6ADF               	clrf	indf2,c
  8137                           
  8138                           ; BSR set to: 0
  8139  001558  2BD1               	incf	InitMessages@i& (0+255),f,b
  8140                           
  8141                           ; BSR set to: 0
  8142  00155A  51D1               	movf	InitMessages@i& (0+255),w,b
  8143  00155C  E0F8               	bz	l3917
  8144                           
  8145                           ; BSR set to: 0
  8146                           ;messages.c: 36: for(i = 0; i < 4; i++)
  8147  00155E  6BD1               	clrf	InitMessages@i& (0+255),b
  8148  001560                     l3927:
  8149                           
  8150                           ; BSR set to: 0
  8151                           ;messages.c: 37: BSem[i] = 0;
  8152  001560  51D1               	movf	InitMessages@i& (0+255),w,b
  8153  001562  0F6A               	addlw	low _BSem	;volatile
  8154  001564  6ED9               	movwf	fsr2l,c
  8155  001566  6ADA               	clrf	fsr2h,c
  8156  001568  6ADF               	clrf	indf2,c
  8157                           
  8158                           ; BSR set to: 0
  8159  00156A  2BD1               	incf	InitMessages@i& (0+255),f,b
  8160                           
  8161                           ; BSR set to: 0
  8162  00156C  0E03               	movlw	3
  8163  00156E  65D1               	cpfsgt	InitMessages@i& (0+255),b
  8164  001570  D7F7               	goto	l3927
  8165  001572  0C03               	retlw	3
  8166  001574                     __end_of_InitMessages:
  8167                           	opt stack 0
  8168                           tblptru	equ	0xFF8
  8169                           tblptrh	equ	0xFF7
  8170                           tblptrl	equ	0xFF6
  8171                           tablat	equ	0xFF5
  8172                           prodh	equ	0xFF4
  8173                           prodl	equ	0xFF3
  8174                           intcon	equ	0xFF2
  8175                           postinc0	equ	0xFEE
  8176                           wreg	equ	0xFE8
  8177                           indf1	equ	0xFE7
  8178                           postinc1	equ	0xFE6
  8179                           postdec1	equ	0xFE5
  8180                           fsr1h	equ	0xFE2
  8181                           fsr1l	equ	0xFE1
  8182                           indf2	equ	0xFDF
  8183                           postinc2	equ	0xFDE
  8184                           postdec2	equ	0xFDD
  8185                           fsr2h	equ	0xFDA
  8186                           fsr2l	equ	0xFD9
  8187                           status	equ	0xFD8
  8188                           
  8189 ;; *************** function _Beep *****************
  8190 ;; Defined at:
  8191 ;;		line 204 in file "../isr.c"
  8192 ;; Parameters:    Size  Location     Type
  8193 ;;  ms10            1    wreg     unsigned char 
  8194 ;; Auto vars:     Size  Location     Type
  8195 ;;  ms10            1   39[BANK0 ] unsigned char 
  8196 ;; Return value:  Size  Location     Type
  8197 ;;		None               void
  8198 ;; Registers used:
  8199 ;;		wreg, status,2, status,0, prodl, prodh
  8200 ;; Tracked objects:
  8201 ;;		On entry : 0/1
  8202 ;;		On exit  : F/0
  8203 ;;		Unchanged: 0/0
  8204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8206 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8208 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8209 ;;Total ram usage:        1 bytes
  8210 ;; Hardware stack levels used:    1
  8211 ;; Hardware stack levels required when called:    8
  8212 ;; This function calls:
  8213 ;;		Nothing
  8214 ;; This function is called by:
  8215 ;;		_main
  8216 ;; This function uses a non-reentrant model
  8217 ;;
  8218                           
  8219                           	psect	text25
  8220  001752                     __ptext25:
  8221                           	opt stack 0
  8222  001752                     _Beep:
  8223                           	opt stack 22
  8224                           
  8225                           ; BSR set to: 0
  8226                           ;incstack = 0
  8227                           ;Beep@ms10 stored from wreg
  8228  001752  0100               	movlb	0	; () banked
  8229  001754  6FD1               	movwf	Beep@ms10& (0+255),b
  8230                           
  8231                           ; BSR set to: 0
  8232                           ;isr.c: 206: TRISAbits.TRISA4 = 0;
  8233  001756  9892               	bcf	3986,4,c	;volatile
  8234                           
  8235                           ; BSR set to: 0
  8236                           ;isr.c: 210: beep_timer = ms10 * 40;
  8237  001758  51D1               	movf	Beep@ms10& (0+255),w,b
  8238  00175A  0D28               	mullw	40
  8239  00175C  CFF3 F070          	movff	prodl,_beep_timer	;volatile
  8240  001760  CFF4 F071          	movff	prodh,_beep_timer+1	;volatile
  8241                           
  8242                           ; BSR set to: 0
  8243                           ;isr.c: 211: beep_count = 1;
  8244  001764  0E01               	movlw	1
  8245  001766  6E3C               	movwf	_beep_count,c	;volatile
  8246                           
  8247                           ; BSR set to: 0
  8248  001768  0C01               	retlw	1
  8249  00176A                     __end_of_Beep:
  8250                           	opt stack 0
  8251                           tblptru	equ	0xFF8
  8252                           tblptrh	equ	0xFF7
  8253                           tblptrl	equ	0xFF6
  8254                           tablat	equ	0xFF5
  8255                           prodh	equ	0xFF4
  8256                           prodl	equ	0xFF3
  8257                           intcon	equ	0xFF2
  8258                           postinc0	equ	0xFEE
  8259                           wreg	equ	0xFE8
  8260                           indf1	equ	0xFE7
  8261                           postinc1	equ	0xFE6
  8262                           postdec1	equ	0xFE5
  8263                           fsr1h	equ	0xFE2
  8264                           fsr1l	equ	0xFE1
  8265                           indf2	equ	0xFDF
  8266                           postinc2	equ	0xFDE
  8267                           postdec2	equ	0xFDD
  8268                           fsr2h	equ	0xFDA
  8269                           fsr2l	equ	0xFD9
  8270                           status	equ	0xFD8
  8271                           
  8272 ;; *************** function _LO_ISR *****************
  8273 ;; Defined at:
  8274 ;;		line 89 in file "../isr.c"
  8275 ;; Parameters:    Size  Location     Type
  8276 ;;		None
  8277 ;; Auto vars:     Size  Location     Type
  8278 ;;  i               1   34[COMRAM] unsigned char 
  8279 ;;  lcData          1   33[COMRAM] unsigned char 
  8280 ;;  lcAdr           1   32[COMRAM] unsigned char 
  8281 ;; Return value:  Size  Location     Type
  8282 ;;		None               void
  8283 ;; Registers used:
  8284 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  8285 ;; Tracked objects:
  8286 ;;		On entry : 0/0
  8287 ;;		On exit  : 0/0
  8288 ;;		Unchanged: 0/0
  8289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8291 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8292 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8293 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8294 ;;Total ram usage:       17 bytes
  8295 ;; Hardware stack levels used:    1
  8296 ;; Hardware stack levels required when called:    7
  8297 ;; This function calls:
  8298 ;;		_BSemOn
  8299 ;;		_Busy_eep
  8300 ;;		_Read_b_eep
  8301 ;;		_SendMessage
  8302 ;;		_Write_b_eep
  8303 ;;		_crc_mb
  8304 ;;		_crc_mb_check
  8305 ;;		_putbyte
  8306 ;;		_set_ee_default
  8307 ;;		_timed_getc
  8308 ;; This function is called by:
  8309 ;;		Interrupt level 1
  8310 ;; This function uses a non-reentrant model
  8311 ;;
  8312                           
  8313                           	psect	intcodelo
  8314  000018                     __pintcodelo:
  8315                           	opt stack 0
  8316  000018                     _LO_ISR:
  8317                           	opt stack 15
  8318                           
  8319                           ; BSR set to: 0
  8320                           ;incstack = 0
  8321  000018  CFD8 F018          	movff	status,??_LO_ISR+5
  8322  00001C  CFE8 F019          	movff	wreg,??_LO_ISR+6
  8323  000020  CFE0 F01A          	movff	bsr,??_LO_ISR+7
  8324  000024  CFD9 F01B          	movff	fsr2l,??_LO_ISR+8
  8325  000028  CFDA F01C          	movff	fsr2h,??_LO_ISR+9
  8326  00002C  CFF6 F01D          	movff	tblptrl,??_LO_ISR+10
  8327  000030  CFF7 F01E          	movff	tblptrh,??_LO_ISR+11
  8328  000034  CFF8 F01F          	movff	tblptru,??_LO_ISR+12
  8329  000038  CFF5 F020          	movff	tablat,??_LO_ISR+13
  8330                           
  8331                           ;isr.c: 91: char i;
  8332                           ;isr.c: 92: char lcData, lcAdr;
  8333                           ;isr.c: 97: __nop();
  8334  00003C  F000               	nop	
  8335                           
  8336                           ;isr.c: 99: if(RCIF && RCIE) {
  8337  00003E  BA9E               	btfsc	3998,5,c	;volatile
  8338  000040  AA9D               	btfss	3997,5,c	;volatile
  8339  000042  D1C3               	goto	i1l480
  8340                           
  8341                           ;isr.c: 103: RxTxBuff[0] = timed_getc();
  8342  000044  EC55  F00B         	call	_timed_getc	;wreg free
  8343  000048  0101               	movlb	1	; () banked
  8344  00004A  6F00               	movwf	_RxTxBuff& (0+255),b
  8345                           
  8346                           ; BSR set to: 1
  8347                           ;isr.c: 106: if(RxTxBuff[0] == 0xEA) {
  8348  00004C  5100               	movf	_RxTxBuff& (0+255),w,b
  8349  00004E  0AEA               	xorlw	234
  8350  000050  B4D8               	btfsc	status,2,c
  8351                           
  8352                           ; BSR set to: 1
  8353  000052  00FF               	reset		;# 
  8354                           
  8355                           ;isr.c: 108: }
  8356                           ;isr.c: 110: if((RxTxBuff[0] != 0x55)) goto error;
  8357  000054  5100               	movf	_RxTxBuff& (0+255),w,b
  8358  000056  0A55               	xorlw	85
  8359  000058  B4D8               	btfsc	status,2,c
  8360                           
  8361                           ; BSR set to: 1
  8362                           ;isr.c: 111: if((FERR1) || (OERR1) || timeout_error) goto error;
  8363  00005A  B4AB               	btfsc	4011,2,c	;volatile
  8364  00005C  D1AD               	goto	i1l405
  8365                           
  8366                           ; BSR set to: 1
  8367  00005E  B2AB               	btfsc	4011,1,c	;volatile
  8368  000060  D1AB               	goto	i1l405
  8369                           
  8370                           ; BSR set to: 1
  8371  000062  503F               	movf	_timeout_error,w,c	;volatile
  8372  000064  E001 D1A8          	bnz	i1l405
  8373                           
  8374                           ; BSR set to: 1
  8375                           ;isr.c: 113: RxTxBuff[1] = timed_getc();
  8376  000068  EC55  F00B         	call	_timed_getc	;wreg free
  8377  00006C  0101               	movlb	1	; () banked
  8378  00006E  6F01               	movwf	(_RxTxBuff+1)& (0+255),b
  8379                           
  8380                           ; BSR set to: 1
  8381                           ;isr.c: 114: if((FERR1) || (OERR1) || timeout_error) goto error;
  8382  000070  A4AB               	btfss	4011,2,c	;volatile
  8383                           
  8384                           ; BSR set to: 1
  8385  000072  B2AB               	btfsc	4011,1,c	;volatile
  8386  000074  D1A1               	goto	i1l405
  8387                           
  8388                           ; BSR set to: 1
  8389  000076  503F               	movf	_timeout_error,w,c	;volatile
  8390  000078  E001 D19E          	bnz	i1l405
  8391  00007C  D18F               	goto	i1l4351
  8392  00007E                     i1l4149:
  8393                           
  8394                           ; BSR set to: 1
  8395                           ;isr.c: 124: RxTxBuff[2] = timed_getc();
  8396  00007E  EC55  F00B         	call	_timed_getc	;wreg free
  8397  000082  0101               	movlb	1	; () banked
  8398  000084  6F02               	movwf	(_RxTxBuff+2)& (0+255),b
  8399                           
  8400                           ; BSR set to: 1
  8401                           ;isr.c: 125: if((FERR1) || (OERR1) || timeout_error) goto error;
  8402  000086  A4AB               	btfss	4011,2,c	;volatile
  8403                           
  8404                           ; BSR set to: 1
  8405  000088  B2AB               	btfsc	4011,1,c	;volatile
  8406  00008A  D196               	goto	i1l405
  8407                           
  8408                           ; BSR set to: 1
  8409  00008C  503F               	movf	_timeout_error,w,c	;volatile
  8410  00008E  E001 D193          	bnz	i1l405
  8411                           
  8412                           ; BSR set to: 1
  8413                           ;isr.c: 127: RxTxBuff[3] = timed_getc();
  8414  000092  EC55  F00B         	call	_timed_getc	;wreg free
  8415  000096  0101               	movlb	1	; () banked
  8416  000098  6F03               	movwf	(_RxTxBuff+3)& (0+255),b
  8417                           
  8418                           ; BSR set to: 1
  8419                           ;isr.c: 128: if((FERR1) || (OERR1) || timeout_error) goto error;
  8420  00009A  A4AB               	btfss	4011,2,c	;volatile
  8421                           
  8422                           ; BSR set to: 1
  8423  00009C  B2AB               	btfsc	4011,1,c	;volatile
  8424  00009E  D18C               	goto	i1l405
  8425                           
  8426                           ; BSR set to: 1
  8427  0000A0  503F               	movf	_timeout_error,w,c	;volatile
  8428  0000A2  E001 D189          	bnz	i1l405
  8429                           
  8430                           ; BSR set to: 1
  8431                           ;isr.c: 130: for(i = 0; i < RxTxBuff[3] + 2; i++) {
  8432  0000A6  6A23               	clrf	LO_ISR@i,c
  8433  0000A8  D010               	goto	i1l4175
  8434  0000AA                     i1l4165:
  8435                           
  8436                           ; BSR set to: 1
  8437                           ;isr.c: 131: RxTxBuff[i + 4] = timed_getc();
  8438  0000AA  0E04               	movlw	low (_RxTxBuff+4)
  8439  0000AC  2423               	addwf	LO_ISR@i,w,c
  8440  0000AE  6ED9               	movwf	fsr2l,c
  8441  0000B0  6ADA               	clrf	fsr2h,c
  8442  0000B2  0E01               	movlw	high (_RxTxBuff+4)
  8443  0000B4  22DA               	addwfc	fsr2h,f,c
  8444  0000B6  EC55  F00B         	call	_timed_getc	;wreg free
  8445  0000BA  6EDF               	movwf	indf2,c
  8446                           
  8447                           ;isr.c: 132: if((FERR1) || (OERR1) || timeout_error) goto error;
  8448  0000BC  A4AB               	btfss	4011,2,c	;volatile
  8449  0000BE  B2AB               	btfsc	4011,1,c	;volatile
  8450  0000C0  D17B               	goto	i1l405
  8451  0000C2  503F               	movf	_timeout_error,w,c	;volatile
  8452  0000C4  E001 D178          	bnz	i1l405
  8453  0000C8  2A23               	incf	LO_ISR@i,f,c
  8454  0000CA                     i1l4175:
  8455  0000CA  0101               	movlb	1	; () banked
  8456  0000CC  5103               	movf	(_RxTxBuff+3)& (0+255),w,b
  8457  0000CE  6E13               	movwf	??_LO_ISR& (0+255),c
  8458  0000D0  6A14               	clrf	(??_LO_ISR+1)& (0+255),c
  8459  0000D2  0E02               	movlw	2
  8460  0000D4  2613               	addwf	??_LO_ISR,f,c
  8461  0000D6  0E00               	movlw	0
  8462  0000D8  2214               	addwfc	??_LO_ISR+1,f,c
  8463  0000DA  5023               	movf	LO_ISR@i,w,c
  8464  0000DC  6E15               	movwf	(??_LO_ISR+2)& (0+255),c
  8465  0000DE  6A16               	clrf	(??_LO_ISR+3)& (0+255),c
  8466  0000E0  5016               	movf	??_LO_ISR+3,w,c
  8467  0000E2  0A80               	xorlw	128
  8468  0000E4  6E17               	movwf	(??_LO_ISR+4)& (0+255),c
  8469  0000E6  5013               	movf	??_LO_ISR,w,c
  8470  0000E8  5C15               	subwf	??_LO_ISR+2,w,c
  8471  0000EA  5014               	movf	??_LO_ISR+1,w,c
  8472  0000EC  0A80               	xorlw	128
  8473  0000EE  5817               	subwfb	(??_LO_ISR+4)& (0+255),w,c
  8474  0000F0  E3DC               	bnc	i1l4165
  8475                           
  8476                           ; BSR set to: 1
  8477                           ;isr.c: 133: }
  8478                           ;isr.c: 134: if(crc_mb_check(RxTxBuff, RxTxBuff[3] + 4) == 0) break;
  8479  0000F2  0E01               	movlw	high _RxTxBuff
  8480  0000F4  6E0A               	movwf	crc_mb_check@buffer+1,c
  8481  0000F6  0E00               	movlw	low _RxTxBuff
  8482  0000F8  6E09               	movwf	crc_mb_check@buffer,c
  8483  0000FA  5103               	movf	(_RxTxBuff+3)& (0+255),w,b
  8484  0000FC  0F04               	addlw	4
  8485  0000FE  6E0B               	movwf	crc_mb_check@cnt,c
  8486  000100  EC62  F009         	call	_crc_mb_check	;wreg free
  8487  000104  0900               	iorlw	0
  8488  000106  E101 D157          	bz	i1l405
  8489                           
  8490                           ;isr.c: 136: for(i = 0; i < RxTxBuff[3]; i++) {
  8491  00010A  6A23               	clrf	LO_ISR@i,c
  8492  00010C  D014               	goto	i1l4187
  8493  00010E                     i1l4181:
  8494                           
  8495                           ; BSR set to: 1
  8496                           ;isr.c: 137: (Busy_eep(), Write_b_eep(RxTxBuff[2]++,RxTxBuff[4 + i]));
  8497  00010E  ECDA  F00B         	call	_Busy_eep	;wreg free
  8498  000112  0101               	movlb	1	; () banked
  8499  000114  EE21  F002         	lfsr	2,_RxTxBuff+2
  8500  000118  50DF               	movf	indf2,w,c
  8501  00011A  2ADF               	incf	indf2,f,c
  8502  00011C  6E01               	movwf	Write_b_eep@badd,c
  8503  00011E  6A02               	clrf	Write_b_eep@badd+1,c
  8504  000120  0E04               	movlw	low (_RxTxBuff+4)
  8505  000122  2423               	addwf	LO_ISR@i,w,c
  8506  000124  6ED9               	movwf	fsr2l,c
  8507  000126  6ADA               	clrf	fsr2h,c
  8508  000128  0E01               	movlw	high (_RxTxBuff+4)
  8509  00012A  22DA               	addwfc	fsr2h,f,c
  8510  00012C  50DF               	movf	indf2,w,c
  8511  00012E  6E03               	movwf	Write_b_eep@bdat,c
  8512  000130  EC79  F00A         	call	_Write_b_eep	;wreg free
  8513  000134  2A23               	incf	LO_ISR@i,f,c
  8514  000136                     i1l4187:
  8515  000136  0101               	movlb	1	; () banked
  8516  000138  5103               	movf	(_RxTxBuff+3)& (0+255),w,b
  8517  00013A  5C23               	subwf	LO_ISR@i,w,c
  8518  00013C  E3E8               	bnc	i1l4181
  8519                           
  8520                           ; BSR set to: 1
  8521                           ;isr.c: 138: }
  8522                           ;isr.c: 139: crc_mb(RxTxBuff, (0+2)); for(i = 0; i < ((0) + 4); i ++) {putbyte(RxTxBuff[
      +                          i]);};
  8523  00013E  0E01               	movlw	high _RxTxBuff
  8524  000140  6E0A               	movwf	crc_mb@buffer+1,c
  8525  000142  0E00               	movlw	low _RxTxBuff
  8526  000144  6E09               	movwf	crc_mb@buffer,c
  8527  000146  0E02               	movlw	2
  8528  000148  6E0B               	movwf	crc_mb@count,c
  8529  00014A  ECBA  F009         	call	_crc_mb	;wreg free
  8530  00014E  6A23               	clrf	LO_ISR@i,c
  8531  000150                     i1l4197:
  8532  000150  0101               	movlb	1	; () banked
  8533  000152  0E00               	movlw	low _RxTxBuff
  8534  000154  2423               	addwf	LO_ISR@i,w,c
  8535  000156  6ED9               	movwf	fsr2l,c
  8536  000158  6ADA               	clrf	fsr2h,c
  8537  00015A  0E01               	movlw	high _RxTxBuff
  8538  00015C  22DA               	addwfc	fsr2h,f,c
  8539  00015E  50DF               	movf	indf2,w,c
  8540  000160  ECD4  F00B         	call	_putbyte
  8541                           
  8542                           ; BSR set to: 1
  8543  000164  2A23               	incf	LO_ISR@i,f,c
  8544                           
  8545                           ; BSR set to: 1
  8546  000166  0E03               	movlw	3
  8547  000168  6423               	cpfsgt	LO_ISR@i,c
  8548  00016A  D7F2               	goto	i1l4197
  8549  00016C  D125               	goto	i1l405
  8550  00016E                     i1l4203:
  8551                           
  8552                           ; BSR set to: 1
  8553                           ;isr.c: 144: for(i = 2; i < ((2) + 4); i ++) {RxTxBuff[i] = timed_getc();if((FERR1) || (
      +                          OERR1) || timeout_error) goto error;}if(crc_mb_check(RxTxBuff, (2) + 2) == 0) break;
  8554  00016E  0E02               	movlw	2
  8555  000170  6E23               	movwf	LO_ISR@i,c
  8556  000172                     i1l4209:
  8557  000172  0101               	movlb	1	; () banked
  8558  000174  0E00               	movlw	low _RxTxBuff
  8559  000176  2423               	addwf	LO_ISR@i,w,c
  8560  000178  6ED9               	movwf	fsr2l,c
  8561  00017A  6ADA               	clrf	fsr2h,c
  8562  00017C  0E01               	movlw	high _RxTxBuff
  8563  00017E  22DA               	addwfc	fsr2h,f,c
  8564  000180  EC55  F00B         	call	_timed_getc	;wreg free
  8565  000184  6EDF               	movwf	indf2,c
  8566  000186  A4AB               	btfss	4011,2,c	;volatile
  8567  000188  B2AB               	btfsc	4011,1,c	;volatile
  8568  00018A  D116               	goto	i1l405
  8569  00018C  503F               	movf	_timeout_error,w,c	;volatile
  8570  00018E  E001 D113          	bnz	i1l405
  8571  000192  2A23               	incf	LO_ISR@i,f,c
  8572  000194  0E05               	movlw	5
  8573  000196  6423               	cpfsgt	LO_ISR@i,c
  8574  000198  D7EC               	goto	i1l4209
  8575  00019A  0101               	movlb	1	; () banked
  8576  00019C  0E01               	movlw	high _RxTxBuff
  8577  00019E  6E0A               	movwf	crc_mb_check@buffer+1,c
  8578  0001A0  0E00               	movlw	low _RxTxBuff
  8579  0001A2  6E09               	movwf	crc_mb_check@buffer,c
  8580  0001A4  0E04               	movlw	4
  8581  0001A6  6E0B               	movwf	crc_mb_check@cnt,c
  8582  0001A8  EC62  F009         	call	_crc_mb_check	;wreg free
  8583  0001AC  0900               	iorlw	0
  8584  0001AE  E101 D103          	bz	i1l405
  8585                           
  8586                           ;isr.c: 145: lcAdr = RxTxBuff[2];
  8587  0001B2  C102  F021         	movff	_RxTxBuff+2,LO_ISR@lcAdr
  8588                           
  8589                           ;isr.c: 146: lcData = RxTxBuff[3];
  8590  0001B6  C103  F022         	movff	_RxTxBuff+3,LO_ISR@lcData
  8591                           
  8592                           ;isr.c: 147: for(i = 0; i < lcData; i++) {
  8593  0001BA  6A23               	clrf	LO_ISR@i,c
  8594  0001BC  D00F               	goto	i1l4231
  8595  0001BE                     i1l4225:
  8596                           
  8597                           ;isr.c: 148: RxTxBuff[2 + i] = Read_b_eep(lcAdr++);
  8598  0001BE  0101               	movlb	1	; () banked
  8599  0001C0  0E02               	movlw	low (_RxTxBuff+2)
  8600  0001C2  2423               	addwf	LO_ISR@i,w,c
  8601  0001C4  6ED9               	movwf	fsr2l,c
  8602  0001C6  6ADA               	clrf	fsr2h,c
  8603  0001C8  0E01               	movlw	high (_RxTxBuff+2)
  8604  0001CA  22DA               	addwfc	fsr2h,f,c
  8605  0001CC  C021  F001         	movff	LO_ISR@lcAdr,Read_b_eep@badd
  8606  0001D0  6A02               	clrf	Read_b_eep@badd+1,c
  8607  0001D2  EC7B  F00B         	call	_Read_b_eep	;wreg free
  8608  0001D6  6EDF               	movwf	indf2,c
  8609  0001D8  2A21               	incf	LO_ISR@lcAdr,f,c
  8610  0001DA  2A23               	incf	LO_ISR@i,f,c
  8611  0001DC                     i1l4231:
  8612  0001DC  5022               	movf	LO_ISR@lcData,w,c
  8613  0001DE  5C23               	subwf	LO_ISR@i,w,c
  8614  0001E0  E3EE               	bnc	i1l4225
  8615                           
  8616                           ;isr.c: 149: }
  8617                           ;isr.c: 150: crc_mb(RxTxBuff, (lcData+2)); for(i = 0; i < ((lcData) + 4); i ++) {putbyte
      +                          (RxTxBuff[i]);};
  8618  0001E2  0101               	movlb	1	; () banked
  8619  0001E4  0E01               	movlw	high _RxTxBuff
  8620  0001E6  6E0A               	movwf	crc_mb@buffer+1,c
  8621  0001E8  0E00               	movlw	low _RxTxBuff
  8622  0001EA  6E09               	movwf	crc_mb@buffer,c
  8623  0001EC  5022               	movf	LO_ISR@lcData,w,c
  8624  0001EE  0F02               	addlw	2
  8625  0001F0  6E0B               	movwf	crc_mb@count,c
  8626  0001F2  ECBA  F009         	call	_crc_mb	;wreg free
  8627  0001F6  6A23               	clrf	LO_ISR@i,c
  8628  0001F8  D00B               	goto	i1l4241
  8629  0001FA                     i1l4237:
  8630  0001FA  0101               	movlb	1	; () banked
  8631  0001FC  0E00               	movlw	low _RxTxBuff
  8632  0001FE  2423               	addwf	LO_ISR@i,w,c
  8633  000200  6ED9               	movwf	fsr2l,c
  8634  000202  6ADA               	clrf	fsr2h,c
  8635  000204  0E01               	movlw	high _RxTxBuff
  8636  000206  22DA               	addwfc	fsr2h,f,c
  8637  000208  50DF               	movf	indf2,w,c
  8638  00020A  ECD4  F00B         	call	_putbyte
  8639                           
  8640                           ; BSR set to: 1
  8641  00020E  2A23               	incf	LO_ISR@i,f,c
  8642  000210                     i1l4241:
  8643  000210  5022               	movf	LO_ISR@lcData,w,c
  8644  000212  6E13               	movwf	??_LO_ISR& (0+255),c
  8645  000214  6A14               	clrf	(??_LO_ISR+1)& (0+255),c
  8646  000216  0E04               	movlw	4
  8647  000218  2613               	addwf	??_LO_ISR,f,c
  8648  00021A  0E00               	movlw	0
  8649  00021C  2214               	addwfc	??_LO_ISR+1,f,c
  8650  00021E  5023               	movf	LO_ISR@i,w,c
  8651  000220  6E15               	movwf	(??_LO_ISR+2)& (0+255),c
  8652  000222  6A16               	clrf	(??_LO_ISR+3)& (0+255),c
  8653  000224  5016               	movf	??_LO_ISR+3,w,c
  8654  000226  0A80               	xorlw	128
  8655  000228  6E17               	movwf	(??_LO_ISR+4)& (0+255),c
  8656  00022A  5013               	movf	??_LO_ISR,w,c
  8657  00022C  5C15               	subwf	??_LO_ISR+2,w,c
  8658  00022E  5014               	movf	??_LO_ISR+1,w,c
  8659  000230  0A80               	xorlw	128
  8660  000232  5817               	subwfb	(??_LO_ISR+4)& (0+255),w,c
  8661  000234  E301 D0C0          	bc	i1l405
  8662  000238  D7E0               	goto	i1l4237
  8663  00023A                     i1l4243:
  8664                           
  8665                           ; BSR set to: 1
  8666                           ;isr.c: 154: for(i = 2; i < ((1) + 4); i ++) {RxTxBuff[i] = timed_getc();if((FERR1) || (
      +                          OERR1) || timeout_error) goto error;}if(crc_mb_check(RxTxBuff, (1) + 2) == 0) break;
  8667  00023A  0E02               	movlw	2
  8668  00023C  6E23               	movwf	LO_ISR@i,c
  8669  00023E                     i1l4249:
  8670  00023E  0101               	movlb	1	; () banked
  8671  000240  0E00               	movlw	low _RxTxBuff
  8672  000242  2423               	addwf	LO_ISR@i,w,c
  8673  000244  6ED9               	movwf	fsr2l,c
  8674  000246  6ADA               	clrf	fsr2h,c
  8675  000248  0E01               	movlw	high _RxTxBuff
  8676  00024A  22DA               	addwfc	fsr2h,f,c
  8677  00024C  EC55  F00B         	call	_timed_getc	;wreg free
  8678  000250  6EDF               	movwf	indf2,c
  8679  000252  A4AB               	btfss	4011,2,c	;volatile
  8680  000254  B2AB               	btfsc	4011,1,c	;volatile
  8681  000256  D0B0               	goto	i1l405
  8682  000258  503F               	movf	_timeout_error,w,c	;volatile
  8683  00025A  E001 D0AD          	bnz	i1l405
  8684  00025E  2A23               	incf	LO_ISR@i,f,c
  8685  000260  0E04               	movlw	4
  8686  000262  6423               	cpfsgt	LO_ISR@i,c
  8687  000264  D7EC               	goto	i1l4249
  8688  000266  0101               	movlb	1	; () banked
  8689  000268  0E01               	movlw	high _RxTxBuff
  8690  00026A  6E0A               	movwf	crc_mb_check@buffer+1,c
  8691  00026C  0E00               	movlw	low _RxTxBuff
  8692  00026E  6E09               	movwf	crc_mb_check@buffer,c
  8693  000270  0E03               	movlw	3
  8694  000272  6E0B               	movwf	crc_mb_check@cnt,c
  8695  000274  EC62  F009         	call	_crc_mb_check	;wreg free
  8696  000278  0900               	iorlw	0
  8697  00027A  E101 D09D          	bz	i1l405
  8698                           
  8699                           ;isr.c: 155: SendMessage(USB_FLASH_SEND_CMD);
  8700  00027E  0E05               	movlw	5
  8701  000280  ECB5  F00B         	call	_SendMessage
  8702                           
  8703                           ;isr.c: 157: crc_mb(RxTxBuff, (0+2)); for(i = 0; i < ((0) + 4); i ++) {putbyte(RxTxBuff[
      +                          i]);};
  8704  000284  0101               	movlb	1	; () banked
  8705  000286  0E01               	movlw	high _RxTxBuff
  8706  000288  6E0A               	movwf	crc_mb@buffer+1,c
  8707  00028A  0E00               	movlw	low _RxTxBuff
  8708  00028C  6E09               	movwf	crc_mb@buffer,c
  8709  00028E  0E02               	movlw	2
  8710  000290  6E0B               	movwf	crc_mb@count,c
  8711  000292  ECBA  F009         	call	_crc_mb	;wreg free
  8712  000296  6A23               	clrf	LO_ISR@i,c
  8713  000298                     i1l4273:
  8714  000298  0101               	movlb	1	; () banked
  8715  00029A  0E00               	movlw	low _RxTxBuff
  8716  00029C  2423               	addwf	LO_ISR@i,w,c
  8717  00029E  6ED9               	movwf	fsr2l,c
  8718  0002A0  6ADA               	clrf	fsr2h,c
  8719  0002A2  0E01               	movlw	high _RxTxBuff
  8720  0002A4  22DA               	addwfc	fsr2h,f,c
  8721  0002A6  50DF               	movf	indf2,w,c
  8722  0002A8  ECD4  F00B         	call	_putbyte
  8723                           
  8724                           ; BSR set to: 1
  8725  0002AC  2A23               	incf	LO_ISR@i,f,c
  8726                           
  8727                           ; BSR set to: 1
  8728  0002AE  0E03               	movlw	3
  8729  0002B0  6423               	cpfsgt	LO_ISR@i,c
  8730  0002B2  D7F2               	goto	i1l4273
  8731  0002B4  D081               	goto	i1l405
  8732  0002B6                     i1l4279:
  8733                           
  8734                           ; BSR set to: 1
  8735                           ;isr.c: 162: for(i = 2; i < ((0) + 4); i ++) {RxTxBuff[i] = timed_getc();if((FERR1) || (
      +                          OERR1) || timeout_error) goto error;}if(crc_mb_check(RxTxBuff, (0) + 2) == 0) break;
  8736  0002B6  0E02               	movlw	2
  8737  0002B8  6E23               	movwf	LO_ISR@i,c
  8738  0002BA                     i1l4285:
  8739  0002BA  0101               	movlb	1	; () banked
  8740  0002BC  0E00               	movlw	low _RxTxBuff
  8741  0002BE  2423               	addwf	LO_ISR@i,w,c
  8742  0002C0  6ED9               	movwf	fsr2l,c
  8743  0002C2  6ADA               	clrf	fsr2h,c
  8744  0002C4  0E01               	movlw	high _RxTxBuff
  8745  0002C6  22DA               	addwfc	fsr2h,f,c
  8746  0002C8  EC55  F00B         	call	_timed_getc	;wreg free
  8747  0002CC  6EDF               	movwf	indf2,c
  8748  0002CE  A4AB               	btfss	4011,2,c	;volatile
  8749  0002D0  B2AB               	btfsc	4011,1,c	;volatile
  8750  0002D2  D072               	goto	i1l405
  8751  0002D4  503F               	movf	_timeout_error,w,c	;volatile
  8752  0002D6  E170               	bnz	i1l405
  8753  0002D8  2A23               	incf	LO_ISR@i,f,c
  8754  0002DA  0E03               	movlw	3
  8755  0002DC  6423               	cpfsgt	LO_ISR@i,c
  8756  0002DE  D7ED               	goto	i1l4285
  8757  0002E0  0101               	movlb	1	; () banked
  8758  0002E2  0E01               	movlw	high _RxTxBuff
  8759  0002E4  6E0A               	movwf	crc_mb_check@buffer+1,c
  8760  0002E6  0E00               	movlw	low _RxTxBuff
  8761  0002E8  6E09               	movwf	crc_mb_check@buffer,c
  8762  0002EA  0E02               	movlw	2
  8763  0002EC  6E0B               	movwf	crc_mb_check@cnt,c
  8764  0002EE  EC62  F009         	call	_crc_mb_check	;wreg free
  8765  0002F2  0900               	iorlw	0
  8766  0002F4  E061               	bz	i1l405
  8767                           
  8768                           ;isr.c: 163: set_ee_default();
  8769  0002F6  EC8F  F009         	call	_set_ee_default	;wreg free
  8770                           
  8771                           ;isr.c: 164: crc_mb(RxTxBuff, (0+2)); for(i = 0; i < ((0) + 4); i ++) {putbyte(RxTxBuff[
      +                          i]);};
  8772  0002FA  0101               	movlb	1	; () banked
  8773  0002FC  0E01               	movlw	high _RxTxBuff
  8774  0002FE  6E0A               	movwf	crc_mb@buffer+1,c
  8775  000300  0E00               	movlw	low _RxTxBuff
  8776  000302  6E09               	movwf	crc_mb@buffer,c
  8777  000304  0E02               	movlw	2
  8778  000306  6E0B               	movwf	crc_mb@count,c
  8779  000308  ECBA  F009         	call	_crc_mb	;wreg free
  8780  00030C  6A23               	clrf	LO_ISR@i,c
  8781  00030E                     i1l4311:
  8782  00030E  0101               	movlb	1	; () banked
  8783  000310  0E00               	movlw	low _RxTxBuff
  8784  000312  2423               	addwf	LO_ISR@i,w,c
  8785  000314  6ED9               	movwf	fsr2l,c
  8786  000316  6ADA               	clrf	fsr2h,c
  8787  000318  0E01               	movlw	high _RxTxBuff
  8788  00031A  22DA               	addwfc	fsr2h,f,c
  8789  00031C  50DF               	movf	indf2,w,c
  8790  00031E  ECD4  F00B         	call	_putbyte
  8791                           
  8792                           ; BSR set to: 1
  8793  000322  2A23               	incf	LO_ISR@i,f,c
  8794                           
  8795                           ; BSR set to: 1
  8796  000324  0E03               	movlw	3
  8797  000326  6423               	cpfsgt	LO_ISR@i,c
  8798  000328  D7F2               	goto	i1l4311
  8799  00032A  D046               	goto	i1l405
  8800  00032C                     i1l4317:
  8801                           
  8802                           ; BSR set to: 1
  8803                           ;isr.c: 169: for(i = 2; i < ((1) + 4); i ++) {RxTxBuff[i] = timed_getc();if((FERR1) || (
      +                          OERR1) || timeout_error) goto error;}if(crc_mb_check(RxTxBuff, (1) + 2) == 0) break;
  8804  00032C  0E02               	movlw	2
  8805  00032E  6E23               	movwf	LO_ISR@i,c
  8806  000330                     i1l4323:
  8807  000330  0101               	movlb	1	; () banked
  8808  000332  0E00               	movlw	low _RxTxBuff
  8809  000334  2423               	addwf	LO_ISR@i,w,c
  8810  000336  6ED9               	movwf	fsr2l,c
  8811  000338  6ADA               	clrf	fsr2h,c
  8812  00033A  0E01               	movlw	high _RxTxBuff
  8813  00033C  22DA               	addwfc	fsr2h,f,c
  8814  00033E  EC55  F00B         	call	_timed_getc	;wreg free
  8815  000342  6EDF               	movwf	indf2,c
  8816  000344  A4AB               	btfss	4011,2,c	;volatile
  8817  000346  B2AB               	btfsc	4011,1,c	;volatile
  8818  000348  D037               	goto	i1l405
  8819  00034A  503F               	movf	_timeout_error,w,c	;volatile
  8820  00034C  E135               	bnz	i1l405
  8821  00034E  2A23               	incf	LO_ISR@i,f,c
  8822  000350  0E04               	movlw	4
  8823  000352  6423               	cpfsgt	LO_ISR@i,c
  8824  000354  D7ED               	goto	i1l4323
  8825  000356  0101               	movlb	1	; () banked
  8826  000358  0E01               	movlw	high _RxTxBuff
  8827  00035A  6E0A               	movwf	crc_mb_check@buffer+1,c
  8828  00035C  0E00               	movlw	low _RxTxBuff
  8829  00035E  6E09               	movwf	crc_mb_check@buffer,c
  8830  000360  0E03               	movlw	3
  8831  000362  6E0B               	movwf	crc_mb_check@cnt,c
  8832  000364  EC62  F009         	call	_crc_mb_check	;wreg free
  8833  000368  0900               	iorlw	0
  8834  00036A  E026               	bz	i1l405
  8835  00036C  D00C               	goto	i1l4347
  8836  00036E                     i1l4339:
  8837                           
  8838                           ; BSR set to: 1
  8839                           ;isr.c: 174: BSemOn(SEM_RX_DONE);
  8840  00036E  0E01               	movlw	1
  8841  000370  ECBE  F00B         	call	_BSemOn
  8842                           
  8843                           ;isr.c: 175: break;
  8844  000374  D010               	goto	i1l474
  8845  000376                     i1l4341:
  8846                           
  8847                           ; BSR set to: 1
  8848                           ;isr.c: 177: BSemOn(SEM_WR_DONE);
  8849  000376  0E02               	movlw	2
  8850  000378  ECBE  F00B         	call	_BSemOn
  8851                           
  8852                           ;isr.c: 178: break;
  8853  00037C  D00C               	goto	i1l474
  8854  00037E                     i1l4343:
  8855                           
  8856                           ; BSR set to: 1
  8857                           ;isr.c: 180: BSemOn(SEM_WR_ERR);
  8858  00037E  0E03               	movlw	3
  8859  000380  ECBE  F00B         	call	_BSemOn
  8860                           
  8861                           ;isr.c: 181: break;
  8862  000384  D008               	goto	i1l474
  8863  000386                     i1l4347:
  8864  000386  0101               	movlb	1	; () banked
  8865  000388  5102               	movf	(_RxTxBuff+2)& (0+255),w,b
  8866                           
  8867                           ; Switch size 1, requested type "space"
  8868                           ; Number of cases is 3, Range of values is 1 to 3
  8869                           ; switch strategies available:
  8870                           ; Name         Instructions Cycles
  8871                           ; simple_byte           10     6 (average)
  8872                           ;	Chosen strategy is simple_byte
  8873  00038A  0A01               	xorlw	1	; case 1
  8874  00038C  E0F0               	bz	i1l4339
  8875  00038E  0A03               	xorlw	3	; case 2
  8876  000390  E0F2               	bz	i1l4341
  8877  000392  0A01               	xorlw	1	; case 3
  8878  000394  E0F4               	bz	i1l4343
  8879  000396                     i1l474:
  8880                           
  8881                           ;isr.c: 186: __nop();
  8882  000396  F000               	nop	
  8883                           
  8884                           ;isr.c: 187: __nop();
  8885  000398  F000               	nop	
  8886                           
  8887                           ;isr.c: 188: break;
  8888  00039A  D00E               	goto	i1l405
  8889  00039C                     i1l4351:
  8890                           
  8891                           ; BSR set to: 1
  8892  00039C  5101               	movf	(_RxTxBuff+1)& (0+255),w,b
  8893                           
  8894                           ; Switch size 1, requested type "space"
  8895                           ; Number of cases is 5, Range of values is 8 to 16
  8896                           ; switch strategies available:
  8897                           ; Name         Instructions Cycles
  8898                           ; simple_byte           16     9 (average)
  8899                           ;	Chosen strategy is simple_byte
  8900  00039E  0A08               	xorlw	8	; case 8
  8901  0003A0  E101 D66D          	bz	i1l4149
  8902  0003A4  0A01               	xorlw	1	; case 9
  8903  0003A6  E101 D6E2          	bz	i1l4203
  8904  0003AA  0A03               	xorlw	3	; case 10
  8905  0003AC  E101 D745          	bz	i1l4243
  8906  0003B0  0A01               	xorlw	1	; case 11
  8907  0003B2  E081               	bz	i1l4279
  8908  0003B4  0A1B               	xorlw	27	; case 16
  8909  0003B6  E0BA               	bz	i1l4317
  8910  0003B8                     i1l405:
  8911                           
  8912                           ;isr.c: 194: if(RCIF) dummy = RCREG;
  8913  0003B8  BA9E               	btfsc	3998,5,c	;volatile
  8914  0003BA  CFAE F03E          	movff	4014,_dummy	;volatile
  8915                           
  8916                           ;isr.c: 195: if(RCIF) dummy = RCREG;
  8917  0003BE  BA9E               	btfsc	3998,5,c	;volatile
  8918  0003C0  CFAE F03E          	movff	4014,_dummy	;volatile
  8919                           
  8920                           ;isr.c: 196: CREN1 = 0;
  8921  0003C4  98AB               	bcf	4011,4,c	;volatile
  8922                           
  8923                           ;isr.c: 197: __nop();
  8924  0003C6  F000               	nop	
  8925                           
  8926                           ;isr.c: 198: CREN1 = 1;
  8927  0003C8  88AB               	bsf	4011,4,c	;volatile
  8928  0003CA                     i1l480:
  8929  0003CA  C020  FFF5         	movff	??_LO_ISR+13,tablat
  8930  0003CE  C01F  FFF8         	movff	??_LO_ISR+12,tblptru
  8931  0003D2  C01E  FFF7         	movff	??_LO_ISR+11,tblptrh
  8932  0003D6  C01D  FFF6         	movff	??_LO_ISR+10,tblptrl
  8933  0003DA  C01C  FFDA         	movff	??_LO_ISR+9,fsr2h
  8934  0003DE  C01B  FFD9         	movff	??_LO_ISR+8,fsr2l
  8935  0003E2  C01A  FFE0         	movff	??_LO_ISR+7,bsr
  8936  0003E6  C019  FFE8         	movff	??_LO_ISR+6,wreg
  8937  0003EA  C018  FFD8         	movff	??_LO_ISR+5,status
  8938  0003EE  0010               	retfie	
  8939  0003F0                     __end_of_LO_ISR:
  8940                           	opt stack 0
  8941                           tblptru	equ	0xFF8
  8942                           tblptrh	equ	0xFF7
  8943                           tblptrl	equ	0xFF6
  8944                           tablat	equ	0xFF5
  8945                           prodh	equ	0xFF4
  8946                           prodl	equ	0xFF3
  8947                           intcon	equ	0xFF2
  8948                           postinc0	equ	0xFEE
  8949                           wreg	equ	0xFE8
  8950                           indf1	equ	0xFE7
  8951                           postinc1	equ	0xFE6
  8952                           postdec1	equ	0xFE5
  8953                           fsr1h	equ	0xFE2
  8954                           fsr1l	equ	0xFE1
  8955                           bsr	equ	0xFE0
  8956                           indf2	equ	0xFDF
  8957                           postinc2	equ	0xFDE
  8958                           postdec2	equ	0xFDD
  8959                           fsr2h	equ	0xFDA
  8960                           fsr2l	equ	0xFD9
  8961                           status	equ	0xFD8
  8962                           
  8963 ;; *************** function _timed_getc *****************
  8964 ;; Defined at:
  8965 ;;		line 97 in file "../lib/usart.c"
  8966 ;; Parameters:    Size  Location     Type
  8967 ;;		None
  8968 ;; Auto vars:     Size  Location     Type
  8969 ;;  timeout         2    0[COMRAM] unsigned short 
  8970 ;; Return value:  Size  Location     Type
  8971 ;;                  1    wreg      unsigned char 
  8972 ;; Registers used:
  8973 ;;		wreg, status,2, status,0, cstack
  8974 ;; Tracked objects:
  8975 ;;		On entry : 0/0
  8976 ;;		On exit  : 0/0
  8977 ;;		Unchanged: 0/0
  8978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8980 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8982 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8983 ;;Total ram usage:        2 bytes
  8984 ;; Hardware stack levels used:    1
  8985 ;; Hardware stack levels required when called:    5
  8986 ;; This function calls:
  8987 ;;		_getbyte
  8988 ;; This function is called by:
  8989 ;;		_LO_ISR
  8990 ;; This function uses a non-reentrant model
  8991 ;;
  8992                           
  8993                           	psect	text27
  8994  0016AA                     __ptext27:
  8995                           	opt stack 0
  8996  0016AA                     _timed_getc:
  8997                           	opt stack 16
  8998                           
  8999                           ;usart.c: 98: WORD timeout;
  9000                           ;usart.c: 100: timeout_error = 0;
  9001                           
  9002                           ;incstack = 0
  9003  0016AA  6A3F               	clrf	_timeout_error,c	;volatile
  9004                           
  9005                           ;usart.c: 101: timeout = 0;
  9006  0016AC  6A01               	clrf	timed_getc@timeout,c
  9007  0016AE  6A02               	clrf	timed_getc@timeout+1,c
  9008  0016B0                     i1l222:
  9009  0016B0  F000               	nop	
  9010  0016B2  BA9E               	btfsc	3998,5,c	;volatile
  9011  0016B4  D007               	goto	i1l225
  9012  0016B6  4A01               	infsnz	timed_getc@timeout,f,c
  9013  0016B8  2A02               	incf	timed_getc@timeout+1,f,c
  9014  0016BA  0E10               	movlw	16
  9015  0016BC  5C01               	subwf	timed_getc@timeout& (0+255),w,c
  9016  0016BE  0E27               	movlw	39
  9017  0016C0  5802               	subwfb	(timed_getc@timeout+1)& (0+255),w,c
  9018  0016C2  E3F6               	bnc	i1l222
  9019  0016C4                     i1l225:
  9020                           
  9021                           ;usart.c: 105: if (RCIF) {
  9022  0016C4  BA9E               	btfsc	3998,5,c	;volatile
  9023                           
  9024                           ;usart.c: 106: return (getbyte());
  9025  0016C6  EFD0  F00B         	goto	i1l211	;wreg free
  9026                           
  9027                           ;usart.c: 108: timeout_error = 1;
  9028  0016CA  0E01               	movlw	1
  9029  0016CC  6E3F               	movwf	_timeout_error,c	;volatile
  9030                           
  9031                           ;usart.c: 109: return (0);
  9032  0016CE  0C00               	retlw	0
  9033  0016D0                     __end_of_timed_getc:
  9034                           	opt stack 0
  9035                           tblptru	equ	0xFF8
  9036                           tblptrh	equ	0xFF7
  9037                           tblptrl	equ	0xFF6
  9038                           tablat	equ	0xFF5
  9039                           prodh	equ	0xFF4
  9040                           prodl	equ	0xFF3
  9041                           intcon	equ	0xFF2
  9042                           postinc0	equ	0xFEE
  9043                           wreg	equ	0xFE8
  9044                           indf1	equ	0xFE7
  9045                           postinc1	equ	0xFE6
  9046                           postdec1	equ	0xFE5
  9047                           fsr1h	equ	0xFE2
  9048                           fsr1l	equ	0xFE1
  9049                           bsr	equ	0xFE0
  9050                           indf2	equ	0xFDF
  9051                           postinc2	equ	0xFDE
  9052                           postdec2	equ	0xFDD
  9053                           fsr2h	equ	0xFDA
  9054                           fsr2l	equ	0xFD9
  9055                           status	equ	0xFD8
  9056                           
  9057 ;; *************** function _getbyte *****************
  9058 ;; Defined at:
  9059 ;;		line 76 in file "../lib/usart.c"
  9060 ;; Parameters:    Size  Location     Type
  9061 ;;		None
  9062 ;; Auto vars:     Size  Location     Type
  9063 ;;		None
  9064 ;; Return value:  Size  Location     Type
  9065 ;;                  1    wreg      unsigned char 
  9066 ;; Registers used:
  9067 ;;		wreg, status,2
  9068 ;; Tracked objects:
  9069 ;;		On entry : 0/0
  9070 ;;		On exit  : 0/0
  9071 ;;		Unchanged: 0/0
  9072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9076 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9077 ;;Total ram usage:        0 bytes
  9078 ;; Hardware stack levels used:    1
  9079 ;; Hardware stack levels required when called:    4
  9080 ;; This function calls:
  9081 ;;		Nothing
  9082 ;; This function is called by:
  9083 ;;		_timed_getc
  9084 ;; This function uses a non-reentrant model
  9085 ;;
  9086                           
  9087                           	psect	text28
  9088  00179C                     __ptext28:
  9089                           	opt stack 0
  9090  00179C                     _getbyte:
  9091                           	opt stack 16
  9092                           
  9093                           ;usart.c: 78: while (!RCIF) {
  9094                           
  9095                           ;incstack = 0
  9096  00179C  D001               	goto	i1l211
  9097  00179E                     i1l212:
  9098                           
  9099                           ;usart.c: 79: __nop();
  9100  00179E  F000               	nop	
  9101  0017A0                     i1l211:
  9102  0017A0  AA9E               	btfss	3998,5,c	;volatile
  9103  0017A2  D7FD               	goto	i1l212
  9104                           
  9105                           ;usart.c: 81: }
  9106                           ;usart.c: 82: return RCREG;
  9107  0017A4  50AE               	movf	4014,w,c	;volatile
  9108  0017A6  0012               	return	
  9109  0017A8                     __end_of_getbyte:
  9110                           	opt stack 0
  9111                           tblptru	equ	0xFF8
  9112                           tblptrh	equ	0xFF7
  9113                           tblptrl	equ	0xFF6
  9114                           tablat	equ	0xFF5
  9115                           prodh	equ	0xFF4
  9116                           prodl	equ	0xFF3
  9117                           intcon	equ	0xFF2
  9118                           postinc0	equ	0xFEE
  9119                           wreg	equ	0xFE8
  9120                           indf1	equ	0xFE7
  9121                           postinc1	equ	0xFE6
  9122                           postdec1	equ	0xFE5
  9123                           fsr1h	equ	0xFE2
  9124                           fsr1l	equ	0xFE1
  9125                           bsr	equ	0xFE0
  9126                           indf2	equ	0xFDF
  9127                           postinc2	equ	0xFDE
  9128                           postdec2	equ	0xFDD
  9129                           fsr2h	equ	0xFDA
  9130                           fsr2l	equ	0xFD9
  9131                           status	equ	0xFD8
  9132                           
  9133 ;; *************** function _set_ee_default *****************
  9134 ;; Defined at:
  9135 ;;		line 28 in file "../lib/eeprom.c"
  9136 ;; Parameters:    Size  Location     Type
  9137 ;;		None
  9138 ;; Auto vars:     Size  Location     Type
  9139 ;;  i               2   13[COMRAM] unsigned int 
  9140 ;;  c1              1   12[COMRAM] unsigned char 
  9141 ;;  c               1   11[COMRAM] unsigned char 
  9142 ;; Return value:  Size  Location     Type
  9143 ;;		None               void
  9144 ;; Registers used:
  9145 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9146 ;; Tracked objects:
  9147 ;;		On entry : 0/1
  9148 ;;		On exit  : 0/0
  9149 ;;		Unchanged: 0/0
  9150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9152 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9154 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9155 ;;Total ram usage:        4 bytes
  9156 ;; Hardware stack levels used:    1
  9157 ;; Hardware stack levels required when called:    6
  9158 ;; This function calls:
  9159 ;;		_read___ee
  9160 ;;		_write___ee
  9161 ;; This function is called by:
  9162 ;;		_LO_ISR
  9163 ;; This function uses a non-reentrant model
  9164 ;;
  9165                           
  9166                           	psect	text29
  9167  00131E                     __ptext29:
  9168                           	opt stack 0
  9169  00131E                     _set_ee_default:
  9170                           	opt stack 15
  9171                           
  9172                           ;eeprom.c: 29: unsigned int i;
  9173                           ;eeprom.c: 30: char c, c1;
  9174                           ;eeprom.c: 31: for(i = 0; i < 256; i ++){
  9175                           
  9176                           ;incstack = 0
  9177  00131E  6A0E               	clrf	set_ee_default@i,c
  9178  001320  6A0F               	clrf	set_ee_default@i+1,c
  9179  001322                     i1l3815:
  9180                           
  9181                           ;eeprom.c: 33: c = eedata[i];
  9182  001322  0EAB               	movlw	low _eedata
  9183  001324  240E               	addwf	set_ee_default@i,w,c
  9184  001326  6EF6               	movwf	tblptrl,c
  9185  001328  0EF3               	movlw	high _eedata
  9186  00132A  200F               	addwfc	set_ee_default@i+1,w,c
  9187  00132C  6EF7               	movwf	tblptrh,c
  9188  00132E                     	if	0	;There are less than 3 active tblptr bytes
  9189  00132E                     	endif
  9190  00132E  0008               	tblrd		*
  9191  001330  CFF5 F00C          	movff	tablat,set_ee_default@c
  9192                           
  9193                           ;eeprom.c: 34: read___ee(i, (char *)&c1, sizeof(c1));
  9194  001334  C00E  F006         	movff	set_ee_default@i,read___ee@adr
  9195  001338  C00F  F007         	movff	set_ee_default@i+1,read___ee@adr+1
  9196  00133C  0E0D               	movlw	low set_ee_default@c1
  9197  00133E  6E08               	movwf	read___ee@var,c
  9198  001340  0E01               	movlw	1
  9199  001342  6E09               	movwf	read___ee@byte,c
  9200  001344  EC68  F00B         	call	_read___ee	;wreg free
  9201                           
  9202                           ;eeprom.c: 35: if(c != c1){
  9203  001348  500C               	movf	set_ee_default@c,w,c
  9204  00134A  180D               	xorwf	set_ee_default@c1,w,c
  9205  00134C  E00A               	bz	i1l3823
  9206                           
  9207                           ;eeprom.c: 36: write___ee(i, (char *)&c, sizeof(c));
  9208  00134E  C00E  F008         	movff	set_ee_default@i,write___ee@adr
  9209  001352  C00F  F009         	movff	set_ee_default@i+1,write___ee@adr+1
  9210  001356  0E0C               	movlw	low set_ee_default@c
  9211  001358  6E0A               	movwf	write___ee@var,c
  9212  00135A  0E01               	movlw	1
  9213  00135C  6E0B               	movwf	write___ee@byte,c
  9214  00135E  EC04  F00B         	call	_write___ee	;wreg free
  9215  001362                     i1l3823:
  9216  001362  4A0E               	infsnz	set_ee_default@i,f,c
  9217  001364  2A0F               	incf	set_ee_default@i+1,f,c
  9218  001366  0E00               	movlw	0
  9219  001368  5C0E               	subwf	set_ee_default@i,w,c
  9220  00136A  0E01               	movlw	1
  9221  00136C  580F               	subwfb	set_ee_default@i+1,w,c
  9222  00136E  B0D8               	btfsc	status,0,c
  9223  001370  0012               	return	
  9224  001372  D7D7               	goto	i1l3815
  9225  001374                     __end_of_set_ee_default:
  9226                           	opt stack 0
  9227                           tblptru	equ	0xFF8
  9228                           tblptrh	equ	0xFF7
  9229                           tblptrl	equ	0xFF6
  9230                           tablat	equ	0xFF5
  9231                           prodh	equ	0xFF4
  9232                           prodl	equ	0xFF3
  9233                           intcon	equ	0xFF2
  9234                           postinc0	equ	0xFEE
  9235                           wreg	equ	0xFE8
  9236                           indf1	equ	0xFE7
  9237                           postinc1	equ	0xFE6
  9238                           postdec1	equ	0xFE5
  9239                           fsr1h	equ	0xFE2
  9240                           fsr1l	equ	0xFE1
  9241                           bsr	equ	0xFE0
  9242                           indf2	equ	0xFDF
  9243                           postinc2	equ	0xFDE
  9244                           postdec2	equ	0xFDD
  9245                           fsr2h	equ	0xFDA
  9246                           fsr2l	equ	0xFD9
  9247                           status	equ	0xFD8
  9248                           
  9249 ;; *************** function _write___ee *****************
  9250 ;; Defined at:
  9251 ;;		line 11 in file "../lib/eeprom.c"
  9252 ;; Parameters:    Size  Location     Type
  9253 ;;  adr             2    7[COMRAM] unsigned int 
  9254 ;;  var             1    9[COMRAM] PTR unsigned char 
  9255 ;;		 -> set_ee_default@c(1), 
  9256 ;;  byte            1   10[COMRAM] unsigned char 
  9257 ;; Auto vars:     Size  Location     Type
  9258 ;;		None
  9259 ;; Return value:  Size  Location     Type
  9260 ;;		None               void
  9261 ;; Registers used:
  9262 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9263 ;; Tracked objects:
  9264 ;;		On entry : 0/1
  9265 ;;		On exit  : 0/0
  9266 ;;		Unchanged: 0/0
  9267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9268 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9271 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9272 ;;Total ram usage:        4 bytes
  9273 ;; Hardware stack levels used:    1
  9274 ;; Hardware stack levels required when called:    5
  9275 ;; This function calls:
  9276 ;;		_Busy_eep
  9277 ;;		_Write_b_eep
  9278 ;; This function is called by:
  9279 ;;		_set_ee_default
  9280 ;; This function uses a non-reentrant model
  9281 ;;
  9282                           
  9283                           	psect	text30
  9284  001608                     __ptext30:
  9285                           	opt stack 0
  9286  001608                     _write___ee:
  9287                           	opt stack 15
  9288                           
  9289                           ;eeprom.c: 12: while(byte--){
  9290                           
  9291                           ;incstack = 0
  9292  001608  D010               	goto	i1l3559
  9293  00160A                     i1l3555:
  9294                           
  9295                           ;eeprom.c: 13: (Busy_eep(), Write_b_eep(adr+byte,(unsigned char)(*(((unsigned char *)var
      +                          )+byte))));
  9296  00160A  ECDA  F00B         	call	_Busy_eep	;wreg free
  9297  00160E  500B               	movf	write___ee@byte,w,c
  9298  001610  2408               	addwf	write___ee@adr,w,c
  9299  001612  6E01               	movwf	Write_b_eep@badd,c
  9300  001614  0E00               	movlw	0
  9301  001616  2009               	addwfc	write___ee@adr+1,w,c
  9302  001618  6E02               	movwf	Write_b_eep@badd+1,c
  9303  00161A  500A               	movf	write___ee@var,w,c
  9304  00161C  240B               	addwf	write___ee@byte,w,c
  9305  00161E  6ED9               	movwf	fsr2l,c
  9306  001620  6ADA               	clrf	fsr2h,c
  9307  001622  50DF               	movf	indf2,w,c
  9308  001624  6E03               	movwf	Write_b_eep@bdat,c
  9309  001626  EC79  F00A         	call	_Write_b_eep	;wreg free
  9310  00162A                     i1l3559:
  9311  00162A  060B               	decf	write___ee@byte,f,c
  9312  00162C  280B               	incf	write___ee@byte& (0+255),w,c
  9313  00162E  B4D8               	btfsc	status,2,c
  9314  001630  0012               	return	
  9315  001632  D7EB               	goto	i1l3555
  9316  001634                     __end_of_write___ee:
  9317                           	opt stack 0
  9318                           tblptru	equ	0xFF8
  9319                           tblptrh	equ	0xFF7
  9320                           tblptrl	equ	0xFF6
  9321                           tablat	equ	0xFF5
  9322                           prodh	equ	0xFF4
  9323                           prodl	equ	0xFF3
  9324                           intcon	equ	0xFF2
  9325                           postinc0	equ	0xFEE
  9326                           wreg	equ	0xFE8
  9327                           indf1	equ	0xFE7
  9328                           postinc1	equ	0xFE6
  9329                           postdec1	equ	0xFE5
  9330                           fsr1h	equ	0xFE2
  9331                           fsr1l	equ	0xFE1
  9332                           bsr	equ	0xFE0
  9333                           indf2	equ	0xFDF
  9334                           postinc2	equ	0xFDE
  9335                           postdec2	equ	0xFDD
  9336                           fsr2h	equ	0xFDA
  9337                           fsr2l	equ	0xFD9
  9338                           status	equ	0xFD8
  9339                           
  9340 ;; *************** function _Write_b_eep *****************
  9341 ;; Defined at:
  9342 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\EEP\write_B.c"
  9343 ;; Parameters:    Size  Location     Type
  9344 ;;  badd            2    0[COMRAM] unsigned int 
  9345 ;;  bdat            1    2[COMRAM] unsigned char 
  9346 ;; Auto vars:     Size  Location     Type
  9347 ;;  GIE_BIT_VAL     1    6[COMRAM] unsigned char 
  9348 ;; Return value:  Size  Location     Type
  9349 ;;		None               void
  9350 ;; Registers used:
  9351 ;;		wreg, status,2, status,0
  9352 ;; Tracked objects:
  9353 ;;		On entry : 0/1
  9354 ;;		On exit  : 0/0
  9355 ;;		Unchanged: 0/0
  9356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9357 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9358 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9359 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9360 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9361 ;;Total ram usage:        7 bytes
  9362 ;; Hardware stack levels used:    1
  9363 ;; Hardware stack levels required when called:    4
  9364 ;; This function calls:
  9365 ;;		Nothing
  9366 ;; This function is called by:
  9367 ;;		_write___ee
  9368 ;;		_LO_ISR
  9369 ;; This function uses a non-reentrant model
  9370 ;;
  9371                           
  9372                           	psect	text31
  9373  0014F2                     __ptext31:
  9374                           	opt stack 0
  9375  0014F2                     _Write_b_eep:
  9376                           	opt stack 15
  9377                           
  9378                           ;incstack = 0
  9379  0014F2  C002  F004         	movff	Write_b_eep@badd+1,??_Write_b_eep
  9380  0014F6  C004  F005         	movff	??_Write_b_eep,??_Write_b_eep+1
  9381  0014FA  6A06               	clrf	(??_Write_b_eep+2)& (0+255),c
  9382  0014FC  5005               	movf	??_Write_b_eep+1,w,c
  9383  0014FE  0B03               	andlw	3
  9384  001500  6EAA               	movwf	4010,c	;volatile
  9385  001502  C001  FFA9         	movff	Write_b_eep@badd,4009	;volatile
  9386  001506  C003  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
  9387  00150A  9EA6               	bcf	4006,7,c	;volatile
  9388  00150C  9CA6               	bcf	4006,6,c	;volatile
  9389  00150E  84A6               	bsf	4006,2,c	;volatile
  9390  001510  0E00               	movlw	0
  9391  001512  BEF2               	btfsc	intcon,7,c	;volatile
  9392  001514  0E01               	movlw	1
  9393  001516  6E07               	movwf	Write_b_eep@GIE_BIT_VAL,c
  9394  001518  9EF2               	bcf	intcon,7,c	;volatile
  9395  00151A  0E55               	movlw	85
  9396  00151C  6EA7               	movwf	4007,c	;volatile
  9397  00151E  0EAA               	movlw	170
  9398  001520  6EA7               	movwf	4007,c	;volatile
  9399  001522  82A6               	bsf	4006,1,c	;volatile
  9400  001524                     i1l1130:
  9401  001524  B2A6               	btfsc	4006,1,c	;volatile
  9402  001526  D7FE               	goto	i1l1130
  9403  001528  B007               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
  9404  00152A  D002               	bra	i1u173_25
  9405  00152C  9EF2               	bcf	intcon,7,c	;volatile
  9406  00152E  D001               	bra	i1u173_26
  9407  001530                     i1u173_25:
  9408  001530  8EF2               	bsf	intcon,7,c	;volatile
  9409  001532                     i1u173_26:
  9410  001532  94A6               	bcf	4006,2,c	;volatile
  9411  001534  0012               	return	
  9412  001536                     __end_of_Write_b_eep:
  9413                           	opt stack 0
  9414                           tblptru	equ	0xFF8
  9415                           tblptrh	equ	0xFF7
  9416                           tblptrl	equ	0xFF6
  9417                           tablat	equ	0xFF5
  9418                           prodh	equ	0xFF4
  9419                           prodl	equ	0xFF3
  9420                           intcon	equ	0xFF2
  9421                           postinc0	equ	0xFEE
  9422                           wreg	equ	0xFE8
  9423                           indf1	equ	0xFE7
  9424                           postinc1	equ	0xFE6
  9425                           postdec1	equ	0xFE5
  9426                           fsr1h	equ	0xFE2
  9427                           fsr1l	equ	0xFE1
  9428                           bsr	equ	0xFE0
  9429                           indf2	equ	0xFDF
  9430                           postinc2	equ	0xFDE
  9431                           postdec2	equ	0xFDD
  9432                           fsr2h	equ	0xFDA
  9433                           fsr2l	equ	0xFD9
  9434                           status	equ	0xFD8
  9435                           
  9436 ;; *************** function _Busy_eep *****************
  9437 ;; Defined at:
  9438 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\EEP\busy_eep.c"
  9439 ;; Parameters:    Size  Location     Type
  9440 ;;		None
  9441 ;; Auto vars:     Size  Location     Type
  9442 ;;		None
  9443 ;; Return value:  Size  Location     Type
  9444 ;;		None               void
  9445 ;; Registers used:
  9446 ;;		None
  9447 ;; Tracked objects:
  9448 ;;		On entry : 0/1
  9449 ;;		On exit  : 0/0
  9450 ;;		Unchanged: 0/0
  9451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9455 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9456 ;;Total ram usage:        0 bytes
  9457 ;; Hardware stack levels used:    1
  9458 ;; Hardware stack levels required when called:    4
  9459 ;; This function calls:
  9460 ;;		Nothing
  9461 ;; This function is called by:
  9462 ;;		_write___ee
  9463 ;;		_LO_ISR
  9464 ;; This function uses a non-reentrant model
  9465 ;;
  9466                           
  9467                           	psect	text32
  9468  0017B4                     __ptext32:
  9469                           	opt stack 0
  9470  0017B4                     _Busy_eep:
  9471                           	opt stack 15
  9472  0017B4                     i1l1099:
  9473  0017B4  A2A6               	btfss	4006,1,c	;volatile
  9474  0017B6  0012               	return	
  9475  0017B8  D7FD               	goto	i1l1099
  9476  0017BA                     __end_of_Busy_eep:
  9477                           	opt stack 0
  9478                           tblptru	equ	0xFF8
  9479                           tblptrh	equ	0xFF7
  9480                           tblptrl	equ	0xFF6
  9481                           tablat	equ	0xFF5
  9482                           prodh	equ	0xFF4
  9483                           prodl	equ	0xFF3
  9484                           intcon	equ	0xFF2
  9485                           postinc0	equ	0xFEE
  9486                           wreg	equ	0xFE8
  9487                           indf1	equ	0xFE7
  9488                           postinc1	equ	0xFE6
  9489                           postdec1	equ	0xFE5
  9490                           fsr1h	equ	0xFE2
  9491                           fsr1l	equ	0xFE1
  9492                           bsr	equ	0xFE0
  9493                           indf2	equ	0xFDF
  9494                           postinc2	equ	0xFDE
  9495                           postdec2	equ	0xFDD
  9496                           fsr2h	equ	0xFDA
  9497                           fsr2l	equ	0xFD9
  9498                           status	equ	0xFD8
  9499                           
  9500 ;; *************** function _read___ee *****************
  9501 ;; Defined at:
  9502 ;;		line 18 in file "../lib/eeprom.c"
  9503 ;; Parameters:    Size  Location     Type
  9504 ;;  adr             2    5[COMRAM] unsigned int 
  9505 ;;  var             1    7[COMRAM] PTR unsigned char 
  9506 ;;		 -> set_ee_default@c1(1), 
  9507 ;;  byte            1    8[COMRAM] unsigned char 
  9508 ;; Auto vars:     Size  Location     Type
  9509 ;;		None
  9510 ;; Return value:  Size  Location     Type
  9511 ;;		None               void
  9512 ;; Registers used:
  9513 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9514 ;; Tracked objects:
  9515 ;;		On entry : 0/1
  9516 ;;		On exit  : 0/0
  9517 ;;		Unchanged: 0/0
  9518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9519 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9522 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9523 ;;Total ram usage:        4 bytes
  9524 ;; Hardware stack levels used:    1
  9525 ;; Hardware stack levels required when called:    5
  9526 ;; This function calls:
  9527 ;;		_Read_b_eep
  9528 ;; This function is called by:
  9529 ;;		_set_ee_default
  9530 ;; This function uses a non-reentrant model
  9531 ;;
  9532                           
  9533                           	psect	text33
  9534  0016D0                     __ptext33:
  9535                           	opt stack 0
  9536  0016D0                     _read___ee:
  9537                           	opt stack 15
  9538                           
  9539                           ;eeprom.c: 19: while(byte--){
  9540                           
  9541                           ;incstack = 0
  9542  0016D0  D00D               	goto	i1l3565
  9543  0016D2                     i1l3563:
  9544                           
  9545                           ;eeprom.c: 20: (unsigned char)(*(((unsigned char *)var)+byte))=Read_b_eep(adr+byte);
  9546  0016D2  5008               	movf	read___ee@var,w,c
  9547  0016D4  2409               	addwf	read___ee@byte,w,c
  9548  0016D6  6ED9               	movwf	fsr2l,c
  9549  0016D8  6ADA               	clrf	fsr2h,c
  9550  0016DA  5009               	movf	read___ee@byte,w,c
  9551  0016DC  2406               	addwf	read___ee@adr,w,c
  9552  0016DE  6E01               	movwf	Read_b_eep@badd,c
  9553  0016E0  0E00               	movlw	0
  9554  0016E2  2007               	addwfc	read___ee@adr+1,w,c
  9555  0016E4  6E02               	movwf	Read_b_eep@badd+1,c
  9556  0016E6  EC7B  F00B         	call	_Read_b_eep	;wreg free
  9557  0016EA  6EDF               	movwf	indf2,c
  9558  0016EC                     i1l3565:
  9559  0016EC  0609               	decf	read___ee@byte,f,c
  9560  0016EE  2809               	incf	read___ee@byte& (0+255),w,c
  9561  0016F0  B4D8               	btfsc	status,2,c
  9562  0016F2  0012               	return	
  9563  0016F4  D7EE               	goto	i1l3563
  9564  0016F6                     __end_of_read___ee:
  9565                           	opt stack 0
  9566                           tblptru	equ	0xFF8
  9567                           tblptrh	equ	0xFF7
  9568                           tblptrl	equ	0xFF6
  9569                           tablat	equ	0xFF5
  9570                           prodh	equ	0xFF4
  9571                           prodl	equ	0xFF3
  9572                           intcon	equ	0xFF2
  9573                           postinc0	equ	0xFEE
  9574                           wreg	equ	0xFE8
  9575                           indf1	equ	0xFE7
  9576                           postinc1	equ	0xFE6
  9577                           postdec1	equ	0xFE5
  9578                           fsr1h	equ	0xFE2
  9579                           fsr1l	equ	0xFE1
  9580                           bsr	equ	0xFE0
  9581                           indf2	equ	0xFDF
  9582                           postinc2	equ	0xFDE
  9583                           postdec2	equ	0xFDD
  9584                           fsr2h	equ	0xFDA
  9585                           fsr2l	equ	0xFD9
  9586                           status	equ	0xFD8
  9587                           
  9588 ;; *************** function _Read_b_eep *****************
  9589 ;; Defined at:
  9590 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\pic18\plib\EEP\read_B.c"
  9591 ;; Parameters:    Size  Location     Type
  9592 ;;  badd            2    0[COMRAM] unsigned int 
  9593 ;; Auto vars:     Size  Location     Type
  9594 ;;		None
  9595 ;; Return value:  Size  Location     Type
  9596 ;;                  1    wreg      unsigned char 
  9597 ;; Registers used:
  9598 ;;		wreg, status,2, status,0
  9599 ;; Tracked objects:
  9600 ;;		On entry : 0/1
  9601 ;;		On exit  : 0/0
  9602 ;;		Unchanged: 0/0
  9603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9604 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9606 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9607 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9608 ;;Total ram usage:        5 bytes
  9609 ;; Hardware stack levels used:    1
  9610 ;; Hardware stack levels required when called:    4
  9611 ;; This function calls:
  9612 ;;		Nothing
  9613 ;; This function is called by:
  9614 ;;		_read___ee
  9615 ;;		_LO_ISR
  9616 ;; This function uses a non-reentrant model
  9617 ;;
  9618                           
  9619                           	psect	text34
  9620  0016F6                     __ptext34:
  9621                           	opt stack 0
  9622  0016F6                     _Read_b_eep:
  9623                           	opt stack 15
  9624                           
  9625                           ;incstack = 0
  9626  0016F6  C002  F003         	movff	Read_b_eep@badd+1,??_Read_b_eep
  9627  0016FA  C003  F004         	movff	??_Read_b_eep,??_Read_b_eep+1
  9628  0016FE  6A05               	clrf	(??_Read_b_eep+2)& (0+255),c
  9629  001700  5004               	movf	??_Read_b_eep+1,w,c
  9630  001702  0B03               	andlw	3
  9631  001704  6EAA               	movwf	4010,c	;volatile
  9632  001706  C001  FFA9         	movff	Read_b_eep@badd,4009	;volatile
  9633  00170A  9CA6               	bcf	4006,6,c	;volatile
  9634  00170C  9EA6               	bcf	4006,7,c	;volatile
  9635  00170E  80A6               	bsf	4006,0,c	;volatile
  9636  001710  F000               	nop	
  9637  001712  F000               	nop	
  9638  001714  50A8               	movf	4008,w,c	;volatile
  9639  001716  0012               	return	
  9640  001718                     __end_of_Read_b_eep:
  9641                           	opt stack 0
  9642                           tblptru	equ	0xFF8
  9643                           tblptrh	equ	0xFF7
  9644                           tblptrl	equ	0xFF6
  9645                           tablat	equ	0xFF5
  9646                           prodh	equ	0xFF4
  9647                           prodl	equ	0xFF3
  9648                           intcon	equ	0xFF2
  9649                           postinc0	equ	0xFEE
  9650                           wreg	equ	0xFE8
  9651                           indf1	equ	0xFE7
  9652                           postinc1	equ	0xFE6
  9653                           postdec1	equ	0xFE5
  9654                           fsr1h	equ	0xFE2
  9655                           fsr1l	equ	0xFE1
  9656                           bsr	equ	0xFE0
  9657                           indf2	equ	0xFDF
  9658                           postinc2	equ	0xFDE
  9659                           postdec2	equ	0xFDD
  9660                           fsr2h	equ	0xFDA
  9661                           fsr2l	equ	0xFD9
  9662                           status	equ	0xFD8
  9663                           
  9664 ;; *************** function _putbyte *****************
  9665 ;; Defined at:
  9666 ;;		line 50 in file "../lib/usart.c"
  9667 ;; Parameters:    Size  Location     Type
  9668 ;;  byte            1    wreg     unsigned char 
  9669 ;; Auto vars:     Size  Location     Type
  9670 ;;  byte            1    0[COMRAM] unsigned char 
  9671 ;; Return value:  Size  Location     Type
  9672 ;;		None               void
  9673 ;; Registers used:
  9674 ;;		wreg
  9675 ;; Tracked objects:
  9676 ;;		On entry : F/1
  9677 ;;		On exit  : F/1
  9678 ;;		Unchanged: F/0
  9679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9681 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9683 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9684 ;;Total ram usage:        1 bytes
  9685 ;; Hardware stack levels used:    1
  9686 ;; Hardware stack levels required when called:    4
  9687 ;; This function calls:
  9688 ;;		Nothing
  9689 ;; This function is called by:
  9690 ;;		_LO_ISR
  9691 ;; This function uses a non-reentrant model
  9692 ;;
  9693                           
  9694                           	psect	text35
  9695  0017A8                     __ptext35:
  9696                           	opt stack 0
  9697  0017A8                     _putbyte:
  9698                           	opt stack 17
  9699                           
  9700                           ;incstack = 0
  9701                           ;putbyte@byte stored from wreg
  9702  0017A8  6E01               	movwf	putbyte@byte,c
  9703  0017AA                     i1l199:
  9704                           
  9705                           ; BSR set to: 1
  9706  0017AA  A2AC               	btfss	4012,1,c	;volatile
  9707  0017AC  D7FE               	goto	i1l199
  9708                           
  9709                           ; BSR set to: 1
  9710                           ;usart.c: 58: TXREG = byte;
  9711  0017AE  C001  FFAD         	movff	putbyte@byte,4013	;volatile
  9712                           
  9713                           ; BSR set to: 1
  9714  0017B2  0012               	return	
  9715  0017B4                     __end_of_putbyte:
  9716                           	opt stack 0
  9717                           tblptru	equ	0xFF8
  9718                           tblptrh	equ	0xFF7
  9719                           tblptrl	equ	0xFF6
  9720                           tablat	equ	0xFF5
  9721                           prodh	equ	0xFF4
  9722                           prodl	equ	0xFF3
  9723                           intcon	equ	0xFF2
  9724                           postinc0	equ	0xFEE
  9725                           wreg	equ	0xFE8
  9726                           indf1	equ	0xFE7
  9727                           postinc1	equ	0xFE6
  9728                           postdec1	equ	0xFE5
  9729                           fsr1h	equ	0xFE2
  9730                           fsr1l	equ	0xFE1
  9731                           bsr	equ	0xFE0
  9732                           indf2	equ	0xFDF
  9733                           postinc2	equ	0xFDE
  9734                           postdec2	equ	0xFDD
  9735                           fsr2h	equ	0xFDA
  9736                           fsr2l	equ	0xFD9
  9737                           status	equ	0xFD8
  9738                           
  9739 ;; *************** function _crc_mb_check *****************
  9740 ;; Defined at:
  9741 ;;		line 74 in file "../lib/modbus_RTU.c"
  9742 ;; Parameters:    Size  Location     Type
  9743 ;;  buffer          2    8[COMRAM] PTR unsigned char 
  9744 ;;		 -> RxTxBuff(128), 
  9745 ;;  cnt             1   10[COMRAM] unsigned char 
  9746 ;; Auto vars:     Size  Location     Type
  9747 ;;  crc             2   16[COMRAM] unsigned int 
  9748 ;;  i               1   15[COMRAM] unsigned char 
  9749 ;; Return value:  Size  Location     Type
  9750 ;;                  1    wreg      unsigned char 
  9751 ;; Registers used:
  9752 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9753 ;; Tracked objects:
  9754 ;;		On entry : F/1
  9755 ;;		On exit  : 0/0
  9756 ;;		Unchanged: 0/0
  9757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9758 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9759 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9760 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9761 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9762 ;;Total ram usage:       10 bytes
  9763 ;; Hardware stack levels used:    1
  9764 ;; Hardware stack levels required when called:    5
  9765 ;; This function calls:
  9766 ;;		_crc_mb_calc
  9767 ;;		_crc_mb_init
  9768 ;; This function is called by:
  9769 ;;		_LO_ISR
  9770 ;; This function uses a non-reentrant model
  9771 ;;
  9772                           
  9773                           	psect	text36
  9774  0012C4                     __ptext36:
  9775                           	opt stack 0
  9776  0012C4                     _crc_mb_check:
  9777                           	opt stack 16
  9778                           
  9779                           ; BSR set to: 1
  9780                           ;modbus_RTU.c: 76: unsigned int crc;
  9781                           ;modbus_RTU.c: 77: unsigned char i;
  9782                           ;modbus_RTU.c: 79: crc_mb_init(&crc);
  9783                           
  9784                           ; BSR set to: 1
  9785                           ;incstack = 0
  9786  0012C4  0E11               	movlw	crc_mb_check@crc& (0+255)
  9787  0012C6  ECC7  F00B         	call	_crc_mb_init
  9788                           
  9789                           ; BSR set to: 1
  9790                           ;modbus_RTU.c: 81: for (i = 0; i < cnt; i++) {
  9791  0012CA  6A10               	clrf	crc_mb_check@i,c
  9792  0012CC  D00C               	goto	i1l3857
  9793  0012CE                     i1l3851:
  9794                           
  9795                           ;modbus_RTU.c: 82: crc_mb_calc(&crc, *buffer++);
  9796  0012CE  C009  FFD9         	movff	crc_mb_check@buffer,fsr2l
  9797  0012D2  C00A  FFDA         	movff	crc_mb_check@buffer+1,fsr2h
  9798  0012D6  50DF               	movf	indf2,w,c
  9799  0012D8  6E01               	movwf	crc_mb_calc@next,c
  9800  0012DA  0E11               	movlw	crc_mb_check@crc& (0+255)
  9801  0012DC  EC05  F009         	call	_crc_mb_calc
  9802  0012E0  4A09               	infsnz	crc_mb_check@buffer,f,c
  9803  0012E2  2A0A               	incf	crc_mb_check@buffer+1,f,c
  9804  0012E4  2A10               	incf	crc_mb_check@i,f,c
  9805  0012E6                     i1l3857:
  9806  0012E6  500B               	movf	crc_mb_check@cnt,w,c
  9807  0012E8  5C10               	subwf	crc_mb_check@i,w,c
  9808  0012EA  E3F1               	bnc	i1l3851
  9809                           
  9810                           ;modbus_RTU.c: 83: }
  9811                           ;modbus_RTU.c: 91: if (((unsigned char) (crc >> 8) == *buffer++) && ((unsigned char) crc
      +                           == *buffer)) return 1;
  9812  0012EC  C009  FFD9         	movff	crc_mb_check@buffer,fsr2l
  9813  0012F0  C00A  FFDA         	movff	crc_mb_check@buffer+1,fsr2h
  9814  0012F4  4A09               	infsnz	crc_mb_check@buffer,f,c
  9815  0012F6  2A0A               	incf	crc_mb_check@buffer+1,f,c
  9816  0012F8  50DF               	movf	indf2,w,c
  9817  0012FA  6E0C               	movwf	??_crc_mb_check& (0+255),c
  9818  0012FC  C012  F00D         	movff	crc_mb_check@crc+1,??_crc_mb_check+1
  9819  001300  C00D  F00E         	movff	??_crc_mb_check+1,??_crc_mb_check+2
  9820  001304  6A0F               	clrf	(??_crc_mb_check+3)& (0+255),c
  9821  001306  500E               	movf	??_crc_mb_check+2,w,c
  9822  001308  180C               	xorwf	??_crc_mb_check,w,c
  9823  00130A  E108               	bnz	i1l3867
  9824  00130C  5011               	movf	crc_mb_check@crc,w,c
  9825  00130E  C009  FFD9         	movff	crc_mb_check@buffer,fsr2l
  9826  001312  C00A  FFDA         	movff	crc_mb_check@buffer+1,fsr2h
  9827  001316  62DF               	cpfseq	indf2,c
  9828  001318  0C00               	retlw	0
  9829  00131A  0C01               	retlw	1
  9830  00131C                     i1l3867:
  9831                           
  9832                           ;modbus_RTU.c: 96: return 0;
  9833  00131C  0C00               	retlw	0
  9834  00131E                     __end_of_crc_mb_check:
  9835                           	opt stack 0
  9836                           tblptru	equ	0xFF8
  9837                           tblptrh	equ	0xFF7
  9838                           tblptrl	equ	0xFF6
  9839                           tablat	equ	0xFF5
  9840                           prodh	equ	0xFF4
  9841                           prodl	equ	0xFF3
  9842                           intcon	equ	0xFF2
  9843                           postinc0	equ	0xFEE
  9844                           wreg	equ	0xFE8
  9845                           indf1	equ	0xFE7
  9846                           postinc1	equ	0xFE6
  9847                           postdec1	equ	0xFE5
  9848                           fsr1h	equ	0xFE2
  9849                           fsr1l	equ	0xFE1
  9850                           bsr	equ	0xFE0
  9851                           indf2	equ	0xFDF
  9852                           postinc2	equ	0xFDE
  9853                           postdec2	equ	0xFDD
  9854                           fsr2h	equ	0xFDA
  9855                           fsr2l	equ	0xFD9
  9856                           status	equ	0xFD8
  9857                           
  9858 ;; *************** function _crc_mb *****************
  9859 ;; Defined at:
  9860 ;;		line 58 in file "../lib/modbus_RTU.c"
  9861 ;; Parameters:    Size  Location     Type
  9862 ;;  buffer          2    8[COMRAM] PTR unsigned char 
  9863 ;;		 -> RxTxBuff(128), 
  9864 ;;  count           1   10[COMRAM] unsigned char 
  9865 ;; Auto vars:     Size  Location     Type
  9866 ;;  CRC             2   15[COMRAM] unsigned int 
  9867 ;;  i               1   14[COMRAM] unsigned char 
  9868 ;; Return value:  Size  Location     Type
  9869 ;;                  2    8[COMRAM] unsigned int 
  9870 ;; Registers used:
  9871 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9872 ;; Tracked objects:
  9873 ;;		On entry : F/1
  9874 ;;		On exit  : 0/0
  9875 ;;		Unchanged: 0/0
  9876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9877 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9878 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9879 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9880 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9881 ;;Total ram usage:        9 bytes
  9882 ;; Hardware stack levels used:    1
  9883 ;; Hardware stack levels required when called:    5
  9884 ;; This function calls:
  9885 ;;		_crc_mb_calc
  9886 ;;		_crc_mb_init
  9887 ;; This function is called by:
  9888 ;;		_LO_ISR
  9889 ;; This function uses a non-reentrant model
  9890 ;;
  9891                           
  9892                           	psect	text37
  9893  001374                     __ptext37:
  9894                           	opt stack 0
  9895  001374                     _crc_mb:
  9896                           	opt stack 16
  9897                           
  9898                           ; BSR set to: 1
  9899                           ;modbus_RTU.c: 59: unsigned int CRC;
  9900                           ;modbus_RTU.c: 60: unsigned char i;
  9901                           ;modbus_RTU.c: 62: crc_mb_init(&CRC);
  9902                           
  9903                           ;incstack = 0
  9904  001374  0E10               	movlw	crc_mb@CRC& (0+255)
  9905  001376  ECC7  F00B         	call	_crc_mb_init
  9906                           
  9907                           ; BSR set to: 1
  9908                           ;modbus_RTU.c: 63: for (i = 0; i < count; i ++) {
  9909  00137A  6A0F               	clrf	crc_mb@i,c
  9910  00137C  D00C               	goto	i1l3881
  9911  00137E                     i1l3875:
  9912                           
  9913                           ;modbus_RTU.c: 64: crc_mb_calc(&CRC, *buffer++);
  9914  00137E  C009  FFD9         	movff	crc_mb@buffer,fsr2l
  9915  001382  C00A  FFDA         	movff	crc_mb@buffer+1,fsr2h
  9916  001386  50DF               	movf	indf2,w,c
  9917  001388  6E01               	movwf	crc_mb_calc@next,c
  9918  00138A  0E10               	movlw	crc_mb@CRC& (0+255)
  9919  00138C  EC05  F009         	call	_crc_mb_calc
  9920  001390  4A09               	infsnz	crc_mb@buffer,f,c
  9921  001392  2A0A               	incf	crc_mb@buffer+1,f,c
  9922  001394  2A0F               	incf	crc_mb@i,f,c
  9923  001396                     i1l3881:
  9924  001396  500B               	movf	crc_mb@count,w,c
  9925  001398  5C0F               	subwf	crc_mb@i,w,c
  9926  00139A  E3F1               	bnc	i1l3875
  9927                           
  9928                           ;modbus_RTU.c: 65: }
  9929                           ;modbus_RTU.c: 66: *buffer++ = (unsigned char )(CRC >> 8);
  9930  00139C  C011  F00C         	movff	crc_mb@CRC+1,??_crc_mb
  9931  0013A0  C00C  F00D         	movff	??_crc_mb,??_crc_mb+1
  9932  0013A4  6A0E               	clrf	(??_crc_mb+2)& (0+255),c
  9933  0013A6  500D               	movf	??_crc_mb+1,w,c
  9934  0013A8  C009  FFD9         	movff	crc_mb@buffer,fsr2l
  9935  0013AC  C00A  FFDA         	movff	crc_mb@buffer+1,fsr2h
  9936  0013B0  6EDF               	movwf	indf2,c
  9937  0013B2  4A09               	infsnz	crc_mb@buffer,f,c
  9938  0013B4  2A0A               	incf	crc_mb@buffer+1,f,c
  9939                           
  9940                           ;modbus_RTU.c: 67: *buffer = (unsigned char ) CRC;
  9941  0013B6  C009  FFD9         	movff	crc_mb@buffer,fsr2l
  9942  0013BA  C00A  FFDA         	movff	crc_mb@buffer+1,fsr2h
  9943  0013BE  C010  FFDF         	movff	crc_mb@CRC,indf2
  9944  0013C2  0012               	return	
  9945  0013C4                     __end_of_crc_mb:
  9946                           	opt stack 0
  9947                           tblptru	equ	0xFF8
  9948                           tblptrh	equ	0xFF7
  9949                           tblptrl	equ	0xFF6
  9950                           tablat	equ	0xFF5
  9951                           prodh	equ	0xFF4
  9952                           prodl	equ	0xFF3
  9953                           intcon	equ	0xFF2
  9954                           postinc0	equ	0xFEE
  9955                           wreg	equ	0xFE8
  9956                           indf1	equ	0xFE7
  9957                           postinc1	equ	0xFE6
  9958                           postdec1	equ	0xFE5
  9959                           fsr1h	equ	0xFE2
  9960                           fsr1l	equ	0xFE1
  9961                           bsr	equ	0xFE0
  9962                           indf2	equ	0xFDF
  9963                           postinc2	equ	0xFDE
  9964                           postdec2	equ	0xFDD
  9965                           fsr2h	equ	0xFDA
  9966                           fsr2l	equ	0xFD9
  9967                           status	equ	0xFD8
  9968                           
  9969 ;; *************** function _crc_mb_init *****************
  9970 ;; Defined at:
  9971 ;;		line 20 in file "../lib/modbus_RTU.c"
  9972 ;; Parameters:    Size  Location     Type
  9973 ;;  code            1    wreg     PTR unsigned int 
  9974 ;;		 -> crc_mb_check@crc(2), crc_mb@CRC(2), 
  9975 ;; Auto vars:     Size  Location     Type
  9976 ;;  code            1    0[COMRAM] PTR unsigned int 
  9977 ;;		 -> crc_mb_check@crc(2), crc_mb@CRC(2), 
  9978 ;; Return value:  Size  Location     Type
  9979 ;;		None               void
  9980 ;; Registers used:
  9981 ;;		wreg, fsr2l, fsr2h, status,2
  9982 ;; Tracked objects:
  9983 ;;		On entry : F/1
  9984 ;;		On exit  : F/1
  9985 ;;		Unchanged: F/0
  9986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9988 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9990 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9991 ;;Total ram usage:        1 bytes
  9992 ;; Hardware stack levels used:    1
  9993 ;; Hardware stack levels required when called:    4
  9994 ;; This function calls:
  9995 ;;		Nothing
  9996 ;; This function is called by:
  9997 ;;		_crc_mb
  9998 ;;		_crc_mb_check
  9999 ;; This function uses a non-reentrant model
 10000 ;;
 10001                           
 10002                           	psect	text38
 10003  00178E                     __ptext38:
 10004                           	opt stack 0
 10005  00178E                     _crc_mb_init:
 10006                           	opt stack 16
 10007                           
 10008                           ;incstack = 0
 10009                           ;crc_mb_init@code stored from wreg
 10010  00178E  6E01               	movwf	crc_mb_init@code,c
 10011                           
 10012                           ; BSR set to: 1
 10013                           ;modbus_RTU.c: 21: *code = 0xffff;
 10014  001790  5001               	movf	crc_mb_init@code,w,c
 10015  001792  6ED9               	movwf	fsr2l,c
 10016  001794  6ADA               	clrf	fsr2h,c
 10017  001796  68DE               	setf	postinc2,c
 10018  001798  68DD               	setf	postdec2,c
 10019                           
 10020                           ; BSR set to: 1
 10021  00179A  0CFF               	retlw	255
 10022  00179C                     __end_of_crc_mb_init:
 10023                           	opt stack 0
 10024                           tblptru	equ	0xFF8
 10025                           tblptrh	equ	0xFF7
 10026                           tblptrl	equ	0xFF6
 10027                           tablat	equ	0xFF5
 10028                           prodh	equ	0xFF4
 10029                           prodl	equ	0xFF3
 10030                           intcon	equ	0xFF2
 10031                           postinc0	equ	0xFEE
 10032                           wreg	equ	0xFE8
 10033                           indf1	equ	0xFE7
 10034                           postinc1	equ	0xFE6
 10035                           postdec1	equ	0xFE5
 10036                           fsr1h	equ	0xFE2
 10037                           fsr1l	equ	0xFE1
 10038                           bsr	equ	0xFE0
 10039                           indf2	equ	0xFDF
 10040                           postinc2	equ	0xFDE
 10041                           postdec2	equ	0xFDD
 10042                           fsr2h	equ	0xFDA
 10043                           fsr2l	equ	0xFD9
 10044                           status	equ	0xFD8
 10045                           
 10046 ;; *************** function _crc_mb_calc *****************
 10047 ;; Defined at:
 10048 ;;		line 44 in file "../lib/modbus_RTU.c"
 10049 ;; Parameters:    Size  Location     Type
 10050 ;;  code            1    wreg     PTR unsigned int 
 10051 ;;		 -> crc_mb_check@crc(2), crc_mb@CRC(2), 
 10052 ;;  next            1    0[COMRAM] unsigned char 
 10053 ;; Auto vars:     Size  Location     Type
 10054 ;;  code            1    7[COMRAM] PTR unsigned int 
 10055 ;;		 -> crc_mb_check@crc(2), crc_mb@CRC(2), 
 10056 ;;  i               1    6[COMRAM] unsigned char 
 10057 ;;  flag            1    5[COMRAM] unsigned char 
 10058 ;; Return value:  Size  Location     Type
 10059 ;;                  1    wreg      unsigned char 
 10060 ;; Registers used:
 10061 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10062 ;; Tracked objects:
 10063 ;;		On entry : 0/1
 10064 ;;		On exit  : 0/0
 10065 ;;		Unchanged: 0/0
 10066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10067 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10068 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10069 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10070 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10071 ;;Total ram usage:        8 bytes
 10072 ;; Hardware stack levels used:    1
 10073 ;; Hardware stack levels required when called:    4
 10074 ;; This function calls:
 10075 ;;		Nothing
 10076 ;; This function is called by:
 10077 ;;		_crc_mb
 10078 ;;		_crc_mb_check
 10079 ;; This function uses a non-reentrant model
 10080 ;;
 10081                           
 10082                           	psect	text39
 10083  00120A                     __ptext39:
 10084                           	opt stack 0
 10085  00120A                     _crc_mb_calc:
 10086                           	opt stack 16
 10087                           
 10088                           ; BSR set to: 1
 10089                           ;incstack = 0
 10090                           ;crc_mb_calc@code stored from wreg
 10091  00120A  6E08               	movwf	crc_mb_calc@code,c
 10092                           
 10093                           ;modbus_RTU.c: 45: unsigned char flag;
 10094                           ;modbus_RTU.c: 46: unsigned char i;
 10095                           ;modbus_RTU.c: 47: *code ^= next;
 10096  00120C  5008               	movf	crc_mb_calc@code,w,c
 10097  00120E  6ED9               	movwf	fsr2l,c
 10098  001210  6ADA               	clrf	fsr2h,c
 10099  001212  5001               	movf	crc_mb_calc@next,w,c
 10100  001214  1ADE               	xorwf	postinc2,f,c
 10101  001216  0E00               	movlw	0
 10102  001218  1ADD               	xorwf	postdec2,f,c
 10103                           
 10104                           ;modbus_RTU.c: 49: for (i = 0; i < 8; i++) {
 10105  00121A  6A07               	clrf	crc_mb_calc@i,c
 10106  00121C                     i1l3641:
 10107                           
 10108                           ;modbus_RTU.c: 50: flag = *code & 1;
 10109  00121C  5008               	movf	crc_mb_calc@code,w,c
 10110  00121E  6ED9               	movwf	fsr2l,c
 10111  001220  6ADA               	clrf	fsr2h,c
 10112  001222  50DF               	movf	indf2,w,c
 10113  001224  0B01               	andlw	1
 10114  001226  6E06               	movwf	crc_mb_calc@flag,c
 10115                           
 10116                           ;modbus_RTU.c: 51: *code = *code >> 1;
 10117  001228  5008               	movf	crc_mb_calc@code,w,c
 10118  00122A  6ED9               	movwf	fsr2l,c
 10119  00122C  6ADA               	clrf	fsr2h,c
 10120  00122E  CFDE F002          	movff	postinc2,??_crc_mb_calc
 10121  001232  CFDD F003          	movff	postdec2,??_crc_mb_calc+1
 10122  001236  90D8               	bcf	status,0,c
 10123  001238  3003               	rrcf	??_crc_mb_calc+1,w,c
 10124  00123A  6E05               	movwf	(??_crc_mb_calc+3)& (0+255),c
 10125  00123C  3002               	rrcf	??_crc_mb_calc,w,c
 10126  00123E  6E04               	movwf	(??_crc_mb_calc+2)& (0+255),c
 10127  001240  5008               	movf	crc_mb_calc@code,w,c
 10128  001242  6ED9               	movwf	fsr2l,c
 10129  001244  6ADA               	clrf	fsr2h,c
 10130  001246  C004  FFDE         	movff	??_crc_mb_calc+2,postinc2
 10131  00124A  C005  FFDD         	movff	??_crc_mb_calc+3,postdec2
 10132                           
 10133                           ;modbus_RTU.c: 52: if (flag) *code ^= 0xA001;
 10134  00124E  5006               	movf	crc_mb_calc@flag,w,c
 10135  001250  E007               	bz	i1l3647
 10136  001252  5008               	movf	crc_mb_calc@code,w,c
 10137  001254  6ED9               	movwf	fsr2l,c
 10138  001256  6ADA               	clrf	fsr2h,c
 10139  001258  0E01               	movlw	1
 10140  00125A  1ADE               	xorwf	postinc2,f,c
 10141  00125C  0EA0               	movlw	160
 10142  00125E  1ADD               	xorwf	postdec2,f,c
 10143  001260                     i1l3647:
 10144  001260  2A07               	incf	crc_mb_calc@i,f,c
 10145  001262  0E07               	movlw	7
 10146  001264  6407               	cpfsgt	crc_mb_calc@i,c
 10147  001266  D7DA               	goto	i1l3641
 10148  001268  0C07               	retlw	7
 10149  00126A                     __end_of_crc_mb_calc:
 10150                           	opt stack 0
 10151                           tblptru	equ	0xFF8
 10152                           tblptrh	equ	0xFF7
 10153                           tblptrl	equ	0xFF6
 10154                           tablat	equ	0xFF5
 10155                           prodh	equ	0xFF4
 10156                           prodl	equ	0xFF3
 10157                           intcon	equ	0xFF2
 10158                           postinc0	equ	0xFEE
 10159                           wreg	equ	0xFE8
 10160                           indf1	equ	0xFE7
 10161                           postinc1	equ	0xFE6
 10162                           postdec1	equ	0xFE5
 10163                           fsr1h	equ	0xFE2
 10164                           fsr1l	equ	0xFE1
 10165                           bsr	equ	0xFE0
 10166                           indf2	equ	0xFDF
 10167                           postinc2	equ	0xFDE
 10168                           postdec2	equ	0xFDD
 10169                           fsr2h	equ	0xFDA
 10170                           fsr2l	equ	0xFD9
 10171                           status	equ	0xFD8
 10172                           
 10173 ;; *************** function _SendMessage *****************
 10174 ;; Defined at:
 10175 ;;		line 43 in file "../lib/messages.c"
 10176 ;; Parameters:    Size  Location     Type
 10177 ;;  Msg             1    wreg     unsigned char 
 10178 ;; Auto vars:     Size  Location     Type
 10179 ;;  Msg             1    0[COMRAM] unsigned char 
 10180 ;; Return value:  Size  Location     Type
 10181 ;;		None               void
 10182 ;; Registers used:
 10183 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10184 ;; Tracked objects:
 10185 ;;		On entry : 0/1
 10186 ;;		On exit  : F/0
 10187 ;;		Unchanged: 0/0
 10188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10190 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10192 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10193 ;;Total ram usage:        1 bytes
 10194 ;; Hardware stack levels used:    1
 10195 ;; Hardware stack levels required when called:    4
 10196 ;; This function calls:
 10197 ;;		Nothing
 10198 ;; This function is called by:
 10199 ;;		_LO_ISR
 10200 ;; This function uses a non-reentrant model
 10201 ;;
 10202                           
 10203                           	psect	text40
 10204  00176A                     __ptext40:
 10205                           	opt stack 0
 10206  00176A                     _SendMessage:
 10207                           	opt stack 17
 10208                           
 10209                           ;incstack = 0
 10210                           ;SendMessage@Msg stored from wreg
 10211  00176A  6E01               	movwf	SendMessage@Msg,c
 10212                           
 10213                           ;messages.c: 44: Messages[Msg] = MSG_PHASE_PREPARE;
 10214  00176C  5001               	movf	SendMessage@Msg,w,c
 10215  00176E  0100               	movlb	0	; () banked
 10216  001770  0F60               	addlw	low _Messages	;volatile
 10217  001772  6ED9               	movwf	fsr2l,c
 10218  001774  6ADA               	clrf	fsr2h,c
 10219  001776  0E01               	movlw	1
 10220  001778  6EDF               	movwf	indf2,c
 10221                           
 10222                           ; BSR set to: 0
 10223  00177A  0C01               	retlw	1
 10224  00177C                     __end_of_SendMessage:
 10225                           	opt stack 0
 10226                           tblptru	equ	0xFF8
 10227                           tblptrh	equ	0xFF7
 10228                           tblptrl	equ	0xFF6
 10229                           tablat	equ	0xFF5
 10230                           prodh	equ	0xFF4
 10231                           prodl	equ	0xFF3
 10232                           intcon	equ	0xFF2
 10233                           postinc0	equ	0xFEE
 10234                           wreg	equ	0xFE8
 10235                           indf1	equ	0xFE7
 10236                           postinc1	equ	0xFE6
 10237                           postdec1	equ	0xFE5
 10238                           fsr1h	equ	0xFE2
 10239                           fsr1l	equ	0xFE1
 10240                           bsr	equ	0xFE0
 10241                           indf2	equ	0xFDF
 10242                           postinc2	equ	0xFDE
 10243                           postdec2	equ	0xFDD
 10244                           fsr2h	equ	0xFDA
 10245                           fsr2l	equ	0xFD9
 10246                           status	equ	0xFD8
 10247                           
 10248 ;; *************** function _BSemOn *****************
 10249 ;; Defined at:
 10250 ;;		line 142 in file "../lib/messages.c"
 10251 ;; Parameters:    Size  Location     Type
 10252 ;;  Sem             1    wreg     unsigned char 
 10253 ;; Auto vars:     Size  Location     Type
 10254 ;;  Sem             1    0[COMRAM] unsigned char 
 10255 ;; Return value:  Size  Location     Type
 10256 ;;		None               void
 10257 ;; Registers used:
 10258 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10259 ;; Tracked objects:
 10260 ;;		On entry : 0/1
 10261 ;;		On exit  : F/0
 10262 ;;		Unchanged: 0/0
 10263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10265 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10267 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10268 ;;Total ram usage:        1 bytes
 10269 ;; Hardware stack levels used:    1
 10270 ;; Hardware stack levels required when called:    4
 10271 ;; This function calls:
 10272 ;;		Nothing
 10273 ;; This function is called by:
 10274 ;;		_LO_ISR
 10275 ;; This function uses a non-reentrant model
 10276 ;;
 10277                           
 10278                           	psect	text41
 10279  00177C                     __ptext41:
 10280                           	opt stack 0
 10281  00177C                     _BSemOn:
 10282                           	opt stack 17
 10283                           
 10284                           ; BSR set to: 0
 10285                           ;incstack = 0
 10286                           ;BSemOn@Sem stored from wreg
 10287  00177C  6E01               	movwf	BSemOn@Sem,c
 10288                           
 10289                           ;messages.c: 143: BSem[Sem] = 1;
 10290  00177E  5001               	movf	BSemOn@Sem,w,c
 10291  001780  0100               	movlb	0	; () banked
 10292  001782  0F6A               	addlw	low _BSem	;volatile
 10293  001784  6ED9               	movwf	fsr2l,c
 10294  001786  6ADA               	clrf	fsr2h,c
 10295  001788  0E01               	movlw	1
 10296  00178A  6EDF               	movwf	indf2,c
 10297                           
 10298                           ; BSR set to: 0
 10299  00178C  0C01               	retlw	1
 10300  00178E                     __end_of_BSemOn:
 10301                           	opt stack 0
 10302                           tblptru	equ	0xFF8
 10303                           tblptrh	equ	0xFF7
 10304                           tblptrl	equ	0xFF6
 10305                           tablat	equ	0xFF5
 10306                           prodh	equ	0xFF4
 10307                           prodl	equ	0xFF3
 10308                           intcon	equ	0xFF2
 10309                           postinc0	equ	0xFEE
 10310                           wreg	equ	0xFE8
 10311                           indf1	equ	0xFE7
 10312                           postinc1	equ	0xFE6
 10313                           postdec1	equ	0xFE5
 10314                           fsr1h	equ	0xFE2
 10315                           fsr1l	equ	0xFE1
 10316                           bsr	equ	0xFE0
 10317                           indf2	equ	0xFDF
 10318                           postinc2	equ	0xFDE
 10319                           postdec2	equ	0xFDD
 10320                           fsr2h	equ	0xFDA
 10321                           fsr2l	equ	0xFD9
 10322                           status	equ	0xFD8
 10323                           
 10324 ;; *************** function _HI_ISR *****************
 10325 ;; Defined at:
 10326 ;;		line 33 in file "../isr.c"
 10327 ;; Parameters:    Size  Location     Type
 10328 ;;		None
 10329 ;; Auto vars:     Size  Location     Type
 10330 ;;		None
 10331 ;; Return value:  Size  Location     Type
 10332 ;;		None               void
 10333 ;; Registers used:
 10334 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10335 ;; Tracked objects:
 10336 ;;		On entry : 0/0
 10337 ;;		On exit  : 0/0
 10338 ;;		Unchanged: 0/0
 10339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10342 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10343 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10344 ;;Total ram usage:        7 bytes
 10345 ;; Hardware stack levels used:    1
 10346 ;; Hardware stack levels required when called:    3
 10347 ;; This function calls:
 10348 ;;		_MTouchAcquisition
 10349 ;; This function is called by:
 10350 ;;		Interrupt level 2
 10351 ;; This function uses a non-reentrant model
 10352 ;;
 10353                           
 10354                           	psect	intcode
 10355  000008                     __pintcode:
 10356                           	opt stack 0
 10357  000008                     _HI_ISR:
 10358                           	opt stack 15
 10359                           
 10360                           ; BSR set to: 0
 10361                           ;incstack = 0
 10362  000008  CFE1 F0CB          	movff	fsr1l,??_HI_ISR+1
 10363  00000C  CFE2 F0CC          	movff	fsr1h,??_HI_ISR+2
 10364  000010  CFD9 F0CD          	movff	fsr2l,??_HI_ISR+3
 10365  000014  EF2C  F008         	goto	int_func
 10366                           tblptru	equ	0xFF8
 10367                           tblptrh	equ	0xFF7
 10368                           tblptrl	equ	0xFF6
 10369                           tablat	equ	0xFF5
 10370                           prodh	equ	0xFF4
 10371                           prodl	equ	0xFF3
 10372                           intcon	equ	0xFF2
 10373                           postinc0	equ	0xFEE
 10374                           wreg	equ	0xFE8
 10375                           indf1	equ	0xFE7
 10376                           postinc1	equ	0xFE6
 10377                           postdec1	equ	0xFE5
 10378                           fsr1h	equ	0xFE2
 10379                           fsr1l	equ	0xFE1
 10380                           bsr	equ	0xFE0
 10381                           indf2	equ	0xFDF
 10382                           postinc2	equ	0xFDE
 10383                           postdec2	equ	0xFDD
 10384                           fsr2h	equ	0xFDA
 10385                           fsr2l	equ	0xFD9
 10386                           status	equ	0xFD8
 10387                           
 10388                           	psect	intcode_body
 10389  001058                     __pintcode_body:
 10390                           	opt stack 15
 10391  001058                     int_func:
 10392                           	opt stack 15
 10393  001058  CFDA F0CE          	movff	fsr2h,??_HI_ISR+4
 10394  00105C  CFF3 F0CF          	movff	prodl,??_HI_ISR+5
 10395  001060  CFF4 F0D0          	movff	prodh,??_HI_ISR+6
 10396                           
 10397                           ;isr.c: 34: static WORD w_pwm;
 10398                           ;isr.c: 35: static BYTE beep;
 10399                           ;isr.c: 38: if((PIE1bits.TMR2IE) && (PIR1bits.TMR2IF)) {
 10400  001064  B29D               	btfsc	3997,1,c	;volatile
 10401  001066  A29E               	btfss	3998,1,c	;volatile
 10402  001068  D009               	goto	i2l5149
 10403                           
 10404                           ;isr.c: 40: sys_tick++;
 10405  00106A  0100               	movlb	0	; () banked
 10406  00106C  4B72               	infsnz	_sys_tick& (0+255),f,b	;volatile
 10407  00106E  2B73               	incf	(_sys_tick+1)& (0+255),f,b	;volatile
 10408                           
 10409                           ;isr.c: 41: _sys_tick++;
 10410  001070  4B6E               	infsnz	__sys_tick& (0+255),f,b	;volatile
 10411  001072  2B6F               	incf	(__sys_tick+1)& (0+255),f,b	;volatile
 10412                           
 10413                           ; BSR set to: 0
 10414                           ;isr.c: 42: MTouchAcquisition();
 10415  001074  EC5F  F005         	call	_MTouchAcquisition	;wreg free
 10416                           
 10417                           ; BSR set to: 0
 10418                           ;isr.c: 44: TMR2 = 0;
 10419  001078  6ABC               	clrf	4028,c	;volatile
 10420                           
 10421                           ; BSR set to: 0
 10422                           ;isr.c: 45: PIR1bits.TMR2IF = 0;
 10423  00107A  929E               	bcf	3998,1,c	;volatile
 10424  00107C                     i2l5149:
 10425                           
 10426                           ;isr.c: 46: }
 10427                           ;isr.c: 48: if((PIE5bits.TMR4IE) && (PIR5bits.TMR4IF)) {
 10428  00107C  B07D               	btfsc	3965,0,c	;volatile
 10429  00107E  A07E               	btfss	3966,0,c	;volatile
 10430  001080  D017               	goto	i2l399
 10431                           
 10432                           ;isr.c: 50: if(beep_timer > 0) {
 10433  001082  0100               	movlb	0	; () banked
 10434  001084  5171               	movf	(_beep_timer+1)& (0+255),w,b	;volatile
 10435  001086  1170               	iorwf	_beep_timer& (0+255),w,b	;volatile
 10436  001088  E00F               	bz	i2l395
 10437                           
 10438                           ; BSR set to: 0
 10439                           ;isr.c: 51: beep_timer--;
 10440  00108A  0770               	decf	_beep_timer& (0+255),f,b	;volatile
 10441  00108C  A0D8               	btfss	status,0,c
 10442  00108E  0771               	decf	(_beep_timer+1)& (0+255),f,b	;volatile
 10443                           
 10444                           ; BSR set to: 0
 10445                           ;isr.c: 52: LATAbits.LATA4 = 1;
 10446  001090  8889               	bsf	3977,4,c	;volatile
 10447                           
 10448                           ; BSR set to: 0
 10449                           ;isr.c: 53: if((beep++) & 1) {
 10450  001092  2B74               	incf	HI_ISR@beep& (0+255),f,b
 10451  001094  0574               	decf	HI_ISR@beep& (0+255),w,b
 10452  001096  6FCA               	movwf	??_HI_ISR& (0+255),b
 10453  001098  A1CA               	btfss	??_HI_ISR& (0+255),0,b
 10454  00109A  D002               	goto	i2l396
 10455                           
 10456                           ; BSR set to: 0
 10457                           ;isr.c: 54: LATAbits.LATA4 = 0;
 10458  00109C  9889               	bcf	3977,4,c	;volatile
 10459                           
 10460                           ;isr.c: 55: } else {
 10461  00109E  D001               	goto	i2l397
 10462  0010A0                     i2l396:
 10463                           
 10464                           ; BSR set to: 0
 10465                           ;isr.c: 56: LATAbits.LATA4 = 1;
 10466  0010A0  8889               	bsf	3977,4,c	;volatile
 10467  0010A2                     i2l397:
 10468                           
 10469                           ; BSR set to: 0
 10470                           ;isr.c: 57: }
 10471                           ;isr.c: 58: __nop();
 10472  0010A2  F000               	nop	
 10473                           
 10474                           ;isr.c: 59: __nop();
 10475  0010A4  F000               	nop	
 10476                           
 10477                           ;isr.c: 60: } else {
 10478  0010A6  D001               	goto	i2l398
 10479  0010A8                     i2l395:
 10480                           
 10481                           ; BSR set to: 0
 10482                           ;isr.c: 61: LATAbits.LATA4 = 0;
 10483  0010A8  9889               	bcf	3977,4,c	;volatile
 10484  0010AA                     i2l398:
 10485                           
 10486                           ;isr.c: 62: }
 10487                           ;isr.c: 65: TMR4 = 0;
 10488  0010AA  010F               	movlb	15	; () banked
 10489  0010AC  6B53               	clrf	83,b	;volatile
 10490                           
 10491                           ;isr.c: 66: PIR5bits.TMR4IF = 0;
 10492  0010AE  907E               	bcf	3966,0,c	;volatile
 10493  0010B0                     i2l399:
 10494  0010B0  C0D0  FFF4         	movff	??_HI_ISR+6,prodh
 10495  0010B4  C0CF  FFF3         	movff	??_HI_ISR+5,prodl
 10496  0010B8  C0CE  FFDA         	movff	??_HI_ISR+4,fsr2h
 10497  0010BC  C0CD  FFD9         	movff	??_HI_ISR+3,fsr2l
 10498  0010C0  C0CC  FFE2         	movff	??_HI_ISR+2,fsr1h
 10499  0010C4  C0CB  FFE1         	movff	??_HI_ISR+1,fsr1l
 10500  0010C8  0011               	retfie		f
 10501  0010CA                     __end_of_HI_ISR:
 10502                           	opt stack 0
 10503                           tblptru	equ	0xFF8
 10504                           tblptrh	equ	0xFF7
 10505                           tblptrl	equ	0xFF6
 10506                           tablat	equ	0xFF5
 10507                           prodh	equ	0xFF4
 10508                           prodl	equ	0xFF3
 10509                           intcon	equ	0xFF2
 10510                           postinc0	equ	0xFEE
 10511                           wreg	equ	0xFE8
 10512                           indf1	equ	0xFE7
 10513                           postinc1	equ	0xFE6
 10514                           postdec1	equ	0xFE5
 10515                           fsr1h	equ	0xFE2
 10516                           fsr1l	equ	0xFE1
 10517                           bsr	equ	0xFE0
 10518                           indf2	equ	0xFDF
 10519                           postinc2	equ	0xFDE
 10520                           postdec2	equ	0xFDD
 10521                           fsr2h	equ	0xFDA
 10522                           fsr2l	equ	0xFD9
 10523                           status	equ	0xFD8
 10524                           
 10525 ;; *************** function _MTouchAcquisition *****************
 10526 ;; Defined at:
 10527 ;;		line 249 in file "../lib/mTouchCap/mTouchSensor.c"
 10528 ;; Parameters:    Size  Location     Type
 10529 ;;		None
 10530 ;; Auto vars:     Size  Location     Type
 10531 ;;  pCurrentSens    2   30[BANK0 ] PTR struct tag_SENSOR
 10532 ;;		 -> sensors(192), 
 10533 ;;  pPreviousSen    2   27[BANK0 ] PTR struct tag_SENSOR
 10534 ;;		 -> sensors(192), 
 10535 ;;  pLastSensor     2   25[BANK0 ] PTR struct tag_SENSOR
 10536 ;;		 -> sensors(192), 
 10537 ;;  data            2   23[BANK0 ] short 
 10538 ;;  i               1   29[BANK0 ] unsigned char 
 10539 ;; Return value:  Size  Location     Type
 10540 ;;		None               void
 10541 ;; Registers used:
 10542 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10543 ;; Tracked objects:
 10544 ;;		On entry : F/0
 10545 ;;		On exit  : F/0
 10546 ;;		Unchanged: 0/0
 10547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10549 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10550 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10551 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10552 ;;Total ram usage:       12 bytes
 10553 ;; Hardware stack levels used:    1
 10554 ;; Hardware stack levels required when called:    2
 10555 ;; This function calls:
 10556 ;;		_MTouchAcquisitionCVD
 10557 ;;		_MTouchSensorDecode
 10558 ;; This function is called by:
 10559 ;;		_HI_ISR
 10560 ;; This function uses a non-reentrant model
 10561 ;;
 10562                           
 10563                           	psect	text43
 10564  000ABE                     __ptext43:
 10565                           	opt stack 0
 10566  000ABE                     _MTouchAcquisition:
 10567                           	opt stack 15
 10568                           
 10569                           ; BSR set to: 0
 10570                           ;mTouchSensor.c: 251: INT16 data;
 10571                           ;mTouchSensor.c: 252: UINT8 i;
 10572                           ;mTouchSensor.c: 254: static UINT8 startSensorNumber = 0;
 10573                           ;mTouchSensor.c: 255: SENSOR* pCurrentSensor;
 10574                           ;mTouchSensor.c: 256: SENSOR* pLastSensor;
 10575                           ;mTouchSensor.c: 259: SENSOR* pPreviousSensor;
 10576                           ;mTouchSensor.c: 264: pCurrentSensor = (SENSOR*)sensors + startSensorNumber;
 10577                           
 10578                           ;incstack = 0
 10579  000ABE  5175               	movf	MTouchAcquisition@startSensorNumber& (0+255),w,b
 10580  000AC0  0D20               	mullw	32
 10581  000AC2  0E00               	movlw	low _sensors	;volatile
 10582  000AC4  24F3               	addwf	prodl,w,c
 10583  000AC6  0100               	movlb	0	; () banked
 10584  000AC8  6FC8               	movwf	MTouchAcquisition@pCurrentSensor& (0+255),b
 10585  000ACA  0E02               	movlw	high _sensors	;volatile
 10586  000ACC  20F4               	addwfc	prodh,w,c
 10587  000ACE  6FC9               	movwf	(MTouchAcquisition@pCurrentSensor+1)& (0+255),b
 10588                           
 10589                           ; BSR set to: 0
 10590                           ;mTouchSensor.c: 265: pLastSensor = (SENSOR*)sensors + (6-1);
 10591  000AD0  0E02               	movlw	high (_sensors+160)	;volatile
 10592  000AD2  6FC4               	movwf	(MTouchAcquisition@pLastSensor+1)& (0+255),b
 10593  000AD4  0EA0               	movlw	low (_sensors+160)	;volatile
 10594  000AD6  6FC3               	movwf	MTouchAcquisition@pLastSensor& (0+255),b
 10595                           
 10596                           ; BSR set to: 0
 10597                           ;mTouchSensor.c: 268: if(startSensorNumber == (6-1))
 10598  000AD8  5175               	movf	MTouchAcquisition@startSensorNumber& (0+255),w,b
 10599  000ADA  0A05               	xorlw	5
 10600  000ADC  E105               	bnz	i2l4977
 10601                           
 10602                           ; BSR set to: 0
 10603                           ;mTouchSensor.c: 269: {
 10604                           ;mTouchSensor.c: 270: pPreviousSensor = (SENSOR*)sensors;
 10605  000ADE  0E02               	movlw	high _sensors	;volatile
 10606  000AE0  6FC6               	movwf	(MTouchAcquisition@pPreviousSensor+1)& (0+255),b
 10607  000AE2  0E00               	movlw	low _sensors	;volatile
 10608  000AE4  6FC5               	movwf	MTouchAcquisition@pPreviousSensor& (0+255),b
 10609                           
 10610                           ;mTouchSensor.c: 271: }else{
 10611  000AE6  D006               	goto	i2l4979
 10612  000AE8                     i2l4977:
 10613                           
 10614                           ; BSR set to: 0
 10615                           ;mTouchSensor.c: 272: pPreviousSensor = pCurrentSensor + 1;
 10616  000AE8  0E20               	movlw	32
 10617  000AEA  25C8               	addwf	MTouchAcquisition@pCurrentSensor& (0+255),w,b
 10618  000AEC  6FC5               	movwf	MTouchAcquisition@pPreviousSensor& (0+255),b
 10619  000AEE  0E00               	movlw	0
 10620  000AF0  21C9               	addwfc	(MTouchAcquisition@pCurrentSensor+1)& (0+255),w,b
 10621  000AF2  6FC6               	movwf	(MTouchAcquisition@pPreviousSensor+1)& (0+255),b
 10622  000AF4                     i2l4979:
 10623                           
 10624                           ; BSR set to: 0
 10625                           ;mTouchSensor.c: 273: }
 10626                           ;mTouchSensor.c: 276: for(i=0; i<6; i++)
 10627  000AF4  6BC7               	clrf	MTouchAcquisition@i& (0+255),b
 10628  000AF6                     i2l4985:
 10629                           
 10630                           ; BSR set to: 0
 10631                           ;mTouchSensor.c: 277: {
 10632                           ;mTouchSensor.c: 278: if((pCurrentSensor->state&SENSOR_DISCONNECTED) == 0)
 10633  000AF6  EE20 F01C          	lfsr	2,28
 10634  000AFA  51C8               	movf	MTouchAcquisition@pCurrentSensor& (0+255),w,b
 10635  000AFC  26D9               	addwf	fsr2l,f,c
 10636  000AFE  51C9               	movf	(MTouchAcquisition@pCurrentSensor+1)& (0+255),w,b
 10637  000B00  22DA               	addwfc	fsr2h,f,c
 10638  000B02  50DF               	movf	indf2,w,c
 10639  000B04  6FBE               	movwf	??_MTouchAcquisition& (0+255),b
 10640  000B06  BFBE               	btfsc	??_MTouchAcquisition& (0+255),7,b
 10641  000B08  D054               	goto	i2l4999
 10642                           
 10643                           ; BSR set to: 0
 10644                           ;mTouchSensor.c: 279: {
 10645                           ;mTouchSensor.c: 287: data = MTouchAcquisitionCVD(pCurrentSensor,pPreviousSensor);
 10646  000B0A  C0C9  F0AB         	movff	MTouchAcquisition@pCurrentSensor+1,MTouchAcquisitionCVD@pCurrentSensor+1
 10647  000B0E  C0C8  F0AA         	movff	MTouchAcquisition@pCurrentSensor,MTouchAcquisitionCVD@pCurrentSensor
 10648  000B12  C0C6  F0AD         	movff	MTouchAcquisition@pPreviousSensor+1,MTouchAcquisitionCVD@pPreviousSensor+1
 10649  000B16  C0C5  F0AC         	movff	MTouchAcquisition@pPreviousSensor,MTouchAcquisitionCVD@pPreviousSensor
 10650  000B1A  ECFA  F001         	call	_MTouchAcquisitionCVD	;wreg free
 10651  000B1E  C0AA  F0C1         	movff	?_MTouchAcquisitionCVD,MTouchAcquisition@data
 10652  000B22  C0AB  F0C2         	movff	?_MTouchAcquisitionCVD+1,MTouchAcquisition@data+1
 10653                           
 10654                           ; BSR set to: 0
 10655                           ;mTouchSensor.c: 292: if(data > pCurrentSensor->decimateFilterData)
 10656  000B26  D862               	call	PL26	;call to abstracted procedure
 10657  000B28  51BF               	movf	(??_MTouchAcquisition+1)& (0+255),w,b
 10658  000B2A  0A80               	xorlw	128
 10659  000B2C  6FC0               	movwf	(??_MTouchAcquisition+2)& (0+255),b
 10660  000B2E  51C1               	movf	MTouchAcquisition@data& (0+255),w,b
 10661  000B30  5DBE               	subwf	??_MTouchAcquisition& (0+255),w,b
 10662  000B32  51C2               	movf	(MTouchAcquisition@data+1)& (0+255),w,b
 10663  000B34  0A80               	xorlw	128
 10664  000B36  59C0               	subwfb	(??_MTouchAcquisition+2)& (0+255),w,b
 10665  000B38  E20A               	bc	i2l4993
 10666                           
 10667                           ; BSR set to: 0
 10668                           ;mTouchSensor.c: 293: {
 10669                           ;mTouchSensor.c: 294: pCurrentSensor->decimateFilterData++;
 10670  000B3A  EE20 F00C          	lfsr	2,12
 10671  000B3E  51C8               	movf	MTouchAcquisition@pCurrentSensor& (0+255),w,b
 10672  000B40  26D9               	addwf	fsr2l,f,c
 10673  000B42  51C9               	movf	(MTouchAcquisition@pCurrentSensor+1)& (0+255),w,b
 10674  000B44  22DA               	addwfc	fsr2h,f,c
 10675  000B46  2ADE               	incf	postinc2,f,c
 10676  000B48  0E00               	movlw	0
 10677  000B4A  22DD               	addwfc	postdec2,f,c
 10678                           
 10679                           ;mTouchSensor.c: 295: } else {
 10680  000B4C  D003               	goto	i2l116
 10681  000B4E                     i2l4993:
 10682                           
 10683                           ; BSR set to: 0
 10684                           ;mTouchSensor.c: 296: pCurrentSensor->decimateFilterData--;
 10685  000B4E  EE20 F00C          	lfsr	2,12
 10686  000B52  D857               	call	PL46	;call to abstracted procedure
 10687  000B54                     i2l116:
 10688                           
 10689                           ; BSR set to: 0
 10690                           ;mTouchSensor.c: 297: }
 10691                           ;mTouchSensor.c: 300: pCurrentSensor->oversampleFilterData += pCurrentSensor->decimateFi
      +                          lterData;
 10692  000B54  D84B               	call	PL26	;call to abstracted procedure
 10693  000B56  EE20 F004          	lfsr	2,4
 10694  000B5A  51C8               	movf	MTouchAcquisition@pCurrentSensor& (0+255),w,b
 10695  000B5C  26D9               	addwf	fsr2l,f,c
 10696  000B5E  51C9               	movf	(MTouchAcquisition@pCurrentSensor+1)& (0+255),w,b
 10697  000B60  22DA               	addwfc	fsr2h,f,c
 10698  000B62  51BE               	movf	??_MTouchAcquisition& (0+255),w,b
 10699  000B64  26DE               	addwf	postinc2,f,c
 10700  000B66  51BF               	movf	(??_MTouchAcquisition+1)& (0+255),w,b
 10701  000B68  22DE               	addwfc	postinc2,f,c
 10702  000B6A  0E00               	movlw	0
 10703  000B6C  BFBF               	btfsc	(??_MTouchAcquisition+1)& (0+255),7,b
 10704  000B6E  0EFF               	movlw	255
 10705  000B70  22DE               	addwfc	postinc2,f,c
 10706  000B72  22DD               	addwfc	postdec2,f,c
 10707                           
 10708                           ;mTouchSensor.c: 302: if((pCurrentSensor->sampleCounter)-- <= 0)
 10709  000B74  EE20 F00E          	lfsr	2,14
 10710  000B78  D844               	call	PL46	;call to abstracted procedure
 10711  000B7A  2AD9               	incf	fsr2l,f,c
 10712  000B7C  1CDD               	comf	postdec2,w,c
 10713  000B7E  0EFF               	movlw	255
 10714  000B80  B4D8               	btfsc	status,2,c
 10715  000B82  18DF               	xorwf	indf2,w,c
 10716  000B84  E116               	bnz	i2l4999
 10717                           
 10718                           ; BSR set to: 0
 10719                           ;mTouchSensor.c: 303: {
 10720                           ;mTouchSensor.c: 304: MTouchSensorDecode(pCurrentSensor);
 10721  000B86  C0C9  F0B4         	movff	MTouchAcquisition@pCurrentSensor+1,MTouchSensorDecode@pSensor+1
 10722  000B8A  C0C8  F0B3         	movff	MTouchAcquisition@pCurrentSensor,MTouchSensorDecode@pSensor
 10723  000B8E  EC11  F003         	call	_MTouchSensorDecode	;wreg free
 10724                           
 10725                           ; BSR set to: 0
 10726                           ;mTouchSensor.c: 305: pCurrentSensor->sampleCounter = pCurrentSensor->samplesNumber;
 10727  000B92  EE20 F010          	lfsr	2,16
 10728  000B96  51C8               	movf	MTouchAcquisition@pCurrentSensor& (0+255),w,b
 10729  000B98  26D9               	addwf	fsr2l,f,c
 10730  000B9A  51C9               	movf	(MTouchAcquisition@pCurrentSensor+1)& (0+255),w,b
 10731  000B9C  22DA               	addwfc	fsr2h,f,c
 10732  000B9E  EE10 F00E          	lfsr	1,14
 10733  000BA2  51C8               	movf	MTouchAcquisition@pCurrentSensor& (0+255),w,b
 10734  000BA4  26E1               	addwf	fsr1l,f,c
 10735  000BA6  51C9               	movf	(MTouchAcquisition@pCurrentSensor+1)& (0+255),w,b
 10736  000BA8  22E2               	addwfc	fsr1h,f,c
 10737  000BAA  CFDE FFE6          	movff	postinc2,postinc1
 10738  000BAE  CFDD FFE5          	movff	postdec2,postdec1
 10739  000BB2                     i2l4999:
 10740                           
 10741                           ; BSR set to: 0
 10742                           ;mTouchSensor.c: 306: }
 10743                           ;mTouchSensor.c: 308: }
 10744                           ;mTouchSensor.c: 312: pPreviousSensor = pCurrentSensor;
 10745  000BB2  C0C9  F0C6         	movff	MTouchAcquisition@pCurrentSensor+1,MTouchAcquisition@pPreviousSensor+1
 10746  000BB6  C0C8  F0C5         	movff	MTouchAcquisition@pCurrentSensor,MTouchAcquisition@pPreviousSensor
 10747                           
 10748                           ; BSR set to: 0
 10749                           ;mTouchSensor.c: 315: if(pCurrentSensor == pLastSensor)
 10750  000BBA  51C4               	movf	(MTouchAcquisition@pLastSensor+1)& (0+255),w,b
 10751  000BBC  19C9               	xorwf	(MTouchAcquisition@pCurrentSensor+1)& (0+255),w,b
 10752  000BBE  E102               	bnz	i2u358_45
 10753  000BC0  51C3               	movf	MTouchAcquisition@pLastSensor& (0+255),w,b
 10754  000BC2  19C8               	xorwf	MTouchAcquisition@pCurrentSensor& (0+255),w,b
 10755  000BC4                     i2u358_45:
 10756  000BC4  E106               	bnz	i2l5005
 10757                           
 10758                           ; BSR set to: 0
 10759                           ;mTouchSensor.c: 316: {
 10760                           ;mTouchSensor.c: 317: pCurrentSensor = (SENSOR*)sensors;
 10761  000BC6  0E02               	movlw	high _sensors	;volatile
 10762  000BC8  0100               	movlb	0	; () banked
 10763  000BCA  6FC9               	movwf	(MTouchAcquisition@pCurrentSensor+1)& (0+255),b
 10764  000BCC  0E00               	movlw	low _sensors	;volatile
 10765  000BCE  6FC8               	movwf	MTouchAcquisition@pCurrentSensor& (0+255),b
 10766                           
 10767                           ;mTouchSensor.c: 318: continue;
 10768  000BD0  D004               	goto	i2l5007
 10769  000BD2                     i2l5005:
 10770                           
 10771                           ; BSR set to: 0
 10772                           ;mTouchSensor.c: 319: }
 10773                           ;mTouchSensor.c: 321: pCurrentSensor++;
 10774  000BD2  0E20               	movlw	32
 10775  000BD4  27C8               	addwf	MTouchAcquisition@pCurrentSensor& (0+255),f,b
 10776  000BD6  0E00               	movlw	0
 10777  000BD8  23C9               	addwfc	(MTouchAcquisition@pCurrentSensor+1)& (0+255),f,b
 10778  000BDA                     i2l5007:
 10779                           
 10780                           ; BSR set to: 0
 10781  000BDA  2BC7               	incf	MTouchAcquisition@i& (0+255),f,b
 10782  000BDC  0E05               	movlw	5
 10783  000BDE  65C7               	cpfsgt	MTouchAcquisition@i& (0+255),b
 10784  000BE0  D78A               	goto	i2l4985
 10785                           
 10786                           ; BSR set to: 0
 10787                           ;mTouchSensor.c: 322: }
 10788                           ;mTouchSensor.c: 324: startSensorNumber++;
 10789  000BE2  2B75               	incf	MTouchAcquisition@startSensorNumber& (0+255),f,b
 10790                           
 10791                           ; BSR set to: 0
 10792                           ;mTouchSensor.c: 326: if(startSensorNumber > (6-1))
 10793  000BE4  6575               	cpfsgt	MTouchAcquisition@startSensorNumber& (0+255),b
 10794  000BE6  0C05               	retlw	5
 10795                           
 10796                           ; BSR set to: 0
 10797                           ;mTouchSensor.c: 327: {
 10798                           ;mTouchSensor.c: 328: startSensorNumber = 0;
 10799  000BE8  6B75               	clrf	MTouchAcquisition@startSensorNumber& (0+255),b
 10800                           
 10801                           ; BSR set to: 0
 10802  000BEA  0012               	return	
 10803  000BEC                     __end_of_MTouchAcquisition:
 10804                           	opt stack 0
 10805  000BEC                     PL26:
 10806                           	opt stack 15
 10807  000BEC  EE20 F00C          	lfsr	2,12
 10808  000BF0  51C8               	movf	MTouchAcquisition@pCurrentSensor& (0+255),w,b
 10809  000BF2  26D9               	addwf	fsr2l,f,c
 10810  000BF4  51C9               	movf	(MTouchAcquisition@pCurrentSensor+1)& (0+255),w,b
 10811  000BF6  22DA               	addwfc	fsr2h,f,c
 10812  000BF8  CFDE F0BE          	movff	postinc2,??_MTouchAcquisition
 10813  000BFC  CFDD F0BF          	movff	postdec2,??_MTouchAcquisition+1
 10814  000C00  0012               	return	
 10815  000C02                     __end_ofPL26:
 10816                           	opt stack 0
 10817  000C02                     PL46:
 10818                           	opt stack 15
 10819  000C02  51C8               	movf	MTouchAcquisition@pCurrentSensor& (0+255),w,b
 10820  000C04  26D9               	addwf	fsr2l,f,c
 10821  000C06  51C9               	movf	(MTouchAcquisition@pCurrentSensor+1)& (0+255),w,b
 10822  000C08  22DA               	addwfc	fsr2h,f,c
 10823  000C0A  06DE               	decf	postinc2,f,c
 10824  000C0C  0E00               	movlw	0
 10825  000C0E  5ADD               	subwfb	postdec2,f,c
 10826  000C10  0C00               	retlw	0
 10827  000C12                     __end_ofPL46:
 10828                           	opt stack 0
 10829                           tblptru	equ	0xFF8
 10830                           tblptrh	equ	0xFF7
 10831                           tblptrl	equ	0xFF6
 10832                           tablat	equ	0xFF5
 10833                           prodh	equ	0xFF4
 10834                           prodl	equ	0xFF3
 10835                           intcon	equ	0xFF2
 10836                           postinc0	equ	0xFEE
 10837                           wreg	equ	0xFE8
 10838                           indf1	equ	0xFE7
 10839                           postinc1	equ	0xFE6
 10840                           postdec1	equ	0xFE5
 10841                           fsr1h	equ	0xFE2
 10842                           fsr1l	equ	0xFE1
 10843                           bsr	equ	0xFE0
 10844                           indf2	equ	0xFDF
 10845                           postinc2	equ	0xFDE
 10846                           postdec2	equ	0xFDD
 10847                           fsr2h	equ	0xFDA
 10848                           fsr2l	equ	0xFD9
 10849                           status	equ	0xFD8
 10850                           
 10851 ;; *************** function _MTouchSensorDecode *****************
 10852 ;; Defined at:
 10853 ;;		line 136 in file "../lib/mTouchCap/mTouchSensor.c"
 10854 ;; Parameters:    Size  Location     Type
 10855 ;;  pSensor         2    9[BANK0 ] PTR struct tag_SENSOR
 10856 ;;		 -> sensors(192), 
 10857 ;; Auto vars:     Size  Location     Type
 10858 ;;  delta           2   15[BANK0 ] short 
 10859 ;; Return value:  Size  Location     Type
 10860 ;;		None               void
 10861 ;; Registers used:
 10862 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, cstack
 10863 ;; Tracked objects:
 10864 ;;		On entry : F/0
 10865 ;;		On exit  : F/0
 10866 ;;		Unchanged: 0/0
 10867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10868 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10869 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10870 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10871 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10872 ;;Total ram usage:        8 bytes
 10873 ;; Hardware stack levels used:    1
 10874 ;; Hardware stack levels required when called:    1
 10875 ;; This function calls:
 10876 ;;		_MTouchUpdateSensorAverage
 10877 ;; This function is called by:
 10878 ;;		_MTouchAcquisition
 10879 ;; This function uses a non-reentrant model
 10880 ;;
 10881                           
 10882                           	psect	text44
 10883  000622                     __ptext44:
 10884                           	opt stack 0
 10885  000622                     _MTouchSensorDecode:
 10886                           	opt stack 15
 10887                           
 10888                           ; BSR set to: 0
 10889                           ;mTouchSensor.c: 139: INT16 delta;
 10890                           ;mTouchSensor.c: 141: delta = pSensor->oversampleFilterData - pSensor->average;
 10891                           
 10892                           ; BSR set to: 0
 10893                           ;incstack = 0
 10894  000622  C0B3  FFD9         	movff	MTouchSensorDecode@pSensor,fsr2l
 10895  000626  C0B4  FFDA         	movff	MTouchSensorDecode@pSensor+1,fsr2h
 10896  00062A  CFDE F0B5          	movff	postinc2,??_MTouchSensorDecode
 10897  00062E  CFDD F0B6          	movff	postdec2,??_MTouchSensorDecode+1
 10898  000632  EE20 F004          	lfsr	2,4
 10899  000636  51B3               	movf	MTouchSensorDecode@pSensor& (0+255),w,b
 10900  000638  26D9               	addwf	fsr2l,f,c
 10901  00063A  51B4               	movf	(MTouchSensorDecode@pSensor+1)& (0+255),w,b
 10902  00063C  22DA               	addwfc	fsr2h,f,c
 10903  00063E  CFDE F0B7          	movff	postinc2,??_MTouchSensorDecode+2
 10904  000642  CFDD F0B8          	movff	postdec2,??_MTouchSensorDecode+3
 10905  000646  51B5               	movf	??_MTouchSensorDecode& (0+255),w,b
 10906  000648  5DB7               	subwf	(??_MTouchSensorDecode+2)& (0+255),w,b
 10907  00064A  6FB9               	movwf	MTouchSensorDecode@delta& (0+255),b
 10908  00064C  51B6               	movf	(??_MTouchSensorDecode+1)& (0+255),w,b
 10909  00064E  59B8               	subwfb	(??_MTouchSensorDecode+3)& (0+255),w,b
 10910  000650  6FBA               	movwf	(MTouchSensorDecode@delta+1)& (0+255),b
 10911                           
 10912                           ; BSR set to: 0
 10913                           ;mTouchSensor.c: 143: if(delta < 0)
 10914  000652  51BA               	movf	(MTouchSensorDecode@delta+1)& (0+255),w,b
 10915  000654  0A80               	xorlw	128
 10916  000656  6EF3               	movwf	prodl,c
 10917  000658  0E80               	movlw	128
 10918  00065A  5CF3               	subwf	prodl,w,c
 10919  00065C  0E00               	movlw	0
 10920  00065E  B4D8               	btfsc	status,2,c
 10921  000660  5DB9               	subwf	MTouchSensorDecode@delta& (0+255),w,b
 10922  000662  E202               	bc	i2l4853
 10923                           
 10924                           ; BSR set to: 0
 10925                           ;mTouchSensor.c: 144: {
 10926                           ;mTouchSensor.c: 145: delta = 0;
 10927  000664  6BB9               	clrf	MTouchSensorDecode@delta& (0+255),b
 10928  000666  6BBA               	clrf	(MTouchSensorDecode@delta+1)& (0+255),b
 10929  000668                     i2l4853:
 10930                           
 10931                           ; BSR set to: 0
 10932                           ;mTouchSensor.c: 146: }
 10933                           ;mTouchSensor.c: 148: pSensor->delta = delta;
 10934  000668  EE20 F018          	lfsr	2,24
 10935  00066C  51B3               	movf	MTouchSensorDecode@pSensor& (0+255),w,b
 10936  00066E  26D9               	addwf	fsr2l,f,c
 10937  000670  51B4               	movf	(MTouchSensorDecode@pSensor+1)& (0+255),w,b
 10938  000672  22DA               	addwfc	fsr2h,f,c
 10939  000674  C0B9  FFDE         	movff	MTouchSensorDecode@delta,postinc2
 10940  000678  C0BA  FFDD         	movff	MTouchSensorDecode@delta+1,postdec2
 10941                           
 10942                           ;mTouchSensor.c: 150: switch(pSensor->state)
 10943  00067C  D065               	goto	i2l4883
 10944  00067E                     i2l4855:
 10945                           
 10946                           ; BSR set to: 0
 10947                           ;mTouchSensor.c: 153: {
 10948                           ;mTouchSensor.c: 154: if (pSensor->debounceCount-- <= 0)
 10949  00067E  D87B               	call	PL6	;call to abstracted procedure
 10950  000680  B4D8               	btfsc	status,2,c
 10951  000682  18DF               	xorwf	indf2,w,c
 10952  000684  E104               	bnz	i2l4859
 10953                           
 10954                           ; BSR set to: 0
 10955                           ;mTouchSensor.c: 155: {
 10956                           ;mTouchSensor.c: 156: pSensor->state = SENSOR_RELEASED;
 10957  000686  D88B               	call	PL38	;call to abstracted procedure
 10958                           
 10959                           ;mTouchSensor.c: 157: pSensor->debounceCount = 8;
 10960  000688  EE20 F01A          	lfsr	2,26
 10961  00068C  D880               	call	PL10	;call to abstracted procedure
 10962  00068E                     i2l4859:
 10963                           
 10964                           ; BSR set to: 0
 10965                           ;mTouchSensor.c: 158: }
 10966                           ;mTouchSensor.c: 159: pSensor->average = pSensor->oversampleFilterData;
 10967  00068E  EE20 F004          	lfsr	2,4
 10968  000692  51B3               	movf	MTouchSensorDecode@pSensor& (0+255),w,b
 10969  000694  26D9               	addwf	fsr2l,f,c
 10970  000696  51B4               	movf	(MTouchSensorDecode@pSensor+1)& (0+255),w,b
 10971  000698  22DA               	addwfc	fsr2h,f,c
 10972  00069A  C0B3  FFE1         	movff	MTouchSensorDecode@pSensor,fsr1l
 10973  00069E  C0B4  FFE2         	movff	MTouchSensorDecode@pSensor+1,fsr1h
 10974  0006A2  CFDE FFE6          	movff	postinc2,postinc1
 10975  0006A6  CFDE FFE6          	movff	postinc2,postinc1
 10976  0006AA  CFDE FFE6          	movff	postinc2,postinc1
 10977  0006AE  CFDD FFE5          	movff	postdec2,postdec1
 10978                           
 10979                           ;mTouchSensor.c: 160: break;
 10980  0006B2  D056               	goto	i2l4885
 10981  0006B4                     i2l4861:
 10982                           
 10983                           ; BSR set to: 0
 10984                           ;mTouchSensor.c: 165: {
 10985                           ;mTouchSensor.c: 166: if(delta > pSensor->pressThreshold)
 10986  0006B4  EE20 F012          	lfsr	2,18
 10987  0006B8  51B3               	movf	MTouchSensorDecode@pSensor& (0+255),w,b
 10988  0006BA  26D9               	addwf	fsr2l,f,c
 10989  0006BC  51B4               	movf	(MTouchSensorDecode@pSensor+1)& (0+255),w,b
 10990  0006BE  22DA               	addwfc	fsr2h,f,c
 10991  0006C0  CFDE F0B5          	movff	postinc2,??_MTouchSensorDecode
 10992  0006C4  CFDD F0B6          	movff	postdec2,??_MTouchSensorDecode+1
 10993  0006C8  51B9               	movf	MTouchSensorDecode@delta& (0+255),w,b
 10994  0006CA  5DB5               	subwf	??_MTouchSensorDecode& (0+255),w,b
 10995  0006CC  51BA               	movf	(MTouchSensorDecode@delta+1)& (0+255),w,b
 10996  0006CE  59B6               	subwfb	(??_MTouchSensorDecode+1)& (0+255),w,b
 10997  0006D0  E20C               	bc	i2l4867
 10998                           
 10999                           ; BSR set to: 0
 11000                           ;mTouchSensor.c: 167: {
 11001                           ;mTouchSensor.c: 168: if (pSensor->debounceCount-- <= 0)
 11002  0006D2  D851               	call	PL6	;call to abstracted procedure
 11003  0006D4  B4D8               	btfsc	status,2,c
 11004  0006D6  18DF               	xorwf	indf2,w,c
 11005  0006D8  E10B               	bnz	i2l4869
 11006                           
 11007                           ; BSR set to: 0
 11008                           ;mTouchSensor.c: 169: {
 11009                           ;mTouchSensor.c: 170: pSensor->state = SENSOR_PRESSED;
 11010  0006DA  EE20 F01C          	lfsr	2,28
 11011  0006DE  51B3               	movf	MTouchSensorDecode@pSensor& (0+255),w,b
 11012  0006E0  26D9               	addwf	fsr2l,f,c
 11013  0006E2  51B4               	movf	(MTouchSensorDecode@pSensor+1)& (0+255),w,b
 11014  0006E4  22DA               	addwfc	fsr2h,f,c
 11015  0006E6  0E02               	movlw	2
 11016  0006E8  6EDF               	movwf	indf2,c
 11017  0006EA                     i2l4867:
 11018                           
 11019                           ; BSR set to: 0
 11020                           ;mTouchSensor.c: 174: else
 11021                           ;mTouchSensor.c: 175: {
 11022                           ;mTouchSensor.c: 176: pSensor->debounceCount = 8;
 11023  0006EA  EE20 F01A          	lfsr	2,26
 11024  0006EE  D84F               	call	PL10	;call to abstracted procedure
 11025  0006F0                     i2l4869:
 11026                           
 11027                           ; BSR set to: 0
 11028                           ;mTouchSensor.c: 177: }
 11029                           ;mTouchSensor.c: 179: MTouchUpdateSensorAverage(pSensor, 8);
 11030  0006F0  C0B4  F0AB         	movff	MTouchSensorDecode@pSensor+1,MTouchUpdateSensorAverage@pSensor+1
 11031  0006F4  C0B3  F0AA         	movff	MTouchSensorDecode@pSensor,MTouchUpdateSensorAverage@pSensor
 11032  0006F8  6BAD               	clrf	(MTouchUpdateSensorAverage@rate+1)& (0+255),b
 11033  0006FA  0E08               	movlw	8
 11034  0006FC  6FAC               	movwf	MTouchUpdateSensorAverage@rate& (0+255),b
 11035  0006FE  EC00  F007         	call	_MTouchUpdateSensorAverage	;wreg free
 11036                           
 11037                           ;mTouchSensor.c: 181: break;
 11038  000702  D02E               	goto	i2l4885
 11039  000704                     i2l4871:
 11040                           
 11041                           ; BSR set to: 0
 11042                           ;mTouchSensor.c: 186: {
 11043                           ;mTouchSensor.c: 187: if(delta < pSensor->releaseThreshold)
 11044  000704  EE20 F014          	lfsr	2,20
 11045  000708  51B3               	movf	MTouchSensorDecode@pSensor& (0+255),w,b
 11046  00070A  26D9               	addwf	fsr2l,f,c
 11047  00070C  51B4               	movf	(MTouchSensorDecode@pSensor+1)& (0+255),w,b
 11048  00070E  22DA               	addwfc	fsr2h,f,c
 11049  000710  CFDE F0B5          	movff	postinc2,??_MTouchSensorDecode
 11050  000714  CFDD F0B6          	movff	postdec2,??_MTouchSensorDecode+1
 11051  000718  51B5               	movf	??_MTouchSensorDecode& (0+255),w,b
 11052  00071A  5DB9               	subwf	MTouchSensorDecode@delta& (0+255),w,b
 11053  00071C  51B6               	movf	(??_MTouchSensorDecode+1)& (0+255),w,b
 11054  00071E  59BA               	subwfb	(MTouchSensorDecode@delta+1)& (0+255),w,b
 11055  000720  E205               	bc	i2l4877
 11056                           
 11057                           ; BSR set to: 0
 11058                           ;mTouchSensor.c: 188: {
 11059                           ;mTouchSensor.c: 189: if (pSensor->debounceCount-- <= 0)
 11060  000722  D829               	call	PL6	;call to abstracted procedure
 11061  000724  B4D8               	btfsc	status,2,c
 11062  000726  18DF               	xorwf	indf2,w,c
 11063  000728  E104               	bnz	i2l4879
 11064                           
 11065                           ; BSR set to: 0
 11066                           ;mTouchSensor.c: 190: {
 11067                           ;mTouchSensor.c: 191: pSensor->state = SENSOR_RELEASED;
 11068  00072A  D839               	call	PL38	;call to abstracted procedure
 11069  00072C                     i2l4877:
 11070                           
 11071                           ; BSR set to: 0
 11072                           ;mTouchSensor.c: 195: else
 11073                           ;mTouchSensor.c: 196: {
 11074                           ;mTouchSensor.c: 197: pSensor->debounceCount = 8;
 11075  00072C  EE20 F01A          	lfsr	2,26
 11076  000730  D82E               	call	PL10	;call to abstracted procedure
 11077  000732                     i2l4879:
 11078                           
 11079                           ; BSR set to: 0
 11080                           ;mTouchSensor.c: 198: }
 11081                           ;mTouchSensor.c: 200: MTouchUpdateSensorAverage(pSensor, 800);
 11082  000732  C0B4  F0AB         	movff	MTouchSensorDecode@pSensor+1,MTouchUpdateSensorAverage@pSensor+1
 11083  000736  C0B3  F0AA         	movff	MTouchSensorDecode@pSensor,MTouchUpdateSensorAverage@pSensor
 11084  00073A  0E03               	movlw	3
 11085  00073C  6FAD               	movwf	(MTouchUpdateSensorAverage@rate+1)& (0+255),b
 11086  00073E  0E20               	movlw	32
 11087  000740  6FAC               	movwf	MTouchUpdateSensorAverage@rate& (0+255),b
 11088  000742  EC00  F007         	call	_MTouchUpdateSensorAverage	;wreg free
 11089                           
 11090                           ;mTouchSensor.c: 202: break;
 11091  000746  D00C               	goto	i2l4885
 11092  000748                     i2l4883:
 11093                           
 11094                           ; BSR set to: 0
 11095  000748  EE20 F01C          	lfsr	2,28
 11096  00074C  51B3               	movf	MTouchSensorDecode@pSensor& (0+255),w,b
 11097  00074E  26D9               	addwf	fsr2l,f,c
 11098  000750  51B4               	movf	(MTouchSensorDecode@pSensor+1)& (0+255),w,b
 11099  000752  22DA               	addwfc	fsr2h,f,c
 11100  000754  50DF               	movf	indf2,w,c
 11101                           
 11102                           ; Switch size 1, requested type "space"
 11103                           ; Number of cases is 3, Range of values is 0 to 2
 11104                           ; switch strategies available:
 11105                           ; Name         Instructions Cycles
 11106                           ; simple_byte           10     6 (average)
 11107                           ;	Chosen strategy is simple_byte
 11108  000756  E093               	bz	i2l4855
 11109  000758  0A01               	xorlw	1	; case 1
 11110  00075A  E0AC               	bz	i2l4861
 11111  00075C  0A03               	xorlw	3	; case 2
 11112  00075E  E0D2               	bz	i2l4871
 11113  000760                     i2l4885:
 11114                           
 11115                           ; BSR set to: 0
 11116                           ;mTouchSensor.c: 209: pSensor->oversampleFilterData = 0;
 11117  000760  EE20 F004          	lfsr	2,4
 11118  000764  51B3               	movf	MTouchSensorDecode@pSensor& (0+255),w,b
 11119  000766  26D9               	addwf	fsr2l,f,c
 11120  000768  51B4               	movf	(MTouchSensorDecode@pSensor+1)& (0+255),w,b
 11121  00076A  22DA               	addwfc	fsr2h,f,c
 11122  00076C  6ADE               	clrf	postinc2,c
 11123  00076E  6ADE               	clrf	postinc2,c
 11124  000770  6ADE               	clrf	postinc2,c
 11125  000772  6ADD               	clrf	postdec2,c
 11126                           
 11127                           ; BSR set to: 0
 11128  000774  0012               	return	
 11129  000776                     __end_of_MTouchSensorDecode:
 11130                           	opt stack 0
 11131  000776                     PL6:
 11132                           	opt stack 15
 11133  000776  EE20 F01A          	lfsr	2,26
 11134  00077A  51B3               	movf	MTouchSensorDecode@pSensor& (0+255),w,b
 11135  00077C  26D9               	addwf	fsr2l,f,c
 11136  00077E  51B4               	movf	(MTouchSensorDecode@pSensor+1)& (0+255),w,b
 11137  000780  22DA               	addwfc	fsr2h,f,c
 11138  000782  06DE               	decf	postinc2,f,c
 11139  000784  0E00               	movlw	0
 11140  000786  5ADD               	subwfb	postdec2,f,c
 11141  000788  2AD9               	incf	fsr2l,f,c
 11142  00078A  1CDD               	comf	postdec2,w,c
 11143  00078C  0CFF               	retlw	255
 11144  00078E                     __end_ofPL6:
 11145                           	opt stack 0
 11146  00078E                     PL10:
 11147                           	opt stack 15
 11148  00078E  51B3               	movf	MTouchSensorDecode@pSensor& (0+255),w,b
 11149  000790  26D9               	addwf	fsr2l,f,c
 11150  000792  51B4               	movf	(MTouchSensorDecode@pSensor+1)& (0+255),w,b
 11151  000794  22DA               	addwfc	fsr2h,f,c
 11152  000796  0E08               	movlw	8
 11153  000798  6EDE               	movwf	postinc2,c
 11154  00079A  6ADD               	clrf	postdec2,c
 11155  00079C  0C08               	retlw	8
 11156  00079E                     __end_ofPL10:
 11157                           	opt stack 0
 11158  00079E                     PL38:
 11159                           	opt stack 15
 11160  00079E  EE20 F01C          	lfsr	2,28
 11161  0007A2  51B3               	movf	MTouchSensorDecode@pSensor& (0+255),w,b
 11162  0007A4  26D9               	addwf	fsr2l,f,c
 11163  0007A6  51B4               	movf	(MTouchSensorDecode@pSensor+1)& (0+255),w,b
 11164  0007A8  22DA               	addwfc	fsr2h,f,c
 11165  0007AA  0E01               	movlw	1
 11166  0007AC  6EDF               	movwf	indf2,c
 11167  0007AE  0C01               	retlw	1
 11168  0007B0                     __end_ofPL38:
 11169                           	opt stack 0
 11170                           tblptru	equ	0xFF8
 11171                           tblptrh	equ	0xFF7
 11172                           tblptrl	equ	0xFF6
 11173                           tablat	equ	0xFF5
 11174                           prodh	equ	0xFF4
 11175                           prodl	equ	0xFF3
 11176                           intcon	equ	0xFF2
 11177                           postinc0	equ	0xFEE
 11178                           wreg	equ	0xFE8
 11179                           indf1	equ	0xFE7
 11180                           postinc1	equ	0xFE6
 11181                           postdec1	equ	0xFE5
 11182                           fsr1h	equ	0xFE2
 11183                           fsr1l	equ	0xFE1
 11184                           bsr	equ	0xFE0
 11185                           indf2	equ	0xFDF
 11186                           postinc2	equ	0xFDE
 11187                           postdec2	equ	0xFDD
 11188                           fsr2h	equ	0xFDA
 11189                           fsr2l	equ	0xFD9
 11190                           status	equ	0xFD8
 11191                           
 11192 ;; *************** function _MTouchUpdateSensorAverage *****************
 11193 ;; Defined at:
 11194 ;;		line 214 in file "../lib/mTouchCap/mTouchSensor.c"
 11195 ;; Parameters:    Size  Location     Type
 11196 ;;  pSensor         2    0[BANK0 ] PTR struct tag_SENSOR
 11197 ;;		 -> sensors(192), 
 11198 ;;  rate            2    2[BANK0 ] unsigned short 
 11199 ;; Auto vars:     Size  Location     Type
 11200 ;;		None
 11201 ;; Return value:  Size  Location     Type
 11202 ;;		None               void
 11203 ;; Registers used:
 11204 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11205 ;; Tracked objects:
 11206 ;;		On entry : F/0
 11207 ;;		On exit  : F/0
 11208 ;;		Unchanged: 0/0
 11209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11210 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11212 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11213 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11214 ;;Total ram usage:        9 bytes
 11215 ;; Hardware stack levels used:    1
 11216 ;; This function calls:
 11217 ;;		Nothing
 11218 ;; This function is called by:
 11219 ;;		_MTouchSensorDecode
 11220 ;; This function uses a non-reentrant model
 11221 ;;
 11222                           
 11223                           	psect	text45
 11224  000E00                     __ptext45:
 11225                           	opt stack 0
 11226  000E00                     _MTouchUpdateSensorAverage:
 11227                           	opt stack 15
 11228                           
 11229                           ; BSR set to: 0
 11230                           ;mTouchSensor.c: 216: if(pSensor->averageCount++ >= rate)
 11231                           
 11232                           ; BSR set to: 0
 11233                           ;incstack = 0
 11234  000E00  EE20 F016          	lfsr	2,22
 11235  000E04  51AA               	movf	MTouchUpdateSensorAverage@pSensor& (0+255),w,b
 11236  000E06  26D9               	addwf	fsr2l,f,c
 11237  000E08  51AB               	movf	(MTouchUpdateSensorAverage@pSensor+1)& (0+255),w,b
 11238  000E0A  22DA               	addwfc	fsr2h,f,c
 11239  000E0C  CFDF F0AE          	movff	indf2,??_MTouchUpdateSensorAverage
 11240  000E10  2ADE               	incf	postinc2,f,c
 11241  000E12  CFDF F0AF          	movff	indf2,??_MTouchUpdateSensorAverage+1
 11242  000E16  0E00               	movlw	0
 11243  000E18  22DD               	addwfc	postdec2,f,c
 11244  000E1A  51AC               	movf	MTouchUpdateSensorAverage@rate& (0+255),w,b
 11245  000E1C  5DAE               	subwf	??_MTouchUpdateSensorAverage& (0+255),w,b
 11246  000E1E  51AD               	movf	(MTouchUpdateSensorAverage@rate+1)& (0+255),w,b
 11247  000E20  59AF               	subwfb	(??_MTouchUpdateSensorAverage+1)& (0+255),w,b
 11248  000E22  A0D8               	btfss	status,0,c
 11249  000E24  0012               	return	
 11250                           
 11251                           ; BSR set to: 0
 11252                           ;mTouchSensor.c: 217: {
 11253                           ;mTouchSensor.c: 218: pSensor->averageCount = 0;
 11254  000E26  EE20 F016          	lfsr	2,22
 11255  000E2A  51AA               	movf	MTouchUpdateSensorAverage@pSensor& (0+255),w,b
 11256  000E2C  26D9               	addwf	fsr2l,f,c
 11257  000E2E  51AB               	movf	(MTouchUpdateSensorAverage@pSensor+1)& (0+255),w,b
 11258  000E30  22DA               	addwfc	fsr2h,f,c
 11259  000E32  0E00               	movlw	0
 11260  000E34  6EDE               	movwf	postinc2,c
 11261  000E36  6EDD               	movwf	postdec2,c
 11262                           
 11263                           ;mTouchSensor.c: 235: pSensor->average -= pSensor->average >> 3;
 11264  000E38  0E03               	movlw	3
 11265  000E3A  6FAE               	movwf	??_MTouchUpdateSensorAverage& (0+255),b
 11266  000E3C  C0AA  FFD9         	movff	MTouchUpdateSensorAverage@pSensor,fsr2l
 11267  000E40  C0AB  FFDA         	movff	MTouchUpdateSensorAverage@pSensor+1,fsr2h
 11268  000E44  D81A               	call	PL4	;call to abstracted procedure
 11269  000E46  5EDE               	subwf	postinc2,f,c
 11270  000E48  51B0               	movf	(??_MTouchUpdateSensorAverage+2)& (0+255),w,b
 11271  000E4A  5ADE               	subwfb	postinc2,f,c
 11272  000E4C  51B1               	movf	(??_MTouchUpdateSensorAverage+3)& (0+255),w,b
 11273  000E4E  5ADE               	subwfb	postinc2,f,c
 11274  000E50  51B2               	movf	(??_MTouchUpdateSensorAverage+4)& (0+255),w,b
 11275  000E52  5ADD               	subwfb	postdec2,f,c
 11276                           
 11277                           ;mTouchSensor.c: 236: pSensor->average += pSensor->oversampleFilterData >> 3;
 11278  000E54  0E03               	movlw	3
 11279  000E56  6FAE               	movwf	??_MTouchUpdateSensorAverage& (0+255),b
 11280  000E58  EE20 F004          	lfsr	2,4
 11281  000E5C  51AA               	movf	MTouchUpdateSensorAverage@pSensor& (0+255),w,b
 11282  000E5E  26D9               	addwf	fsr2l,f,c
 11283  000E60  51AB               	movf	(MTouchUpdateSensorAverage@pSensor+1)& (0+255),w,b
 11284  000E62  22DA               	addwfc	fsr2h,f,c
 11285  000E64  D80A               	call	PL4	;call to abstracted procedure
 11286  000E66  26DE               	addwf	postinc2,f,c
 11287  000E68  51B0               	movf	(??_MTouchUpdateSensorAverage+2)& (0+255),w,b
 11288  000E6A  22DE               	addwfc	postinc2,f,c
 11289  000E6C  51B1               	movf	(??_MTouchUpdateSensorAverage+3)& (0+255),w,b
 11290  000E6E  22DE               	addwfc	postinc2,f,c
 11291  000E70  51B2               	movf	(??_MTouchUpdateSensorAverage+4)& (0+255),w,b
 11292  000E72  22DD               	addwfc	postdec2,f,c
 11293  000E74  52DD               	movf	postdec2,f,c
 11294  000E76  52DD               	movf	postdec2,f,c
 11295                           
 11296                           ; BSR set to: 0
 11297  000E78  0012               	return	
 11298  000E7A                     __end_of_MTouchUpdateSensorAverage:
 11299                           	opt stack 0
 11300  000E7A                     PL4:
 11301                           	opt stack 15
 11302  000E7A  CFDE F0AF          	movff	postinc2,??_MTouchUpdateSensorAverage+1
 11303  000E7E  CFDE F0B0          	movff	postinc2,??_MTouchUpdateSensorAverage+2
 11304  000E82  CFDE F0B1          	movff	postinc2,??_MTouchUpdateSensorAverage+3
 11305  000E86  CFDE F0B2          	movff	postinc2,??_MTouchUpdateSensorAverage+4
 11306  000E8A                     i2u330_45:
 11307  000E8A  67AE               	tstfsz	??_MTouchUpdateSensorAverage& (0+255),b
 11308  000E8C  D001               	goto	i2u330_46
 11309  000E8E  D007               	goto	i2u330_47
 11310  000E90                     i2u330_46:
 11311  000E90  35B2               	rlcf	(??_MTouchUpdateSensorAverage+4)& (0+255),w,b
 11312  000E92  33B2               	rrcf	(??_MTouchUpdateSensorAverage+4)& (0+255),f,b
 11313  000E94  33B1               	rrcf	(??_MTouchUpdateSensorAverage+3)& (0+255),f,b
 11314  000E96  33B0               	rrcf	(??_MTouchUpdateSensorAverage+2)& (0+255),f,b
 11315  000E98  33AF               	rrcf	(??_MTouchUpdateSensorAverage+1)& (0+255),f,b
 11316  000E9A  2FAE               	decfsz	??_MTouchUpdateSensorAverage& (0+255),f,b
 11317  000E9C  D7F6               	goto	i2u330_45
 11318  000E9E                     i2u330_47:
 11319  000E9E  C0AA  FFD9         	movff	MTouchUpdateSensorAverage@pSensor,fsr2l
 11320  000EA2  C0AB  FFDA         	movff	MTouchUpdateSensorAverage@pSensor+1,fsr2h
 11321  000EA6  51AF               	movf	(??_MTouchUpdateSensorAverage+1)& (0+255),w,b
 11322  000EA8  0012               	return	
 11323  000EAA                     __end_ofPL4:
 11324                           	opt stack 0
 11325                           tblptru	equ	0xFF8
 11326                           tblptrh	equ	0xFF7
 11327                           tblptrl	equ	0xFF6
 11328                           tablat	equ	0xFF5
 11329                           prodh	equ	0xFF4
 11330                           prodl	equ	0xFF3
 11331                           intcon	equ	0xFF2
 11332                           postinc0	equ	0xFEE
 11333                           wreg	equ	0xFE8
 11334                           indf1	equ	0xFE7
 11335                           postinc1	equ	0xFE6
 11336                           postdec1	equ	0xFE5
 11337                           fsr1h	equ	0xFE2
 11338                           fsr1l	equ	0xFE1
 11339                           bsr	equ	0xFE0
 11340                           indf2	equ	0xFDF
 11341                           postinc2	equ	0xFDE
 11342                           postdec2	equ	0xFDD
 11343                           fsr2h	equ	0xFDA
 11344                           fsr2l	equ	0xFD9
 11345                           status	equ	0xFD8
 11346                           
 11347 ;; *************** function _MTouchAcquisitionCVD *****************
 11348 ;; Defined at:
 11349 ;;		line 121 in file "../lib/mTouchCap/mTouchAcquistion.c"
 11350 ;; Parameters:    Size  Location     Type
 11351 ;;  pCurrentSens    2    0[BANK0 ] PTR struct tag_SENSOR
 11352 ;;		 -> sensors(192), 
 11353 ;;  pPreviousSen    2    2[BANK0 ] PTR struct tag_SENSOR
 11354 ;;		 -> sensors(192), 
 11355 ;; Auto vars:     Size  Location     Type
 11356 ;;  curTris         2   17[BANK0 ] PTR volatile unsigned ch
 11357 ;;		 -> TRISE(1), TRISA(1), 
 11358 ;;  curLat          2   14[BANK0 ] PTR volatile unsigned ch
 11359 ;;		 -> LATE(1), LATA(1), 
 11360 ;;  prevLat         2   12[BANK0 ] PTR volatile unsigned ch
 11361 ;;		 -> LATE(1), LATA(1), 
 11362 ;;  prevTris        2    8[BANK0 ] PTR volatile unsigned ch
 11363 ;;		 -> TRISE(1), TRISA(1), 
 11364 ;;  result          2    6[BANK0 ] short 
 11365 ;;  curIOMask       1   19[BANK0 ] unsigned char 
 11366 ;;  prevIOMask      1   16[BANK0 ] unsigned char 
 11367 ;;  curChannelNu    1   11[BANK0 ] unsigned char 
 11368 ;;  prevChannelN    1   10[BANK0 ] unsigned char 
 11369 ;; Return value:  Size  Location     Type
 11370 ;;                  2    0[BANK0 ] short 
 11371 ;; Registers used:
 11372 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11373 ;; Tracked objects:
 11374 ;;		On entry : F/0
 11375 ;;		On exit  : F/0
 11376 ;;		Unchanged: 0/0
 11377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11378 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11379 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11380 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11381 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11382 ;;Total ram usage:       20 bytes
 11383 ;; Hardware stack levels used:    1
 11384 ;; This function calls:
 11385 ;;		Nothing
 11386 ;; This function is called by:
 11387 ;;		_MTouchAcquisition
 11388 ;; This function uses a non-reentrant model
 11389 ;;
 11390                           
 11391                           	psect	text46
 11392  0003F4                     __ptext46:
 11393                           	opt stack 0
 11394  0003F4                     _MTouchAcquisitionCVD:
 11395                           	opt stack 16
 11396                           
 11397                           ; BSR set to: 0
 11398                           ;mTouchAcquistion.c: 123: SFR prevTris;
 11399                           ;mTouchAcquistion.c: 124: SFR prevLat;
 11400                           ;mTouchAcquistion.c: 125: IOMASK prevIOMask;
 11401                           ;mTouchAcquistion.c: 126: SFR curTris;
 11402                           ;mTouchAcquistion.c: 127: SFR curLat;
 11403                           ;mTouchAcquistion.c: 128: IOMASK curIOMask;
 11404                           ;mTouchAcquistion.c: 129: UINT8 prevChannelNumber;
 11405                           ;mTouchAcquistion.c: 130: UINT8 curChannelNumber;
 11406                           ;mTouchAcquistion.c: 131: INT16 result;
 11407                           ;mTouchAcquistion.c: 135: prevTris = pPreviousSensor->trisReg;
 11408                           
 11409                           ; BSR set to: 0
 11410                           ;incstack = 0
 11411  0003F4  EE20 F008          	lfsr	2,8
 11412  0003F8  51AC               	movf	MTouchAcquisitionCVD@pPreviousSensor& (0+255),w,b
 11413  0003FA  26D9               	addwf	fsr2l,f,c
 11414  0003FC  51AD               	movf	(MTouchAcquisitionCVD@pPreviousSensor+1)& (0+255),w,b
 11415  0003FE  22DA               	addwfc	fsr2h,f,c
 11416  000400  CFDE F0B2          	movff	postinc2,MTouchAcquisitionCVD@prevTris
 11417  000404  CFDD F0B3          	movff	postdec2,MTouchAcquisitionCVD@prevTris+1
 11418                           
 11419                           ;mTouchAcquistion.c: 136: prevLat = pPreviousSensor->latReg;
 11420  000408  EE20 F00A          	lfsr	2,10
 11421  00040C  51AC               	movf	MTouchAcquisitionCVD@pPreviousSensor& (0+255),w,b
 11422  00040E  26D9               	addwf	fsr2l,f,c
 11423  000410  51AD               	movf	(MTouchAcquisitionCVD@pPreviousSensor+1)& (0+255),w,b
 11424  000412  22DA               	addwfc	fsr2h,f,c
 11425  000414  CFDE F0B6          	movff	postinc2,MTouchAcquisitionCVD@prevLat
 11426  000418  CFDD F0B7          	movff	postdec2,MTouchAcquisitionCVD@prevLat+1
 11427                           
 11428                           ;mTouchAcquistion.c: 137: prevIOMask = pPreviousSensor->ioMask;
 11429  00041C  EE20 F01D          	lfsr	2,29
 11430  000420  51AC               	movf	MTouchAcquisitionCVD@pPreviousSensor& (0+255),w,b
 11431  000422  26D9               	addwf	fsr2l,f,c
 11432  000424  51AD               	movf	(MTouchAcquisitionCVD@pPreviousSensor+1)& (0+255),w,b
 11433  000426  22DA               	addwfc	fsr2h,f,c
 11434  000428  50DF               	movf	indf2,w,c
 11435  00042A  6FBA               	movwf	MTouchAcquisitionCVD@prevIOMask& (0+255),b
 11436                           
 11437                           ;mTouchAcquistion.c: 138: curTris = pCurrentSensor->trisReg;
 11438  00042C  EE20 F008          	lfsr	2,8
 11439  000430  51AA               	movf	MTouchAcquisitionCVD@pCurrentSensor& (0+255),w,b
 11440  000432  26D9               	addwf	fsr2l,f,c
 11441  000434  51AB               	movf	(MTouchAcquisitionCVD@pCurrentSensor+1)& (0+255),w,b
 11442  000436  22DA               	addwfc	fsr2h,f,c
 11443  000438  CFDE F0BB          	movff	postinc2,MTouchAcquisitionCVD@curTris
 11444  00043C  CFDD F0BC          	movff	postdec2,MTouchAcquisitionCVD@curTris+1
 11445                           
 11446                           ;mTouchAcquistion.c: 139: curLat = pCurrentSensor->latReg;
 11447  000440  EE20 F00A          	lfsr	2,10
 11448  000444  51AA               	movf	MTouchAcquisitionCVD@pCurrentSensor& (0+255),w,b
 11449  000446  26D9               	addwf	fsr2l,f,c
 11450  000448  51AB               	movf	(MTouchAcquisitionCVD@pCurrentSensor+1)& (0+255),w,b
 11451  00044A  22DA               	addwfc	fsr2h,f,c
 11452  00044C  CFDE F0B8          	movff	postinc2,MTouchAcquisitionCVD@curLat
 11453  000450  CFDD F0B9          	movff	postdec2,MTouchAcquisitionCVD@curLat+1
 11454                           
 11455                           ;mTouchAcquistion.c: 140: curIOMask = pCurrentSensor->ioMask;
 11456  000454  EE20 F01D          	lfsr	2,29
 11457  000458  51AA               	movf	MTouchAcquisitionCVD@pCurrentSensor& (0+255),w,b
 11458  00045A  26D9               	addwf	fsr2l,f,c
 11459  00045C  51AB               	movf	(MTouchAcquisitionCVD@pCurrentSensor+1)& (0+255),w,b
 11460  00045E  22DA               	addwfc	fsr2h,f,c
 11461  000460  50DF               	movf	indf2,w,c
 11462  000462  6FBD               	movwf	MTouchAcquisitionCVD@curIOMask& (0+255),b
 11463                           
 11464                           ;mTouchAcquistion.c: 141: prevChannelNumber = pPreviousSensor->channelNumber;
 11465  000464  EE20 F01E          	lfsr	2,30
 11466  000468  51AC               	movf	MTouchAcquisitionCVD@pPreviousSensor& (0+255),w,b
 11467  00046A  26D9               	addwf	fsr2l,f,c
 11468  00046C  51AD               	movf	(MTouchAcquisitionCVD@pPreviousSensor+1)& (0+255),w,b
 11469  00046E  22DA               	addwfc	fsr2h,f,c
 11470  000470  50DF               	movf	indf2,w,c
 11471  000472  6FB4               	movwf	MTouchAcquisitionCVD@prevChannelNumber& (0+255),b
 11472                           
 11473                           ;mTouchAcquistion.c: 142: curChannelNumber = pCurrentSensor->channelNumber;
 11474  000474  EE20 F01E          	lfsr	2,30
 11475  000478  51AA               	movf	MTouchAcquisitionCVD@pCurrentSensor& (0+255),w,b
 11476  00047A  26D9               	addwf	fsr2l,f,c
 11477  00047C  51AB               	movf	(MTouchAcquisitionCVD@pCurrentSensor+1)& (0+255),w,b
 11478  00047E  22DA               	addwfc	fsr2h,f,c
 11479  000480  50DF               	movf	indf2,w,c
 11480  000482  6FB5               	movwf	MTouchAcquisitionCVD@curChannelNumber& (0+255),b
 11481                           
 11482                           ; BSR set to: 0
 11483                           ;mTouchAcquistion.c: 148: {ADCON0bits.CHS = prevChannelNumber;};
 11484  000484  C0B4  F0AE         	movff	MTouchAcquisitionCVD@prevChannelNumber,??_MTouchAcquisitionCVD
 11485  000488  D8A6               	call	PL16	;call to abstracted procedure
 11486                           
 11487                           ; BSR set to: 0
 11488                           ;mTouchAcquistion.c: 151: *prevLat |= prevIOMask; *prevTris &= ~prevIOMask;
 11489  00048A  C0B6  FFD9         	movff	MTouchAcquisitionCVD@prevLat,fsr2l
 11490  00048E  C0B7  FFDA         	movff	MTouchAcquisitionCVD@prevLat+1,fsr2h
 11491  000492  51BA               	movf	MTouchAcquisitionCVD@prevIOMask& (0+255),w,b
 11492  000494  12DF               	iorwf	indf2,f,c
 11493                           
 11494                           ; BSR set to: 0
 11495  000496  D8B3               	call	PL32	;call to abstracted procedure
 11496                           
 11497                           ; BSR set to: 0
 11498                           ;mTouchAcquistion.c: 154: *curLat &= ~curIOMask; *curTris &= ~curIOMask;
 11499  000498  D895               	call	PL14	;call to abstracted procedure
 11500                           
 11501                           ; BSR set to: 0
 11502  00049A  D88B               	call	PL8	;call to abstracted procedure
 11503                           
 11504                           ; BSR set to: 0
 11505                           ;mTouchAcquistion.c: 157: { __nop();__nop();__nop();__nop();__nop();__nop();__nop();__no
      +                          p();__nop();__nop(); __nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__n
      +                          op();__nop(); };
 11506  00049C  F000               	nop	
 11507  00049E  F000               	nop	
 11508  0004A0  F000               	nop	
 11509  0004A2  F000               	nop	
 11510  0004A4  F000               	nop	
 11511  0004A6  F000               	nop	
 11512  0004A8  F000               	nop	
 11513  0004AA  F000               	nop	
 11514  0004AC  F000               	nop	
 11515  0004AE  F000               	nop	
 11516  0004B0  F000               	nop	
 11517  0004B2  F000               	nop	
 11518  0004B4  F000               	nop	
 11519  0004B6  F000               	nop	
 11520  0004B8  F000               	nop	
 11521  0004BA  F000               	nop	
 11522  0004BC  F000               	nop	
 11523  0004BE  F000               	nop	
 11524  0004C0  F000               	nop	
 11525  0004C2  F000               	nop	
 11526                           
 11527                           ;mTouchAcquistion.c: 160: *curTris |= curIOMask;
 11528  0004C4  C0BB  FFD9         	movff	MTouchAcquisitionCVD@curTris,fsr2l
 11529  0004C8  C0BC  FFDA         	movff	MTouchAcquisitionCVD@curTris+1,fsr2h
 11530  0004CC  0100               	movlb	0	; () banked
 11531  0004CE  51BD               	movf	MTouchAcquisitionCVD@curIOMask& (0+255),w,b
 11532  0004D0  12DF               	iorwf	indf2,f,c
 11533                           
 11534                           ;mTouchAcquistion.c: 163: {ADCON0bits.CHS = curChannelNumber;};
 11535  0004D2  C0B5  F0AE         	movff	MTouchAcquisitionCVD@curChannelNumber,??_MTouchAcquisitionCVD
 11536  0004D6  D87F               	call	PL16	;call to abstracted procedure
 11537                           
 11538                           ; BSR set to: 0
 11539                           ;mTouchAcquistion.c: 166: { __nop();__nop();__nop();__nop();__nop();__nop();__nop();__no
      +                          p();__nop();__nop(); __nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__n
      +                          op();__nop(); };
 11540  0004D8  F000               	nop	
 11541  0004DA  F000               	nop	
 11542  0004DC  F000               	nop	
 11543  0004DE  F000               	nop	
 11544  0004E0  F000               	nop	
 11545  0004E2  F000               	nop	
 11546  0004E4  F000               	nop	
 11547  0004E6  F000               	nop	
 11548  0004E8  F000               	nop	
 11549  0004EA  F000               	nop	
 11550  0004EC  F000               	nop	
 11551  0004EE  F000               	nop	
 11552  0004F0  F000               	nop	
 11553  0004F2  F000               	nop	
 11554  0004F4  F000               	nop	
 11555  0004F6  F000               	nop	
 11556  0004F8  F000               	nop	
 11557  0004FA  F000               	nop	
 11558  0004FC  F000               	nop	
 11559  0004FE  F000               	nop	
 11560                           
 11561                           ;mTouchAcquistion.c: 169: {ADCON0bits.DONE = 1;while(ADCON0bits.DONE);};
 11562  000500  82C2               	bsf	4034,1,c	;volatile
 11563  000502                     i2l11:
 11564  000502  B2C2               	btfsc	4034,1,c	;volatile
 11565  000504  D7FE               	goto	i2l11
 11566                           
 11567                           ;mTouchAcquistion.c: 172: *curTris &= ~curIOMask;
 11568  000506  0100               	movlb	0	; () banked
 11569  000508  D854               	call	PL8	;call to abstracted procedure
 11570                           
 11571                           ;mTouchAcquistion.c: 173: *prevLat &= ~prevIOMask;
 11572  00050A  D882               	call	PL36	;call to abstracted procedure
 11573                           
 11574                           ; BSR set to: 0
 11575                           ;mTouchAcquistion.c: 179: result = 1024;
 11576  00050C  0E04               	movlw	4
 11577  00050E  6FB1               	movwf	(MTouchAcquisitionCVD@result+1)& (0+255),b
 11578  000510  6BB0               	clrf	MTouchAcquisitionCVD@result& (0+255),b
 11579                           
 11580                           ; BSR set to: 0
 11581                           ;mTouchAcquistion.c: 181: result -= (((INT16)ADRESH << 8)+ADRESL);
 11582  000512  D869               	call	PL22	;call to abstracted procedure
 11583  000514  5FB0               	subwf	MTouchAcquisitionCVD@result& (0+255),f,b
 11584  000516  51AF               	movf	(??_MTouchAcquisitionCVD+1)& (0+255),w,b
 11585  000518  5BB1               	subwfb	(MTouchAcquisitionCVD@result+1)& (0+255),f,b
 11586                           
 11587                           ; BSR set to: 0
 11588                           ;mTouchAcquistion.c: 186: {ADCON0bits.CHS = prevChannelNumber;};
 11589  00051A  C0B4  F0AE         	movff	MTouchAcquisitionCVD@prevChannelNumber,??_MTouchAcquisitionCVD
 11590  00051E  D85B               	call	PL16	;call to abstracted procedure
 11591                           
 11592                           ; BSR set to: 0
 11593                           ;mTouchAcquistion.c: 189: *prevLat &= ~prevIOMask; *prevTris &= ~prevIOMask;
 11594  000520  D877               	call	PL36	;call to abstracted procedure
 11595                           
 11596                           ; BSR set to: 0
 11597  000522  D86D               	call	PL32	;call to abstracted procedure
 11598                           
 11599                           ; BSR set to: 0
 11600                           ;mTouchAcquistion.c: 192: *curLat |= curIOMask; *curTris &= ~curIOMask;
 11601  000524  C0B8  FFD9         	movff	MTouchAcquisitionCVD@curLat,fsr2l
 11602  000528  C0B9  FFDA         	movff	MTouchAcquisitionCVD@curLat+1,fsr2h
 11603  00052C  51BD               	movf	MTouchAcquisitionCVD@curIOMask& (0+255),w,b
 11604  00052E  12DF               	iorwf	indf2,f,c
 11605                           
 11606                           ; BSR set to: 0
 11607  000530  D840               	call	PL8	;call to abstracted procedure
 11608                           
 11609                           ; BSR set to: 0
 11610                           ;mTouchAcquistion.c: 195: { __nop();__nop();__nop();__nop();__nop();__nop();__nop();__no
      +                          p();__nop();__nop(); __nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__n
      +                          op();__nop(); };
 11611  000532  F000               	nop	
 11612  000534  F000               	nop	
 11613  000536  F000               	nop	
 11614  000538  F000               	nop	
 11615  00053A  F000               	nop	
 11616  00053C  F000               	nop	
 11617  00053E  F000               	nop	
 11618  000540  F000               	nop	
 11619  000542  F000               	nop	
 11620  000544  F000               	nop	
 11621  000546  F000               	nop	
 11622  000548  F000               	nop	
 11623  00054A  F000               	nop	
 11624  00054C  F000               	nop	
 11625  00054E  F000               	nop	
 11626  000550  F000               	nop	
 11627  000552  F000               	nop	
 11628  000554  F000               	nop	
 11629  000556  F000               	nop	
 11630  000558  F000               	nop	
 11631                           
 11632                           ;mTouchAcquistion.c: 198: *curTris |= curIOMask;
 11633  00055A  C0BB  FFD9         	movff	MTouchAcquisitionCVD@curTris,fsr2l
 11634  00055E  C0BC  FFDA         	movff	MTouchAcquisitionCVD@curTris+1,fsr2h
 11635  000562  51BD               	movf	MTouchAcquisitionCVD@curIOMask& (0+255),w,b
 11636  000564  12DF               	iorwf	indf2,f,c
 11637                           
 11638                           ; BSR set to: 0
 11639                           ;mTouchAcquistion.c: 201: {ADCON0bits.CHS = curChannelNumber;};
 11640  000566  C0B5  F0AE         	movff	MTouchAcquisitionCVD@curChannelNumber,??_MTouchAcquisitionCVD
 11641  00056A  D835               	call	PL16	;call to abstracted procedure
 11642                           
 11643                           ; BSR set to: 0
 11644                           ;mTouchAcquistion.c: 204: { __nop();__nop();__nop();__nop();__nop();__nop();__nop();__no
      +                          p();__nop();__nop(); __nop();__nop();__nop();__nop();__nop();__nop();__nop();__nop();__n
      +                          op();__nop(); };
 11645  00056C  F000               	nop	
 11646  00056E  F000               	nop	
 11647  000570  F000               	nop	
 11648  000572  F000               	nop	
 11649  000574  F000               	nop	
 11650  000576  F000               	nop	
 11651  000578  F000               	nop	
 11652  00057A  F000               	nop	
 11653  00057C  F000               	nop	
 11654  00057E  F000               	nop	
 11655  000580  F000               	nop	
 11656  000582  F000               	nop	
 11657  000584  F000               	nop	
 11658  000586  F000               	nop	
 11659  000588  F000               	nop	
 11660  00058A  F000               	nop	
 11661  00058C  F000               	nop	
 11662  00058E  F000               	nop	
 11663  000590  F000               	nop	
 11664  000592  F000               	nop	
 11665                           
 11666                           ;mTouchAcquistion.c: 207: {ADCON0bits.DONE = 1;while(ADCON0bits.DONE);};
 11667  000594  82C2               	bsf	4034,1,c	;volatile
 11668  000596                     i2l14:
 11669  000596  B2C2               	btfsc	4034,1,c	;volatile
 11670  000598  D7FE               	goto	i2l14
 11671                           
 11672                           ;mTouchAcquistion.c: 210: *curLat &= ~curIOMask;
 11673  00059A  0100               	movlb	0	; () banked
 11674  00059C  D813               	call	PL14	;call to abstracted procedure
 11675                           
 11676                           ;mTouchAcquistion.c: 211: *curTris &= ~curIOMask;
 11677  00059E  D809               	call	PL8	;call to abstracted procedure
 11678                           
 11679                           ; BSR set to: 0
 11680                           ;mTouchAcquistion.c: 214: result += (((INT16)ADRESH << 8)+ADRESL);
 11681  0005A0  D822               	call	PL22	;call to abstracted procedure
 11682  0005A2  27B0               	addwf	MTouchAcquisitionCVD@result& (0+255),f,b
 11683  0005A4  51AF               	movf	(??_MTouchAcquisitionCVD+1)& (0+255),w,b
 11684  0005A6  23B1               	addwfc	(MTouchAcquisitionCVD@result+1)& (0+255),f,b
 11685                           
 11686                           ; BSR set to: 0
 11687                           ;mTouchAcquistion.c: 216: return (UINT16)result;
 11688  0005A8  C0B0  F0AA         	movff	MTouchAcquisitionCVD@result,?_MTouchAcquisitionCVD
 11689  0005AC  C0B1  F0AB         	movff	MTouchAcquisitionCVD@result+1,?_MTouchAcquisitionCVD+1
 11690                           
 11691                           ; BSR set to: 0
 11692  0005B0  0012               	return	
 11693  0005B2                     __end_of_MTouchAcquisitionCVD:
 11694                           	opt stack 0
 11695  0005B2                     PL8:
 11696                           	opt stack 16
 11697  0005B2  1DBD               	comf	MTouchAcquisitionCVD@curIOMask& (0+255),w,b
 11698  0005B4  6FAE               	movwf	??_MTouchAcquisitionCVD& (0+255),b
 11699  0005B6  C0BB  FFD9         	movff	MTouchAcquisitionCVD@curTris,fsr2l
 11700  0005BA  C0BC  FFDA         	movff	MTouchAcquisitionCVD@curTris+1,fsr2h
 11701  0005BE  51AE               	movf	??_MTouchAcquisitionCVD& (0+255),w,b
 11702  0005C0  16DF               	andwf	indf2,f,c
 11703  0005C2  0012               	return	
 11704  0005C4                     __end_ofPL8:
 11705                           	opt stack 0
 11706  0005C4                     PL14:
 11707                           	opt stack 16
 11708  0005C4  1DBD               	comf	MTouchAcquisitionCVD@curIOMask& (0+255),w,b
 11709  0005C6  6FAE               	movwf	??_MTouchAcquisitionCVD& (0+255),b
 11710  0005C8  C0B8  FFD9         	movff	MTouchAcquisitionCVD@curLat,fsr2l
 11711  0005CC  C0B9  FFDA         	movff	MTouchAcquisitionCVD@curLat+1,fsr2h
 11712  0005D0  51AE               	movf	??_MTouchAcquisitionCVD& (0+255),w,b
 11713  0005D2  16DF               	andwf	indf2,f,c
 11714  0005D4  0012               	return	
 11715  0005D6                     __end_ofPL14:
 11716                           	opt stack 0
 11717  0005D6                     PL16:
 11718                           	opt stack 16
 11719  0005D6  47AE               	rlncf	??_MTouchAcquisitionCVD& (0+255),f,b
 11720  0005D8  47AE               	rlncf	??_MTouchAcquisitionCVD& (0+255),f,b
 11721  0005DA  50C2               	movf	4034,w,c	;volatile
 11722  0005DC  19AE               	xorwf	??_MTouchAcquisitionCVD& (0+255),w,b
 11723  0005DE  0B83               	andlw	-125
 11724  0005E0  19AE               	xorwf	??_MTouchAcquisitionCVD& (0+255),w,b
 11725  0005E2  6EC2               	movwf	4034,c	;volatile
 11726  0005E4  0012               	return	
 11727  0005E6                     __end_ofPL16:
 11728                           	opt stack 0
 11729  0005E6                     PL22:
 11730                           	opt stack 16
 11731  0005E6  50C3               	movf	4035,w,c	;volatile
 11732  0005E8  CFC4 F0AE          	movff	4036,??_MTouchAcquisitionCVD	;volatile
 11733  0005EC  6BAF               	clrf	(??_MTouchAcquisitionCVD+1)& (0+255),b
 11734  0005EE  C0AE  F0AF         	movff	??_MTouchAcquisitionCVD,??_MTouchAcquisitionCVD+1
 11735  0005F2  6BAE               	clrf	??_MTouchAcquisitionCVD& (0+255),b
 11736  0005F4  27AE               	addwf	??_MTouchAcquisitionCVD& (0+255),f,b
 11737  0005F6  0E00               	movlw	0
 11738  0005F8  23AF               	addwfc	(??_MTouchAcquisitionCVD+1)& (0+255),f,b
 11739  0005FA  51AE               	movf	??_MTouchAcquisitionCVD& (0+255),w,b
 11740  0005FC  0012               	return	
 11741  0005FE                     __end_ofPL22:
 11742                           	opt stack 0
 11743  0005FE                     PL32:
 11744                           	opt stack 16
 11745  0005FE  1DBA               	comf	MTouchAcquisitionCVD@prevIOMask& (0+255),w,b
 11746  000600  6FAE               	movwf	??_MTouchAcquisitionCVD& (0+255),b
 11747  000602  C0B2  FFD9         	movff	MTouchAcquisitionCVD@prevTris,fsr2l
 11748  000606  C0B3  FFDA         	movff	MTouchAcquisitionCVD@prevTris+1,fsr2h
 11749  00060A  51AE               	movf	??_MTouchAcquisitionCVD& (0+255),w,b
 11750  00060C  16DF               	andwf	indf2,f,c
 11751  00060E  0012               	return	
 11752  000610                     __end_ofPL32:
 11753                           	opt stack 0
 11754  000610                     PL36:
 11755                           	opt stack 16
 11756  000610  1DBA               	comf	MTouchAcquisitionCVD@prevIOMask& (0+255),w,b
 11757  000612  6FAE               	movwf	??_MTouchAcquisitionCVD& (0+255),b
 11758  000614  C0B6  FFD9         	movff	MTouchAcquisitionCVD@prevLat,fsr2l
 11759  000618  C0B7  FFDA         	movff	MTouchAcquisitionCVD@prevLat+1,fsr2h
 11760  00061C  51AE               	movf	??_MTouchAcquisitionCVD& (0+255),w,b
 11761  00061E  16DF               	andwf	indf2,f,c
 11762  000620  0012               	return	
 11763  000622                     __end_ofPL36:
 11764                           	opt stack 0
 11765                           tblptru	equ	0xFF8
 11766                           tblptrh	equ	0xFF7
 11767                           tblptrl	equ	0xFF6
 11768                           tablat	equ	0xFF5
 11769                           prodh	equ	0xFF4
 11770                           prodl	equ	0xFF3
 11771                           intcon	equ	0xFF2
 11772                           postinc0	equ	0xFEE
 11773                           wreg	equ	0xFE8
 11774                           indf1	equ	0xFE7
 11775                           postinc1	equ	0xFE6
 11776                           postdec1	equ	0xFE5
 11777                           fsr1h	equ	0xFE2
 11778                           fsr1l	equ	0xFE1
 11779                           bsr	equ	0xFE0
 11780                           indf2	equ	0xFDF
 11781                           postinc2	equ	0xFDE
 11782                           postdec2	equ	0xFDD
 11783                           fsr2h	equ	0xFDA
 11784                           fsr2l	equ	0xFD9
 11785                           status	equ	0xFD8
 11786                           tblptru	equ	0xFF8
 11787                           tblptrh	equ	0xFF7
 11788                           tblptrl	equ	0xFF6
 11789                           tablat	equ	0xFF5
 11790                           prodh	equ	0xFF4
 11791                           prodl	equ	0xFF3
 11792                           intcon	equ	0xFF2
 11793                           postinc0	equ	0xFEE
 11794                           wreg	equ	0xFE8
 11795                           indf1	equ	0xFE7
 11796                           postinc1	equ	0xFE6
 11797                           postdec1	equ	0xFE5
 11798                           fsr1h	equ	0xFE2
 11799                           fsr1l	equ	0xFE1
 11800                           bsr	equ	0xFE0
 11801                           indf2	equ	0xFDF
 11802                           postinc2	equ	0xFDE
 11803                           postdec2	equ	0xFDD
 11804                           fsr2h	equ	0xFDA
 11805                           fsr2l	equ	0xFD9
 11806                           status	equ	0xFD8
 11807                           
 11808                           	psect	param0
 11809  0000                     tblptru	equ	0xFF8
 11810                           tblptrh	equ	0xFF7
 11811                           tblptrl	equ	0xFF6
 11812                           tablat	equ	0xFF5
 11813                           prodh	equ	0xFF4
 11814                           prodl	equ	0xFF3
 11815                           intcon	equ	0xFF2
 11816                           postinc0	equ	0xFEE
 11817                           wreg	equ	0xFE8
 11818                           indf1	equ	0xFE7
 11819                           postinc1	equ	0xFE6
 11820                           postdec1	equ	0xFE5
 11821                           fsr1h	equ	0xFE2
 11822                           fsr1l	equ	0xFE1
 11823                           bsr	equ	0xFE0
 11824                           indf2	equ	0xFDF
 11825                           postinc2	equ	0xFDE
 11826                           postdec2	equ	0xFDD
 11827                           fsr2h	equ	0xFDA
 11828                           fsr2l	equ	0xFD9
 11829                           status	equ	0xFD8
 11830                           tblptru	equ	0xFF8
 11831                           tblptrh	equ	0xFF7
 11832                           tblptrl	equ	0xFF6
 11833                           tablat	equ	0xFF5
 11834                           prodh	equ	0xFF4
 11835                           prodl	equ	0xFF3
 11836                           intcon	equ	0xFF2
 11837                           postinc0	equ	0xFEE
 11838                           wreg	equ	0xFE8
 11839                           indf1	equ	0xFE7
 11840                           postinc1	equ	0xFE6
 11841                           postdec1	equ	0xFE5
 11842                           fsr1h	equ	0xFE2
 11843                           fsr1l	equ	0xFE1
 11844                           bsr	equ	0xFE0
 11845                           indf2	equ	0xFDF
 11846                           postinc2	equ	0xFDE
 11847                           postdec2	equ	0xFDD
 11848                           fsr2h	equ	0xFDA
 11849                           fsr2l	equ	0xFD9
 11850                           status	equ	0xFD8


Data Sizes:
    Strings     8
    Constant    3148
    Data        0
    BSS         758
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     35      63
    BANK0           160     47     121
    BANK1           256     38     246
    BANK2           256      0     192
    BANK3           256      0     256
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    buttons.pSensor	PTR struct tag_SENSOR size(2) Largest target is 0
		 -> sensors(BANK2[192]), 

    sensors.latReg	PTR volatile unsigned char  size(2) Largest target is 0
		 -> LATE(ABS[1]), LATA(ABS[1]), 

    sensors.trisReg	PTR volatile unsigned char  size(2) Largest target is 0
		 -> TRISE(ABS[1]), TRISA(ABS[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_1(CODE[8]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> str(BANK0[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1989$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0

    LabelClrTxt@lb.p_font	PTR const unsigned char  size(2) Largest target is 2892
		 -> font13(CODE[2892]), 

    LabelSetTxt@str	PTR unsigned char  size(1) Largest target is 28
		 -> str(BANK0[20]), lb_napr(BANK0[27]), 

    LabelSetTxt@lb.p_font	PTR const unsigned char  size(2) Largest target is 2892
		 -> font13(CODE[2892]), 

    LabelSetTxt@lb	PTR struct . size(1) Largest target is 28
		 -> lb_napr(BANK0[27]), 

    LabelCreate@font	PTR const unsigned char  size(2) Largest target is 2892
		 -> font13(CODE[2892]), 

    LabelCreate@lb.p_font	PTR const unsigned char  size(2) Largest target is 2892
		 -> font13(CODE[2892]), 

    LabelCreate@lb	PTR struct . size(1) Largest target is 28
		 -> lb_napr(BANK0[27]), 

    ks0108PutChar@pChImage	PTR const unsigned char  size(2) Largest target is 2892
		 -> font13(CODE[2892]), 

    ks0108PutChar@p_font	PTR const unsigned char  size(2) Largest target is 2892
		 -> font13(CODE[2892]), 

    crc_mb_check@buffer	PTR unsigned char  size(2) Largest target is 128
		 -> RxTxBuff(BANK1[128]), 

    crc_mb@buffer	PTR unsigned char  size(2) Largest target is 128
		 -> RxTxBuff(BANK1[128]), 

    crc_mb_calc@code	PTR unsigned int  size(1) Largest target is 2
		 -> crc_mb_check@crc(COMRAM[2]), crc_mb@CRC(COMRAM[2]), 

    crc_mb_init@code	PTR unsigned int  size(1) Largest target is 2
		 -> crc_mb_check@crc(COMRAM[2]), crc_mb@CRC(COMRAM[2]), 

    S911$p_font	PTR const unsigned char  size(2) Largest target is 2892
		 -> font13(CODE[2892]), 

    lb_napr.p_font	PTR const unsigned char  size(2) Largest target is 2892
		 -> font13(CODE[2892]), 

    read___ee@var	PTR unsigned char  size(1) Largest target is 1
		 -> set_ee_default@c1(COMRAM[1]), 

    write___ee@var	PTR unsigned char  size(1) Largest target is 1
		 -> set_ee_default@c(COMRAM[1]), 

    MTouchAcquisition@pCurrentSensor.latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATE(ABS[1]), LATA(ABS[1]), 

    MTouchAcquisition@pCurrentSensor.trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISE(ABS[1]), TRISA(ABS[1]), 

    MTouchAcquisition@pPreviousSensor.latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATE(ABS[1]), LATA(ABS[1]), 

    MTouchAcquisition@pPreviousSensor.trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISE(ABS[1]), TRISA(ABS[1]), 

    MTouchAcquisition@pPreviousSensor	PTR struct tag_SENSOR size(2) Largest target is 204
		 -> sensors(BANK2[192]), 

    MTouchAcquisition@pLastSensor	PTR struct tag_SENSOR size(2) Largest target is 204
		 -> sensors(BANK2[192]), 

    MTouchAcquisition@pCurrentSensor	PTR struct tag_SENSOR size(2) Largest target is 204
		 -> sensors(BANK2[192]), 

    MTouchUpdateSensorAverage@pSensor.latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATE(ABS[1]), LATA(ABS[1]), 

    MTouchUpdateSensorAverage@pSensor.trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISE(ABS[1]), TRISA(ABS[1]), 

    MTouchUpdateSensorAverage@pSensor	PTR struct tag_SENSOR size(2) Largest target is 204
		 -> sensors(BANK2[192]), 

    MTouchSensorDecode@pSensor.latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATE(ABS[1]), LATA(ABS[1]), 

    MTouchSensorDecode@pSensor.trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISE(ABS[1]), TRISA(ABS[1]), 

    MTouchSensorDecode@pSensor	PTR struct tag_SENSOR size(2) Largest target is 204
		 -> sensors(BANK2[192]), 

    MTouchSetSensor@lat	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATE(ABS[1]), LATA(ABS[1]), 

    MTouchSetSensor@tris	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISE(ABS[1]), TRISA(ABS[1]), 

    MTouchSetSensor@pSensor.latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATE(ABS[1]), LATA(ABS[1]), 

    MTouchSetSensor@pSensor.trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISE(ABS[1]), TRISA(ABS[1]), 

    MTouchSetSensor@pSensor	PTR struct tag_SENSOR size(2) Largest target is 204
		 -> sensors(BANK2[192]), 

    MTouchDecodeButtons@pMostPressedButton.pSensor.latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATE(ABS[1]), LATA(ABS[1]), 

    MTouchDecodeButtons@pMostPressedButton.pSensor.trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISE(ABS[1]), TRISA(ABS[1]), 

    MTouchDecodeButtons@pMostPressedButton.pSensor	PTR struct tag_SENSOR size(2) Largest target is 204
		 -> sensors(BANK2[192]), 

    MTouchDecodeButtons@pSensor.latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATE(ABS[1]), LATA(ABS[1]), 

    MTouchDecodeButtons@pSensor.trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISE(ABS[1]), TRISA(ABS[1]), 

    MTouchDecodeButtons@pButton.pSensor	PTR struct tag_SENSOR size(2) Largest target is 204
		 -> sensors(BANK2[192]), 

    S180tag_MTOUCHBUTTON$pSensor	PTR struct tag_SENSOR size(2) Largest target is 204
		 -> sensors(BANK2[192]), 

    MTouchSetButton@pButton.pSensor	PTR struct tag_SENSOR size(2) Largest target is 204
		 -> sensors(BANK2[192]), 

    MTouchSetButton@pButton	PTR struct tag_MTOUCHBUTTON size(2) Largest target is 90
		 -> buttons(BANK1[80]), 

    MTouchAcquisitionCVD@curLat	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATE(ABS[1]), LATA(ABS[1]), 

    MTouchAcquisitionCVD@pCurrentSensor.latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATE(ABS[1]), LATA(ABS[1]), 

    MTouchAcquisitionCVD@pCurrentSensor.trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISE(ABS[1]), TRISA(ABS[1]), 

    MTouchAcquisitionCVD@pCurrentSensor	PTR struct tag_SENSOR size(2) Largest target is 204
		 -> sensors(BANK2[192]), 

    MTouchAcquisitionCVD@curTris	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISE(ABS[1]), TRISA(ABS[1]), 

    MTouchAcquisitionCVD@prevLat	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATE(ABS[1]), LATA(ABS[1]), 

    S21tag_SENSOR$latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATE(ABS[1]), LATA(ABS[1]), 

    MTouchAcquisitionCVD@pPreviousSensor.latReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> LATE(ABS[1]), LATA(ABS[1]), 

    S21tag_SENSOR$trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISE(ABS[1]), TRISA(ABS[1]), 

    MTouchAcquisitionCVD@pPreviousSensor.trisReg	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISE(ABS[1]), TRISA(ABS[1]), 

    MTouchAcquisitionCVD@pPreviousSensor	PTR struct tag_SENSOR size(2) Largest target is 204
		 -> sensors(BANK2[192]), 

    MTouchAcquisitionCVD@prevTris	PTR volatile unsigned char  size(2) Largest target is 1
		 -> TRISE(ABS[1]), TRISA(ABS[1]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _HI_ISR in COMRAM

    None.

Critical Paths under _LO_ISR in COMRAM

    _LO_ISR->_crc_mb_check
    _set_ee_default->_write___ee
    _write___ee->_Write_b_eep
    _read___ee->_Read_b_eep
    _crc_mb_check->_crc_mb_calc
    _crc_mb->_crc_mb_calc

Critical Paths under _main in BANK0

    _main->_LabelSetTxt
    _ks0108Fill->_ks0108GotoXY
    _LabelCreate->_LabelSetTxt
    _ks0108PutChar->_ks0108ClearDot
    _ks0108PutChar->_ks0108SetDot
    _ks0108SetDot->_ks0108GotoXY
    _ks0108ClearDot->_ks0108GotoXY
    _ks0108WriteData->_ks0108WriteCommand
    _ks0108ReadData->_ks0108GotoXY
    _ks0108GotoXY->_ks0108WriteCommand
    _InitializeSystem->_MTouchSetButton

Critical Paths under _HI_ISR in BANK0

    _HI_ISR->_MTouchAcquisition
    _MTouchAcquisition->_MTouchAcquisitionCVD
    _MTouchSensorDecode->_MTouchUpdateSensorAverage

Critical Paths under _LO_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_LabelCreate
    _ks0108Init->_ks0108Fill
    _LabelCreate->_LabelSetTxt
    _LabelSetTxt->_ks0108PutChar
    _ks0108PutChar->_ks0108ClearDot
    _ks0108PutChar->_ks0108SetDot
    _ks0108SetDot->_ks0108ReadData
    _ks0108ClearDot->_ks0108ReadData
    _InitializeSystem->_MTouchSetSensor

Critical Paths under _HI_ISR in BANK1

    None.

Critical Paths under _LO_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _HI_ISR in BANK2

    None.

Critical Paths under _LO_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _HI_ISR in BANK3

    None.

Critical Paths under _LO_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _HI_ISR in BANK4

    None.

Critical Paths under _LO_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _HI_ISR in BANK5

    None.

Critical Paths under _LO_ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _HI_ISR in BANK6

    None.

Critical Paths under _LO_ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _HI_ISR in BANK7

    None.

Critical Paths under _LO_ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _HI_ISR in BANK8

    None.

Critical Paths under _LO_ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _HI_ISR in BANK9

    None.

Critical Paths under _LO_ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _HI_ISR in BANK10

    None.

Critical Paths under _LO_ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _HI_ISR in BANK11

    None.

Critical Paths under _LO_ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _HI_ISR in BANK12

    None.

Critical Paths under _LO_ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _HI_ISR in BANK13

    None.

Critical Paths under _LO_ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _HI_ISR in BANK14

    None.

Critical Paths under _LO_ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _HI_ISR in BANK15

    None.

Critical Paths under _LO_ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   54370
                               _Beep
                       _InitMessages
                   _InitializeSystem
                        _LabelCreate
                        _LabelSetTxt
                    _ProcessMessages
                       _ks0108GotoXY
                         _ks0108Init
                      _ks0108PutChar
                            _sprintf
                        _tsk_display
                        _tsk_process
 ---------------------------------------------------------------------------------
 (1) _tsk_process                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _tsk_display                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             12    10      2     184
                                             39 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _ks0108Init                                           0     0      0    3493
                            _DelayMs
                         _ks0108Fill
                 _ks0108WriteCommand
 ---------------------------------------------------------------------------------
 (2) _ks0108Fill                                           3     3      0    2739
                                              0 BANK1      3     3      0
                       _ks0108GotoXY
                    _ks0108WriteData
 ---------------------------------------------------------------------------------
 (2) _DelayMs                                              2     2      0      45
                                             39 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _ProcessMessages                                      1     1      0     268
                                             39 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _LabelCreate                                          7     2      5   15594
                                             31 BANK1      7     2      5
                        _LabelSetTxt
 ---------------------------------------------------------------------------------
 (1) _LabelSetTxt                                          5     4      1   14813
                                             46 BANK0      1     0      1
                                             28 BANK1      3     3      0
                       _ks0108GotoXY
                      _ks0108PutChar
 ---------------------------------------------------------------------------------
 (1) _ks0108PutChar                                       21    18      3   12061
                                              7 BANK1     21    18      3
                             ___wmul
                     _ks0108ClearDot
                       _ks0108SetDot
 ---------------------------------------------------------------------------------
 (2) _ks0108SetDot                                         5     4      1    5054
                                             45 BANK0      1     0      1
                                              3 BANK1      4     4      0
                       _ks0108GotoXY
                     _ks0108ReadData
                    _ks0108WriteData
 ---------------------------------------------------------------------------------
 (2) _ks0108ClearDot                                       5     4      1    4883
                                             45 BANK0      1     0      1
                                              3 BANK1      4     4      0
                       _ks0108GotoXY
                     _ks0108ReadData
                    _ks0108WriteData
 ---------------------------------------------------------------------------------
 (3) _ks0108WriteData                                      1     1      0     740
                                             41 BANK0      1     1      0
                       _ks0108Enable
                 _ks0108WriteCommand
 ---------------------------------------------------------------------------------
 (3) _ks0108ReadData                                       3     3      0    2070
                                              0 BANK1      3     3      0
                       _ks0108GotoXY
 ---------------------------------------------------------------------------------
 (4) _ks0108GotoXY                                         4     3      1    1801
                                             41 BANK0      4     3      1
                 _ks0108WriteCommand
 ---------------------------------------------------------------------------------
 (4) _ks0108WriteCommand                                   2     1      1     709
                                             39 BANK0      2     1      1
                       _ks0108Enable
 ---------------------------------------------------------------------------------
 (5) _ks0108Enable                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     340
                                             39 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _InitializeSystem                                     2     2      0    5930
                                             11 BANK1      2     2      0
                         _MTouchInit
                    _MTouchSetButton
                    _MTouchSetSensor
                        _uart16_init
 ---------------------------------------------------------------------------------
 (2) _uart16_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTouchSetSensor                                     16     5     11    4074
                                             39 BANK0      5     5      0
                                              0 BANK1     11     0     11
 ---------------------------------------------------------------------------------
 (2) _MTouchSetButton                                      7     5      2    1822
                                             39 BANK0      7     5      2
 ---------------------------------------------------------------------------------
 (2) _MTouchInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitMessages                                         1     1      0     204
                                             39 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Beep                                                 1     1      0      22
                                             39 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _LO_ISR                                              17    17      0    5024
                                             18 COMRAM    17    17      0
                             _BSemOn
                           _Busy_eep
                         _Read_b_eep
                        _SendMessage
                        _Write_b_eep
                             _crc_mb
                       _crc_mb_check
                            _putbyte
                     _set_ee_default
                         _timed_getc
 ---------------------------------------------------------------------------------
 (10) _timed_getc                                          2     2      0      23
                                              0 COMRAM     2     2      0
                            _getbyte
 ---------------------------------------------------------------------------------
 (11) _getbyte                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _set_ee_default                                      4     4      0    1377
                                             11 COMRAM     4     4      0
                          _read___ee
                         _write___ee
 ---------------------------------------------------------------------------------
 (11) _write___ee                                          4     0      4     648
                                              7 COMRAM     4     0      4
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (12) _Write_b_eep                                         7     4      3     346
                                              0 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (12) _Busy_eep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _read___ee                                           4     0      4     525
                                              5 COMRAM     4     0      4
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (12) _Read_b_eep                                          5     3      2     223
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (10) _putbyte                                             1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) _crc_mb_check                                       10     7      3    1163
                                              8 COMRAM    10     7      3
                        _crc_mb_calc
                        _crc_mb_init
 ---------------------------------------------------------------------------------
 (10) _crc_mb                                              9     6      3    1075
                                              8 COMRAM     9     6      3
                        _crc_mb_calc
                        _crc_mb_init
 ---------------------------------------------------------------------------------
 (11) _crc_mb_init                                         1     1      0      82
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (11) _crc_mb_calc                                         8     7      1     395
                                              0 COMRAM     8     7      1
 ---------------------------------------------------------------------------------
 (10) _SendMessage                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) _BSemOn                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (13) _HI_ISR                                              7     7      0    3331
                                             32 BANK0      7     7      0
                  _MTouchAcquisition
 ---------------------------------------------------------------------------------
 (14) _MTouchAcquisition                                  12    12      0    3331
                                             20 BANK0     12    12      0
               _MTouchAcquisitionCVD
                 _MTouchSensorDecode
 ---------------------------------------------------------------------------------
 (15) _MTouchSensorDecode                                  8     6      2    1294
                                              9 BANK0      8     6      2
          _MTouchUpdateSensorAverage
 ---------------------------------------------------------------------------------
 (16) _MTouchUpdateSensorAverage                           9     5      4     445
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (15) _MTouchAcquisitionCVD                               20    16      4    1418
                                              0 BANK0     20    16      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Beep
   _InitMessages
   _InitializeSystem
     _MTouchInit
     _MTouchSetButton
     _MTouchSetSensor
     _uart16_init
   _LabelCreate
     _LabelSetTxt
       _ks0108GotoXY
         _ks0108WriteCommand
           _ks0108Enable
       _ks0108PutChar
         ___wmul
         _ks0108ClearDot
           _ks0108GotoXY
             _ks0108WriteCommand
               _ks0108Enable
           _ks0108ReadData
             _ks0108GotoXY
               _ks0108WriteCommand
                 _ks0108Enable
           _ks0108WriteData
             _ks0108Enable
             _ks0108WriteCommand
               _ks0108Enable
         _ks0108SetDot
           _ks0108GotoXY
             _ks0108WriteCommand
               _ks0108Enable
           _ks0108ReadData
             _ks0108GotoXY
               _ks0108WriteCommand
                 _ks0108Enable
           _ks0108WriteData
             _ks0108Enable
             _ks0108WriteCommand
               _ks0108Enable
   _LabelSetTxt
     _ks0108GotoXY
       _ks0108WriteCommand
         _ks0108Enable
     _ks0108PutChar
       ___wmul
       _ks0108ClearDot
         _ks0108GotoXY
           _ks0108WriteCommand
             _ks0108Enable
         _ks0108ReadData
           _ks0108GotoXY
             _ks0108WriteCommand
               _ks0108Enable
         _ks0108WriteData
           _ks0108Enable
           _ks0108WriteCommand
             _ks0108Enable
       _ks0108SetDot
         _ks0108GotoXY
           _ks0108WriteCommand
             _ks0108Enable
         _ks0108ReadData
           _ks0108GotoXY
             _ks0108WriteCommand
               _ks0108Enable
         _ks0108WriteData
           _ks0108Enable
           _ks0108WriteCommand
             _ks0108Enable
   _ProcessMessages
   _ks0108GotoXY
     _ks0108WriteCommand
       _ks0108Enable
   _ks0108Init
     _DelayMs
     _ks0108Fill
       _ks0108GotoXY
         _ks0108WriteCommand
           _ks0108Enable
       _ks0108WriteData
         _ks0108Enable
         _ks0108WriteCommand
           _ks0108Enable
     _ks0108WriteCommand
       _ks0108Enable
   _ks0108PutChar
     ___wmul
     _ks0108ClearDot
       _ks0108GotoXY
         _ks0108WriteCommand
           _ks0108Enable
       _ks0108ReadData
         _ks0108GotoXY
           _ks0108WriteCommand
             _ks0108Enable
       _ks0108WriteData
         _ks0108Enable
         _ks0108WriteCommand
           _ks0108Enable
     _ks0108SetDot
       _ks0108GotoXY
         _ks0108WriteCommand
           _ks0108Enable
       _ks0108ReadData
         _ks0108GotoXY
           _ks0108WriteCommand
             _ks0108Enable
       _ks0108WriteData
         _ks0108Enable
         _ks0108WriteCommand
           _ks0108Enable
   _sprintf
   _tsk_display
   _tsk_process

 _LO_ISR (ROOT)
   _BSemOn
   _Busy_eep
   _Read_b_eep
   _SendMessage
   _Write_b_eep
   _crc_mb
     _crc_mb_calc
     _crc_mb_init
   _crc_mb_check
     _crc_mb_calc
     _crc_mb_init
   _putbyte
   _set_ee_default
     _read___ee
       _Read_b_eep
     _write___ee
       _Busy_eep
       _Write_b_eep
   _timed_getc
     _getbyte

 _HI_ISR (ROOT)
   _MTouchAcquisition
     _MTouchAcquisitionCVD
     _MTouchSensorDecode
       _MTouchUpdateSensorAverage

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0     100      11      100.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      C0       9       75.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     26      F6       7       96.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     2F      79       5       75.6%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     23      3F       1       66.3%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     36E      12        0.0%
DATA                 0      0     36E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Jul 27 13:37:07 2016

                                    _a 003A                                      _b 003B  
                                    _c 0034                                      _d 0036  
                                    _e 0024                                      _f 0028  
                                    _k 002C                                      _l 0030  
                                   PL2 091A                                     PL4 0E7A  
                                   PL6 0776                                     PL8 05B2  
                                   l78 09AC                          write___ee@adr 0008  
                                   bsr 000FE0                          write___ee@var 000A  
                  ___wmul@multiplicand 00D3                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                        ks0108ReadData@i 01D2  
                                  PL10 078E                                    PL20 0A9E  
                                  PL12 092E                                    PL30 0DCE  
                                  PL22 05E6                                    PL14 05C4  
                                  PL40 0F42                                    PL32 05FE  
                                  PL24 1448                                    PL16 05D6  
                                  PL50 12B8                                    PL42 0AAE  
                                  PL34 0D14                                    PL26 0BEC  
                                  PL18 0DB4                                    PL52 104E  
                                  PL44 0DE2                                    PL36 0610  
                                  PL28 0D00                                    PL46 0C02  
                                  PL38 079E                                    PL48 0DF2  
                                  l553 0F3A                                    l555 0F34  
                                  l844 0FFA                                    l848 1030  
                                  l929 11C0                                    l962 1672  
                                  l948 115A                                    l976 0C90  
                                  l977 0CDE                                    l978 0C9A  
                                  _GIE 007F97                           __CFG_CPB$OFF 000000  
                                  _PR2 000FBB                                    _PR4 000F52  
                         __CFG_CPD$OFF 000000                        ks0108GotoXY@cmd 00D5  
                       write___ee@byte 000B                                    _pos 00A7  
                                  fsr2 000FD9                                    _str 0093  
                          _tsk_display 17BC                   __size_of_Write_b_eep 0044  
                                  prod 000FF3                                    wreg 000FE8  
           __end_of_ks0108WriteCommand 1684                           __CFG_LVP$OFF 000000  
                      _ks0108WriteData 14AA                    __end_of_LabelCreate 113A  
                          _tsk_process 17BA                                   l1054 1636  
                                 l1055 163A                                   l4061 1584  
                                 l4073 0FE2                                   l4057 1578  
                                 l5019 07C0                                   l4411 166A  
                                 l5133 111A                                   l4093 1044  
                                 l4087 1018                                   l4079 100E  
                                 l4425 11B8                                   l4513 1198  
                                 l5129 1108                                   l4515 11A4  
                                 l4507 1184                                   l4451 14B6  
                                 l4437 11DE                                   l4463 14DC  
                                 l4455 14C2                                   l5193 0F20  
                                 l3907 153A                                   l4491 1164  
                                 l4483 1150                                   l4459 14CC  
                                 l3917 154E                                   l4581 0CD4  
                                 l4573 0CB4                                   l3927 1560  
                                 l4831 0A48                                   l4833 0A50  
                                 l4825 0992                                   l4499 1172  
                                 l4579 0CCA                                   l4923 0D46  
                                 l4589 0CE8                                   l4933 0D6A  
                                 l4943 0DAC                                   l4919 0D38  
                                 l4951 15AE                                   l4937 0D8C  
                                 l4929 0D56                                   l4939 0D9C  
                                 l4959 15C0                                   STR_1 FFF7  
                                 _LATA 000F89                                   _LATB 000F8A  
                                 _LATD 000F8C                                   _LATE 000F8D  
                                 u3234 1458                                   u3235 1454  
                                 u3404 09F2                                   u3405 09EE  
                                 u3264 1292                                   u3265 128E  
                                 u3284 12AA                                   u3285 12A6  
                                 i2l11 0502                                   _RCIE 007CED  
                                 _RCIF 007CF5                                   i2l14 0596  
                                 _RCIP 007CFD                                   _RX91 007D5E  
                                 _BSem 006A                                   _TX91 007D66  
                                 _TMR2 000FBC                                   _TMR4 000F53  
                     ks0108GotoXY@chip 00D4                                   _TXIE 007CEC  
                                 _Beep 1752                    __end_of_LabelSetTxt 0DB4  
                                 _j_rx 0038                                   _main 0EAA  
                                 fsr1h 000FE2                                   fsr2h 000FDA  
                                 indf1 000FE7                                   fsr1l 000FE1  
                                 indf2 000FDF                                   fsr2l 000FD9  
                        __CFG_BORV$190 000000                                   prodh 000FF4  
                                 prodl 000FF3                                   start 03F0  
                        __CFG_IESO$OFF 000000                        __end_of_DelayMs 165E  
                        ?_InitMessages 0001            MTouchSetButton@buttonNumber 00D5  
                           _MTouchInit 1736                                  ?_Beep 0001  
                       SendMessage@Msg 0001                                  _DC1B0 007DEC  
                                _DC1B1 007DED                                  _DC2B0 007B34  
                                _DC2B1 007B35                                  ?_main 0001  
                                _EEADR 000FA9                                  _BRGH1 007D62  
                                _CREN1 007D5C                                  _FERR1 007D5A  
                                _LATC0 007C58                                  _LATC2 007C5A  
                                _LATC3 007C5B                                  _LATE0 007C68  
                                _LATE1 007C69                                  _LATE2 007C6A  
                                i1l211 17A0                                  i1l212 179E  
                                i1l222 16B0                                  i1l225 16C4  
                                i1l405 03B8                                  i2l116 0B54  
                                i1l199 17AA                                  i1l480 03CA  
                                i1l474 0396                                  i2l395 10A8  
                                i2l396 10A0                                  i2l397 10A2  
                                _OERR1 007D59                                  i2l398 10AA  
                                i2l399 10B0                                  _RCREG 000FAE  
                                _SPEN1 007D5F                                  _SREN1 007D5D  
                                _SPBRG 000FAF                                  _PORTB 000F81  
                                _PORTD 000F83                        ks0108PutChar@x_ 01E4  
                      ks0108PutChar@y_ 01E5                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRMT1 007D61  
                                _TRISD 000F95                                  _TRISE 000F96  
                                _TXEN1 007D65                                  _SYNC1 007D64  
                                _TXREG 000FAD                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                         Read_b_eep@badd 0001  
                      __end_of_getbyte 17A8           __end_of_MTouchAcquisitionCVD 05B2  
                       __CFG_EBTRB$OFF 000000                 Write_b_eep@GIE_BIT_VAL 0007  
                                _dummy 003E                __end_of_ProcessMessages 104E  
                   __CFG_MCLRE$EXTMCLR 000000               __size_of_MTouchSetButton 008C  
                     ks0108SetDot@data 01D6                                  tablat 000FF5  
             __size_of_MTouchSetSensor 0162                       ProcessMessages@i 00D1  
                                status 000FD8                        __end_of_putbyte 17B4  
                      __end_of_sprintf 15A8                         __CFG_HFOFST$ON 000000  
                       ??_InitMessages 00D1       MTouchAcquisition@pPreviousSensor 00C5  
                         __end_of_Beep 176A                        __initialization 13C4  
                         __end_of_main 0F42                             _Read_b_eep 16F6  
                        ??_SendMessage 0001                       __end_of_Busy_eep 17BA  
                         ?_uart16_init 0001                                 ??_Beep 00D1  
                   ks0108ReadData@data 01D1                                 ??_main 00D9  
                     set_ee_default@c1 000D              __size_of_InitializeSystem 016A  
                        __activetblptr 000002                   __end_of_crc_mb_check 131E  
              __end_of_ks0108WriteData 14F2                         __CFG_PLLCFG$ON 000000  
                      LabelCreate@font 01F1                            _LabelCreate 10CA  
              MTouchSensorDecode@delta 00B9                            _LabelSetTxt 0D26  
                   _MTouchSensorDecode 0622                   __size_of_crc_mb_calc 0060  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                               _ADCON2 000FC0                   __size_of_crc_mb_init 000E  
                               _ADRESH 000FC4                                 _EEADRH 000FAA  
                               _ADRESL 000FC3                                 _BRG161 007DC3  
                               _EEDATA 000FA8                                 _CCPR1L 000FBE  
                               _CCPR2L 000F67                                 _CCPR4L 000F58  
                               _EECON2 000FA7                                 _ANSELA 000F38  
                               _ANSELB 000F39                                 _ANSELC 000F3A  
                               _ANSELD 000F3B                                 _ANSELE 000F3C  
              __size_of_set_ee_default 0056                                 i1l1130 1524  
                               i1l1099 17B4                                 i1l4203 016E  
                               i1l4311 030E                                 i1l4231 01DC  
                               i1l4241 0210                                 i1l4225 01BE  
                               i1l4209 0172                                 i1l4323 0330  
                               i1l4243 023A                                 i1l4341 0376  
                               i1l4317 032C                                 i1l4237 01FA  
                               i1l4181 010E                                 i1l4165 00AA  
                               i1l4149 007E                                 i1l4343 037E  
                               i1l4175 00CA                                 i1l4351 039C  
                               i1l3641 121C                                 i1l4273 0298  
                               i1l4249 023E                                 i1l3563 16D2  
                               i1l3555 160A                                 i1l4339 036E  
                               i1l4347 0386                                 i1l4187 0136  
                               i1l3565 16EC                                 i1l4285 02BA  
                               i1l4197 0150                                 i1l3647 1260  
                               i1l3559 162A                                 i1l3823 1362  
                               i1l3815 1322                                 i1l4279 02B6  
                               i1l3851 12CE                                 i1l3881 1396  
                               i1l3857 12E6                                 i1l3875 137E  
                               i1l3867 131C                                 i2l5005 0BD2  
                               i2l5007 0BDA                                 i2l5149 107C  
                               i2l4861 06B4                                 i2l4853 0668  
                               i2l4871 0704                                 i2l4855 067E  
                               i2l4867 06EA                                 i2l4859 068E  
                               i2l4883 0748                                 _HI_ISR 0008  
                               i2l4877 072C                                 i2l4869 06F0  
                               i2l4885 0760                                 i2l4879 0732  
                               i2l4993 0B4E                                 i2l4985 0AF6  
                               i2l4977 0AE8                                 i2l4979 0AF4  
                               i2l4999 0BB2                              ??_DelayMs 00D1  
                  ?_MTouchSensorDecode 00B3                                 _OSCCON 000FD3  
                               _BSemOn 177C          MTouchUpdateSensorAverage@rate 00AC  
                       LabelSetTxt@str 00D8                                 _LO_ISR 0018  
                               _SWDTEN 007E88                         __CFG_XINST$OFF 000000  
                               _RxBuff 0300                                 ___wmul 1684  
                       __CFG_STVREN$ON 000000                                 _eedata F3AB  
                               _crc_mb 1374                                 _font13 F4AB  
                          ?_MTouchInit 0001                   ??_MTouchSensorDecode 00B5  
                               clear_0 13CC                                 clear_1 13DE  
                               clear_2 13EA                                 clear_3 13F6  
                               clear_4 1402            MTouchAcquisitionCVD@curTris 00BB  
                           _ks0108Fill 15A8                             _ks0108Init 1460  
                            ??_getbyte 0001                  ks0108ReadData@incXAdd 01D0  
          MTouchAcquisitionCVD@prevLat 00B6                    __end_of_SendMessage 177C  
            MTouchSensorDecode@pSensor 00B3                           __mediumconst F3AA  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                              ??_putbyte 0001  
                            ??_sprintf 00D3                       ?_ProcessMessages 0001  
                MTouchAcquisition@data 00C1             ?_MTouchUpdateSensorAverage 00AA  
                           __accesstop 0060                __end_of__initialization 1408  
                      __CFG_PBADEN$OFF 000000                      ??_MTouchSetButton 00D3  
                    ??_MTouchSetSensor 00D1                         __pcstackCOMRAM 0001  
              __size_of_ks0108ClearDot 004E                   _MTouchAcquisitionCVD 03F4  
                          ?_Read_b_eep 0001                  __end_of_ks0108PutChar 0D00  
                           __end_ofPL2 092E                             __end_ofPL4 0EAA  
                           __end_ofPL6 078E                             __end_ofPL8 05C4  
              __size_of_ks0108ReadData 0070                       ?_ks0108WriteData 0001  
                         ?_tsk_display 0001                   __end_of_InitMessages 1574  
                           _beep_count 003C                             _beep_timer 0070  
                         ?_tsk_process 0001                             __pbssBANK0 0060  
                           __pbssBANK1 0100                             __pbssBANK2 0200  
                           __pbssBANK3 0300                                ?_HI_ISR 0001  
                  __size_of_MTouchInit 001C                                ?_BSemOn 0001  
                            ?_Busy_eep 0001                                ?_LO_ISR 0001  
    __end_of_MTouchUpdateSensorAverage 0E7A            MTouchSetButton@sensorNumber 00D1  
                   _ks0108WriteCommand 165E                     __size_of_read___ee 0026  
                ks0108WriteCommand@cmd 00D2                        crc_mb_calc@code 0008  
                      crc_mb_calc@flag 0006                              BSemOn@Sem 0001  
                      crc_mb_calc@next 0001                     __CFG_CCP2MX$PORTC1 000000  
                              LO_ISR@i 0023                  ?_MTouchAcquisitionCVD 00AA  
                              ?___wmul 00D1                    ?_ks0108WriteCommand 00D1  
                   __CFG_CCP3MX$PORTB5 000000                  __size_of_crc_mb_check 005A  
                              ?_crc_mb 0009                        crc_mb_check@crc 0011  
                      crc_mb_check@cnt 000B                            _SendMessage 176A  
                        ??_Write_b_eep 0004                            ?_ks0108Fill 0001  
                          ?_ks0108Init 0001                       _InitializeSystem 07B0  
                 __size_of_uart16_init 001E                        __CFG_WDTEN$SWON 000000  
                      LabelSetTxt@temp 01EC                      ks0108PutChar@base 01EA  
                          LO_ISR@lcAdr 0021                   ??_ks0108WriteCommand 00D2  
                    ks0108PutChar@xCnt 01E1                      ks0108PutChar@yCnt 01E2  
                    ks0108PutChar@mask 01E9                      ks0108PutChar@mode 01D9  
                    ks0108PutChar@temp 01E3                         _set_ee_default 131E  
                  __size_of_Read_b_eep 0022                                _DelayMs 1634  
                      __size_of_HI_ISR 10C2                             ??_Busy_eep 0001  
                      __size_of_BSemOn 0012                        __size_of_LO_ISR 03D8  
         MTouchSetSensor@channelNumber 01D5                        crc_mb_init@code 0001  
                         _crc_mb_check 12C4                        __CFG_PWRTEN$OFF 000000  
                              __Hparam 0000                                __Lparam 0000  
                        ?_ks0108Enable 0001                          InitMessages@i 00D1  
                        ?_ks0108GotoXY 00D3                          ?_ks0108SetDot 00D7  
                      __size_of___wmul 0026                        __size_of_crc_mb 0050  
     MTouchUpdateSensorAverage@pSensor 00AA                                __pcinit 13C4  
                              __ramtop 1000                                __ptext0 0EAA  
                              __ptext1 17BA                                __ptext2 17BC  
                              __ptext3 1574                                __ptext4 1460  
                              __ptext5 15A8                                __ptext6 1634  
                              __ptext7 0FDE                                __ptext8 10CA  
                              __ptext9 0D26                                _lb_napr 0078  
                              _getbyte 179C                           ?_LabelCreate 01EF  
                            _T2CONbits 000FBA                      __end_of_read___ee 16F6  
                              _buttons 0180                              _T4CONbits 000F51  
                         ?_LabelSetTxt 00D8                           read___ee@adr 0006  
               __end_of_set_ee_default 1374                           read___ee@var 0008  
                              crc_mb@i 000F          MTouchAcquisitionCVD@curIOMask 00BD  
                  __end_of_Write_b_eep 1536                                _sensors 0200  
                    timed_getc@timeout 0001                            ks0108Fill@i 01D2  
                          ks0108Fill@j 01D1                                _putbyte 17A8  
                              _sprintf 1574                         __pintcode_body 1058  
                 end_of_initialization 1408                          __Lmediumconst F3AA  
                              int_func 1058           MTouchAcquisitionCVD@prevTris 00B2  
                  __size_of_ks0108Fill 0032                    __size_of_ks0108Init 004A  
                       ??_ks0108Enable 00D1                         ??_ks0108GotoXY 00D4  
                       _ks0108ClearDot 126A                 ??_MTouchAcquisitionCVD 00AE  
                       ??_ks0108SetDot 01D3                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc1 000FE6                                postinc2 000FDE  
                         ??_MTouchInit 00D1                             _timed_getc 16AA  
                __size_of_InitMessages 003E                         ks0108Fill@mode 01D0  
                       _ks0108ReadData 113A                          ??_crc_mb_calc 0002  
                  ks0108PutChar@p_font 01D7                          ??_crc_mb_init 0001  
                            _TRISAbits 000F92                              _TRISCbits 000F94  
                            _TRISEbits 000F96                        ?_set_ee_default 0001  
                 __size_of_tsk_display 0002                        _MTouchSetButton 0F52  
                      _MTouchSetSensor 093C            ??_MTouchUpdateSensorAverage 00AE  
                 __size_of_tsk_process 0002                     __end_of_MTouchInit 1752  
                       __end_of_HI_ISR 10CA                         __end_of_BSemOn 178E  
                       __end_of_LO_ISR 03F0                 __end_of_ks0108ClearDot 12B8  
MTouchAcquisitionCVD@prevChannelNumber 00B4                            _CCP4CONbits 000F57  
                         _InitMessages 1536                          LabelCreate@lb 01F5  
                        LabelCreate@ln 01F3                           ??_Read_b_eep 0003  
               __end_of_ks0108ReadData 11AA                         __end_of___wmul 16AA  
                       ks0108PutChar@s 01DC                             _write___ee 1608  
                       ks0108PutChar@x 01E8                         ks0108PutChar@y 01E7  
                       __end_of_eedata F4AB                    ks0108WriteData@data 00D3  
          __size_of_MTouchSensorDecode 0154                         __end_of_crc_mb 13C4  
                       __end_of_font13 FFF7                            _Write_b_eep 14F2  
                   ks0108ClearDot@data 01D6                       _delayus_variable 0077  
                          __end_ofPL10 079E                            __end_ofPL20 0AAE  
                          __end_ofPL12 093C                            __end_ofPL30 0DE2  
                          __end_ofPL22 05FE                            __end_ofPL14 05D6  
                          __end_ofPL40 0F52                            __end_ofPL32 0610  
                          __end_ofPL24 1460                            __end_ofPL16 05E6  
                          __end_ofPL50 12C4                            __end_ofPL42 0ABE  
                          __end_ofPL34 0D26                            __end_ofPL26 0C02  
                          __end_ofPL18 0DCE                            __end_ofPL52 1058  
                          __end_ofPL44 0DF2                            __end_ofPL36 0622  
                          __end_ofPL28 0D14                            __end_ofPL46 0C12  
                          __end_ofPL38 07B0                            __end_ofPL48 0E00  
                  start_initialization 13C4                             HI_ISR@beep 0074  
       MTouchAcquisitionCVD@prevIOMask 00BA                        set_ee_default@c 000C  
                      set_ee_default@i 000E                    __end_of_crc_mb_calc 126A  
             ks0108PutChar@_fontHeight 01DD                    __end_of_crc_mb_init 179C  
                             ??_HI_ISR 00CA    MTouchAcquisitionCVD@pPreviousSensor 00AC  
                             ??_BSemOn 0001                     __end_of_Read_b_eep 1718  
                             ??_LO_ISR 0013               __end_of_InitializeSystem 091A  
                        LabelSetTxt@lb 01EE                        ?_ks0108ClearDot 00D7  
                    __size_of_Busy_eep 0006               __size_of_ProcessMessages 0070  
                             ??___wmul 00D5                               ??_crc_mb 000C  
                          ?_timed_getc 0001                        ?_ks0108ReadData 0001  
                         ?_SendMessage 0001              _MTouchUpdateSensorAverage 0E00  
                         ??_ks0108Fill 00D7                           ??_ks0108Init 00D7  
                  MTouchSetSensor@tris 01D0                __end_of_MTouchSetButton 0FDE  
              __end_of_MTouchSetSensor 0A9E                            __pbssCOMRAM 0024  
                        __pcstackBANK0 00AA                          __pcstackBANK1 01D0  
                 __end_of_ks0108Enable 1608                   __size_of_LabelCreate 0070  
                  __end_of__stringdata FFFF                   __end_of_ks0108GotoXY 120A  
                 __end_of_ks0108SetDot 1448                   __size_of_LabelSetTxt 008E  
             __size_of_ks0108WriteData 0048                            putbyte@byte 0001  
      MTouchAcquisition@pCurrentSensor 00C8                               ?_DelayMs 0001  
               __size_of_ks0108PutChar 00EE                 ks0108WriteCommand@chip 00D1  
                   __end_of_ks0108Fill 15DA                     __end_of_ks0108Init 14AA  
                            __pintcode 0008                          __pmediumconst F3AA  
                        ??_uart16_init 00D1                            ?_write___ee 0008  
                          __pintcodelo 0018                       __CFG_PRICLKEN$ON 000000  
                             ?_getbyte 0001                              __sys_tick 006E  
                          _crc_mb_calc 120A                            _crc_mb_init 178E  
                             Beep@ms10 00D1                              _curr_task 003D  
                            _read___ee 16D0                               ?_putbyte 0001  
                             ?_sprintf 00D1            __size_of_ks0108WriteCommand 0026  
                  __size_of_timed_getc 0026                         ___wmul@product 00D5  
                             _LATAbits 000F89                               _LATCbits 000F8B  
                             DelayMs@i 00D2                               _IPR1bits 000F9F  
                             _PIE1bits 000F9D                               _IPR5bits 000F7F  
                             _PIE5bits 000F7D                               i1u173_25 1530  
                             i1u173_26 1532                               i2u330_45 0E8A  
                             i2u330_46 0E90                               i2u330_47 0E9E  
                             _PIR1bits 000F9E                              crc_mb@CRC 0010  
                             i2u358_45 0BC4                               _PIR5bits 000F7E  
                             _RCONbits 000FD0                       __CFG_WDTPS$32768 000000  
             MTouchSetSensor@threshold 01D6                           LO_ISR@lcData 0022  
                    ??_ProcessMessages 00D1                     crc_mb_check@buffer 0009  
                        _ks0108PutChar 0C12                       ??_set_ee_default 000C  
                           _ADCON0bits 000FC2                            __stringdata FFF7  
                           _ADCON2bits 000FC0                      ___wmul@multiplier 00D1  
                        ks0108GotoXY@x 00D6                          ks0108GotoXY@y 00D3  
                      Write_b_eep@badd 0001                        Write_b_eep@bdat 0003  
                     ?_MTouchSetButton 00D1                    __end_of_uart16_init 1736  
                     ?_MTouchSetSensor 01D0                          ks0108SetDot@x 01D5  
                        ks0108SetDot@y 00D7                           LabelCreate@i 01F4  
                         LabelCreate@x 01EF                           LabelCreate@y 01F0  
 MTouchAcquisitionCVD@curChannelNumber 00B5                             ?_read___ee 0006  
                   MTouchAcquisition@i 00C7                    __size_of_write___ee 002C  
                             _Busy_eep 17B4                      _MTouchAcquisition 0ABE  
                     __size_of_DelayMs 002A                               _Messages 0060  
                           _EECON1bits 000FA6                               __Hparam0 0000  
                   ?_MTouchAcquisition 0001                ks0108PutChar@_fontWidth 01DE  
           MTouchSetSensor@chargeDelay 01DA                      ??_ks0108WriteData 00D3  
                         LabelSetTxt@i 01ED                               __Lparam0 0000  
                             _RxTxBuff 0100                     __CFG_BOREN$SBORDIS 000000  
                    __CFG_P2BMX$PORTD2 000000                     MTouchSetSensor@lat 01D2  
        __size_of_MTouchAcquisitionCVD 01BE                    ??_MTouchAcquisition 00BE  
           MTouchAcquisitionCVD@curLat 00B8                         ?_ks0108PutChar 01D7  
                         ?_Write_b_eep 0001                  __size_of_ks0108Enable 002E  
           MTouchAcquisitionCVD@result 00B0             MTouchSetSensor@ioBitNumber 01D4  
                 __size_of_SendMessage 0012                  __size_of_ks0108GotoXY 0060  
                __size_of_ks0108SetDot 0036            MTouchSetSensor@sensorNumber 00D3  
                        ??_tsk_display 00D1                       __size_of_getbyte 000C  
  InitializeSystem@pll_startup_counter 01DB                          crc_mb_check@i 0010  
   __size_of_MTouchUpdateSensorAverage 007A                               __ptext10 0C12  
                             __ptext11 1412                               __ptext20 1718  
                             __ptext12 126A                               __ptext21 093C  
                             __ptext13 14AA                               __ptext30 1608  
                             __ptext22 0F52                               __ptext14 113A  
                             __ptext31 14F2                               __ptext23 1736  
                             __ptext15 11AA                               __ptext40 176A  
                             __ptext32 17B4                               __ptext24 1536  
                             __ptext16 165E                               __ptext41 177C  
                             __ptext33 16D0                               __ptext25 1752  
                             __ptext17 15DA                               __ptext34 16F6  
                             __ptext18 1684                               __ptext43 0ABE  
                             __ptext35 17A8                               __ptext27 16AA  
                             __ptext19 07B0                               __ptext44 0622  
                             __ptext36 12C4                               __ptext28 179C  
                             __ptext45 0E00                               __ptext37 1374  
                             __ptext29 131E                               __ptext46 03F4  
                             __ptext38 178E                               __ptext39 120A  
                        ??_tsk_process 00D1              __end_of_MTouchAcquisition 0BEC  
                     ??_ks0108ClearDot 01D3                       __size_of_putbyte 000C  
                     __size_of_sprintf 0034                          __size_of_Beep 0018  
                        __size_of_main 0098                      ?_InitializeSystem 0001  
                     ??_ks0108ReadData 00D7                          read___ee@byte 0009  
                   ??_InitializeSystem 00D8                           _ks0108Enable 15DA  
                         _ks0108GotoXY 11AA             __end_of_MTouchSensorDecode 0776  
   MTouchAcquisitionCVD@pCurrentSensor 00AA                           _ks0108SetDot 1412  
                         ??_timed_getc 0001                            _uart16_init 1718  
                             _sys_tick 0072                           crc_mb@buffer 0009  
                           DelayMs@cnt 00D1                            _OSCTUNEbits 000F9B  
                           _INTCONbits 000FF2                 MTouchSetButton@pButton 00D6  
          MTouchSetSensor@oversampling 01D8                            ??_read___ee 000A  
                    _BroadcastMessages 0076                    __end_of_tsk_display 17BE  
                             intlevel1 0000                               intlevel2 0000  
                            sprintf@sp 00D4                           crc_mb_calc@i 0007  
                   __end_of_timed_getc 16D0                 MTouchSetSensor@pSensor 00D4  
                        _timeout_error 003F                          ?_crc_mb_check 0009  
                  __end_of_tsk_process 17BC                  ks0108PutChar@pChImage 01DF  
                      ??_ks0108PutChar 01DA                        ks0108ClearDot@x 01D5  
                      ks0108ClearDot@y 00D7                           ??_write___ee 000C  
                          crc_mb@count 000B                  MTouchSetButton@decode 00D2  
                        ??_LabelCreate 00D9                               sprintf@c 00D3  
                             sprintf@f 00D1                           ?_crc_mb_calc 0001  
                        ??_LabelSetTxt 00D9                           ?_crc_mb_init 0001  
                    __CFG_T3CMX$PORTC0 000000     MTouchAcquisition@startSensorNumber 0075  
                 ks0108PutChar@chWidth 01E6             __size_of_MTouchAcquisition 012E  
                       ??_crc_mb_check 000C                      __CFG_FOSC$INTIO67 000000  
                   __end_of_write___ee 1634                        _ProcessMessages 0FDE  
         MTouchAcquisition@pLastSensor 00C3  
